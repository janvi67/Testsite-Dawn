{
  "version": 3,
  "sources": ["../src/cli/commands/cache/clear.ts", "../../cli-kit/src/public/node/cli.ts"],
  "sourcesContent": ["import Command from '@shopify/cli-kit/node/base-command'\nimport {clearCache} from '@shopify/cli-kit/node/cli'\n\nexport default class ClearCache extends Command {\n  static description = 'Clear the CLI cache, used to store some API responses and handle notifications status'\n  static hidden = true\n\n  async run(): Promise<void> {\n    clearCache()\n  }\n}\n", "import {isTruthy} from './context/utilities.js'\nimport {printEventsJson} from '../../private/node/demo-recorder.js'\nimport {cacheClear} from '../../private/node/conf-store.js'\nimport {Flags} from '@oclif/core'\nimport {fileURLToPath} from 'url'\n\n/**\n * IMPORTANT NOTE: Imports in this module are dynamic to ensure that \"setupEnvironmentVariables\" can dynamically\n * set the DEBUG environment variable before the 'debug' package sets up its configuration when modules\n * are loaded statically.\n */\ninterface RunCLIOptions {\n  /** The value of import.meta.url of the CLI executable module */\n  moduleURL: string\n  development: boolean\n}\n\nasync function warnIfOldNodeVersion() {\n  const nodeVersion = process.versions.node\n  const nodeMajorVersion = Number(nodeVersion.split('.')[0])\n\n  const currentSupportedNodeVersion = 18\n  if (nodeMajorVersion < currentSupportedNodeVersion) {\n    const {renderWarning} = await import('./ui.js')\n    renderWarning({\n      headline: 'Upgrade to a supported Node version now.',\n      body: [\n        `Node ${nodeMajorVersion} has reached end-of-life and poses security risks. When you upgrade to a`,\n        {\n          link: {\n            url: 'https://nodejs.dev/en/about/previous-releases',\n            label: 'supported version',\n          },\n        },\n        {char: ','},\n        \"you'll be able to use Shopify CLI without interruption.\",\n      ],\n    })\n  }\n}\n\nfunction setupEnvironmentVariables(options: Pick<RunCLIOptions, 'development'>) {\n  /**\n   * By setting DEBUG=* when --verbose is passed we are increasing the\n   * verbosity of oclif. Oclif uses debug (https://www.npmjs.com/package/debug)\n   * for logging, and it's configured through the DEBUG= environment variable.\n   */\n  if (process.argv.includes('--verbose')) {\n    process.env.DEBUG = process.env.DEBUG ?? '*'\n  }\n  if (options.development) {\n    process.env.SHOPIFY_CLI_ENV = process.env.SHOPIFY_CLI_ENV ?? 'development'\n  }\n}\n\nfunction forceNoColor() {\n  if (\n    process.argv.includes('--no-color') ||\n    isTruthy(process.env.NO_COLOR) ||\n    isTruthy(process.env.SHOPIFY_FLAG_NO_COLOR) ||\n    process.env.TERM === 'dumb'\n  ) {\n    process.env.FORCE_COLOR = '0'\n  }\n}\n\n/**\n * A function that abstracts away setting up the environment and running\n * a CLI\n * @param options - Options.\n */\nexport async function runCLI(options: RunCLIOptions): Promise<void> {\n  setupEnvironmentVariables(options)\n  forceNoColor()\n  await warnIfOldNodeVersion()\n  /**\n   * These imports need to be dynamic because if they are static\n   * they are loaded before we set the DEBUG=* environment variable\n   * and therefore it has no effect.\n   */\n  const {errorHandler} = await import('./error-handler.js')\n  const {isDevelopment} = await import('./context/local.js')\n  const oclif = await import('@oclif/core')\n  const {ShopifyConfig} = await import('./custom-oclif-loader.js')\n\n  if (isDevelopment()) {\n    oclif.default.settings.debug = true\n  }\n\n  try {\n    // Use a custom OCLIF config to customize the behavior of the CLI\n    const config = new ShopifyConfig({root: fileURLToPath(options.moduleURL)})\n    await config.load()\n\n    await oclif.default.run(undefined, config)\n    await oclif.default.flush()\n    printEventsJson()\n    // eslint-disable-next-line no-catch-all/no-catch-all\n  } catch (error) {\n    await errorHandler(error as Error)\n    return oclif.default.Errors.handle(error as Error)\n  }\n}\n\n/**\n * A function for create-x CLIs that automatically runs the \"init\" command.\n */\nexport async function runCreateCLI(options: RunCLIOptions): Promise<void> {\n  setupEnvironmentVariables(options)\n\n  const {findUpAndReadPackageJson} = await import('./node-package-manager.js')\n  const {moduleDirectory} = await import('./path.js')\n\n  const packageJson = await findUpAndReadPackageJson(moduleDirectory(options.moduleURL))\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const packageName = (packageJson.content as any).name as string\n  const name = packageName.replace('@shopify/create-', '')\n  const initIndex = process.argv.findIndex((arg) => arg.includes('init'))\n  if (initIndex === -1) {\n    const initIndex =\n      process.argv.findIndex((arg) => arg.match(new RegExp(`bin(\\\\/|\\\\\\\\)+(create-${name}|dev|run)`))) + 1\n    process.argv.splice(initIndex, 0, 'init')\n  }\n  await runCLI(options)\n}\n\nexport async function useLocalCLIIfDetected(filepath: string): Promise<boolean> {\n  const {environmentVariables} = await import('../../private/node/constants.js')\n  const {joinPath: join} = await import('./path.js')\n  const {exec} = await import('./system.js')\n\n  // Temporary flag while we test out this feature and ensure it won't break anything!\n  if (!isTruthy(process.env[environmentVariables.enableCliRedirect])) return false\n\n  // Setting an env variable in the child process prevents accidental recursion.\n  if (isTruthy(process.env[environmentVariables.skipCliRedirect])) return false\n\n  // If already running via package manager, we can assume it's running correctly already.\n  if (process.env.npm_config_user_agent) return false\n\n  const cliPackage = await localCliPackage()\n  if (!cliPackage) return false\n\n  const correctExecutablePath = join(cliPackage.path, cliPackage.bin.shopify)\n  if (correctExecutablePath === filepath) return false\n  try {\n    await exec(correctExecutablePath, process.argv.slice(2, process.argv.length), {\n      stdio: 'inherit',\n      env: {[environmentVariables.skipCliRedirect]: '1'},\n    })\n    // eslint-disable-next-line no-catch-all/no-catch-all, @typescript-eslint/no-explicit-any\n  } catch (processError: any) {\n    process.exit(processError.exitCode)\n  }\n  return true\n}\n\ninterface CliPackageInfo {\n  path: string\n  bin: {shopify: string}\n}\n\ninterface PackageJSON {\n  dependencies?: {[packageName: string]: CliPackageInfo}\n  devDependencies?: {[packageName: string]: CliPackageInfo}\n  peerDependencies?: {[packageName: string]: CliPackageInfo}\n}\n\nexport async function localCliPackage(): Promise<CliPackageInfo | undefined> {\n  const {captureOutput} = await import('./system.js')\n\n  let npmListOutput = ''\n  let localShopifyCLI: PackageJSON = {}\n  try {\n    npmListOutput = await captureOutput('npm', ['list', '@shopify/cli', '--json', '-l'])\n    localShopifyCLI = JSON.parse(npmListOutput)\n    // eslint-disable-next-line no-catch-all/no-catch-all\n  } catch (err) {\n    return\n  }\n  const dependenciesList = {\n    ...localShopifyCLI.peerDependencies,\n    ...localShopifyCLI.devDependencies,\n    ...localShopifyCLI.dependencies,\n  }\n  return dependenciesList['@shopify/cli']\n}\n\n/**\n * An object that contains the flags that\n * are shared across all the commands.\n */\nexport const globalFlags = {\n  'no-color': Flags.boolean({\n    hidden: false,\n    description: 'Disable color output.',\n    env: 'SHOPIFY_FLAG_NO_COLOR',\n  }),\n  verbose: Flags.boolean({\n    hidden: false,\n    description: 'Increase the verbosity of the output.',\n    env: 'SHOPIFY_FLAG_VERBOSE',\n  }),\n}\n\n/**\n * Clear the CLI cache, used to store some API responses and handle notifications status\n */\nexport function clearCache(): void {\n  cacheClear()\n}\n"],
  "mappings": "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",
  "names": []
}
