{
  "version": 3,
  "sources": ["../src/cli/services/demo.ts"],
  "sourcesContent": ["import {AbortError, BugError} from '@shopify/cli-kit/node/error'\nimport {outputInfo} from '@shopify/cli-kit/node/output'\nimport {sleep} from '@shopify/cli-kit/node/system'\nimport {\n  renderFatalError,\n  renderInfo,\n  renderSuccess,\n  renderTable,\n  renderConcurrent,\n  renderTasks,\n  renderWarning,\n  renderAutocompletePrompt,\n  renderConfirmationPrompt,\n  renderSelectPrompt,\n  renderTextPrompt,\n} from '@shopify/cli-kit/node/ui'\nimport {zod} from '@shopify/cli-kit/node/schema'\nimport {Writable} from 'stream'\n\nfunction oneOrMore<T>(singular: zod.ZodType<T>) {\n  return zod.union([singular, zod.array(singular)])\n}\nconst scalar = zod.union([zod.string(), zod.number(), zod.boolean(), zod.null(), zod.undefined()])\nconst linkSchema = zod.object({label: zod.string(), url: zod.string()})\nconst inlineTokenSchema = zod.union([\n  zod.string(),\n  zod.object({command: zod.string()}),\n  zod.object({link: linkSchema}),\n  zod.object({char: zod.string().length(1)}),\n  zod.object({userInput: zod.string()}),\n  zod.object({subdued: zod.string()}),\n  zod.object({filePath: zod.string()}),\n  zod.object({bold: zod.string()}),\n])\nconst headlineTokenSchema = oneOrMore(\n  zod.union([\n    zod.string(),\n    zod.object({command: zod.string()}),\n    zod.object({char: zod.string().length(1)}),\n    zod.object({userInput: zod.string()}),\n    zod.object({subdued: zod.string()}),\n    zod.object({filePath: zod.string()}),\n  ]),\n)\n// type InlineToken = zod.infer<typeof inlineTokenSchema>\nconst inlineTokenItemSchema = oneOrMore(inlineTokenSchema)\n// type InlineTokenItem = zod.infer<typeof inlineTokenItemSchema>\nconst listSchema = zod.object({\n  list: zod.object({\n    title: zod.string().optional(),\n    items: zod.array(inlineTokenItemSchema),\n    ordered: zod.boolean().optional(),\n  }),\n})\nconst tokenItemSchema = oneOrMore(zod.union([inlineTokenSchema, listSchema]))\n\nconst tableSchema = zod.object({\n  rows: zod.array(zod.object({}).catchall(scalar)),\n  columns: zod.object({}).catchall(\n    zod.object({\n      header: zod.string().optional(),\n      color: zod.string().optional(),\n    }),\n  ),\n})\nconst infoTableSchema = zod.union([\n  zod.object({}).catchall(zod.array(inlineTokenItemSchema)),\n  zod.array(\n    zod.object({\n      color: zod.string().optional(),\n      header: zod.string(),\n      helperText: zod.string().optional(),\n      bullet: zod.string().optional(),\n      items: zod.array(inlineTokenItemSchema),\n    }),\n  ),\n])\n\nconst abstractDemoStepSchema = zod.object({\n  type: zod.string(),\n  properties: zod.object({}),\n  // optional properties for documentation purposes\n  title: zod.string().optional(),\n  description: zod.string().optional(),\n})\n\nconst outputStepSchema = abstractDemoStepSchema.extend({\n  type: zod.literal('output'),\n  properties: zod.object({\n    content: zod.string(),\n  }),\n})\ntype OutputStep = zod.infer<typeof outputStepSchema>\n\nconst renderStepPropertiesSchema = zod.object({\n  headline: headlineTokenSchema.optional(),\n  body: tokenItemSchema.optional(),\n  nextSteps: zod.array(inlineTokenItemSchema).optional(),\n  reference: zod.array(inlineTokenItemSchema).optional(),\n  link: linkSchema.optional(),\n  customSections: zod\n    .array(\n      zod.object({\n        title: zod.string().optional(),\n        body: tokenItemSchema,\n      }),\n    )\n    .optional(),\n  orderedNextSteps: zod.boolean().optional(),\n})\nconst renderInfoStepSchema = abstractDemoStepSchema.extend({\n  type: zod.literal('info'),\n  properties: renderStepPropertiesSchema,\n})\ntype RenderInfoStep = zod.infer<typeof renderInfoStepSchema>\nconst renderSuccessStepSchema = abstractDemoStepSchema.extend({\n  type: zod.literal('success'),\n  properties: renderStepPropertiesSchema,\n})\ntype RenderSuccessStep = zod.infer<typeof renderSuccessStepSchema>\nconst renderWarningStepSchema = abstractDemoStepSchema.extend({\n  type: zod.literal('warning'),\n  properties: renderStepPropertiesSchema,\n})\ntype RenderWarningStep = zod.infer<typeof renderWarningStepSchema>\n\nconst renderFatalErrorStepSchema = abstractDemoStepSchema.extend({\n  type: zod.literal('fatalError'),\n  properties: zod.object({\n    errorType: zod.union([zod.literal('abort'), zod.literal('bug')]),\n    message: zod.string(),\n    tryMessage: zod.string().optional(),\n    nextSteps: zod.array(inlineTokenItemSchema).optional(),\n  }),\n})\ntype RenderFatalErrorStep = zod.infer<typeof renderFatalErrorStepSchema>\n\nconst renderTableStepSchema = abstractDemoStepSchema.extend({\n  type: zod.literal('table'),\n  properties: tableSchema,\n})\ntype RenderTableStep = zod.infer<typeof renderTableStepSchema>\n\nconst renderAutoCompletePromptStepSchema = abstractDemoStepSchema.extend({\n  type: zod.literal('autocompletePrompt'),\n  properties: zod.object({\n    message: zod.string(),\n    choices: zod.array(\n      zod.object({\n        label: zod.string(),\n        value: zod.string(),\n      }),\n    ),\n  }),\n})\ntype RenderAutocompletePromptStep = zod.infer<typeof renderAutoCompletePromptStepSchema>\n\nconst renderConfirmationPromptStepSchema = abstractDemoStepSchema.extend({\n  type: zod.literal('confirmationPrompt'),\n  properties: zod.object({\n    message: headlineTokenSchema,\n    infoTable: infoTableSchema.optional(),\n    defaultValue: zod.boolean().optional(),\n    confirmationMessage: zod.string(),\n    cancellationMessage: zod.string(),\n  }),\n})\ntype RenderConfirmationPromptStep = zod.infer<typeof renderConfirmationPromptStepSchema>\n\nconst renderSelectPromptStepSchema = abstractDemoStepSchema.extend({\n  type: zod.literal('selectPrompt'),\n  properties: zod.object({\n    message: headlineTokenSchema,\n    choices: zod.array(\n      zod.object({\n        label: zod.string(),\n        value: zod.string(),\n        key: zod.string().length(1).optional(),\n        group: zod.string().optional(),\n        disabled: zod.boolean().optional(),\n      }),\n    ),\n    defaultValue: zod.string().optional(),\n    infoTable: infoTableSchema.optional(),\n  }),\n})\ntype RenderSelectPromptStep = zod.infer<typeof renderSelectPromptStepSchema>\n\nconst renderTextPromptStepSchema = abstractDemoStepSchema.extend({\n  type: zod.literal('textPrompt'),\n  properties: zod.object({\n    message: zod.string(),\n    defaultValue: zod.string().optional(),\n    password: zod.boolean().optional(),\n    allowEmpty: zod.boolean().optional(),\n  }),\n})\ntype RenderTextPromptStep = zod.infer<typeof renderTextPromptStepSchema>\n\nconst sleepStepSchema = abstractDemoStepSchema.extend({\n  type: zod.literal('sleep'),\n  properties: zod.object({\n    duration: zod.number(),\n  }),\n})\ntype SleepStep = zod.infer<typeof sleepStepSchema>\n\nconst taskbarStepSchema = abstractDemoStepSchema.extend({\n  type: zod.literal('taskbar'),\n  properties: zod.object({\n    steps: zod.array(\n      zod.object({\n        title: zod.string(),\n        duration: zod.number(),\n      }),\n    ),\n  }),\n})\ntype TaskbarStep = zod.infer<typeof taskbarStepSchema>\n\nconst renderConcurrentPropertiesSchema = zod.object({\n  processes: zod.array(\n    zod.object({\n      prefix: zod.string(),\n      steps: zod.array(\n        zod.object({\n          startMessage: zod.string().optional(),\n          duration: zod.number(),\n          endMessage: zod.string().optional(),\n        }),\n      ),\n    }),\n  ),\n})\ntype RenderConcurrentProperties = zod.infer<typeof renderConcurrentPropertiesSchema>\nconst renderConcurrentStepSchema = abstractDemoStepSchema.extend({\n  type: zod.literal('concurrent'),\n  properties: renderConcurrentPropertiesSchema,\n})\ntype RenderConcurrentStep = zod.infer<typeof renderConcurrentStepSchema>\n\nexport type DemoStep =\n  | OutputStep\n  | RenderInfoStep\n  | RenderSuccessStep\n  | RenderWarningStep\n  | RenderTableStep\n  | RenderFatalErrorStep\n  | RenderAutocompletePromptStep\n  | RenderConfirmationPromptStep\n  | RenderSelectPromptStep\n  | RenderTextPromptStep\n  | SleepStep\n  | TaskbarStep\n  | RenderConcurrentStep\n\nconst demoStepSchema = zod.discriminatedUnion('type', [\n  outputStepSchema,\n  renderInfoStepSchema,\n  renderSuccessStepSchema,\n  renderWarningStepSchema,\n  renderTableStepSchema,\n  renderFatalErrorStepSchema,\n  renderAutoCompletePromptStepSchema,\n  renderConfirmationPromptStepSchema,\n  renderSelectPromptStepSchema,\n  renderTextPromptStepSchema,\n  sleepStepSchema,\n  taskbarStepSchema,\n  renderConcurrentStepSchema,\n])\nexport const demoStepsSchema = zod.object({\n  $schema: zod.string().optional(),\n  command: zod.string().optional(),\n  steps: zod.array(demoStepSchema),\n})\ntype DemoSteps = zod.infer<typeof demoStepsSchema>\n\nexport async function demo(stepsJsonData: DemoSteps) {\n  const {steps, command} = demoStepsSchema.parse(stepsJsonData)\n  const executors = steps.map(executorForStep)\n\n  await simulateTyping(command)\n  for (const executor of executors) {\n    // eslint-disable-next-line no-await-in-loop\n    await executor()\n  }\n}\n\nasync function simulateTyping(text?: string) {\n  if (!text) return\n\n  // eslint-disable-next-line no-console\n  console.clear()\n  process.stdout.write('$ ')\n  const chars = text.split('')\n  while (chars.length > 0) {\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    const char = chars.shift()!\n    process.stdout.write(char)\n    // eslint-disable-next-line no-await-in-loop\n    await sleep(0.1 + Math.random() / 10)\n  }\n  process.stdout.write('\\n')\n  await sleep(1 + Math.random() / 10)\n}\n\nfunction executorForStep(step: DemoStep): () => Promise<void> {\n  switch (step.type) {\n    case 'output':\n      return async () => {\n        outputInfo(step.properties.content)\n      }\n    case 'sleep':\n      return async () => {\n        await sleep(step.properties.duration)\n      }\n    case 'taskbar':\n      return taskbarExecutor(step.properties.steps)\n    case 'concurrent':\n      return concurrentExecutor(step.properties)\n    case 'info':\n      return async () => {\n        renderInfo(step.properties)\n      }\n    case 'success':\n      return async () => {\n        renderSuccess(step.properties)\n      }\n    case 'warning':\n      return async () => {\n        renderWarning(step.properties)\n      }\n    case 'fatalError':\n      return async () => {\n        const {errorType, message, nextSteps, tryMessage} = step.properties\n        if (errorType === 'abort') {\n          renderFatalError(new AbortError(message, tryMessage, nextSteps))\n        } else {\n          renderFatalError(new BugError(message, tryMessage))\n        }\n      }\n    case 'table':\n      return async () => {\n        renderTable(step.properties as Parameters<typeof renderTable>[0])\n      }\n    case 'autocompletePrompt':\n      return async () => {\n        await renderAutocompletePrompt(step.properties)\n      }\n    case 'confirmationPrompt':\n      return async () => {\n        await renderConfirmationPrompt(step.properties as Parameters<typeof renderConfirmationPrompt>[0])\n      }\n    case 'selectPrompt':\n      return async () => {\n        await renderSelectPrompt(step.properties as Parameters<typeof renderSelectPrompt>[0])\n      }\n    case 'textPrompt':\n      return async () => {\n        await renderTextPrompt(step.properties)\n      }\n    default:\n      throw new Error(`Unknown step type: ${(step as DemoStep).type}`)\n  }\n}\n\nfunction taskbarExecutor(steps: {title: string; duration: number}[]) {\n  return async () => {\n    const tasks = steps.map(({title, duration}) => {\n      return {\n        title,\n        task: async () => sleep(duration),\n      }\n    })\n    await renderTasks(tasks)\n  }\n}\n\nfunction concurrentExecutor({processes}: RenderConcurrentProperties) {\n  return async () => {\n    const concurrentProcesses = processes.map(({prefix, steps}) => {\n      return {\n        prefix,\n        action: async (stdout: Writable) => {\n          for (const step of steps) {\n            const {startMessage, duration, endMessage} = step\n            if (startMessage) stdout.write(startMessage)\n            // eslint-disable-next-line no-await-in-loop\n            await sleep(duration)\n            if (endMessage) stdout.write(endMessage)\n          }\n        },\n      }\n    })\n    await renderConcurrent({processes: concurrentProcesses})\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAmBA,SAAS,UAAa,UAA0B;AAC9C,SAAO,EAAI,MAAM,CAAC,UAAU,EAAI,MAAM,QAAQ,CAAC,CAAC;AAClD;AACA,IAAM,SAAS,EAAI,MAAM,CAAC,EAAI,OAAO,GAAG,EAAI,OAAO,GAAG,EAAI,QAAQ,GAAG,EAAI,KAAK,GAAG,EAAI,UAAU,CAAC,CAAC,GAC3F,aAAa,EAAI,OAAO,EAAC,OAAO,EAAI,OAAO,GAAG,KAAK,EAAI,OAAO,EAAC,CAAC,GAChE,oBAAoB,EAAI,MAAM;AAAA,EAClC,EAAI,OAAO;AAAA,EACX,EAAI,OAAO,EAAC,SAAS,EAAI,OAAO,EAAC,CAAC;AAAA,EAClC,EAAI,OAAO,EAAC,MAAM,WAAU,CAAC;AAAA,EAC7B,EAAI,OAAO,EAAC,MAAM,EAAI,OAAO,EAAE,OAAO,CAAC,EAAC,CAAC;AAAA,EACzC,EAAI,OAAO,EAAC,WAAW,EAAI,OAAO,EAAC,CAAC;AAAA,EACpC,EAAI,OAAO,EAAC,SAAS,EAAI,OAAO,EAAC,CAAC;AAAA,EAClC,EAAI,OAAO,EAAC,UAAU,EAAI,OAAO,EAAC,CAAC;AAAA,EACnC,EAAI,OAAO,EAAC,MAAM,EAAI,OAAO,EAAC,CAAC;AACjC,CAAC,GACK,sBAAsB;AAAA,EAC1B,EAAI,MAAM;AAAA,IACR,EAAI,OAAO;AAAA,IACX,EAAI,OAAO,EAAC,SAAS,EAAI,OAAO,EAAC,CAAC;AAAA,IAClC,EAAI,OAAO,EAAC,MAAM,EAAI,OAAO,EAAE,OAAO,CAAC,EAAC,CAAC;AAAA,IACzC,EAAI,OAAO,EAAC,WAAW,EAAI,OAAO,EAAC,CAAC;AAAA,IACpC,EAAI,OAAO,EAAC,SAAS,EAAI,OAAO,EAAC,CAAC;AAAA,IAClC,EAAI,OAAO,EAAC,UAAU,EAAI,OAAO,EAAC,CAAC;AAAA,EACrC,CAAC;AACH,GAEM,wBAAwB,UAAU,iBAAiB,GAEnD,aAAa,EAAI,OAAO;AAAA,EAC5B,MAAM,EAAI,OAAO;AAAA,IACf,OAAO,EAAI,OAAO,EAAE,SAAS;AAAA,IAC7B,OAAO,EAAI,MAAM,qBAAqB;AAAA,IACtC,SAAS,EAAI,QAAQ,EAAE,SAAS;AAAA,EAClC,CAAC;AACH,CAAC,GACK,kBAAkB,UAAU,EAAI,MAAM,CAAC,mBAAmB,UAAU,CAAC,CAAC,GAEtE,cAAc,EAAI,OAAO;AAAA,EAC7B,MAAM,EAAI,MAAM,EAAI,OAAO,CAAC,CAAC,EAAE,SAAS,MAAM,CAAC;AAAA,EAC/C,SAAS,EAAI,OAAO,CAAC,CAAC,EAAE;AAAA,IACtB,EAAI,OAAO;AAAA,MACT,QAAQ,EAAI,OAAO,EAAE,SAAS;AAAA,MAC9B,OAAO,EAAI,OAAO,EAAE,SAAS;AAAA,IAC/B,CAAC;AAAA,EACH;AACF,CAAC,GACK,kBAAkB,EAAI,MAAM;AAAA,EAChC,EAAI,OAAO,CAAC,CAAC,EAAE,SAAS,EAAI,MAAM,qBAAqB,CAAC;AAAA,EACxD,EAAI;AAAA,IACF,EAAI,OAAO;AAAA,MACT,OAAO,EAAI,OAAO,EAAE,SAAS;AAAA,MAC7B,QAAQ,EAAI,OAAO;AAAA,MACnB,YAAY,EAAI,OAAO,EAAE,SAAS;AAAA,MAClC,QAAQ,EAAI,OAAO,EAAE,SAAS;AAAA,MAC9B,OAAO,EAAI,MAAM,qBAAqB;AAAA,IACxC,CAAC;AAAA,EACH;AACF,CAAC,GAEK,yBAAyB,EAAI,OAAO;AAAA,EACxC,MAAM,EAAI,OAAO;AAAA,EACjB,YAAY,EAAI,OAAO,CAAC,CAAC;AAAA;AAAA,EAEzB,OAAO,EAAI,OAAO,EAAE,SAAS;AAAA,EAC7B,aAAa,EAAI,OAAO,EAAE,SAAS;AACrC,CAAC,GAEK,mBAAmB,uBAAuB,OAAO;AAAA,EACrD,MAAM,EAAI,QAAQ,QAAQ;AAAA,EAC1B,YAAY,EAAI,OAAO;AAAA,IACrB,SAAS,EAAI,OAAO;AAAA,EACtB,CAAC;AACH,CAAC,GAGK,6BAA6B,EAAI,OAAO;AAAA,EAC5C,UAAU,oBAAoB,SAAS;AAAA,EACvC,MAAM,gBAAgB,SAAS;AAAA,EAC/B,WAAW,EAAI,MAAM,qBAAqB,EAAE,SAAS;AAAA,EACrD,WAAW,EAAI,MAAM,qBAAqB,EAAE,SAAS;AAAA,EACrD,MAAM,WAAW,SAAS;AAAA,EAC1B,gBAAgB,EACb;AAAA,IACC,EAAI,OAAO;AAAA,MACT,OAAO,EAAI,OAAO,EAAE,SAAS;AAAA,MAC7B,MAAM;AAAA,IACR,CAAC;AAAA,EACH,EACC,SAAS;AAAA,EACZ,kBAAkB,EAAI,QAAQ,EAAE,SAAS;AAC3C,CAAC,GACK,uBAAuB,uBAAuB,OAAO;AAAA,EACzD,MAAM,EAAI,QAAQ,MAAM;AAAA,EACxB,YAAY;AACd,CAAC,GAEK,0BAA0B,uBAAuB,OAAO;AAAA,EAC5D,MAAM,EAAI,QAAQ,SAAS;AAAA,EAC3B,YAAY;AACd,CAAC,GAEK,0BAA0B,uBAAuB,OAAO;AAAA,EAC5D,MAAM,EAAI,QAAQ,SAAS;AAAA,EAC3B,YAAY;AACd,CAAC,GAGK,6BAA6B,uBAAuB,OAAO;AAAA,EAC/D,MAAM,EAAI,QAAQ,YAAY;AAAA,EAC9B,YAAY,EAAI,OAAO;AAAA,IACrB,WAAW,EAAI,MAAM,CAAC,EAAI,QAAQ,OAAO,GAAG,EAAI,QAAQ,KAAK,CAAC,CAAC;AAAA,IAC/D,SAAS,EAAI,OAAO;AAAA,IACpB,YAAY,EAAI,OAAO,EAAE,SAAS;AAAA,IAClC,WAAW,EAAI,MAAM,qBAAqB,EAAE,SAAS;AAAA,EACvD,CAAC;AACH,CAAC,GAGK,wBAAwB,uBAAuB,OAAO;AAAA,EAC1D,MAAM,EAAI,QAAQ,OAAO;AAAA,EACzB,YAAY;AACd,CAAC,GAGK,qCAAqC,uBAAuB,OAAO;AAAA,EACvE,MAAM,EAAI,QAAQ,oBAAoB;AAAA,EACtC,YAAY,EAAI,OAAO;AAAA,IACrB,SAAS,EAAI,OAAO;AAAA,IACpB,SAAS,EAAI;AAAA,MACX,EAAI,OAAO;AAAA,QACT,OAAO,EAAI,OAAO;AAAA,QAClB,OAAO,EAAI,OAAO;AAAA,MACpB,CAAC;AAAA,IACH;AAAA,EACF,CAAC;AACH,CAAC,GAGK,qCAAqC,uBAAuB,OAAO;AAAA,EACvE,MAAM,EAAI,QAAQ,oBAAoB;AAAA,EACtC,YAAY,EAAI,OAAO;AAAA,IACrB,SAAS;AAAA,IACT,WAAW,gBAAgB,SAAS;AAAA,IACpC,cAAc,EAAI,QAAQ,EAAE,SAAS;AAAA,IACrC,qBAAqB,EAAI,OAAO;AAAA,IAChC,qBAAqB,EAAI,OAAO;AAAA,EAClC,CAAC;AACH,CAAC,GAGK,+BAA+B,uBAAuB,OAAO;AAAA,EACjE,MAAM,EAAI,QAAQ,cAAc;AAAA,EAChC,YAAY,EAAI,OAAO;AAAA,IACrB,SAAS;AAAA,IACT,SAAS,EAAI;AAAA,MACX,EAAI,OAAO;AAAA,QACT,OAAO,EAAI,OAAO;AAAA,QAClB,OAAO,EAAI,OAAO;AAAA,QAClB,KAAK,EAAI,OAAO,EAAE,OAAO,CAAC,EAAE,SAAS;AAAA,QACrC,OAAO,EAAI,OAAO,EAAE,SAAS;AAAA,QAC7B,UAAU,EAAI,QAAQ,EAAE,SAAS;AAAA,MACnC,CAAC;AAAA,IACH;AAAA,IACA,cAAc,EAAI,OAAO,EAAE,SAAS;AAAA,IACpC,WAAW,gBAAgB,SAAS;AAAA,EACtC,CAAC;AACH,CAAC,GAGK,6BAA6B,uBAAuB,OAAO;AAAA,EAC/D,MAAM,EAAI,QAAQ,YAAY;AAAA,EAC9B,YAAY,EAAI,OAAO;AAAA,IACrB,SAAS,EAAI,OAAO;AAAA,IACpB,cAAc,EAAI,OAAO,EAAE,SAAS;AAAA,IACpC,UAAU,EAAI,QAAQ,EAAE,SAAS;AAAA,IACjC,YAAY,EAAI,QAAQ,EAAE,SAAS;AAAA,EACrC,CAAC;AACH,CAAC,GAGK,kBAAkB,uBAAuB,OAAO;AAAA,EACpD,MAAM,EAAI,QAAQ,OAAO;AAAA,EACzB,YAAY,EAAI,OAAO;AAAA,IACrB,UAAU,EAAI,OAAO;AAAA,EACvB,CAAC;AACH,CAAC,GAGK,oBAAoB,uBAAuB,OAAO;AAAA,EACtD,MAAM,EAAI,QAAQ,SAAS;AAAA,EAC3B,YAAY,EAAI,OAAO;AAAA,IACrB,OAAO,EAAI;AAAA,MACT,EAAI,OAAO;AAAA,QACT,OAAO,EAAI,OAAO;AAAA,QAClB,UAAU,EAAI,OAAO;AAAA,MACvB,CAAC;AAAA,IACH;AAAA,EACF,CAAC;AACH,CAAC,GAGK,mCAAmC,EAAI,OAAO;AAAA,EAClD,WAAW,EAAI;AAAA,IACb,EAAI,OAAO;AAAA,MACT,QAAQ,EAAI,OAAO;AAAA,MACnB,OAAO,EAAI;AAAA,QACT,EAAI,OAAO;AAAA,UACT,cAAc,EAAI,OAAO,EAAE,SAAS;AAAA,UACpC,UAAU,EAAI,OAAO;AAAA,UACrB,YAAY,EAAI,OAAO,EAAE,SAAS;AAAA,QACpC,CAAC;AAAA,MACH;AAAA,IACF,CAAC;AAAA,EACH;AACF,CAAC,GAEK,6BAA6B,uBAAuB,OAAO;AAAA,EAC/D,MAAM,EAAI,QAAQ,YAAY;AAAA,EAC9B,YAAY;AACd,CAAC,GAkBK,iBAAiB,EAAI,mBAAmB,QAAQ;AAAA,EACpD;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF,CAAC,GACY,kBAAkB,EAAI,OAAO;AAAA,EACxC,SAAS,EAAI,OAAO,EAAE,SAAS;AAAA,EAC/B,SAAS,EAAI,OAAO,EAAE,SAAS;AAAA,EAC/B,OAAO,EAAI,MAAM,cAAc;AACjC,CAAC;AAGD,eAAsB,KAAK,eAA0B;AACnD,MAAM,EAAC,OAAO,QAAO,IAAI,gBAAgB,MAAM,aAAa,GACtD,YAAY,MAAM,IAAI,eAAe;AAE3C,QAAM,eAAe,OAAO;AAC5B,WAAW,YAAY;AAErB,UAAM,SAAS;AAEnB;AAEA,eAAe,eAAe,MAAe;AAC3C,MAAI,CAAC;AAAM;AAGX,UAAQ,MAAM,GACd,QAAQ,OAAO,MAAM,IAAI;AACzB,MAAM,QAAQ,KAAK,MAAM,EAAE;AAC3B,SAAO,MAAM,SAAS,KAAG;AAEvB,QAAM,OAAO,MAAM,MAAM;AACzB,YAAQ,OAAO,MAAM,IAAI,GAEzB,MAAM,MAAM,MAAM,KAAK,OAAO,IAAI,EAAE;AAAA,EACtC;AACA,UAAQ,OAAO,MAAM;AAAA,CAAI,GACzB,MAAM,MAAM,IAAI,KAAK,OAAO,IAAI,EAAE;AACpC;AAEA,SAAS,gBAAgB,MAAqC;AAC5D,UAAQ,KAAK,MAAM;AAAA,IACjB,KAAK;AACH,aAAO,YAAY;AACjB,mBAAW,KAAK,WAAW,OAAO;AAAA,MACpC;AAAA,IACF,KAAK;AACH,aAAO,YAAY;AACjB,cAAM,MAAM,KAAK,WAAW,QAAQ;AAAA,MACtC;AAAA,IACF,KAAK;AACH,aAAO,gBAAgB,KAAK,WAAW,KAAK;AAAA,IAC9C,KAAK;AACH,aAAO,mBAAmB,KAAK,UAAU;AAAA,IAC3C,KAAK;AACH,aAAO,YAAY;AACjB,mBAAW,KAAK,UAAU;AAAA,MAC5B;AAAA,IACF,KAAK;AACH,aAAO,YAAY;AACjB,sBAAc,KAAK,UAAU;AAAA,MAC/B;AAAA,IACF,KAAK;AACH,aAAO,YAAY;AACjB,sBAAc,KAAK,UAAU;AAAA,MAC/B;AAAA,IACF,KAAK;AACH,aAAO,YAAY;AACjB,YAAM,EAAC,WAAW,SAAS,WAAW,WAAU,IAAI,KAAK;AACzD,QAAI,cAAc,UAChB,iBAAiB,IAAI,WAAW,SAAS,YAAY,SAAS,CAAC,IAE/D,iBAAiB,IAAI,SAAS,SAAS,UAAU,CAAC;AAAA,MAEtD;AAAA,IACF,KAAK;AACH,aAAO,YAAY;AACjB,oBAAY,KAAK,UAA+C;AAAA,MAClE;AAAA,IACF,KAAK;AACH,aAAO,YAAY;AACjB,cAAM,yBAAyB,KAAK,UAAU;AAAA,MAChD;AAAA,IACF,KAAK;AACH,aAAO,YAAY;AACjB,cAAM,yBAAyB,KAAK,UAA4D;AAAA,MAClG;AAAA,IACF,KAAK;AACH,aAAO,YAAY;AACjB,cAAM,mBAAmB,KAAK,UAAsD;AAAA,MACtF;AAAA,IACF,KAAK;AACH,aAAO,YAAY;AACjB,cAAM,iBAAiB,KAAK,UAAU;AAAA,MACxC;AAAA,IACF;AACE,YAAM,IAAI,MAAM,sBAAuB,KAAkB,IAAI,EAAE;AAAA,EACnE;AACF;AAEA,SAAS,gBAAgB,OAA4C;AACnE,SAAO,YAAY;AACjB,QAAM,QAAQ,MAAM,IAAI,CAAC,EAAC,OAAO,SAAQ,OAChC;AAAA,MACL;AAAA,MACA,MAAM,YAAY,MAAM,QAAQ;AAAA,IAClC,EACD;AACD,UAAM,YAAY,KAAK;AAAA,EACzB;AACF;AAEA,SAAS,mBAAmB,EAAC,UAAS,GAA+B;AACnE,SAAO,YAAY;AACjB,QAAM,sBAAsB,UAAU,IAAI,CAAC,EAAC,QAAQ,MAAK,OAChD;AAAA,MACL;AAAA,MACA,QAAQ,OAAO,WAAqB;AAClC,iBAAW,QAAQ,OAAO;AACxB,cAAM,EAAC,cAAc,UAAU,WAAU,IAAI;AAC7C,UAAI,gBAAc,OAAO,MAAM,YAAY,GAE3C,MAAM,MAAM,QAAQ,GAChB,cAAY,OAAO,MAAM,UAAU;AAAA,QACzC;AAAA,MACF;AAAA,IACF,EACD;AACD,UAAM,iBAAiB,EAAC,WAAW,oBAAmB,CAAC;AAAA,EACzD;AACF;",
  "names": []
}
