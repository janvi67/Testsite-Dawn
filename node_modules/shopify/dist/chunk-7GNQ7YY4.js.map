{
  "version": 3,
  "sources": ["../src/cli/commands/demo/generate-file.ts"],
  "sourcesContent": ["/* eslint-disable @typescript-eslint/no-non-null-assertion */\nimport {demoStepsSchema, DemoStep} from '../../services/demo.js'\nimport zodToJsonSchema from 'zod-to-json-schema'\nimport {Flags} from '@oclif/core'\nimport Command from '@shopify/cli-kit/node/base-command'\nimport {AbortError} from '@shopify/cli-kit/node/error'\nimport {mkdir, fileExists, readFile, writeFile} from '@shopify/cli-kit/node/fs'\nimport {outputContent, outputSuccess, outputToken} from '@shopify/cli-kit/node/output'\nimport {resolvePath, joinPath, cwd} from '@shopify/cli-kit/node/path'\nimport {renderAutocompletePrompt} from '@shopify/cli-kit/node/ui'\nimport {createRequire} from 'module'\n\nconst schemaFilename = 'demo-schema.json'\n\nexport default class GenerateFile extends Command {\n  static description = 'Create a command design file'\n  static summary = 'Creates a JSON file alongside a JSON schema that will validate it'\n  static hidden = true\n\n  static flags = {\n    path: Flags.string({\n      hidden: false,\n      description: 'The directory for generating the demo file.',\n      env: 'SHOPIFY_FLAG_PATH',\n      parse: async (input) => resolvePath(input),\n      default: async () => cwd(),\n    }),\n    file: Flags.string({\n      hidden: false,\n      description: 'The name of the demo file.',\n      env: 'SHOPIFY_FLAG_FILENAME',\n      required: true,\n      validate: (input: string) => {\n        if (input === schemaFilename) {\n          return `The demo file can't be named ${schemaFilename}, as this is used for the schema file.`\n        }\n        return true\n      },\n    }),\n  }\n\n  async run(): Promise<void> {\n    const {flags} = await this.parse(GenerateFile)\n    await mkdir(flags.path)\n    const demoFilePath = joinPath(flags.path, flags.file)\n    if (await fileExists(demoFilePath)) {\n      throw new AbortError(`The file ${demoFilePath} already exists.`)\n    }\n    const demoSchemaPath = joinPath(flags.path, schemaFilename)\n    const jsonSchema = zodToJsonSchema.default(demoStepsSchema, 'demo-steps')\n    await Promise.all([\n      writeFile(demoSchemaPath, JSON.stringify(jsonSchema, null, 2)),\n      writeFile(\n        demoFilePath,\n        JSON.stringify(\n          {\n            $schema: `./${schemaFilename}`,\n            steps: await selectSteps(),\n          },\n          null,\n          2,\n        ),\n      ),\n    ])\n    outputSuccess(outputContent`Created ${outputToken.path(demoFilePath)} and ${outputToken.path(demoSchemaPath)}`)\n  }\n}\n\nasync function selectSteps(): Promise<DemoStep[]> {\n  const require = createRequire(import.meta.url)\n  const catalogFile = require.resolve('@shopify/cli/assets/demo-catalog.json')\n  const {steps} = JSON.parse(await readFile(catalogFile)) as {steps: DemoStep[]}\n  const selectedSteps: DemoStep[] = []\n  while (true) {\n    // eslint-disable-next-line no-await-in-loop\n    const stepSelection = await renderAutocompletePrompt({\n      message: 'Add a step to the demo file',\n      choices: [\n        {\n          label: \"I'm done\",\n          value: 'done',\n        },\n        ...steps.map(({title, type}) => {\n          return {\n            label: title!,\n            value: title!,\n            group: type,\n          }\n        }),\n      ],\n    })\n    if (stepSelection === 'done') break\n    selectedSteps.push(steps.find(({title}) => title === stepSelection)!)\n  }\n  return selectedSteps\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAEA,gCAA4B,0CAC5B,cAAoB;AAOpB,SAAQ,qBAAoB;AAE5B,IAAM,iBAAiB,oBAEF,eAArB,MAAqB,sBAAqB,qBAAQ;AAAA,EAChD;AAAA,SAAO,cAAc;AAAA;AAAA,EACrB;AAAA,SAAO,UAAU;AAAA;AAAA,EACjB;AAAA,SAAO,SAAS;AAAA;AAAA,EAEhB;AAAA,SAAO,QAAQ;AAAA,MACb,MAAM,kBAAM,OAAO;AAAA,QACjB,QAAQ;AAAA,QACR,aAAa;AAAA,QACb,KAAK;AAAA,QACL,OAAO,OAAO,UAAU,YAAY,KAAK;AAAA,QACzC,SAAS,YAAY,IAAI;AAAA,MAC3B,CAAC;AAAA,MACD,MAAM,kBAAM,OAAO;AAAA,QACjB,QAAQ;AAAA,QACR,aAAa;AAAA,QACb,KAAK;AAAA,QACL,UAAU;AAAA,QACV,UAAU,CAAC,UACL,UAAU,iBACL,gCAAgC,cAAc,2CAEhD;AAAA,MAEX,CAAC;AAAA,IACH;AAAA;AAAA,EAEA,MAAM,MAAqB;AACzB,QAAM,EAAC,MAAK,IAAI,MAAM,KAAK,MAAM,aAAY;AAC7C,UAAM,MAAM,MAAM,IAAI;AACtB,QAAM,eAAe,SAAS,MAAM,MAAM,MAAM,IAAI;AACpD,QAAI,MAAM,WAAW,YAAY;AAC/B,YAAM,IAAI,WAAW,YAAY,YAAY,kBAAkB;AAEjE,QAAM,iBAAiB,SAAS,MAAM,MAAM,cAAc,GACpD,aAAa,0BAAAA,QAAgB,QAAQ,iBAAiB,YAAY;AACxE,UAAM,QAAQ,IAAI;AAAA,MAChB,UAAU,gBAAgB,KAAK,UAAU,YAAY,MAAM,CAAC,CAAC;AAAA,MAC7D;AAAA,QACE;AAAA,QACA,KAAK;AAAA,UACH;AAAA,YACE,SAAS,KAAK,cAAc;AAAA,YAC5B,OAAO,MAAM,YAAY;AAAA,UAC3B;AAAA,UACA;AAAA,UACA;AAAA,QACF;AAAA,MACF;AAAA,IACF,CAAC,GACD,cAAc,wBAAwB,YAAY,KAAK,YAAY,CAAC,QAAQ,YAAY,KAAK,cAAc,CAAC,EAAE;AAAA,EAChH;AACF;AAEA,eAAe,cAAmC;AAEhD,MAAM,cADU,cAAc,YAAY,GAAG,EACjB,QAAQ,uCAAuC,GACrE,EAAC,MAAK,IAAI,KAAK,MAAM,MAAM,SAAS,WAAW,CAAC,GAChD,gBAA4B,CAAC;AACnC,aAAa;AAEX,QAAM,gBAAgB,MAAM,yBAAyB;AAAA,MACnD,SAAS;AAAA,MACT,SAAS;AAAA,QACP;AAAA,UACE,OAAO;AAAA,UACP,OAAO;AAAA,QACT;AAAA,QACA,GAAG,MAAM,IAAI,CAAC,EAAC,OAAO,KAAI,OACjB;AAAA,UACL,OAAO;AAAA,UACP,OAAO;AAAA,UACP,OAAO;AAAA,QACT,EACD;AAAA,MACH;AAAA,IACF,CAAC;AACD,QAAI,kBAAkB;AAAQ;AAC9B,kBAAc,KAAK,MAAM,KAAK,CAAC,EAAC,MAAK,MAAM,UAAU,aAAa,CAAE;AAAA,EACtE;AACA,SAAO;AACT;",
  "names": ["zodToJsonSchema"]
}
