{
  "version": 3,
  "sources": ["../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.17.1_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/sdk-metrics/src/export/AggregationTemporality.ts", "../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.17.1_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/sdk-metrics/src/export/MetricData.ts", "../../../node_modules/.pnpm/@opentelemetry+api@1.6.0/node_modules/@opentelemetry/api/src/platform/node/globalThis.ts", "../../../node_modules/.pnpm/@opentelemetry+api@1.6.0/node_modules/@opentelemetry/api/src/platform/node/index.ts", "../../../node_modules/.pnpm/@opentelemetry+api@1.6.0/node_modules/@opentelemetry/api/src/platform/index.ts", "../../../node_modules/.pnpm/@opentelemetry+api@1.6.0/node_modules/@opentelemetry/api/src/version.ts", "../../../node_modules/.pnpm/@opentelemetry+api@1.6.0/node_modules/@opentelemetry/api/src/internal/semver.ts", "../../../node_modules/.pnpm/@opentelemetry+api@1.6.0/node_modules/@opentelemetry/api/src/internal/global-utils.ts", "../../../node_modules/.pnpm/@opentelemetry+api@1.6.0/node_modules/@opentelemetry/api/src/diag/ComponentLogger.ts", "../../../node_modules/.pnpm/@opentelemetry+api@1.6.0/node_modules/@opentelemetry/api/src/diag/types.ts", "../../../node_modules/.pnpm/@opentelemetry+api@1.6.0/node_modules/@opentelemetry/api/src/diag/internal/logLevelLogger.ts", "../../../node_modules/.pnpm/@opentelemetry+api@1.6.0/node_modules/@opentelemetry/api/src/api/diag.ts", "../../../node_modules/.pnpm/@opentelemetry+api@1.6.0/node_modules/@opentelemetry/api/src/baggage/internal/baggage-impl.ts", "../../../node_modules/.pnpm/@opentelemetry+api@1.6.0/node_modules/@opentelemetry/api/src/baggage/internal/symbol.ts", "../../../node_modules/.pnpm/@opentelemetry+api@1.6.0/node_modules/@opentelemetry/api/src/baggage/utils.ts", "../../../node_modules/.pnpm/@opentelemetry+api@1.6.0/node_modules/@opentelemetry/api/src/context/context.ts", "../../../node_modules/.pnpm/@opentelemetry+api@1.6.0/node_modules/@opentelemetry/api/src/diag/consoleLogger.ts", "../../../node_modules/.pnpm/@opentelemetry+api@1.6.0/node_modules/@opentelemetry/api/src/metrics/NoopMeter.ts", "../../../node_modules/.pnpm/@opentelemetry+api@1.6.0/node_modules/@opentelemetry/api/src/metrics/Metric.ts", "../../../node_modules/.pnpm/@opentelemetry+api@1.6.0/node_modules/@opentelemetry/api/src/propagation/TextMapPropagator.ts", "../../../node_modules/.pnpm/@opentelemetry+api@1.6.0/node_modules/@opentelemetry/api/src/context/NoopContextManager.ts", "../../../node_modules/.pnpm/@opentelemetry+api@1.6.0/node_modules/@opentelemetry/api/src/api/context.ts", "../../../node_modules/.pnpm/@opentelemetry+api@1.6.0/node_modules/@opentelemetry/api/src/trace/trace_flags.ts", "../../../node_modules/.pnpm/@opentelemetry+api@1.6.0/node_modules/@opentelemetry/api/src/trace/invalid-span-constants.ts", "../../../node_modules/.pnpm/@opentelemetry+api@1.6.0/node_modules/@opentelemetry/api/src/trace/NonRecordingSpan.ts", "../../../node_modules/.pnpm/@opentelemetry+api@1.6.0/node_modules/@opentelemetry/api/src/trace/context-utils.ts", "../../../node_modules/.pnpm/@opentelemetry+api@1.6.0/node_modules/@opentelemetry/api/src/trace/spancontext-utils.ts", "../../../node_modules/.pnpm/@opentelemetry+api@1.6.0/node_modules/@opentelemetry/api/src/trace/NoopTracer.ts", "../../../node_modules/.pnpm/@opentelemetry+api@1.6.0/node_modules/@opentelemetry/api/src/trace/ProxyTracer.ts", "../../../node_modules/.pnpm/@opentelemetry+api@1.6.0/node_modules/@opentelemetry/api/src/trace/NoopTracerProvider.ts", "../../../node_modules/.pnpm/@opentelemetry+api@1.6.0/node_modules/@opentelemetry/api/src/trace/ProxyTracerProvider.ts", "../../../node_modules/.pnpm/@opentelemetry+api@1.6.0/node_modules/@opentelemetry/api/src/trace/SamplingResult.ts", "../../../node_modules/.pnpm/@opentelemetry+api@1.6.0/node_modules/@opentelemetry/api/src/trace/span_kind.ts", "../../../node_modules/.pnpm/@opentelemetry+api@1.6.0/node_modules/@opentelemetry/api/src/trace/status.ts", "../../../node_modules/.pnpm/@opentelemetry+api@1.6.0/node_modules/@opentelemetry/api/src/trace/internal/tracestate-validators.ts", "../../../node_modules/.pnpm/@opentelemetry+api@1.6.0/node_modules/@opentelemetry/api/src/trace/internal/tracestate-impl.ts", "../../../node_modules/.pnpm/@opentelemetry+api@1.6.0/node_modules/@opentelemetry/api/src/trace/internal/utils.ts", "../../../node_modules/.pnpm/@opentelemetry+api@1.6.0/node_modules/@opentelemetry/api/src/context-api.ts", "../../../node_modules/.pnpm/@opentelemetry+api@1.6.0/node_modules/@opentelemetry/api/src/diag-api.ts", "../../../node_modules/.pnpm/@opentelemetry+api@1.6.0/node_modules/@opentelemetry/api/src/metrics/NoopMeterProvider.ts", "../../../node_modules/.pnpm/@opentelemetry+api@1.6.0/node_modules/@opentelemetry/api/src/api/metrics.ts", "../../../node_modules/.pnpm/@opentelemetry+api@1.6.0/node_modules/@opentelemetry/api/src/metrics-api.ts", "../../../node_modules/.pnpm/@opentelemetry+api@1.6.0/node_modules/@opentelemetry/api/src/propagation/NoopTextMapPropagator.ts", "../../../node_modules/.pnpm/@opentelemetry+api@1.6.0/node_modules/@opentelemetry/api/src/baggage/context-helpers.ts", "../../../node_modules/.pnpm/@opentelemetry+api@1.6.0/node_modules/@opentelemetry/api/src/api/propagation.ts", "../../../node_modules/.pnpm/@opentelemetry+api@1.6.0/node_modules/@opentelemetry/api/src/propagation-api.ts", "../../../node_modules/.pnpm/@opentelemetry+api@1.6.0/node_modules/@opentelemetry/api/src/api/trace.ts", "../../../node_modules/.pnpm/@opentelemetry+api@1.6.0/node_modules/@opentelemetry/api/src/trace-api.ts", "../../../node_modules/.pnpm/@opentelemetry+api@1.6.0/node_modules/@opentelemetry/api/src/index.ts", "../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.17.1_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/sdk-metrics/src/utils.ts", "../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.17.1_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/sdk-metrics/src/aggregator/types.ts", "../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.17.1_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/sdk-metrics/src/aggregator/Drop.ts", "../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.17.1_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/sdk-metrics/src/InstrumentDescriptor.ts", "../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.17.1_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/sdk-metrics/src/aggregator/Histogram.ts", "../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.17.1_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/sdk-metrics/src/aggregator/exponential-histogram/Buckets.ts", "../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.17.1_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/sdk-metrics/src/aggregator/exponential-histogram/mapping/ieee754.ts", "../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.17.1_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/sdk-metrics/src/aggregator/exponential-histogram/util.ts", "../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.17.1_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/sdk-metrics/src/aggregator/exponential-histogram/mapping/types.ts", "../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.17.1_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/sdk-metrics/src/aggregator/exponential-histogram/mapping/ExponentMapping.ts", "../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.17.1_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/sdk-metrics/src/aggregator/exponential-histogram/mapping/LogarithmMapping.ts", "../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.17.1_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/sdk-metrics/src/aggregator/exponential-histogram/mapping/getMapping.ts", "../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.17.1_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/sdk-metrics/src/aggregator/ExponentialHistogram.ts", "../../../node_modules/.pnpm/@opentelemetry+core@1.17.1_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/core/src/trace/suppress-tracing.ts", "../../../node_modules/.pnpm/@opentelemetry+core@1.17.1_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/core/src/baggage/constants.ts", "../../../node_modules/.pnpm/@opentelemetry+core@1.17.1_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/core/src/baggage/utils.ts", "../../../node_modules/.pnpm/@opentelemetry+core@1.17.1_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/core/src/baggage/propagation/W3CBaggagePropagator.ts", "../../../node_modules/.pnpm/@opentelemetry+core@1.17.1_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/core/src/common/anchored-clock.ts", "../../../node_modules/.pnpm/@opentelemetry+core@1.17.1_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/core/src/common/attributes.ts", "../../../node_modules/.pnpm/@opentelemetry+core@1.17.1_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/core/src/common/logging-error-handler.ts", "../../../node_modules/.pnpm/@opentelemetry+core@1.17.1_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/core/src/common/global-error-handler.ts", "../../../node_modules/.pnpm/@opentelemetry+core@1.17.1_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/core/src/utils/sampling.ts", "../../../node_modules/.pnpm/@opentelemetry+core@1.17.1_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/core/src/platform/browser/globalThis.ts", "../../../node_modules/.pnpm/@opentelemetry+core@1.17.1_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/core/src/utils/environment.ts", "../../../node_modules/.pnpm/@opentelemetry+core@1.17.1_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/core/src/platform/node/environment.ts", "../../../node_modules/.pnpm/@opentelemetry+core@1.17.1_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/core/src/platform/node/globalThis.ts", "../../../node_modules/.pnpm/@opentelemetry+core@1.17.1_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/core/src/platform/node/hex-to-base64.ts", "../../../node_modules/.pnpm/@opentelemetry+core@1.17.1_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/core/src/platform/node/RandomIdGenerator.ts", "../../../node_modules/.pnpm/@opentelemetry+core@1.17.1_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/core/src/platform/node/performance.ts", "../../../node_modules/.pnpm/@opentelemetry+core@1.17.1_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/core/src/version.ts", "../../../node_modules/.pnpm/@opentelemetry+semantic-conventions@1.17.1/node_modules/@opentelemetry/semantic-conventions/src/trace/SemanticAttributes.ts", "../../../node_modules/.pnpm/@opentelemetry+semantic-conventions@1.17.1/node_modules/@opentelemetry/semantic-conventions/src/trace/index.ts", "../../../node_modules/.pnpm/@opentelemetry+semantic-conventions@1.17.1/node_modules/@opentelemetry/semantic-conventions/src/resource/SemanticResourceAttributes.ts", "../../../node_modules/.pnpm/@opentelemetry+semantic-conventions@1.17.1/node_modules/@opentelemetry/semantic-conventions/src/resource/index.ts", "../../../node_modules/.pnpm/@opentelemetry+semantic-conventions@1.17.1/node_modules/@opentelemetry/semantic-conventions/src/index.ts", "../../../node_modules/.pnpm/@opentelemetry+core@1.17.1_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/core/src/platform/node/sdk-info.ts", "../../../node_modules/.pnpm/@opentelemetry+core@1.17.1_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/core/src/platform/node/timer-util.ts", "../../../node_modules/.pnpm/@opentelemetry+core@1.17.1_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/core/src/platform/node/index.ts", "../../../node_modules/.pnpm/@opentelemetry+core@1.17.1_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/core/src/platform/index.ts", "../../../node_modules/.pnpm/@opentelemetry+core@1.17.1_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/core/src/common/time.ts", "../../../node_modules/.pnpm/@opentelemetry+core@1.17.1_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/core/src/ExportResult.ts", "../../../node_modules/.pnpm/@opentelemetry+core@1.17.1_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/core/src/propagation/composite.ts", "../../../node_modules/.pnpm/@opentelemetry+core@1.17.1_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/core/src/internal/validators.ts", "../../../node_modules/.pnpm/@opentelemetry+core@1.17.1_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/core/src/trace/TraceState.ts", "../../../node_modules/.pnpm/@opentelemetry+core@1.17.1_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/core/src/trace/W3CTraceContextPropagator.ts", "../../../node_modules/.pnpm/@opentelemetry+core@1.17.1_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/core/src/trace/rpc-metadata.ts", "../../../node_modules/.pnpm/@opentelemetry+core@1.17.1_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/core/src/trace/sampler/AlwaysOffSampler.ts", "../../../node_modules/.pnpm/@opentelemetry+core@1.17.1_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/core/src/trace/sampler/AlwaysOnSampler.ts", "../../../node_modules/.pnpm/@opentelemetry+core@1.17.1_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/core/src/trace/sampler/ParentBasedSampler.ts", "../../../node_modules/.pnpm/@opentelemetry+core@1.17.1_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/core/src/trace/sampler/TraceIdRatioBasedSampler.ts", "../../../node_modules/.pnpm/@opentelemetry+core@1.17.1_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/core/src/utils/lodash.merge.ts", "../../../node_modules/.pnpm/@opentelemetry+core@1.17.1_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/core/src/utils/merge.ts", "../../../node_modules/.pnpm/@opentelemetry+core@1.17.1_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/core/src/utils/timeout.ts", "../../../node_modules/.pnpm/@opentelemetry+core@1.17.1_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/core/src/utils/url.ts", "../../../node_modules/.pnpm/@opentelemetry+core@1.17.1_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/core/src/utils/wrap.ts", "../../../node_modules/.pnpm/@opentelemetry+core@1.17.1_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/core/src/utils/promise.ts", "../../../node_modules/.pnpm/@opentelemetry+core@1.17.1_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/core/src/utils/callback.ts", "../../../node_modules/.pnpm/@opentelemetry+core@1.17.1_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/core/src/internal/exporter.ts", "../../../node_modules/.pnpm/@opentelemetry+core@1.17.1_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/core/src/index.ts", "../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.17.1_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/sdk-metrics/src/aggregator/LastValue.ts", "../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.17.1_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/sdk-metrics/src/aggregator/Sum.ts", "../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.17.1_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/sdk-metrics/src/aggregator/index.ts", "../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.17.1_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/sdk-metrics/src/view/Aggregation.ts", "../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.17.1_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/sdk-metrics/src/export/AggregationSelector.ts", "../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.17.1_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/sdk-metrics/src/export/MetricReader.ts", "../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.17.1_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/sdk-metrics/src/export/PeriodicExportingMetricReader.ts", "../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.17.1_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/sdk-metrics/src/export/InMemoryMetricExporter.ts", "../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.17.1_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/sdk-metrics/src/export/ConsoleMetricExporter.ts", "../../../node_modules/.pnpm/@opentelemetry+resources@1.17.1_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/resources/src/platform/node/default-service-name.ts", "../../../node_modules/.pnpm/@opentelemetry+resources@1.17.1_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/resources/src/platform/node/utils.ts", "../../../node_modules/.pnpm/@opentelemetry+resources@1.17.1_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/resources/src/platform/node/machine-id/execAsync.ts", "../../../node_modules/.pnpm/@opentelemetry+resources@1.17.1_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/resources/src/platform/node/machine-id/getMachineId-darwin.ts", "../../../node_modules/.pnpm/@opentelemetry+resources@1.17.1_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/resources/src/platform/node/machine-id/getMachineId-linux.ts", "../../../node_modules/.pnpm/@opentelemetry+resources@1.17.1_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/resources/src/platform/node/machine-id/getMachineId-bsd.ts", "../../../node_modules/.pnpm/@opentelemetry+resources@1.17.1_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/resources/src/platform/node/machine-id/getMachineId-win.ts", "../../../node_modules/.pnpm/@opentelemetry+resources@1.17.1_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/resources/src/platform/node/machine-id/getMachineId-unsupported.ts", "../../../node_modules/.pnpm/@opentelemetry+resources@1.17.1_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/resources/src/platform/node/machine-id/getMachineId.ts", "../../../node_modules/.pnpm/@opentelemetry+resources@1.17.1_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/resources/src/platform/node/HostDetectorSync.ts", "../../../node_modules/.pnpm/@opentelemetry+resources@1.17.1_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/resources/src/platform/node/HostDetector.ts", "../../../node_modules/.pnpm/@opentelemetry+resources@1.17.1_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/resources/src/platform/node/OSDetectorSync.ts", "../../../node_modules/.pnpm/@opentelemetry+resources@1.17.1_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/resources/src/platform/node/OSDetector.ts", "../../../node_modules/.pnpm/@opentelemetry+resources@1.17.1_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/resources/src/platform/node/ProcessDetectorSync.ts", "../../../node_modules/.pnpm/@opentelemetry+resources@1.17.1_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/resources/src/platform/node/ProcessDetector.ts", "../../../node_modules/.pnpm/@opentelemetry+resources@1.17.1_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/resources/src/platform/node/index.ts", "../../../node_modules/.pnpm/@opentelemetry+resources@1.17.1_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/resources/src/platform/index.ts", "../../../node_modules/.pnpm/@opentelemetry+resources@1.17.1_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/resources/src/Resource.ts", "../../../node_modules/.pnpm/@opentelemetry+resources@1.17.1_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/resources/src/detectors/BrowserDetector.ts", "../../../node_modules/.pnpm/@opentelemetry+resources@1.17.1_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/resources/src/detectors/EnvDetectorSync.ts", "../../../node_modules/.pnpm/@opentelemetry+resources@1.17.1_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/resources/src/detectors/EnvDetector.ts", "../../../node_modules/.pnpm/@opentelemetry+resources@1.17.1_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/resources/src/detectors/BrowserDetectorSync.ts", "../../../node_modules/.pnpm/@opentelemetry+resources@1.17.1_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/resources/src/detectors/index.ts", "../../../node_modules/.pnpm/@opentelemetry+resources@1.17.1_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/resources/src/utils.ts", "../../../node_modules/.pnpm/@opentelemetry+resources@1.17.1_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/resources/src/detect-resources.ts", "../../../node_modules/.pnpm/@opentelemetry+resources@1.17.1_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/resources/src/index.ts", "../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.17.1_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/sdk-metrics/src/view/ViewRegistry.ts", "../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.17.1_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/sdk-metrics/src/Instruments.ts", "../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.17.1_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/sdk-metrics/src/Meter.ts", "../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.17.1_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/sdk-metrics/src/state/MetricStorage.ts", "../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.17.1_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/sdk-metrics/src/state/HashMap.ts", "../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.17.1_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/sdk-metrics/src/state/DeltaMetricProcessor.ts", "../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.17.1_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/sdk-metrics/src/state/TemporalMetricProcessor.ts", "../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.17.1_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/sdk-metrics/src/state/AsyncMetricStorage.ts", "../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.17.1_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/sdk-metrics/src/view/RegistrationConflicts.ts", "../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.17.1_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/sdk-metrics/src/state/MetricStorageRegistry.ts", "../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.17.1_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/sdk-metrics/src/state/MultiWritableMetricStorage.ts", "../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.17.1_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/sdk-metrics/src/ObservableResult.ts", "../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.17.1_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/sdk-metrics/src/state/ObservableRegistry.ts", "../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.17.1_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/sdk-metrics/src/state/SyncMetricStorage.ts", "../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.17.1_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/sdk-metrics/src/view/AttributesProcessor.ts", "../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.17.1_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/sdk-metrics/src/state/MeterSharedState.ts", "../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.17.1_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/sdk-metrics/src/state/MeterProviderSharedState.ts", "../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.17.1_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/sdk-metrics/src/state/MetricCollector.ts", "../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.17.1_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/sdk-metrics/src/MeterProvider.ts", "../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.17.1_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/sdk-metrics/src/view/Predicate.ts", "../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.17.1_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/sdk-metrics/src/view/InstrumentSelector.ts", "../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.17.1_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/sdk-metrics/src/view/MeterSelector.ts", "../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.17.1_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/sdk-metrics/src/view/View.ts", "../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.17.1_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/sdk-metrics/src/index.ts", "../../../node_modules/.pnpm/@opentelemetry+core@1.17.0_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/core/src/trace/suppress-tracing.ts", "../../../node_modules/.pnpm/@opentelemetry+core@1.17.0_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/core/src/baggage/constants.ts", "../../../node_modules/.pnpm/@opentelemetry+core@1.17.0_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/core/src/baggage/utils.ts", "../../../node_modules/.pnpm/@opentelemetry+core@1.17.0_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/core/src/baggage/propagation/W3CBaggagePropagator.ts", "../../../node_modules/.pnpm/@opentelemetry+core@1.17.0_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/core/src/common/anchored-clock.ts", "../../../node_modules/.pnpm/@opentelemetry+core@1.17.0_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/core/src/common/attributes.ts", "../../../node_modules/.pnpm/@opentelemetry+core@1.17.0_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/core/src/common/logging-error-handler.ts", "../../../node_modules/.pnpm/@opentelemetry+core@1.17.0_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/core/src/common/global-error-handler.ts", "../../../node_modules/.pnpm/@opentelemetry+core@1.17.0_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/core/src/utils/sampling.ts", "../../../node_modules/.pnpm/@opentelemetry+core@1.17.0_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/core/src/platform/browser/globalThis.ts", "../../../node_modules/.pnpm/@opentelemetry+core@1.17.0_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/core/src/utils/environment.ts", "../../../node_modules/.pnpm/@opentelemetry+core@1.17.0_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/core/src/platform/node/environment.ts", "../../../node_modules/.pnpm/@opentelemetry+core@1.17.0_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/core/src/platform/node/globalThis.ts", "../../../node_modules/.pnpm/@opentelemetry+core@1.17.0_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/core/src/platform/node/hex-to-base64.ts", "../../../node_modules/.pnpm/@opentelemetry+core@1.17.0_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/core/src/platform/node/RandomIdGenerator.ts", "../../../node_modules/.pnpm/@opentelemetry+core@1.17.0_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/core/src/platform/node/performance.ts", "../../../node_modules/.pnpm/@opentelemetry+core@1.17.0_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/core/src/version.ts", "../../../node_modules/.pnpm/@opentelemetry+semantic-conventions@1.17.0/node_modules/@opentelemetry/semantic-conventions/src/trace/SemanticAttributes.ts", "../../../node_modules/.pnpm/@opentelemetry+semantic-conventions@1.17.0/node_modules/@opentelemetry/semantic-conventions/src/trace/index.ts", "../../../node_modules/.pnpm/@opentelemetry+semantic-conventions@1.17.0/node_modules/@opentelemetry/semantic-conventions/src/resource/SemanticResourceAttributes.ts", "../../../node_modules/.pnpm/@opentelemetry+semantic-conventions@1.17.0/node_modules/@opentelemetry/semantic-conventions/src/resource/index.ts", "../../../node_modules/.pnpm/@opentelemetry+semantic-conventions@1.17.0/node_modules/@opentelemetry/semantic-conventions/src/index.ts", "../../../node_modules/.pnpm/@opentelemetry+core@1.17.0_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/core/src/platform/node/sdk-info.ts", "../../../node_modules/.pnpm/@opentelemetry+core@1.17.0_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/core/src/platform/node/timer-util.ts", "../../../node_modules/.pnpm/@opentelemetry+core@1.17.0_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/core/src/platform/node/index.ts", "../../../node_modules/.pnpm/@opentelemetry+core@1.17.0_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/core/src/platform/index.ts", "../../../node_modules/.pnpm/@opentelemetry+core@1.17.0_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/core/src/common/time.ts", "../../../node_modules/.pnpm/@opentelemetry+core@1.17.0_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/core/src/ExportResult.ts", "../../../node_modules/.pnpm/@opentelemetry+core@1.17.0_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/core/src/propagation/composite.ts", "../../../node_modules/.pnpm/@opentelemetry+core@1.17.0_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/core/src/internal/validators.ts", "../../../node_modules/.pnpm/@opentelemetry+core@1.17.0_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/core/src/trace/TraceState.ts", "../../../node_modules/.pnpm/@opentelemetry+core@1.17.0_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/core/src/trace/W3CTraceContextPropagator.ts", "../../../node_modules/.pnpm/@opentelemetry+core@1.17.0_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/core/src/trace/rpc-metadata.ts", "../../../node_modules/.pnpm/@opentelemetry+core@1.17.0_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/core/src/trace/sampler/AlwaysOffSampler.ts", "../../../node_modules/.pnpm/@opentelemetry+core@1.17.0_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/core/src/trace/sampler/AlwaysOnSampler.ts", "../../../node_modules/.pnpm/@opentelemetry+core@1.17.0_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/core/src/trace/sampler/ParentBasedSampler.ts", "../../../node_modules/.pnpm/@opentelemetry+core@1.17.0_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/core/src/trace/sampler/TraceIdRatioBasedSampler.ts", "../../../node_modules/.pnpm/@opentelemetry+core@1.17.0_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/core/src/utils/lodash.merge.ts", "../../../node_modules/.pnpm/@opentelemetry+core@1.17.0_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/core/src/utils/merge.ts", "../../../node_modules/.pnpm/@opentelemetry+core@1.17.0_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/core/src/utils/timeout.ts", "../../../node_modules/.pnpm/@opentelemetry+core@1.17.0_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/core/src/utils/url.ts", "../../../node_modules/.pnpm/@opentelemetry+core@1.17.0_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/core/src/utils/wrap.ts", "../../../node_modules/.pnpm/@opentelemetry+core@1.17.0_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/core/src/utils/promise.ts", "../../../node_modules/.pnpm/@opentelemetry+core@1.17.0_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/core/src/utils/callback.ts", "../../../node_modules/.pnpm/@opentelemetry+core@1.17.0_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/core/src/internal/exporter.ts", "../../../node_modules/.pnpm/@opentelemetry+core@1.17.0_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/core/src/index.ts", "../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.17.0_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/sdk-metrics/src/export/AggregationTemporality.ts", "../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.17.0_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/sdk-metrics/src/export/MetricData.ts", "../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.17.0_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/sdk-metrics/src/utils.ts", "../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.17.0_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/sdk-metrics/src/aggregator/types.ts", "../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.17.0_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/sdk-metrics/src/aggregator/Drop.ts", "../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.17.0_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/sdk-metrics/src/InstrumentDescriptor.ts", "../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.17.0_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/sdk-metrics/src/aggregator/Histogram.ts", "../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.17.0_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/sdk-metrics/src/aggregator/exponential-histogram/Buckets.ts", "../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.17.0_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/sdk-metrics/src/aggregator/exponential-histogram/mapping/ieee754.ts", "../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.17.0_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/sdk-metrics/src/aggregator/exponential-histogram/util.ts", "../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.17.0_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/sdk-metrics/src/aggregator/exponential-histogram/mapping/types.ts", "../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.17.0_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/sdk-metrics/src/aggregator/exponential-histogram/mapping/ExponentMapping.ts", "../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.17.0_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/sdk-metrics/src/aggregator/exponential-histogram/mapping/LogarithmMapping.ts", "../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.17.0_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/sdk-metrics/src/aggregator/exponential-histogram/mapping/getMapping.ts", "../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.17.0_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/sdk-metrics/src/aggregator/ExponentialHistogram.ts", "../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.17.0_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/sdk-metrics/src/aggregator/LastValue.ts", "../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.17.0_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/sdk-metrics/src/aggregator/Sum.ts", "../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.17.0_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/sdk-metrics/src/aggregator/index.ts", "../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.17.0_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/sdk-metrics/src/view/Aggregation.ts", "../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.17.0_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/sdk-metrics/src/export/AggregationSelector.ts", "../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.17.0_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/sdk-metrics/src/export/MetricReader.ts", "../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.17.0_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/sdk-metrics/src/export/PeriodicExportingMetricReader.ts", "../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.17.0_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/sdk-metrics/src/export/InMemoryMetricExporter.ts", "../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.17.0_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/sdk-metrics/src/export/ConsoleMetricExporter.ts", "../../../node_modules/.pnpm/@opentelemetry+resources@1.17.0_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/resources/src/platform/node/default-service-name.ts", "../../../node_modules/.pnpm/@opentelemetry+resources@1.17.0_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/resources/src/platform/node/utils.ts", "../../../node_modules/.pnpm/@opentelemetry+resources@1.17.0_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/resources/src/platform/node/machine-id/execAsync.ts", "../../../node_modules/.pnpm/@opentelemetry+resources@1.17.0_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/resources/src/platform/node/machine-id/getMachineId-darwin.ts", "../../../node_modules/.pnpm/@opentelemetry+resources@1.17.0_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/resources/src/platform/node/machine-id/getMachineId-linux.ts", "../../../node_modules/.pnpm/@opentelemetry+resources@1.17.0_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/resources/src/platform/node/machine-id/getMachineId-bsd.ts", "../../../node_modules/.pnpm/@opentelemetry+resources@1.17.0_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/resources/src/platform/node/machine-id/getMachineId-win.ts", "../../../node_modules/.pnpm/@opentelemetry+resources@1.17.0_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/resources/src/platform/node/machine-id/getMachineId-unsupported.ts", "../../../node_modules/.pnpm/@opentelemetry+resources@1.17.0_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/resources/src/platform/node/machine-id/getMachineId.ts", "../../../node_modules/.pnpm/@opentelemetry+resources@1.17.0_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/resources/src/platform/node/HostDetectorSync.ts", "../../../node_modules/.pnpm/@opentelemetry+resources@1.17.0_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/resources/src/platform/node/HostDetector.ts", "../../../node_modules/.pnpm/@opentelemetry+resources@1.17.0_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/resources/src/platform/node/OSDetectorSync.ts", "../../../node_modules/.pnpm/@opentelemetry+resources@1.17.0_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/resources/src/platform/node/OSDetector.ts", "../../../node_modules/.pnpm/@opentelemetry+resources@1.17.0_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/resources/src/platform/node/ProcessDetectorSync.ts", "../../../node_modules/.pnpm/@opentelemetry+resources@1.17.0_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/resources/src/platform/node/ProcessDetector.ts", "../../../node_modules/.pnpm/@opentelemetry+resources@1.17.0_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/resources/src/platform/node/index.ts", "../../../node_modules/.pnpm/@opentelemetry+resources@1.17.0_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/resources/src/platform/index.ts", "../../../node_modules/.pnpm/@opentelemetry+resources@1.17.0_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/resources/src/Resource.ts", "../../../node_modules/.pnpm/@opentelemetry+resources@1.17.0_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/resources/src/detectors/BrowserDetector.ts", "../../../node_modules/.pnpm/@opentelemetry+resources@1.17.0_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/resources/src/detectors/EnvDetectorSync.ts", "../../../node_modules/.pnpm/@opentelemetry+resources@1.17.0_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/resources/src/detectors/EnvDetector.ts", "../../../node_modules/.pnpm/@opentelemetry+resources@1.17.0_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/resources/src/detectors/BrowserDetectorSync.ts", "../../../node_modules/.pnpm/@opentelemetry+resources@1.17.0_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/resources/src/detectors/index.ts", "../../../node_modules/.pnpm/@opentelemetry+resources@1.17.0_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/resources/src/utils.ts", "../../../node_modules/.pnpm/@opentelemetry+resources@1.17.0_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/resources/src/detect-resources.ts", "../../../node_modules/.pnpm/@opentelemetry+resources@1.17.0_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/resources/src/index.ts", "../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.17.0_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/sdk-metrics/src/view/ViewRegistry.ts", "../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.17.0_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/sdk-metrics/src/Instruments.ts", "../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.17.0_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/sdk-metrics/src/Meter.ts", "../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.17.0_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/sdk-metrics/src/state/MetricStorage.ts", "../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.17.0_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/sdk-metrics/src/state/HashMap.ts", "../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.17.0_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/sdk-metrics/src/state/DeltaMetricProcessor.ts", "../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.17.0_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/sdk-metrics/src/state/TemporalMetricProcessor.ts", "../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.17.0_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/sdk-metrics/src/state/AsyncMetricStorage.ts", "../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.17.0_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/sdk-metrics/src/view/RegistrationConflicts.ts", "../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.17.0_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/sdk-metrics/src/state/MetricStorageRegistry.ts", "../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.17.0_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/sdk-metrics/src/state/MultiWritableMetricStorage.ts", "../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.17.0_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/sdk-metrics/src/ObservableResult.ts", "../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.17.0_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/sdk-metrics/src/state/ObservableRegistry.ts", "../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.17.0_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/sdk-metrics/src/state/SyncMetricStorage.ts", "../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.17.0_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/sdk-metrics/src/view/AttributesProcessor.ts", "../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.17.0_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/sdk-metrics/src/state/MeterSharedState.ts", "../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.17.0_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/sdk-metrics/src/state/MeterProviderSharedState.ts", "../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.17.0_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/sdk-metrics/src/state/MetricCollector.ts", "../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.17.0_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/sdk-metrics/src/MeterProvider.ts", "../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.17.0_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/sdk-metrics/src/view/Predicate.ts", "../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.17.0_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/sdk-metrics/src/view/InstrumentSelector.ts", "../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.17.0_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/sdk-metrics/src/view/MeterSelector.ts", "../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.17.0_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/sdk-metrics/src/view/View.ts", "../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.17.0_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/sdk-metrics/src/index.ts", "../../../node_modules/.pnpm/@opentelemetry+exporter-metrics-otlp-http@0.43.0_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/exporter-metrics-otlp-http/src/OTLPMetricExporterOptions.ts", "../../../node_modules/.pnpm/@opentelemetry+exporter-metrics-otlp-http@0.43.0_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/exporter-metrics-otlp-http/src/OTLPMetricExporterBase.ts", "../../../node_modules/.pnpm/@opentelemetry+otlp-exporter-base@0.43.0_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/otlp-exporter-base/src/util.ts", "../../../node_modules/.pnpm/@opentelemetry+otlp-exporter-base@0.43.0_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/otlp-exporter-base/src/OTLPExporterBase.ts", "../../../node_modules/.pnpm/@opentelemetry+otlp-exporter-base@0.43.0_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/otlp-exporter-base/src/platform/node/types.ts", "../../../node_modules/.pnpm/@opentelemetry+otlp-exporter-base@0.43.0_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/otlp-exporter-base/src/types.ts", "../../../node_modules/.pnpm/@opentelemetry+otlp-exporter-base@0.43.0_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/otlp-exporter-base/src/platform/node/util.ts", "../../../node_modules/.pnpm/@opentelemetry+otlp-exporter-base@0.43.0_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/otlp-exporter-base/src/platform/node/OTLPExporterNodeBase.ts", "../../../node_modules/.pnpm/@opentelemetry+otlp-exporter-base@0.43.0_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/otlp-exporter-base/src/platform/node/index.ts", "../../../node_modules/.pnpm/@opentelemetry+otlp-exporter-base@0.43.0_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/otlp-exporter-base/src/platform/browser/util.ts", "../../../node_modules/.pnpm/@opentelemetry+otlp-exporter-base@0.43.0_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/otlp-exporter-base/src/platform/browser/OTLPExporterBrowserBase.ts", "../../../node_modules/.pnpm/@opentelemetry+otlp-exporter-base@0.43.0_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/otlp-exporter-base/src/platform/browser/index.ts", "../../../node_modules/.pnpm/@opentelemetry+otlp-exporter-base@0.43.0_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/otlp-exporter-base/src/platform/index.ts", "../../../node_modules/.pnpm/@opentelemetry+otlp-exporter-base@0.43.0_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/otlp-exporter-base/src/index.ts", "../../../node_modules/.pnpm/@opentelemetry+otlp-transformer@0.43.0_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/otlp-transformer/build/src/metrics/types.js", "../../../node_modules/.pnpm/@opentelemetry+otlp-transformer@0.43.0_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/otlp-transformer/src/trace/types.ts", "../../../node_modules/.pnpm/@opentelemetry+otlp-transformer@0.43.0_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/otlp-transformer/src/common/internal.ts", "../../../node_modules/.pnpm/@opentelemetry+otlp-transformer@0.43.0_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/otlp-transformer/src/trace/internal.ts", "../../../node_modules/.pnpm/@opentelemetry+otlp-transformer@0.43.0_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/otlp-transformer/src/trace/index.ts", "../../../node_modules/.pnpm/@opentelemetry+otlp-transformer@0.43.0_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/otlp-transformer/src/metrics/internal.ts", "../../../node_modules/.pnpm/@opentelemetry+otlp-transformer@0.43.0_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/otlp-transformer/src/metrics/index.ts", "../../../node_modules/.pnpm/@opentelemetry+otlp-transformer@0.43.0_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/otlp-transformer/src/logs/index.ts", "../../../node_modules/.pnpm/@opentelemetry+otlp-transformer@0.43.0_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/otlp-transformer/src/index.ts", "../../../node_modules/.pnpm/@opentelemetry+exporter-metrics-otlp-http@0.43.0_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/exporter-metrics-otlp-http/src/version.ts", "../../../node_modules/.pnpm/@opentelemetry+exporter-metrics-otlp-http@0.43.0_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/exporter-metrics-otlp-http/src/platform/node/OTLPMetricExporter.ts", "../../../node_modules/.pnpm/@opentelemetry+exporter-metrics-otlp-http@0.43.0_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/exporter-metrics-otlp-http/src/platform/node/index.ts", "../../../node_modules/.pnpm/@opentelemetry+exporter-metrics-otlp-http@0.43.0_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/exporter-metrics-otlp-http/src/platform/index.ts", "../../../node_modules/.pnpm/@opentelemetry+exporter-metrics-otlp-http@0.43.0_@opentelemetry+api@1.6.0/node_modules/@opentelemetry/exporter-metrics-otlp-http/src/index.ts", "../../cli-kit/src/public/node/plugins.ts", "../../cli-kit/src/public/node/analytics.ts", "../../cli-kit/src/public/node/monorail.ts", "../../cli-kit/src/private/node/otel-metrics.ts", "../../cli-kit/src/public/node/vendor/otel-js/service/types.ts", "../../cli-kit/src/public/node/vendor/otel-js/service/DefaultOtelService/DefaultOtelService.ts", "../../cli-kit/src/public/node/vendor/otel-js/service/DefaultOtelService/DefaultMeterProvider.ts", "../../cli-kit/src/public/node/vendor/otel-js/export/InstantaneousMetricReader.ts", "../../cli-kit/src/public/node/vendor/otel-js/utils/throttle.ts", "../../cli-kit/src/public/node/vendor/otel-js/service/BaseOtelService/BaseOtelService.ts", "../../cli-kit/src/public/node/vendor/otel-js/utils/validators.ts"],
  "sourcesContent": ["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * AggregationTemporality indicates the way additive quantities are expressed.\n */\nexport enum AggregationTemporality {\n  DELTA,\n  CUMULATIVE,\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { HrTime, MetricAttributes } from '@opentelemetry/api';\nimport { InstrumentationScope } from '@opentelemetry/core';\nimport { IResource } from '@opentelemetry/resources';\nimport { InstrumentDescriptor } from '../InstrumentDescriptor';\nimport { AggregationTemporality } from './AggregationTemporality';\nimport { Histogram, ExponentialHistogram } from '../aggregator/types';\n\n/**\n * Basic metric data fields.\n */\ninterface BaseMetricData {\n  readonly descriptor: InstrumentDescriptor;\n  readonly aggregationTemporality: AggregationTemporality;\n  /**\n   * DataPointType of the metric instrument.\n   */\n  readonly dataPointType: DataPointType;\n}\n\n/**\n * Represents a metric data aggregated by either a LastValueAggregation or\n * SumAggregation.\n */\nexport interface SumMetricData extends BaseMetricData {\n  readonly dataPointType: DataPointType.SUM;\n  readonly dataPoints: DataPoint<number>[];\n  readonly isMonotonic: boolean;\n}\n\nexport interface GaugeMetricData extends BaseMetricData {\n  readonly dataPointType: DataPointType.GAUGE;\n  readonly dataPoints: DataPoint<number>[];\n}\n\n/**\n * Represents a metric data aggregated by a HistogramAggregation.\n */\nexport interface HistogramMetricData extends BaseMetricData {\n  readonly dataPointType: DataPointType.HISTOGRAM;\n  readonly dataPoints: DataPoint<Histogram>[];\n}\n\n/**\n * Represents a metric data aggregated by a ExponentialHistogramAggregation.\n */\nexport interface ExponentialHistogramMetricData extends BaseMetricData {\n  readonly dataPointType: DataPointType.EXPONENTIAL_HISTOGRAM;\n  readonly dataPoints: DataPoint<ExponentialHistogram>[];\n}\n\n/**\n * Represents an aggregated metric data.\n */\nexport type MetricData =\n  | SumMetricData\n  | GaugeMetricData\n  | HistogramMetricData\n  | ExponentialHistogramMetricData;\n\nexport interface ScopeMetrics {\n  scope: InstrumentationScope;\n  metrics: MetricData[];\n}\n\nexport interface ResourceMetrics {\n  resource: IResource;\n  scopeMetrics: ScopeMetrics[];\n}\n\n/**\n * Represents the collection result of the metrics. If there are any\n * non-critical errors in the collection, like throwing in a single observable\n * callback, these errors are aggregated in the {@link CollectionResult.errors}\n * array and other successfully collected metrics are returned.\n */\nexport interface CollectionResult {\n  /**\n   * Collected metrics.\n   */\n  resourceMetrics: ResourceMetrics;\n  /**\n   * Arbitrary JavaScript exception values.\n   */\n  errors: unknown[];\n}\n\n/**\n * The aggregated point data type.\n */\nexport enum DataPointType {\n  /**\n   * A histogram data point contains a histogram statistics of collected\n   * values with a list of explicit bucket boundaries and statistics such\n   * as min, max, count, and sum of all collected values.\n   */\n  HISTOGRAM,\n  /**\n   * An exponential histogram data point contains a histogram statistics of\n   * collected values where bucket boundaries are automatically calculated\n   * using an exponential function, and statistics such as min, max, count,\n   * and sum of all collected values.\n   */\n  EXPONENTIAL_HISTOGRAM,\n  /**\n   * A gauge metric data point has only a single numeric value.\n   */\n  GAUGE,\n  /**\n   * A sum metric data point has a single numeric value and a\n   * monotonicity-indicator.\n   */\n  SUM,\n}\n\n/**\n * Represents an aggregated point data with start time, end time and their\n * associated attributes and points.\n */\nexport interface DataPoint<T> {\n  /**\n   * The start epoch timestamp of the DataPoint, usually the time when\n   * the metric was created when the preferred AggregationTemporality is\n   * CUMULATIVE, or last collection time otherwise.\n   */\n  readonly startTime: HrTime;\n  /**\n   * The end epoch timestamp when data were collected, usually it represents\n   * the moment when `MetricReader.collect` was called.\n   */\n  readonly endTime: HrTime;\n  /**\n   * The attributes associated with this DataPoint.\n   */\n  readonly attributes: MetricAttributes;\n  /**\n   * The value for this DataPoint. The type of the value is indicated by the\n   * {@link DataPointType}.\n   */\n  readonly value: T;\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** only globals that common to node and browsers are allowed */\n// eslint-disable-next-line node/no-unsupported-features/es-builtins\nexport const _globalThis = typeof globalThis === 'object' ? globalThis : global;\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport * from './globalThis';\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport * from './node';\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// this is autogenerated file, see scripts/version-update.js\nexport const VERSION = '1.6.0';\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { VERSION } from '../version';\n\nconst re = /^(\\d+)\\.(\\d+)\\.(\\d+)(-(.+))?$/;\n\n/**\n * Create a function to test an API version to see if it is compatible with the provided ownVersion.\n *\n * The returned function has the following semantics:\n * - Exact match is always compatible\n * - Major versions must match exactly\n *    - 1.x package cannot use global 2.x package\n *    - 2.x package cannot use global 1.x package\n * - The minor version of the API module requesting access to the global API must be less than or equal to the minor version of this API\n *    - 1.3 package may use 1.4 global because the later global contains all functions 1.3 expects\n *    - 1.4 package may NOT use 1.3 global because it may try to call functions which don't exist on 1.3\n * - If the major version is 0, the minor version is treated as the major and the patch is treated as the minor\n * - Patch and build tag differences are not considered at this time\n *\n * @param ownVersion version which should be checked against\n */\nexport function _makeCompatibilityCheck(\n  ownVersion: string\n): (globalVersion: string) => boolean {\n  const acceptedVersions = new Set<string>([ownVersion]);\n  const rejectedVersions = new Set<string>();\n\n  const myVersionMatch = ownVersion.match(re);\n  if (!myVersionMatch) {\n    // we cannot guarantee compatibility so we always return noop\n    return () => false;\n  }\n\n  const ownVersionParsed = {\n    major: +myVersionMatch[1],\n    minor: +myVersionMatch[2],\n    patch: +myVersionMatch[3],\n    prerelease: myVersionMatch[4],\n  };\n\n  // if ownVersion has a prerelease tag, versions must match exactly\n  if (ownVersionParsed.prerelease != null) {\n    return function isExactmatch(globalVersion: string): boolean {\n      return globalVersion === ownVersion;\n    };\n  }\n\n  function _reject(v: string) {\n    rejectedVersions.add(v);\n    return false;\n  }\n\n  function _accept(v: string) {\n    acceptedVersions.add(v);\n    return true;\n  }\n\n  return function isCompatible(globalVersion: string): boolean {\n    if (acceptedVersions.has(globalVersion)) {\n      return true;\n    }\n\n    if (rejectedVersions.has(globalVersion)) {\n      return false;\n    }\n\n    const globalVersionMatch = globalVersion.match(re);\n    if (!globalVersionMatch) {\n      // cannot parse other version\n      // we cannot guarantee compatibility so we always noop\n      return _reject(globalVersion);\n    }\n\n    const globalVersionParsed = {\n      major: +globalVersionMatch[1],\n      minor: +globalVersionMatch[2],\n      patch: +globalVersionMatch[3],\n      prerelease: globalVersionMatch[4],\n    };\n\n    // if globalVersion has a prerelease tag, versions must match exactly\n    if (globalVersionParsed.prerelease != null) {\n      return _reject(globalVersion);\n    }\n\n    // major versions must match\n    if (ownVersionParsed.major !== globalVersionParsed.major) {\n      return _reject(globalVersion);\n    }\n\n    if (ownVersionParsed.major === 0) {\n      if (\n        ownVersionParsed.minor === globalVersionParsed.minor &&\n        ownVersionParsed.patch <= globalVersionParsed.patch\n      ) {\n        return _accept(globalVersion);\n      }\n\n      return _reject(globalVersion);\n    }\n\n    if (ownVersionParsed.minor <= globalVersionParsed.minor) {\n      return _accept(globalVersion);\n    }\n\n    return _reject(globalVersion);\n  };\n}\n\n/**\n * Test an API version to see if it is compatible with this API.\n *\n * - Exact match is always compatible\n * - Major versions must match exactly\n *    - 1.x package cannot use global 2.x package\n *    - 2.x package cannot use global 1.x package\n * - The minor version of the API module requesting access to the global API must be less than or equal to the minor version of this API\n *    - 1.3 package may use 1.4 global because the later global contains all functions 1.3 expects\n *    - 1.4 package may NOT use 1.3 global because it may try to call functions which don't exist on 1.3\n * - If the major version is 0, the minor version is treated as the major and the patch is treated as the minor\n * - Patch and build tag differences are not considered at this time\n *\n * @param version version of the API requesting an instance of the global API\n */\nexport const isCompatible = _makeCompatibilityCheck(VERSION);\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { MeterProvider } from '../metrics/MeterProvider';\nimport { ContextManager } from '../context/types';\nimport { DiagLogger } from '../diag/types';\nimport { _globalThis } from '../platform';\nimport { TextMapPropagator } from '../propagation/TextMapPropagator';\nimport type { TracerProvider } from '../trace/tracer_provider';\nimport { VERSION } from '../version';\nimport { isCompatible } from './semver';\n\nconst major = VERSION.split('.')[0];\nconst GLOBAL_OPENTELEMETRY_API_KEY = Symbol.for(\n  `opentelemetry.js.api.${major}`\n);\n\nconst _global = _globalThis as OTelGlobal;\n\nexport function registerGlobal<Type extends keyof OTelGlobalAPI>(\n  type: Type,\n  instance: OTelGlobalAPI[Type],\n  diag: DiagLogger,\n  allowOverride = false\n): boolean {\n  const api = (_global[GLOBAL_OPENTELEMETRY_API_KEY] = _global[\n    GLOBAL_OPENTELEMETRY_API_KEY\n  ] ?? {\n    version: VERSION,\n  });\n\n  if (!allowOverride && api[type]) {\n    // already registered an API of this type\n    const err = new Error(\n      `@opentelemetry/api: Attempted duplicate registration of API: ${type}`\n    );\n    diag.error(err.stack || err.message);\n    return false;\n  }\n\n  if (api.version !== VERSION) {\n    // All registered APIs must be of the same version exactly\n    const err = new Error(\n      `@opentelemetry/api: Registration of version v${api.version} for ${type} does not match previously registered API v${VERSION}`\n    );\n    diag.error(err.stack || err.message);\n    return false;\n  }\n\n  api[type] = instance;\n  diag.debug(\n    `@opentelemetry/api: Registered a global for ${type} v${VERSION}.`\n  );\n\n  return true;\n}\n\nexport function getGlobal<Type extends keyof OTelGlobalAPI>(\n  type: Type\n): OTelGlobalAPI[Type] | undefined {\n  const globalVersion = _global[GLOBAL_OPENTELEMETRY_API_KEY]?.version;\n  if (!globalVersion || !isCompatible(globalVersion)) {\n    return;\n  }\n  return _global[GLOBAL_OPENTELEMETRY_API_KEY]?.[type];\n}\n\nexport function unregisterGlobal(type: keyof OTelGlobalAPI, diag: DiagLogger) {\n  diag.debug(\n    `@opentelemetry/api: Unregistering a global for ${type} v${VERSION}.`\n  );\n  const api = _global[GLOBAL_OPENTELEMETRY_API_KEY];\n\n  if (api) {\n    delete api[type];\n  }\n}\n\ntype OTelGlobal = {\n  [GLOBAL_OPENTELEMETRY_API_KEY]?: OTelGlobalAPI;\n};\n\ntype OTelGlobalAPI = {\n  version: string;\n\n  diag?: DiagLogger;\n  trace?: TracerProvider;\n  context?: ContextManager;\n  metrics?: MeterProvider;\n  propagation?: TextMapPropagator;\n};\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getGlobal } from '../internal/global-utils';\nimport { ComponentLoggerOptions, DiagLogger, DiagLogFunction } from './types';\n\n/**\n * Component Logger which is meant to be used as part of any component which\n * will add automatically additional namespace in front of the log message.\n * It will then forward all message to global diag logger\n * @example\n * const cLogger = diag.createComponentLogger({ namespace: '@opentelemetry/instrumentation-http' });\n * cLogger.debug('test');\n * // @opentelemetry/instrumentation-http test\n */\nexport class DiagComponentLogger implements DiagLogger {\n  private _namespace: string;\n\n  constructor(props: ComponentLoggerOptions) {\n    this._namespace = props.namespace || 'DiagComponentLogger';\n  }\n\n  public debug(...args: any[]): void {\n    return logProxy('debug', this._namespace, args);\n  }\n\n  public error(...args: any[]): void {\n    return logProxy('error', this._namespace, args);\n  }\n\n  public info(...args: any[]): void {\n    return logProxy('info', this._namespace, args);\n  }\n\n  public warn(...args: any[]): void {\n    return logProxy('warn', this._namespace, args);\n  }\n\n  public verbose(...args: any[]): void {\n    return logProxy('verbose', this._namespace, args);\n  }\n}\n\nfunction logProxy(\n  funcName: keyof DiagLogger,\n  namespace: string,\n  args: any\n): void {\n  const logger = getGlobal('diag');\n  // shortcut if logger not set\n  if (!logger) {\n    return;\n  }\n\n  args.unshift(namespace);\n  return logger[funcName](...(args as Parameters<DiagLogFunction>));\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport type DiagLogFunction = (message: string, ...args: unknown[]) => void;\n\n/**\n * Defines an internal diagnostic logger interface which is used to log internal diagnostic\n * messages, you can set the default diagnostic logger via the {@link DiagAPI} setLogger function.\n * API provided implementations include :-\n * - a No-Op {@link createNoopDiagLogger}\n * - a {@link DiagLogLevel} filtering wrapper {@link createLogLevelDiagLogger}\n * - a general Console {@link DiagConsoleLogger} version.\n */\nexport interface DiagLogger {\n  /** Log an error scenario that was not expected and caused the requested operation to fail. */\n  error: DiagLogFunction;\n\n  /**\n   * Log a warning scenario to inform the developer of an issues that should be investigated.\n   * The requested operation may or may not have succeeded or completed.\n   */\n  warn: DiagLogFunction;\n\n  /**\n   * Log a general informational message, this should not affect functionality.\n   * This is also the default logging level so this should NOT be used for logging\n   * debugging level information.\n   */\n  info: DiagLogFunction;\n\n  /**\n   * Log a general debug message that can be useful for identifying a failure.\n   * Information logged at this level may include diagnostic details that would\n   * help identify a failure scenario.\n   * For example: Logging the order of execution of async operations.\n   */\n  debug: DiagLogFunction;\n\n  /**\n   * Log a detailed (verbose) trace level logging that can be used to identify failures\n   * where debug level logging would be insufficient, this level of tracing can include\n   * input and output parameters and as such may include PII information passing through\n   * the API. As such it is recommended that this level of tracing should not be enabled\n   * in a production environment.\n   */\n  verbose: DiagLogFunction;\n}\n\n/**\n * Defines the available internal logging levels for the diagnostic logger, the numeric values\n * of the levels are defined to match the original values from the initial LogLevel to avoid\n * compatibility/migration issues for any implementation that assume the numeric ordering.\n */\nexport enum DiagLogLevel {\n  /** Diagnostic Logging level setting to disable all logging (except and forced logs) */\n  NONE = 0,\n\n  /** Identifies an error scenario */\n  ERROR = 30,\n\n  /** Identifies a warning scenario */\n  WARN = 50,\n\n  /** General informational log message */\n  INFO = 60,\n\n  /** General debug log message */\n  DEBUG = 70,\n\n  /**\n   * Detailed trace level logging should only be used for development, should only be set\n   * in a development environment.\n   */\n  VERBOSE = 80,\n\n  /** Used to set the logging level to include all logging */\n  ALL = 9999,\n}\n\n/**\n * Defines options for ComponentLogger\n */\nexport interface ComponentLoggerOptions {\n  namespace: string;\n}\n\nexport interface DiagLoggerOptions {\n  /**\n   * The {@link DiagLogLevel} used to filter logs sent to the logger.\n   *\n   * @defaultValue DiagLogLevel.INFO\n   */\n  logLevel?: DiagLogLevel;\n\n  /**\n   * Setting this value to `true` will suppress the warning message normally emitted when registering a logger when another logger is already registered.\n   */\n  suppressOverrideMessage?: boolean;\n}\n\nexport interface DiagLoggerApi {\n  /**\n   * Set the global DiagLogger and DiagLogLevel.\n   * If a global diag logger is already set, this will override it.\n   *\n   * @param logger - The {@link DiagLogger} instance to set as the default logger.\n   * @param options - A {@link DiagLoggerOptions} object. If not provided, default values will be set.\n   * @returns `true` if the logger was successfully registered, else `false`\n   */\n  setLogger(logger: DiagLogger, options?: DiagLoggerOptions): boolean;\n\n  /**\n   *\n   * @param logger - The {@link DiagLogger} instance to set as the default logger.\n   * @param logLevel - The {@link DiagLogLevel} used to filter logs sent to the logger. If not provided it will default to {@link DiagLogLevel.INFO}.\n   * @returns `true` if the logger was successfully registered, else `false`\n   */\n  setLogger(logger: DiagLogger, logLevel?: DiagLogLevel): boolean;\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DiagLogFunction, DiagLogger, DiagLogLevel } from '../types';\n\nexport function createLogLevelDiagLogger(\n  maxLevel: DiagLogLevel,\n  logger: DiagLogger\n): DiagLogger {\n  if (maxLevel < DiagLogLevel.NONE) {\n    maxLevel = DiagLogLevel.NONE;\n  } else if (maxLevel > DiagLogLevel.ALL) {\n    maxLevel = DiagLogLevel.ALL;\n  }\n\n  // In case the logger is null or undefined\n  logger = logger || {};\n\n  function _filterFunc(\n    funcName: keyof DiagLogger,\n    theLevel: DiagLogLevel\n  ): DiagLogFunction {\n    const theFunc = logger[funcName];\n\n    if (typeof theFunc === 'function' && maxLevel >= theLevel) {\n      return theFunc.bind(logger);\n    }\n    return function () {};\n  }\n\n  return {\n    error: _filterFunc('error', DiagLogLevel.ERROR),\n    warn: _filterFunc('warn', DiagLogLevel.WARN),\n    info: _filterFunc('info', DiagLogLevel.INFO),\n    debug: _filterFunc('debug', DiagLogLevel.DEBUG),\n    verbose: _filterFunc('verbose', DiagLogLevel.VERBOSE),\n  };\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DiagComponentLogger } from '../diag/ComponentLogger';\nimport { createLogLevelDiagLogger } from '../diag/internal/logLevelLogger';\nimport {\n  ComponentLoggerOptions,\n  DiagLogFunction,\n  DiagLogger,\n  DiagLoggerApi,\n  DiagLogLevel,\n} from '../diag/types';\nimport {\n  getGlobal,\n  registerGlobal,\n  unregisterGlobal,\n} from '../internal/global-utils';\n\nconst API_NAME = 'diag';\n\n/**\n * Singleton object which represents the entry point to the OpenTelemetry internal\n * diagnostic API\n */\nexport class DiagAPI implements DiagLogger, DiagLoggerApi {\n  private static _instance?: DiagAPI;\n\n  /** Get the singleton instance of the DiagAPI API */\n  public static instance(): DiagAPI {\n    if (!this._instance) {\n      this._instance = new DiagAPI();\n    }\n\n    return this._instance;\n  }\n\n  /**\n   * Private internal constructor\n   * @private\n   */\n  private constructor() {\n    function _logProxy(funcName: keyof DiagLogger): DiagLogFunction {\n      return function (...args) {\n        const logger = getGlobal('diag');\n        // shortcut if logger not set\n        if (!logger) return;\n        return logger[funcName](...args);\n      };\n    }\n\n    // Using self local variable for minification purposes as 'this' cannot be minified\n    const self = this;\n\n    // DiagAPI specific functions\n\n    const setLogger: DiagLoggerApi['setLogger'] = (\n      logger,\n      optionsOrLogLevel = { logLevel: DiagLogLevel.INFO }\n    ) => {\n      if (logger === self) {\n        // There isn't much we can do here.\n        // Logging to the console might break the user application.\n        // Try to log to self. If a logger was previously registered it will receive the log.\n        const err = new Error(\n          'Cannot use diag as the logger for itself. Please use a DiagLogger implementation like ConsoleDiagLogger or a custom implementation'\n        );\n        self.error(err.stack ?? err.message);\n        return false;\n      }\n\n      if (typeof optionsOrLogLevel === 'number') {\n        optionsOrLogLevel = {\n          logLevel: optionsOrLogLevel,\n        };\n      }\n\n      const oldLogger = getGlobal('diag');\n      const newLogger = createLogLevelDiagLogger(\n        optionsOrLogLevel.logLevel ?? DiagLogLevel.INFO,\n        logger\n      );\n      // There already is an logger registered. We'll let it know before overwriting it.\n      if (oldLogger && !optionsOrLogLevel.suppressOverrideMessage) {\n        const stack = new Error().stack ?? '<failed to generate stacktrace>';\n        oldLogger.warn(`Current logger will be overwritten from ${stack}`);\n        newLogger.warn(\n          `Current logger will overwrite one already registered from ${stack}`\n        );\n      }\n\n      return registerGlobal('diag', newLogger, self, true);\n    };\n\n    self.setLogger = setLogger;\n\n    self.disable = () => {\n      unregisterGlobal(API_NAME, self);\n    };\n\n    self.createComponentLogger = (options: ComponentLoggerOptions) => {\n      return new DiagComponentLogger(options);\n    };\n\n    self.verbose = _logProxy('verbose');\n    self.debug = _logProxy('debug');\n    self.info = _logProxy('info');\n    self.warn = _logProxy('warn');\n    self.error = _logProxy('error');\n  }\n\n  public setLogger!: DiagLoggerApi['setLogger'];\n  /**\n   *\n   */\n  public createComponentLogger!: (\n    options: ComponentLoggerOptions\n  ) => DiagLogger;\n\n  // DiagLogger implementation\n  public verbose!: DiagLogFunction;\n  public debug!: DiagLogFunction;\n  public info!: DiagLogFunction;\n  public warn!: DiagLogFunction;\n  public error!: DiagLogFunction;\n\n  /**\n   * Unregister the global logger and return to Noop\n   */\n  public disable!: () => void;\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { Baggage, BaggageEntry } from '../types';\n\nexport class BaggageImpl implements Baggage {\n  private _entries: Map<string, BaggageEntry>;\n\n  constructor(entries?: Map<string, BaggageEntry>) {\n    this._entries = entries ? new Map(entries) : new Map();\n  }\n\n  getEntry(key: string): BaggageEntry | undefined {\n    const entry = this._entries.get(key);\n    if (!entry) {\n      return undefined;\n    }\n\n    return Object.assign({}, entry);\n  }\n\n  getAllEntries(): [string, BaggageEntry][] {\n    return Array.from(this._entries.entries()).map(([k, v]) => [k, v]);\n  }\n\n  setEntry(key: string, entry: BaggageEntry): BaggageImpl {\n    const newBaggage = new BaggageImpl(this._entries);\n    newBaggage._entries.set(key, entry);\n    return newBaggage;\n  }\n\n  removeEntry(key: string): BaggageImpl {\n    const newBaggage = new BaggageImpl(this._entries);\n    newBaggage._entries.delete(key);\n    return newBaggage;\n  }\n\n  removeEntries(...keys: string[]): BaggageImpl {\n    const newBaggage = new BaggageImpl(this._entries);\n    for (const key of keys) {\n      newBaggage._entries.delete(key);\n    }\n    return newBaggage;\n  }\n\n  clear(): BaggageImpl {\n    return new BaggageImpl();\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Symbol used to make BaggageEntryMetadata an opaque type\n */\nexport const baggageEntryMetadataSymbol = Symbol('BaggageEntryMetadata');\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DiagAPI } from '../api/diag';\nimport { BaggageImpl } from './internal/baggage-impl';\nimport { baggageEntryMetadataSymbol } from './internal/symbol';\nimport { Baggage, BaggageEntry, BaggageEntryMetadata } from './types';\n\nconst diag = DiagAPI.instance();\n\n/**\n * Create a new Baggage with optional entries\n *\n * @param entries An array of baggage entries the new baggage should contain\n */\nexport function createBaggage(\n  entries: Record<string, BaggageEntry> = {}\n): Baggage {\n  return new BaggageImpl(new Map(Object.entries(entries)));\n}\n\n/**\n * Create a serializable BaggageEntryMetadata object from a string.\n *\n * @param str string metadata. Format is currently not defined by the spec and has no special meaning.\n *\n */\nexport function baggageEntryMetadataFromString(\n  str: string\n): BaggageEntryMetadata {\n  if (typeof str !== 'string') {\n    diag.error(\n      `Cannot create baggage metadata from unknown type: ${typeof str}`\n    );\n    str = '';\n  }\n\n  return {\n    __TYPE__: baggageEntryMetadataSymbol,\n    toString() {\n      return str;\n    },\n  };\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Context } from './types';\n\n/** Get a key to uniquely identify a context value */\nexport function createContextKey(description: string) {\n  // The specification states that for the same input, multiple calls should\n  // return different keys. Due to the nature of the JS dependency management\n  // system, this creates problems where multiple versions of some package\n  // could hold different keys for the same property.\n  //\n  // Therefore, we use Symbol.for which returns the same key for the same input.\n  return Symbol.for(description);\n}\n\nclass BaseContext implements Context {\n  private _currentContext!: Map<symbol, unknown>;\n\n  /**\n   * Construct a new context which inherits values from an optional parent context.\n   *\n   * @param parentContext a context from which to inherit values\n   */\n  constructor(parentContext?: Map<symbol, unknown>) {\n    // for minification\n    const self = this;\n\n    self._currentContext = parentContext ? new Map(parentContext) : new Map();\n\n    self.getValue = (key: symbol) => self._currentContext.get(key);\n\n    self.setValue = (key: symbol, value: unknown): Context => {\n      const context = new BaseContext(self._currentContext);\n      context._currentContext.set(key, value);\n      return context;\n    };\n\n    self.deleteValue = (key: symbol): Context => {\n      const context = new BaseContext(self._currentContext);\n      context._currentContext.delete(key);\n      return context;\n    };\n  }\n\n  /**\n   * Get a value from the context.\n   *\n   * @param key key which identifies a context value\n   */\n  public getValue!: (key: symbol) => unknown;\n\n  /**\n   * Create a new context which inherits from this context and has\n   * the given key set to the given value.\n   *\n   * @param key context key for which to set the value\n   * @param value value to set for the given key\n   */\n  public setValue!: (key: symbol, value: unknown) => Context;\n\n  /**\n   * Return a new context which inherits from this context but does\n   * not contain a value for the given key.\n   *\n   * @param key context key for which to clear a value\n   */\n  public deleteValue!: (key: symbol) => Context;\n}\n\n/** The root context is used as the default parent context when there is no active context */\nexport const ROOT_CONTEXT: Context = new BaseContext();\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DiagLogger, DiagLogFunction } from './types';\n\ntype ConsoleMapKeys = 'error' | 'warn' | 'info' | 'debug' | 'trace';\nconst consoleMap: { n: keyof DiagLogger; c: ConsoleMapKeys }[] = [\n  { n: 'error', c: 'error' },\n  { n: 'warn', c: 'warn' },\n  { n: 'info', c: 'info' },\n  { n: 'debug', c: 'debug' },\n  { n: 'verbose', c: 'trace' },\n];\n\n/**\n * A simple Immutable Console based diagnostic logger which will output any messages to the Console.\n * If you want to limit the amount of logging to a specific level or lower use the\n * {@link createLogLevelDiagLogger}\n */\nexport class DiagConsoleLogger implements DiagLogger {\n  constructor() {\n    function _consoleFunc(funcName: ConsoleMapKeys): DiagLogFunction {\n      return function (...args) {\n        if (console) {\n          // Some environments only expose the console when the F12 developer console is open\n          // eslint-disable-next-line no-console\n          let theFunc = console[funcName];\n          if (typeof theFunc !== 'function') {\n            // Not all environments support all functions\n            // eslint-disable-next-line no-console\n            theFunc = console.log;\n          }\n\n          // One last final check\n          if (typeof theFunc === 'function') {\n            return theFunc.apply(console, args);\n          }\n        }\n      };\n    }\n\n    for (let i = 0; i < consoleMap.length; i++) {\n      this[consoleMap[i].n] = _consoleFunc(consoleMap[i].c);\n    }\n  }\n\n  /** Log an error scenario that was not expected and caused the requested operation to fail. */\n  public error!: DiagLogFunction;\n\n  /**\n   * Log a warning scenario to inform the developer of an issues that should be investigated.\n   * The requested operation may or may not have succeeded or completed.\n   */\n  public warn!: DiagLogFunction;\n\n  /**\n   * Log a general informational message, this should not affect functionality.\n   * This is also the default logging level so this should NOT be used for logging\n   * debugging level information.\n   */\n  public info!: DiagLogFunction;\n\n  /**\n   * Log a general debug message that can be useful for identifying a failure.\n   * Information logged at this level may include diagnostic details that would\n   * help identify a failure scenario. Useful scenarios would be to log the execution\n   * order of async operations\n   */\n  public debug!: DiagLogFunction;\n\n  /**\n   * Log a detailed (verbose) trace level logging that can be used to identify failures\n   * where debug level logging would be insufficient, this level of tracing can include\n   * input and output parameters and as such may include PII information passing through\n   * the API. As such it is recommended that this level of tracing should not be enabled\n   * in a production environment.\n   */\n  public verbose!: DiagLogFunction;\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Meter } from './Meter';\nimport {\n  BatchObservableCallback,\n  Counter,\n  Histogram,\n  MetricOptions,\n  ObservableCallback,\n  ObservableCounter,\n  ObservableGauge,\n  ObservableUpDownCounter,\n  UpDownCounter,\n  MetricAttributes,\n  Observable,\n} from './Metric';\n\n/**\n * NoopMeter is a noop implementation of the {@link Meter} interface. It reuses\n * constant NoopMetrics for all of its methods.\n */\nexport class NoopMeter implements Meter {\n  constructor() {}\n\n  /**\n   * @see {@link Meter.createHistogram}\n   */\n  createHistogram(_name: string, _options?: MetricOptions): Histogram {\n    return NOOP_HISTOGRAM_METRIC;\n  }\n\n  /**\n   * @see {@link Meter.createCounter}\n   */\n  createCounter(_name: string, _options?: MetricOptions): Counter {\n    return NOOP_COUNTER_METRIC;\n  }\n\n  /**\n   * @see {@link Meter.createUpDownCounter}\n   */\n  createUpDownCounter(_name: string, _options?: MetricOptions): UpDownCounter {\n    return NOOP_UP_DOWN_COUNTER_METRIC;\n  }\n\n  /**\n   * @see {@link Meter.createObservableGauge}\n   */\n  createObservableGauge(\n    _name: string,\n    _options?: MetricOptions\n  ): ObservableGauge {\n    return NOOP_OBSERVABLE_GAUGE_METRIC;\n  }\n\n  /**\n   * @see {@link Meter.createObservableCounter}\n   */\n  createObservableCounter(\n    _name: string,\n    _options?: MetricOptions\n  ): ObservableCounter {\n    return NOOP_OBSERVABLE_COUNTER_METRIC;\n  }\n\n  /**\n   * @see {@link Meter.createObservableUpDownCounter}\n   */\n  createObservableUpDownCounter(\n    _name: string,\n    _options?: MetricOptions\n  ): ObservableUpDownCounter {\n    return NOOP_OBSERVABLE_UP_DOWN_COUNTER_METRIC;\n  }\n\n  /**\n   * @see {@link Meter.addBatchObservableCallback}\n   */\n  addBatchObservableCallback(\n    _callback: BatchObservableCallback,\n    _observables: Observable[]\n  ): void {}\n\n  /**\n   * @see {@link Meter.removeBatchObservableCallback}\n   */\n  removeBatchObservableCallback(_callback: BatchObservableCallback): void {}\n}\n\nexport class NoopMetric {}\n\nexport class NoopCounterMetric extends NoopMetric implements Counter {\n  add(_value: number, _attributes: MetricAttributes): void {}\n}\n\nexport class NoopUpDownCounterMetric\n  extends NoopMetric\n  implements UpDownCounter\n{\n  add(_value: number, _attributes: MetricAttributes): void {}\n}\n\nexport class NoopHistogramMetric extends NoopMetric implements Histogram {\n  record(_value: number, _attributes: MetricAttributes): void {}\n}\n\nexport class NoopObservableMetric {\n  addCallback(_callback: ObservableCallback) {}\n\n  removeCallback(_callback: ObservableCallback) {}\n}\n\nexport class NoopObservableCounterMetric\n  extends NoopObservableMetric\n  implements ObservableCounter {}\n\nexport class NoopObservableGaugeMetric\n  extends NoopObservableMetric\n  implements ObservableGauge {}\n\nexport class NoopObservableUpDownCounterMetric\n  extends NoopObservableMetric\n  implements ObservableUpDownCounter {}\n\nexport const NOOP_METER = new NoopMeter();\n\n// Synchronous instruments\nexport const NOOP_COUNTER_METRIC = new NoopCounterMetric();\nexport const NOOP_HISTOGRAM_METRIC = new NoopHistogramMetric();\nexport const NOOP_UP_DOWN_COUNTER_METRIC = new NoopUpDownCounterMetric();\n\n// Asynchronous instruments\nexport const NOOP_OBSERVABLE_COUNTER_METRIC = new NoopObservableCounterMetric();\nexport const NOOP_OBSERVABLE_GAUGE_METRIC = new NoopObservableGaugeMetric();\nexport const NOOP_OBSERVABLE_UP_DOWN_COUNTER_METRIC =\n  new NoopObservableUpDownCounterMetric();\n\n/**\n * Create a no-op Meter\n */\nexport function createNoopMeter(): Meter {\n  return NOOP_METER;\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Attributes, AttributeValue } from '../common/Attributes';\nimport { Context } from '../context/types';\nimport { BatchObservableResult, ObservableResult } from './ObservableResult';\n\n/**\n * Options needed for metric creation\n */\nexport interface MetricOptions {\n  /**\n   * The description of the Metric.\n   * @default ''\n   */\n  description?: string;\n\n  /**\n   * The unit of the Metric values.\n   * @default ''\n   */\n  unit?: string;\n\n  /**\n   * Indicates the type of the recorded value.\n   * @default {@link ValueType.DOUBLE}\n   */\n  valueType?: ValueType;\n}\n\n/** The Type of value. It describes how the data is reported. */\nexport enum ValueType {\n  INT,\n  DOUBLE,\n}\n\n/**\n * Counter is the most common synchronous instrument. This instrument supports\n * an `Add(increment)` function for reporting a sum, and is restricted to\n * non-negative increments. The default aggregation is Sum, as for any additive\n * instrument.\n *\n * Example uses for Counter:\n * <ol>\n *   <li> count the number of bytes received. </li>\n *   <li> count the number of requests completed. </li>\n *   <li> count the number of accounts created. </li>\n *   <li> count the number of checkpoints run. </li>\n *   <li> count the number of 5xx errors. </li>\n * <ol>\n */\nexport interface Counter<\n  AttributesTypes extends MetricAttributes = MetricAttributes,\n> {\n  /**\n   * Increment value of counter by the input. Inputs must not be negative.\n   */\n  add(value: number, attributes?: AttributesTypes, context?: Context): void;\n}\n\nexport interface UpDownCounter<\n  AttributesTypes extends MetricAttributes = MetricAttributes,\n> {\n  /**\n   * Increment value of counter by the input. Inputs may be negative.\n   */\n  add(value: number, attributes?: AttributesTypes, context?: Context): void;\n}\n\nexport interface Histogram<\n  AttributesTypes extends MetricAttributes = MetricAttributes,\n> {\n  /**\n   * Records a measurement. Value of the measurement must not be negative.\n   */\n  record(value: number, attributes?: AttributesTypes, context?: Context): void;\n}\n\n/**\n * @deprecated please use {@link Attributes}\n */\nexport type MetricAttributes = Attributes;\n\n/**\n * @deprecated please use {@link AttributeValue}\n */\nexport type MetricAttributeValue = AttributeValue;\n\n/**\n * The observable callback for Observable instruments.\n */\nexport type ObservableCallback<\n  AttributesTypes extends MetricAttributes = MetricAttributes,\n> = (\n  observableResult: ObservableResult<AttributesTypes>\n) => void | Promise<void>;\n\n/**\n * The observable callback for a batch of Observable instruments.\n */\nexport type BatchObservableCallback<\n  AttributesTypes extends MetricAttributes = MetricAttributes,\n> = (\n  observableResult: BatchObservableResult<AttributesTypes>\n) => void | Promise<void>;\n\nexport interface Observable<\n  AttributesTypes extends MetricAttributes = MetricAttributes,\n> {\n  /**\n   * Sets up a function that will be called whenever a metric collection is initiated.\n   *\n   * If the function is already in the list of callbacks for this Observable, the function is not added a second time.\n   */\n  addCallback(callback: ObservableCallback<AttributesTypes>): void;\n\n  /**\n   * Removes a callback previously registered with {@link Observable.addCallback}.\n   */\n  removeCallback(callback: ObservableCallback<AttributesTypes>): void;\n}\n\nexport type ObservableCounter<\n  AttributesTypes extends MetricAttributes = MetricAttributes,\n> = Observable<AttributesTypes>;\nexport type ObservableUpDownCounter<\n  AttributesTypes extends MetricAttributes = MetricAttributes,\n> = Observable<AttributesTypes>;\nexport type ObservableGauge<\n  AttributesTypes extends MetricAttributes = MetricAttributes,\n> = Observable<AttributesTypes>;\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Context } from '../context/types';\n\n/**\n * Injects `Context` into and extracts it from carriers that travel\n * in-band across process boundaries. Encoding is expected to conform to the\n * HTTP Header Field semantics. Values are often encoded as RPC/HTTP request\n * headers.\n *\n * The carrier of propagated data on both the client (injector) and server\n * (extractor) side is usually an object such as http headers. Propagation is\n * usually implemented via library-specific request interceptors, where the\n * client-side injects values and the server-side extracts them.\n */\nexport interface TextMapPropagator<Carrier = any> {\n  /**\n   * Injects values from a given `Context` into a carrier.\n   *\n   * OpenTelemetry defines a common set of format values (TextMapPropagator),\n   * and each has an expected `carrier` type.\n   *\n   * @param context the Context from which to extract values to transmit over\n   *     the wire.\n   * @param carrier the carrier of propagation fields, such as http request\n   *     headers.\n   * @param setter an optional {@link TextMapSetter}. If undefined, values will be\n   *     set by direct object assignment.\n   */\n  inject(\n    context: Context,\n    carrier: Carrier,\n    setter: TextMapSetter<Carrier>\n  ): void;\n\n  /**\n   * Given a `Context` and a carrier, extract context values from a\n   * carrier and return a new context, created from the old context, with the\n   * extracted values.\n   *\n   * @param context the Context from which to extract values to transmit over\n   *     the wire.\n   * @param carrier the carrier of propagation fields, such as http request\n   *     headers.\n   * @param getter an optional {@link TextMapGetter}. If undefined, keys will be all\n   *     own properties, and keys will be accessed by direct object access.\n   */\n  extract(\n    context: Context,\n    carrier: Carrier,\n    getter: TextMapGetter<Carrier>\n  ): Context;\n\n  /**\n   * Return a list of all fields which may be used by the propagator.\n   */\n  fields(): string[];\n}\n\n/**\n * A setter is specified by the caller to define a specific method\n * to set key/value pairs on the carrier within a propagator.\n */\nexport interface TextMapSetter<Carrier = any> {\n  /**\n   * Callback used to set a key/value pair on an object.\n   *\n   * Should be called by the propagator each time a key/value pair\n   * should be set, and should set that key/value pair on the propagator.\n   *\n   * @param carrier object or class which carries key/value pairs\n   * @param key string key to modify\n   * @param value value to be set to the key on the carrier\n   */\n  set(carrier: Carrier, key: string, value: string): void;\n}\n\n/**\n * A getter is specified by the caller to define a specific method\n * to get the value of a key from a carrier.\n */\nexport interface TextMapGetter<Carrier = any> {\n  /**\n   * Get a list of all keys available on the carrier.\n   *\n   * @param carrier\n   */\n  keys(carrier: Carrier): string[];\n\n  /**\n   * Get the value of a specific key from the carrier.\n   *\n   * @param carrier\n   * @param key\n   */\n  get(carrier: Carrier, key: string): undefined | string | string[];\n}\n\nexport const defaultTextMapGetter: TextMapGetter = {\n  get(carrier, key) {\n    if (carrier == null) {\n      return undefined;\n    }\n    return carrier[key];\n  },\n\n  keys(carrier) {\n    if (carrier == null) {\n      return [];\n    }\n    return Object.keys(carrier);\n  },\n};\n\nexport const defaultTextMapSetter: TextMapSetter = {\n  set(carrier, key, value) {\n    if (carrier == null) {\n      return;\n    }\n\n    carrier[key] = value;\n  },\n};\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ROOT_CONTEXT } from './context';\nimport * as types from './types';\n\nexport class NoopContextManager implements types.ContextManager {\n  active(): types.Context {\n    return ROOT_CONTEXT;\n  }\n\n  with<A extends unknown[], F extends (...args: A) => ReturnType<F>>(\n    _context: types.Context,\n    fn: F,\n    thisArg?: ThisParameterType<F>,\n    ...args: A\n  ): ReturnType<F> {\n    return fn.call(thisArg, ...args);\n  }\n\n  bind<T>(_context: types.Context, target: T): T {\n    return target;\n  }\n\n  enable(): this {\n    return this;\n  }\n\n  disable(): this {\n    return this;\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NoopContextManager } from '../context/NoopContextManager';\nimport { Context, ContextManager } from '../context/types';\nimport {\n  getGlobal,\n  registerGlobal,\n  unregisterGlobal,\n} from '../internal/global-utils';\nimport { DiagAPI } from './diag';\n\nconst API_NAME = 'context';\nconst NOOP_CONTEXT_MANAGER = new NoopContextManager();\n\n/**\n * Singleton object which represents the entry point to the OpenTelemetry Context API\n */\nexport class ContextAPI {\n  private static _instance?: ContextAPI;\n\n  /** Empty private constructor prevents end users from constructing a new instance of the API */\n  private constructor() {}\n\n  /** Get the singleton instance of the Context API */\n  public static getInstance(): ContextAPI {\n    if (!this._instance) {\n      this._instance = new ContextAPI();\n    }\n\n    return this._instance;\n  }\n\n  /**\n   * Set the current context manager.\n   *\n   * @returns true if the context manager was successfully registered, else false\n   */\n  public setGlobalContextManager(contextManager: ContextManager): boolean {\n    return registerGlobal(API_NAME, contextManager, DiagAPI.instance());\n  }\n\n  /**\n   * Get the currently active context\n   */\n  public active(): Context {\n    return this._getContextManager().active();\n  }\n\n  /**\n   * Execute a function with an active context\n   *\n   * @param context context to be active during function execution\n   * @param fn function to execute in a context\n   * @param thisArg optional receiver to be used for calling fn\n   * @param args optional arguments forwarded to fn\n   */\n  public with<A extends unknown[], F extends (...args: A) => ReturnType<F>>(\n    context: Context,\n    fn: F,\n    thisArg?: ThisParameterType<F>,\n    ...args: A\n  ): ReturnType<F> {\n    return this._getContextManager().with(context, fn, thisArg, ...args);\n  }\n\n  /**\n   * Bind a context to a target function or event emitter\n   *\n   * @param context context to bind to the event emitter or function. Defaults to the currently active context\n   * @param target function or event emitter to bind\n   */\n  public bind<T>(context: Context, target: T): T {\n    return this._getContextManager().bind(context, target);\n  }\n\n  private _getContextManager(): ContextManager {\n    return getGlobal(API_NAME) || NOOP_CONTEXT_MANAGER;\n  }\n\n  /** Disable and remove the global context manager */\n  public disable() {\n    this._getContextManager().disable();\n    unregisterGlobal(API_NAME, DiagAPI.instance());\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport enum TraceFlags {\n  /** Represents no flag set. */\n  NONE = 0x0,\n  /** Bit to represent whether trace is sampled in trace flags. */\n  SAMPLED = 0x1 << 0,\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SpanContext } from './span_context';\nimport { TraceFlags } from './trace_flags';\n\nexport const INVALID_SPANID = '0000000000000000';\nexport const INVALID_TRACEID = '00000000000000000000000000000000';\nexport const INVALID_SPAN_CONTEXT: SpanContext = {\n  traceId: INVALID_TRACEID,\n  spanId: INVALID_SPANID,\n  traceFlags: TraceFlags.NONE,\n};\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Exception } from '../common/Exception';\nimport { TimeInput } from '../common/Time';\nimport { SpanAttributes } from './attributes';\nimport { INVALID_SPAN_CONTEXT } from './invalid-span-constants';\nimport { Span } from './span';\nimport { SpanContext } from './span_context';\nimport { SpanStatus } from './status';\n\n/**\n * The NonRecordingSpan is the default {@link Span} that is used when no Span\n * implementation is available. All operations are no-op including context\n * propagation.\n */\nexport class NonRecordingSpan implements Span {\n  constructor(\n    private readonly _spanContext: SpanContext = INVALID_SPAN_CONTEXT\n  ) {}\n\n  // Returns a SpanContext.\n  spanContext(): SpanContext {\n    return this._spanContext;\n  }\n\n  // By default does nothing\n  setAttribute(_key: string, _value: unknown): this {\n    return this;\n  }\n\n  // By default does nothing\n  setAttributes(_attributes: SpanAttributes): this {\n    return this;\n  }\n\n  // By default does nothing\n  addEvent(_name: string, _attributes?: SpanAttributes): this {\n    return this;\n  }\n\n  // By default does nothing\n  setStatus(_status: SpanStatus): this {\n    return this;\n  }\n\n  // By default does nothing\n  updateName(_name: string): this {\n    return this;\n  }\n\n  // By default does nothing\n  end(_endTime?: TimeInput): void {}\n\n  // isRecording always returns false for NonRecordingSpan.\n  isRecording(): boolean {\n    return false;\n  }\n\n  // By default does nothing\n  recordException(_exception: Exception, _time?: TimeInput): void {}\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { createContextKey } from '../context/context';\nimport { Context } from '../context/types';\nimport { Span } from './span';\nimport { SpanContext } from './span_context';\nimport { NonRecordingSpan } from './NonRecordingSpan';\nimport { ContextAPI } from '../api/context';\n\n/**\n * span key\n */\nconst SPAN_KEY = createContextKey('OpenTelemetry Context Key SPAN');\n\n/**\n * Return the span if one exists\n *\n * @param context context to get span from\n */\nexport function getSpan(context: Context): Span | undefined {\n  return (context.getValue(SPAN_KEY) as Span) || undefined;\n}\n\n/**\n * Gets the span from the current context, if one exists.\n */\nexport function getActiveSpan(): Span | undefined {\n  return getSpan(ContextAPI.getInstance().active());\n}\n\n/**\n * Set the span on a context\n *\n * @param context context to use as parent\n * @param span span to set active\n */\nexport function setSpan(context: Context, span: Span): Context {\n  return context.setValue(SPAN_KEY, span);\n}\n\n/**\n * Remove current span stored in the context\n *\n * @param context context to delete span from\n */\nexport function deleteSpan(context: Context): Context {\n  return context.deleteValue(SPAN_KEY);\n}\n\n/**\n * Wrap span context in a NoopSpan and set as span in a new\n * context\n *\n * @param context context to set active span on\n * @param spanContext span context to be wrapped\n */\nexport function setSpanContext(\n  context: Context,\n  spanContext: SpanContext\n): Context {\n  return setSpan(context, new NonRecordingSpan(spanContext));\n}\n\n/**\n * Get the span context of the span if it exists.\n *\n * @param context context to get values from\n */\nexport function getSpanContext(context: Context): SpanContext | undefined {\n  return getSpan(context)?.spanContext();\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { INVALID_SPANID, INVALID_TRACEID } from './invalid-span-constants';\nimport { NonRecordingSpan } from './NonRecordingSpan';\nimport { Span } from './span';\nimport { SpanContext } from './span_context';\n\nconst VALID_TRACEID_REGEX = /^([0-9a-f]{32})$/i;\nconst VALID_SPANID_REGEX = /^[0-9a-f]{16}$/i;\n\nexport function isValidTraceId(traceId: string): boolean {\n  return VALID_TRACEID_REGEX.test(traceId) && traceId !== INVALID_TRACEID;\n}\n\nexport function isValidSpanId(spanId: string): boolean {\n  return VALID_SPANID_REGEX.test(spanId) && spanId !== INVALID_SPANID;\n}\n\n/**\n * Returns true if this {@link SpanContext} is valid.\n * @return true if this {@link SpanContext} is valid.\n */\nexport function isSpanContextValid(spanContext: SpanContext): boolean {\n  return (\n    isValidTraceId(spanContext.traceId) && isValidSpanId(spanContext.spanId)\n  );\n}\n\n/**\n * Wrap the given {@link SpanContext} in a new non-recording {@link Span}\n *\n * @param spanContext span context to be wrapped\n * @returns a new non-recording {@link Span} with the provided context\n */\nexport function wrapSpanContext(spanContext: SpanContext): Span {\n  return new NonRecordingSpan(spanContext);\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ContextAPI } from '../api/context';\nimport { Context } from '../context/types';\nimport { getSpanContext, setSpan } from '../trace/context-utils';\nimport { NonRecordingSpan } from './NonRecordingSpan';\nimport { Span } from './span';\nimport { isSpanContextValid } from './spancontext-utils';\nimport { SpanOptions } from './SpanOptions';\nimport { SpanContext } from './span_context';\nimport { Tracer } from './tracer';\n\nconst contextApi = ContextAPI.getInstance();\n\n/**\n * No-op implementations of {@link Tracer}.\n */\nexport class NoopTracer implements Tracer {\n  // startSpan starts a noop span.\n  startSpan(\n    name: string,\n    options?: SpanOptions,\n    context = contextApi.active()\n  ): Span {\n    const root = Boolean(options?.root);\n    if (root) {\n      return new NonRecordingSpan();\n    }\n\n    const parentFromContext = context && getSpanContext(context);\n\n    if (\n      isSpanContext(parentFromContext) &&\n      isSpanContextValid(parentFromContext)\n    ) {\n      return new NonRecordingSpan(parentFromContext);\n    } else {\n      return new NonRecordingSpan();\n    }\n  }\n\n  startActiveSpan<F extends (span: Span) => ReturnType<F>>(\n    name: string,\n    fn: F\n  ): ReturnType<F>;\n  startActiveSpan<F extends (span: Span) => ReturnType<F>>(\n    name: string,\n    opts: SpanOptions | undefined,\n    fn: F\n  ): ReturnType<F>;\n  startActiveSpan<F extends (span: Span) => ReturnType<F>>(\n    name: string,\n    opts: SpanOptions | undefined,\n    ctx: Context | undefined,\n    fn: F\n  ): ReturnType<F>;\n  startActiveSpan<F extends (span: Span) => ReturnType<F>>(\n    name: string,\n    arg2?: F | SpanOptions,\n    arg3?: F | Context,\n    arg4?: F\n  ): ReturnType<F> | undefined {\n    let opts: SpanOptions | undefined;\n    let ctx: Context | undefined;\n    let fn: F;\n\n    if (arguments.length < 2) {\n      return;\n    } else if (arguments.length === 2) {\n      fn = arg2 as F;\n    } else if (arguments.length === 3) {\n      opts = arg2 as SpanOptions | undefined;\n      fn = arg3 as F;\n    } else {\n      opts = arg2 as SpanOptions | undefined;\n      ctx = arg3 as Context | undefined;\n      fn = arg4 as F;\n    }\n\n    const parentContext = ctx ?? contextApi.active();\n    const span = this.startSpan(name, opts, parentContext);\n    const contextWithSpanSet = setSpan(parentContext, span);\n\n    return contextApi.with(contextWithSpanSet, fn, undefined, span);\n  }\n}\n\nfunction isSpanContext(spanContext: any): spanContext is SpanContext {\n  return (\n    typeof spanContext === 'object' &&\n    typeof spanContext['spanId'] === 'string' &&\n    typeof spanContext['traceId'] === 'string' &&\n    typeof spanContext['traceFlags'] === 'number'\n  );\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Context } from '../context/types';\nimport { NoopTracer } from './NoopTracer';\nimport { Span } from './span';\nimport { SpanOptions } from './SpanOptions';\nimport { Tracer } from './tracer';\nimport { TracerOptions } from './tracer_options';\n\nconst NOOP_TRACER = new NoopTracer();\n\n/**\n * Proxy tracer provided by the proxy tracer provider\n */\nexport class ProxyTracer implements Tracer {\n  // When a real implementation is provided, this will be it\n  private _delegate?: Tracer;\n\n  constructor(\n    private _provider: TracerDelegator,\n    public readonly name: string,\n    public readonly version?: string,\n    public readonly options?: TracerOptions\n  ) {}\n\n  startSpan(name: string, options?: SpanOptions, context?: Context): Span {\n    return this._getTracer().startSpan(name, options, context);\n  }\n\n  startActiveSpan<F extends (span: Span) => unknown>(\n    _name: string,\n    _options: F | SpanOptions,\n    _context?: F | Context,\n    _fn?: F\n  ): ReturnType<F> {\n    const tracer = this._getTracer();\n    return Reflect.apply(tracer.startActiveSpan, tracer, arguments);\n  }\n\n  /**\n   * Try to get a tracer from the proxy tracer provider.\n   * If the proxy tracer provider has no delegate, return a noop tracer.\n   */\n  private _getTracer() {\n    if (this._delegate) {\n      return this._delegate;\n    }\n\n    const tracer = this._provider.getDelegateTracer(\n      this.name,\n      this.version,\n      this.options\n    );\n\n    if (!tracer) {\n      return NOOP_TRACER;\n    }\n\n    this._delegate = tracer;\n    return this._delegate;\n  }\n}\n\nexport interface TracerDelegator {\n  getDelegateTracer(\n    name: string,\n    version?: string,\n    options?: TracerOptions\n  ): Tracer | undefined;\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NoopTracer } from './NoopTracer';\nimport { Tracer } from './tracer';\nimport { TracerOptions } from './tracer_options';\nimport { TracerProvider } from './tracer_provider';\n\n/**\n * An implementation of the {@link TracerProvider} which returns an impotent\n * Tracer for all calls to `getTracer`.\n *\n * All operations are no-op.\n */\nexport class NoopTracerProvider implements TracerProvider {\n  getTracer(\n    _name?: string,\n    _version?: string,\n    _options?: TracerOptions\n  ): Tracer {\n    return new NoopTracer();\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Tracer } from './tracer';\nimport { TracerProvider } from './tracer_provider';\nimport { ProxyTracer } from './ProxyTracer';\nimport { NoopTracerProvider } from './NoopTracerProvider';\nimport { TracerOptions } from './tracer_options';\n\nconst NOOP_TRACER_PROVIDER = new NoopTracerProvider();\n\n/**\n * Tracer provider which provides {@link ProxyTracer}s.\n *\n * Before a delegate is set, tracers provided are NoOp.\n *   When a delegate is set, traces are provided from the delegate.\n *   When a delegate is set after tracers have already been provided,\n *   all tracers already provided will use the provided delegate implementation.\n */\nexport class ProxyTracerProvider implements TracerProvider {\n  private _delegate?: TracerProvider;\n\n  /**\n   * Get a {@link ProxyTracer}\n   */\n  getTracer(name: string, version?: string, options?: TracerOptions): Tracer {\n    return (\n      this.getDelegateTracer(name, version, options) ??\n      new ProxyTracer(this, name, version, options)\n    );\n  }\n\n  getDelegate(): TracerProvider {\n    return this._delegate ?? NOOP_TRACER_PROVIDER;\n  }\n\n  /**\n   * Set the delegate tracer provider\n   */\n  setDelegate(delegate: TracerProvider) {\n    this._delegate = delegate;\n  }\n\n  getDelegateTracer(\n    name: string,\n    version?: string,\n    options?: TracerOptions\n  ): Tracer | undefined {\n    return this._delegate?.getTracer(name, version, options);\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SpanAttributes } from './attributes';\nimport { TraceState } from './trace_state';\n\n/**\n * @deprecated use the one declared in @opentelemetry/sdk-trace-base instead.\n * A sampling decision that determines how a {@link Span} will be recorded\n * and collected.\n */\nexport enum SamplingDecision {\n  /**\n   * `Span.isRecording() === false`, span will not be recorded and all events\n   * and attributes will be dropped.\n   */\n  NOT_RECORD,\n  /**\n   * `Span.isRecording() === true`, but `Sampled` flag in {@link TraceFlags}\n   * MUST NOT be set.\n   */\n  RECORD,\n  /**\n   * `Span.isRecording() === true` AND `Sampled` flag in {@link TraceFlags}\n   * MUST be set.\n   */\n  RECORD_AND_SAMPLED,\n}\n\n/**\n * @deprecated use the one declared in @opentelemetry/sdk-trace-base instead.\n * A sampling result contains a decision for a {@link Span} and additional\n * attributes the sampler would like to added to the Span.\n */\nexport interface SamplingResult {\n  /**\n   * A sampling decision, refer to {@link SamplingDecision} for details.\n   */\n  decision: SamplingDecision;\n  /**\n   * The list of attributes returned by SamplingResult MUST be immutable.\n   * Caller may call {@link Sampler}.shouldSample any number of times and\n   * can safely cache the returned value.\n   */\n  attributes?: Readonly<SpanAttributes>;\n  /**\n   * A {@link TraceState} that will be associated with the {@link Span} through\n   * the new {@link SpanContext}. Samplers SHOULD return the TraceState from\n   * the passed-in {@link Context} if they do not intend to change it. Leaving\n   * the value undefined will also leave the TraceState unchanged.\n   */\n  traceState?: TraceState;\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport enum SpanKind {\n  /** Default value. Indicates that the span is used internally. */\n  INTERNAL = 0,\n\n  /**\n   * Indicates that the span covers server-side handling of an RPC or other\n   * remote request.\n   */\n  SERVER = 1,\n\n  /**\n   * Indicates that the span covers the client-side wrapper around an RPC or\n   * other remote request.\n   */\n  CLIENT = 2,\n\n  /**\n   * Indicates that the span describes producer sending a message to a\n   * broker. Unlike client and server, there is no direct critical path latency\n   * relationship between producer and consumer spans.\n   */\n  PRODUCER = 3,\n\n  /**\n   * Indicates that the span describes consumer receiving a message from a\n   * broker. Unlike client and server, there is no direct critical path latency\n   * relationship between producer and consumer spans.\n   */\n  CONSUMER = 4,\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport interface SpanStatus {\n  /** The status code of this message. */\n  code: SpanStatusCode;\n  /** A developer-facing error message. */\n  message?: string;\n}\n\n/**\n * An enumeration of status codes.\n */\nexport enum SpanStatusCode {\n  /**\n   * The default status.\n   */\n  UNSET = 0,\n  /**\n   * The operation has been validated by an Application developer or\n   * Operator to have completed successfully.\n   */\n  OK = 1,\n  /**\n   * The operation contains an error.\n   */\n  ERROR = 2,\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst VALID_KEY_CHAR_RANGE = '[_0-9a-z-*/]';\nconst VALID_KEY = `[a-z]${VALID_KEY_CHAR_RANGE}{0,255}`;\nconst VALID_VENDOR_KEY = `[a-z0-9]${VALID_KEY_CHAR_RANGE}{0,240}@[a-z]${VALID_KEY_CHAR_RANGE}{0,13}`;\nconst VALID_KEY_REGEX = new RegExp(`^(?:${VALID_KEY}|${VALID_VENDOR_KEY})$`);\nconst VALID_VALUE_BASE_REGEX = /^[ -~]{0,255}[!-~]$/;\nconst INVALID_VALUE_COMMA_EQUAL_REGEX = /,|=/;\n\n/**\n * Key is opaque string up to 256 characters printable. It MUST begin with a\n * lowercase letter, and can only contain lowercase letters a-z, digits 0-9,\n * underscores _, dashes -, asterisks *, and forward slashes /.\n * For multi-tenant vendor scenarios, an at sign (@) can be used to prefix the\n * vendor name. Vendors SHOULD set the tenant ID at the beginning of the key.\n * see https://www.w3.org/TR/trace-context/#key\n */\nexport function validateKey(key: string): boolean {\n  return VALID_KEY_REGEX.test(key);\n}\n\n/**\n * Value is opaque string up to 256 characters printable ASCII RFC0020\n * characters (i.e., the range 0x20 to 0x7E) except comma , and =.\n */\nexport function validateValue(value: string): boolean {\n  return (\n    VALID_VALUE_BASE_REGEX.test(value) &&\n    !INVALID_VALUE_COMMA_EQUAL_REGEX.test(value)\n  );\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { TraceState } from '../trace_state';\nimport { validateKey, validateValue } from './tracestate-validators';\n\nconst MAX_TRACE_STATE_ITEMS = 32;\nconst MAX_TRACE_STATE_LEN = 512;\nconst LIST_MEMBERS_SEPARATOR = ',';\nconst LIST_MEMBER_KEY_VALUE_SPLITTER = '=';\n\n/**\n * TraceState must be a class and not a simple object type because of the spec\n * requirement (https://www.w3.org/TR/trace-context/#tracestate-field).\n *\n * Here is the list of allowed mutations:\n * - New key-value pair should be added into the beginning of the list\n * - The value of any key can be updated. Modified keys MUST be moved to the\n * beginning of the list.\n */\nexport class TraceStateImpl implements TraceState {\n  private _internalState: Map<string, string> = new Map();\n\n  constructor(rawTraceState?: string) {\n    if (rawTraceState) this._parse(rawTraceState);\n  }\n\n  set(key: string, value: string): TraceStateImpl {\n    // TODO: Benchmark the different approaches(map vs list) and\n    // use the faster one.\n    const traceState = this._clone();\n    if (traceState._internalState.has(key)) {\n      traceState._internalState.delete(key);\n    }\n    traceState._internalState.set(key, value);\n    return traceState;\n  }\n\n  unset(key: string): TraceStateImpl {\n    const traceState = this._clone();\n    traceState._internalState.delete(key);\n    return traceState;\n  }\n\n  get(key: string): string | undefined {\n    return this._internalState.get(key);\n  }\n\n  serialize(): string {\n    return this._keys()\n      .reduce((agg: string[], key) => {\n        agg.push(key + LIST_MEMBER_KEY_VALUE_SPLITTER + this.get(key));\n        return agg;\n      }, [])\n      .join(LIST_MEMBERS_SEPARATOR);\n  }\n\n  private _parse(rawTraceState: string) {\n    if (rawTraceState.length > MAX_TRACE_STATE_LEN) return;\n    this._internalState = rawTraceState\n      .split(LIST_MEMBERS_SEPARATOR)\n      .reverse() // Store in reverse so new keys (.set(...)) will be placed at the beginning\n      .reduce((agg: Map<string, string>, part: string) => {\n        const listMember = part.trim(); // Optional Whitespace (OWS) handling\n        const i = listMember.indexOf(LIST_MEMBER_KEY_VALUE_SPLITTER);\n        if (i !== -1) {\n          const key = listMember.slice(0, i);\n          const value = listMember.slice(i + 1, part.length);\n          if (validateKey(key) && validateValue(value)) {\n            agg.set(key, value);\n          } else {\n            // TODO: Consider to add warning log\n          }\n        }\n        return agg;\n      }, new Map());\n\n    // Because of the reverse() requirement, trunc must be done after map is created\n    if (this._internalState.size > MAX_TRACE_STATE_ITEMS) {\n      this._internalState = new Map(\n        Array.from(this._internalState.entries())\n          .reverse() // Use reverse same as original tracestate parse chain\n          .slice(0, MAX_TRACE_STATE_ITEMS)\n      );\n    }\n  }\n\n  private _keys(): string[] {\n    return Array.from(this._internalState.keys()).reverse();\n  }\n\n  private _clone(): TraceStateImpl {\n    const traceState = new TraceStateImpl();\n    traceState._internalState = new Map(this._internalState);\n    return traceState;\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { TraceState } from '../trace_state';\nimport { TraceStateImpl } from './tracestate-impl';\n\nexport function createTraceState(rawTraceState?: string): TraceState {\n  return new TraceStateImpl(rawTraceState);\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// Split module-level variable definition into separate files to allow\n// tree-shaking on each api instance.\nimport { ContextAPI } from './api/context';\n/** Entrypoint for context API */\nexport const context = ContextAPI.getInstance();\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// Split module-level variable definition into separate files to allow\n// tree-shaking on each api instance.\nimport { DiagAPI } from './api/diag';\n/**\n * Entrypoint for Diag API.\n * Defines Diagnostic handler used for internal diagnostic logging operations.\n * The default provides a Noop DiagLogger implementation which may be changed via the\n * diag.setLogger(logger: DiagLogger) function.\n */\nexport const diag = DiagAPI.instance();\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Meter, MeterOptions } from './Meter';\nimport { MeterProvider } from './MeterProvider';\nimport { NOOP_METER } from './NoopMeter';\n\n/**\n * An implementation of the {@link MeterProvider} which returns an impotent Meter\n * for all calls to `getMeter`\n */\nexport class NoopMeterProvider implements MeterProvider {\n  getMeter(_name: string, _version?: string, _options?: MeterOptions): Meter {\n    return NOOP_METER;\n  }\n}\n\nexport const NOOP_METER_PROVIDER = new NoopMeterProvider();\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Meter, MeterOptions } from '../metrics/Meter';\nimport { MeterProvider } from '../metrics/MeterProvider';\nimport { NOOP_METER_PROVIDER } from '../metrics/NoopMeterProvider';\nimport {\n  getGlobal,\n  registerGlobal,\n  unregisterGlobal,\n} from '../internal/global-utils';\nimport { DiagAPI } from './diag';\n\nconst API_NAME = 'metrics';\n\n/**\n * Singleton object which represents the entry point to the OpenTelemetry Metrics API\n */\nexport class MetricsAPI {\n  private static _instance?: MetricsAPI;\n\n  /** Empty private constructor prevents end users from constructing a new instance of the API */\n  private constructor() {}\n\n  /** Get the singleton instance of the Metrics API */\n  public static getInstance(): MetricsAPI {\n    if (!this._instance) {\n      this._instance = new MetricsAPI();\n    }\n\n    return this._instance;\n  }\n\n  /**\n   * Set the current global meter provider.\n   * Returns true if the meter provider was successfully registered, else false.\n   */\n  public setGlobalMeterProvider(provider: MeterProvider): boolean {\n    return registerGlobal(API_NAME, provider, DiagAPI.instance());\n  }\n\n  /**\n   * Returns the global meter provider.\n   */\n  public getMeterProvider(): MeterProvider {\n    return getGlobal(API_NAME) || NOOP_METER_PROVIDER;\n  }\n\n  /**\n   * Returns a meter from the global meter provider.\n   */\n  public getMeter(\n    name: string,\n    version?: string,\n    options?: MeterOptions\n  ): Meter {\n    return this.getMeterProvider().getMeter(name, version, options);\n  }\n\n  /** Remove the global meter provider */\n  public disable(): void {\n    unregisterGlobal(API_NAME, DiagAPI.instance());\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// Split module-level variable definition into separate files to allow\n// tree-shaking on each api instance.\nimport { MetricsAPI } from './api/metrics';\n/** Entrypoint for metrics API */\nexport const metrics = MetricsAPI.getInstance();\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Context } from '../context/types';\nimport { TextMapPropagator } from './TextMapPropagator';\n\n/**\n * No-op implementations of {@link TextMapPropagator}.\n */\nexport class NoopTextMapPropagator implements TextMapPropagator {\n  /** Noop inject function does nothing */\n  inject(_context: Context, _carrier: unknown): void {}\n  /** Noop extract function does nothing and returns the input context */\n  extract(context: Context, _carrier: unknown): Context {\n    return context;\n  }\n  fields(): string[] {\n    return [];\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ContextAPI } from '../api/context';\nimport { createContextKey } from '../context/context';\nimport { Context } from '../context/types';\nimport { Baggage } from './types';\n\n/**\n * Baggage key\n */\nconst BAGGAGE_KEY = createContextKey('OpenTelemetry Baggage Key');\n\n/**\n * Retrieve the current baggage from the given context\n *\n * @param {Context} Context that manage all context values\n * @returns {Baggage} Extracted baggage from the context\n */\nexport function getBaggage(context: Context): Baggage | undefined {\n  return (context.getValue(BAGGAGE_KEY) as Baggage) || undefined;\n}\n\n/**\n * Retrieve the current baggage from the active/current context\n *\n * @returns {Baggage} Extracted baggage from the context\n */\nexport function getActiveBaggage(): Baggage | undefined {\n  return getBaggage(ContextAPI.getInstance().active());\n}\n\n/**\n * Store a baggage in the given context\n *\n * @param {Context} Context that manage all context values\n * @param {Baggage} baggage that will be set in the actual context\n */\nexport function setBaggage(context: Context, baggage: Baggage): Context {\n  return context.setValue(BAGGAGE_KEY, baggage);\n}\n\n/**\n * Delete the baggage stored in the given context\n *\n * @param {Context} Context that manage all context values\n */\nexport function deleteBaggage(context: Context): Context {\n  return context.deleteValue(BAGGAGE_KEY);\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Context } from '../context/types';\nimport {\n  getGlobal,\n  registerGlobal,\n  unregisterGlobal,\n} from '../internal/global-utils';\nimport { NoopTextMapPropagator } from '../propagation/NoopTextMapPropagator';\nimport {\n  defaultTextMapGetter,\n  defaultTextMapSetter,\n  TextMapGetter,\n  TextMapPropagator,\n  TextMapSetter,\n} from '../propagation/TextMapPropagator';\nimport {\n  getBaggage,\n  getActiveBaggage,\n  setBaggage,\n  deleteBaggage,\n} from '../baggage/context-helpers';\nimport { createBaggage } from '../baggage/utils';\nimport { DiagAPI } from './diag';\n\nconst API_NAME = 'propagation';\nconst NOOP_TEXT_MAP_PROPAGATOR = new NoopTextMapPropagator();\n\n/**\n * Singleton object which represents the entry point to the OpenTelemetry Propagation API\n */\nexport class PropagationAPI {\n  private static _instance?: PropagationAPI;\n\n  /** Empty private constructor prevents end users from constructing a new instance of the API */\n  private constructor() {}\n\n  /** Get the singleton instance of the Propagator API */\n  public static getInstance(): PropagationAPI {\n    if (!this._instance) {\n      this._instance = new PropagationAPI();\n    }\n\n    return this._instance;\n  }\n\n  /**\n   * Set the current propagator.\n   *\n   * @returns true if the propagator was successfully registered, else false\n   */\n  public setGlobalPropagator(propagator: TextMapPropagator): boolean {\n    return registerGlobal(API_NAME, propagator, DiagAPI.instance());\n  }\n\n  /**\n   * Inject context into a carrier to be propagated inter-process\n   *\n   * @param context Context carrying tracing data to inject\n   * @param carrier carrier to inject context into\n   * @param setter Function used to set values on the carrier\n   */\n  public inject<Carrier>(\n    context: Context,\n    carrier: Carrier,\n    setter: TextMapSetter<Carrier> = defaultTextMapSetter\n  ): void {\n    return this._getGlobalPropagator().inject(context, carrier, setter);\n  }\n\n  /**\n   * Extract context from a carrier\n   *\n   * @param context Context which the newly created context will inherit from\n   * @param carrier Carrier to extract context from\n   * @param getter Function used to extract keys from a carrier\n   */\n  public extract<Carrier>(\n    context: Context,\n    carrier: Carrier,\n    getter: TextMapGetter<Carrier> = defaultTextMapGetter\n  ): Context {\n    return this._getGlobalPropagator().extract(context, carrier, getter);\n  }\n\n  /**\n   * Return a list of all fields which may be used by the propagator.\n   */\n  public fields(): string[] {\n    return this._getGlobalPropagator().fields();\n  }\n\n  /** Remove the global propagator */\n  public disable() {\n    unregisterGlobal(API_NAME, DiagAPI.instance());\n  }\n\n  public createBaggage = createBaggage;\n\n  public getBaggage = getBaggage;\n\n  public getActiveBaggage = getActiveBaggage;\n\n  public setBaggage = setBaggage;\n\n  public deleteBaggage = deleteBaggage;\n\n  private _getGlobalPropagator(): TextMapPropagator {\n    return getGlobal(API_NAME) || NOOP_TEXT_MAP_PROPAGATOR;\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// Split module-level variable definition into separate files to allow\n// tree-shaking on each api instance.\nimport { PropagationAPI } from './api/propagation';\n/** Entrypoint for propagation API */\nexport const propagation = PropagationAPI.getInstance();\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  getGlobal,\n  registerGlobal,\n  unregisterGlobal,\n} from '../internal/global-utils';\nimport { ProxyTracerProvider } from '../trace/ProxyTracerProvider';\nimport {\n  isSpanContextValid,\n  wrapSpanContext,\n} from '../trace/spancontext-utils';\nimport { Tracer } from '../trace/tracer';\nimport { TracerProvider } from '../trace/tracer_provider';\nimport {\n  deleteSpan,\n  getActiveSpan,\n  getSpan,\n  getSpanContext,\n  setSpan,\n  setSpanContext,\n} from '../trace/context-utils';\nimport { DiagAPI } from './diag';\n\nconst API_NAME = 'trace';\n\n/**\n * Singleton object which represents the entry point to the OpenTelemetry Tracing API\n */\nexport class TraceAPI {\n  private static _instance?: TraceAPI;\n\n  private _proxyTracerProvider = new ProxyTracerProvider();\n\n  /** Empty private constructor prevents end users from constructing a new instance of the API */\n  private constructor() {}\n\n  /** Get the singleton instance of the Trace API */\n  public static getInstance(): TraceAPI {\n    if (!this._instance) {\n      this._instance = new TraceAPI();\n    }\n\n    return this._instance;\n  }\n\n  /**\n   * Set the current global tracer.\n   *\n   * @returns true if the tracer provider was successfully registered, else false\n   */\n  public setGlobalTracerProvider(provider: TracerProvider): boolean {\n    const success = registerGlobal(\n      API_NAME,\n      this._proxyTracerProvider,\n      DiagAPI.instance()\n    );\n    if (success) {\n      this._proxyTracerProvider.setDelegate(provider);\n    }\n    return success;\n  }\n\n  /**\n   * Returns the global tracer provider.\n   */\n  public getTracerProvider(): TracerProvider {\n    return getGlobal(API_NAME) || this._proxyTracerProvider;\n  }\n\n  /**\n   * Returns a tracer from the global tracer provider.\n   */\n  public getTracer(name: string, version?: string): Tracer {\n    return this.getTracerProvider().getTracer(name, version);\n  }\n\n  /** Remove the global tracer provider */\n  public disable() {\n    unregisterGlobal(API_NAME, DiagAPI.instance());\n    this._proxyTracerProvider = new ProxyTracerProvider();\n  }\n\n  public wrapSpanContext = wrapSpanContext;\n\n  public isSpanContextValid = isSpanContextValid;\n\n  public deleteSpan = deleteSpan;\n\n  public getSpan = getSpan;\n\n  public getActiveSpan = getActiveSpan;\n\n  public getSpanContext = getSpanContext;\n\n  public setSpan = setSpan;\n\n  public setSpanContext = setSpanContext;\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// Split module-level variable definition into separate files to allow\n// tree-shaking on each api instance.\nimport { TraceAPI } from './api/trace';\n/** Entrypoint for trace API */\nexport const trace = TraceAPI.getInstance();\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport { BaggageEntry, BaggageEntryMetadata, Baggage } from './baggage/types';\nexport { baggageEntryMetadataFromString } from './baggage/utils';\nexport { Exception } from './common/Exception';\nexport { HrTime, TimeInput } from './common/Time';\nexport { Attributes, AttributeValue } from './common/Attributes';\n\n// Context APIs\nexport { createContextKey, ROOT_CONTEXT } from './context/context';\nexport { Context, ContextManager } from './context/types';\nexport type { ContextAPI } from './api/context';\n\n// Diag APIs\nexport { DiagConsoleLogger } from './diag/consoleLogger';\nexport {\n  DiagLogFunction,\n  DiagLogger,\n  DiagLogLevel,\n  ComponentLoggerOptions,\n  DiagLoggerOptions,\n} from './diag/types';\nexport type { DiagAPI } from './api/diag';\n\n// Metrics APIs\nexport { createNoopMeter } from './metrics/NoopMeter';\nexport { MeterOptions, Meter } from './metrics/Meter';\nexport { MeterProvider } from './metrics/MeterProvider';\nexport {\n  ValueType,\n  Counter,\n  Histogram,\n  MetricOptions,\n  Observable,\n  ObservableCounter,\n  ObservableGauge,\n  ObservableUpDownCounter,\n  UpDownCounter,\n  BatchObservableCallback,\n  MetricAttributes,\n  MetricAttributeValue,\n  ObservableCallback,\n} from './metrics/Metric';\nexport {\n  BatchObservableResult,\n  ObservableResult,\n} from './metrics/ObservableResult';\nexport type { MetricsAPI } from './api/metrics';\n\n// Propagation APIs\nexport {\n  TextMapPropagator,\n  TextMapSetter,\n  TextMapGetter,\n  defaultTextMapGetter,\n  defaultTextMapSetter,\n} from './propagation/TextMapPropagator';\nexport type { PropagationAPI } from './api/propagation';\n\n// Trace APIs\nexport { SpanAttributes, SpanAttributeValue } from './trace/attributes';\nexport { Link } from './trace/link';\nexport { ProxyTracer, TracerDelegator } from './trace/ProxyTracer';\nexport { ProxyTracerProvider } from './trace/ProxyTracerProvider';\nexport { Sampler } from './trace/Sampler';\nexport { SamplingDecision, SamplingResult } from './trace/SamplingResult';\nexport { SpanContext } from './trace/span_context';\nexport { SpanKind } from './trace/span_kind';\nexport { Span } from './trace/span';\nexport { SpanOptions } from './trace/SpanOptions';\nexport { SpanStatus, SpanStatusCode } from './trace/status';\nexport { TraceFlags } from './trace/trace_flags';\nexport { TraceState } from './trace/trace_state';\nexport { createTraceState } from './trace/internal/utils';\nexport { TracerProvider } from './trace/tracer_provider';\nexport { Tracer } from './trace/tracer';\nexport { TracerOptions } from './trace/tracer_options';\nexport {\n  isSpanContextValid,\n  isValidTraceId,\n  isValidSpanId,\n} from './trace/spancontext-utils';\nexport {\n  INVALID_SPANID,\n  INVALID_TRACEID,\n  INVALID_SPAN_CONTEXT,\n} from './trace/invalid-span-constants';\nexport type { TraceAPI } from './api/trace';\n\n// Split module-level variable definition into separate files to allow\n// tree-shaking on each api instance.\nimport { context } from './context-api';\nimport { diag } from './diag-api';\nimport { metrics } from './metrics-api';\nimport { propagation } from './propagation-api';\nimport { trace } from './trace-api';\n\n// Named export.\nexport { context, diag, metrics, propagation, trace };\n// Default export.\nexport default {\n  context,\n  diag,\n  metrics,\n  propagation,\n  trace,\n};\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { MetricAttributes } from '@opentelemetry/api';\nimport { InstrumentationScope } from '@opentelemetry/core';\n\nexport type Maybe<T> = T | undefined;\n\nexport function isNotNullish<T>(item: Maybe<T>): item is T {\n  return item !== undefined && item !== null;\n}\n\n/**\n * Converting the unordered attributes into unique identifier string.\n * @param attributes user provided unordered MetricAttributes.\n */\nexport function hashAttributes(attributes: MetricAttributes): string {\n  let keys = Object.keys(attributes);\n  if (keys.length === 0) return '';\n\n  // Return a string that is stable on key orders.\n  keys = keys.sort();\n  return JSON.stringify(keys.map(key => [key, attributes[key]]));\n}\n\n/**\n * Converting the instrumentation scope object to a unique identifier string.\n * @param instrumentationScope\n */\nexport function instrumentationScopeId(\n  instrumentationScope: InstrumentationScope\n): string {\n  return `${instrumentationScope.name}:${instrumentationScope.version ?? ''}:${\n    instrumentationScope.schemaUrl ?? ''\n  }`;\n}\n\n/**\n * Error that is thrown on timeouts.\n */\nexport class TimeoutError extends Error {\n  constructor(message?: string) {\n    super(message);\n\n    // manually adjust prototype to retain `instanceof` functionality when targeting ES5, see:\n    // https://github.com/Microsoft/TypeScript-wiki/blob/main/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n    Object.setPrototypeOf(this, TimeoutError.prototype);\n  }\n}\n\n/**\n * Adds a timeout to a promise and rejects if the specified timeout has elapsed. Also rejects if the specified promise\n * rejects, and resolves if the specified promise resolves.\n *\n * <p> NOTE: this operation will continue even after it throws a {@link TimeoutError}.\n *\n * @param promise promise to use with timeout.\n * @param timeout the timeout in milliseconds until the returned promise is rejected.\n */\nexport function callWithTimeout<T>(\n  promise: Promise<T>,\n  timeout: number\n): Promise<T> {\n  let timeoutHandle: ReturnType<typeof setTimeout>;\n\n  const timeoutPromise = new Promise<never>(function timeoutFunction(\n    _resolve,\n    reject\n  ) {\n    timeoutHandle = setTimeout(function timeoutHandler() {\n      reject(new TimeoutError('Operation timed out.'));\n    }, timeout);\n  });\n\n  return Promise.race([promise, timeoutPromise]).then(\n    result => {\n      clearTimeout(timeoutHandle);\n      return result;\n    },\n    reason => {\n      clearTimeout(timeoutHandle);\n      throw reason;\n    }\n  );\n}\n\nexport interface PromiseAllSettledFulfillResult<T> {\n  status: 'fulfilled';\n  value: T;\n}\n\nexport interface PromiseAllSettledRejectionResult {\n  status: 'rejected';\n  reason: unknown;\n}\n\nexport type PromiseAllSettledResult<T> =\n  | PromiseAllSettledFulfillResult<T>\n  | PromiseAllSettledRejectionResult;\n\n/**\n * Node.js v12.9 lower and browser compatible `Promise.allSettled`.\n */\nexport async function PromiseAllSettled<T>(\n  promises: Promise<T>[]\n): Promise<PromiseAllSettledResult<T>[]> {\n  return Promise.all(\n    promises.map<Promise<PromiseAllSettledResult<T>>>(async p => {\n      try {\n        const ret = await p;\n        return {\n          status: 'fulfilled',\n          value: ret,\n        };\n      } catch (e) {\n        return {\n          status: 'rejected',\n          reason: e,\n        };\n      }\n    })\n  );\n}\n\nexport function isPromiseAllSettledRejectionResult(\n  it: PromiseAllSettledResult<unknown>\n): it is PromiseAllSettledRejectionResult {\n  return it.status === 'rejected';\n}\n\n/**\n * Node.js v11.0 lower and browser compatible `Array.prototype.flatMap`.\n */\nexport function FlatMap<T, R>(arr: T[], fn: (it: T) => R[]): R[] {\n  const result: R[] = [];\n  arr.forEach(it => {\n    result.push(...fn(it));\n  });\n  return result;\n}\n\nexport function setEquals(lhs: Set<unknown>, rhs: Set<unknown>): boolean {\n  if (lhs.size !== rhs.size) {\n    return false;\n  }\n  for (const item of lhs) {\n    if (!rhs.has(item)) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * Binary search the sorted array to the find lower bound for the value.\n * @param arr\n * @param value\n * @returns\n */\nexport function binarySearchLB(arr: number[], value: number): number {\n  let lo = 0;\n  let hi = arr.length - 1;\n\n  while (hi - lo > 1) {\n    const mid = Math.trunc((hi + lo) / 2);\n    if (arr[mid] <= value) {\n      lo = mid;\n    } else {\n      hi = mid - 1;\n    }\n  }\n\n  if (arr[hi] <= value) {\n    return hi;\n  } else if (arr[lo] <= value) {\n    return lo;\n  }\n  return -1;\n}\n\nexport function equalsCaseInsensitive(lhs: string, rhs: string): boolean {\n  return lhs.toLowerCase() === rhs.toLowerCase();\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { HrTime, MetricAttributes } from '@opentelemetry/api';\nimport { AggregationTemporality } from '../export/AggregationTemporality';\nimport { MetricData } from '../export/MetricData';\nimport { InstrumentDescriptor } from '../InstrumentDescriptor';\nimport { Maybe } from '../utils';\n\n/** The kind of aggregator. */\nexport enum AggregatorKind {\n  DROP,\n  SUM,\n  LAST_VALUE,\n  HISTOGRAM,\n  EXPONENTIAL_HISTOGRAM,\n}\n\n/** DataPoint value type for SumAggregation. */\nexport type Sum = number;\n\n/** DataPoint value type for LastValueAggregation. */\nexport type LastValue = number;\n\n/** DataPoint value type for HistogramAggregation. */\nexport interface Histogram {\n  /**\n   * Buckets are implemented using two different arrays:\n   *  - boundaries: contains every finite bucket boundary, which are inclusive lower bounds\n   *  - counts: contains event counts for each bucket\n   *\n   * Note that we'll always have n+1 buckets, where n is the number of boundaries.\n   * This is because we need to count events that are below the lowest boundary.\n   *\n   * Example: if we measure the values: [5, 30, 5, 40, 5, 15, 15, 15, 25]\n   *  with the boundaries [ 10, 20, 30 ], we will have the following state:\n   *\n   * buckets: {\n   *\tboundaries: [10, 20, 30],\n   *\tcounts: [3, 3, 1, 2],\n   * }\n   */\n  buckets: {\n    boundaries: number[];\n    counts: number[];\n  };\n  sum?: number;\n  count: number;\n  min?: number;\n  max?: number;\n}\n\n/** DataPoint value type for ExponentialHistogramAggregation. */\nexport interface ExponentialHistogram {\n  count: number;\n  sum?: number;\n  scale: number;\n  zeroCount: number;\n  positive: {\n    offset: number;\n    bucketCounts: number[];\n  };\n  negative: {\n    offset: number;\n    bucketCounts: number[];\n  };\n  min?: number;\n  max?: number;\n}\n\n/**\n * An Aggregator accumulation state.\n */\nexport interface Accumulation {\n  setStartTime(startTime: HrTime): void;\n  record(value: number): void;\n}\n\nexport type AccumulationRecord<T> = [MetricAttributes, T];\n\n/**\n * Base interface for aggregators. Aggregators are responsible for holding\n * aggregated values and taking a snapshot of these values upon export.\n */\nexport interface Aggregator<T> {\n  /** The kind of the aggregator. */\n  kind: AggregatorKind;\n\n  /**\n   * Create a clean state of accumulation.\n   */\n  createAccumulation(startTime: HrTime): T;\n\n  /**\n   * Returns the result of the merge of the given accumulations.\n   *\n   * This should always assume that the accumulations do not overlap and merge together for a new\n   * cumulative report.\n   *\n   * @param previous the previously captured accumulation\n   * @param delta the newly captured (delta) accumulation\n   * @returns the result of the merge of the given accumulations\n   */\n  merge(previous: T, delta: T): T;\n\n  /**\n   * Returns a new DELTA aggregation by comparing two cumulative measurements.\n   *\n   * @param previous the previously captured accumulation\n   * @param current the newly captured (cumulative) accumulation\n   * @returns The resulting delta accumulation\n   */\n  diff(previous: T, current: T): T;\n\n  /**\n   * Returns the {@link MetricData} that this {@link Aggregator} will produce.\n   *\n   * @param descriptor the metric instrument descriptor.\n   * @param aggregationTemporality the temporality of the resulting {@link MetricData}\n   * @param accumulationByAttributes the array of attributes and accumulation pairs.\n   * @param endTime the end time of the metric data.\n   * @return the {@link MetricData} that this {@link Aggregator} will produce.\n   */\n  toMetricData(\n    descriptor: InstrumentDescriptor,\n    aggregationTemporality: AggregationTemporality,\n    accumulationByAttributes: AccumulationRecord<T>[],\n    endTime: HrTime\n  ): Maybe<MetricData>;\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { HrTime } from '@opentelemetry/api';\nimport { AggregationTemporality } from '../export/AggregationTemporality';\nimport { MetricData } from '../export/MetricData';\nimport { InstrumentDescriptor } from '../InstrumentDescriptor';\nimport { Maybe } from '../utils';\nimport { AggregatorKind, Aggregator, AccumulationRecord } from './types';\n\n/** Basic aggregator for None which keeps no recorded value. */\nexport class DropAggregator implements Aggregator<undefined> {\n  kind: AggregatorKind.DROP = AggregatorKind.DROP;\n\n  createAccumulation() {\n    return undefined;\n  }\n\n  merge(_previous: undefined, _delta: undefined) {\n    return undefined;\n  }\n\n  diff(_previous: undefined, _current: undefined) {\n    return undefined;\n  }\n\n  toMetricData(\n    _descriptor: InstrumentDescriptor,\n    _aggregationTemporality: AggregationTemporality,\n    _accumulationByAttributes: AccumulationRecord<undefined>[],\n    _endTime: HrTime\n  ): Maybe<MetricData> {\n    return undefined;\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { MetricOptions, ValueType, diag } from '@opentelemetry/api';\nimport { View } from './view/View';\nimport { equalsCaseInsensitive } from './utils';\n\n/**\n * Supported types of metric instruments.\n */\nexport enum InstrumentType {\n  COUNTER = 'COUNTER',\n  HISTOGRAM = 'HISTOGRAM',\n  UP_DOWN_COUNTER = 'UP_DOWN_COUNTER',\n  OBSERVABLE_COUNTER = 'OBSERVABLE_COUNTER',\n  OBSERVABLE_GAUGE = 'OBSERVABLE_GAUGE',\n  OBSERVABLE_UP_DOWN_COUNTER = 'OBSERVABLE_UP_DOWN_COUNTER',\n}\n\n/**\n * An interface describing the instrument.\n */\nexport interface InstrumentDescriptor {\n  readonly name: string;\n  readonly description: string;\n  readonly unit: string;\n  readonly type: InstrumentType;\n  readonly valueType: ValueType;\n}\n\nexport function createInstrumentDescriptor(\n  name: string,\n  type: InstrumentType,\n  options?: MetricOptions\n): InstrumentDescriptor {\n  if (!isValidName(name)) {\n    diag.warn(\n      `Invalid metric name: \"${name}\". The metric name should be a ASCII string with a length no greater than 255 characters.`\n    );\n  }\n  return {\n    name,\n    type,\n    description: options?.description ?? '',\n    unit: options?.unit ?? '',\n    valueType: options?.valueType ?? ValueType.DOUBLE,\n  };\n}\n\nexport function createInstrumentDescriptorWithView(\n  view: View,\n  instrument: InstrumentDescriptor\n): InstrumentDescriptor {\n  return {\n    name: view.name ?? instrument.name,\n    description: view.description ?? instrument.description,\n    type: instrument.type,\n    unit: instrument.unit,\n    valueType: instrument.valueType,\n  };\n}\n\nexport function isDescriptorCompatibleWith(\n  descriptor: InstrumentDescriptor,\n  otherDescriptor: InstrumentDescriptor\n) {\n  // Names are case-insensitive strings.\n  return (\n    equalsCaseInsensitive(descriptor.name, otherDescriptor.name) &&\n    descriptor.unit === otherDescriptor.unit &&\n    descriptor.type === otherDescriptor.type &&\n    descriptor.valueType === otherDescriptor.valueType\n  );\n}\n\n// ASCII string with a length no greater than 255 characters.\n// NB: the first character counted separately from the rest.\nconst NAME_REGEXP = /^[a-z][a-z0-9_.\\-/]{0,254}$/i;\nexport function isValidName(name: string): boolean {\n  return name.match(NAME_REGEXP) != null;\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Accumulation,\n  AccumulationRecord,\n  Aggregator,\n  AggregatorKind,\n} from './types';\nimport { DataPointType, HistogramMetricData } from '../export/MetricData';\nimport { HrTime } from '@opentelemetry/api';\nimport { InstrumentDescriptor, InstrumentType } from '../InstrumentDescriptor';\nimport { binarySearchLB, Maybe } from '../utils';\nimport { AggregationTemporality } from '../export/AggregationTemporality';\n\n/**\n * Internal value type for HistogramAggregation.\n * Differs from the exported type as undefined sum/min/max complicate arithmetic\n * performed by this aggregation, but are required to be undefined in the exported types.\n */\ninterface InternalHistogram {\n  buckets: {\n    boundaries: number[];\n    counts: number[];\n  };\n  sum: number;\n  count: number;\n  hasMinMax: boolean;\n  min: number;\n  max: number;\n}\n\nfunction createNewEmptyCheckpoint(boundaries: number[]): InternalHistogram {\n  const counts = boundaries.map(() => 0);\n  counts.push(0);\n  return {\n    buckets: {\n      boundaries,\n      counts,\n    },\n    sum: 0,\n    count: 0,\n    hasMinMax: false,\n    min: Infinity,\n    max: -Infinity,\n  };\n}\n\nexport class HistogramAccumulation implements Accumulation {\n  constructor(\n    public startTime: HrTime,\n    private readonly _boundaries: number[],\n    private _recordMinMax = true,\n    private _current: InternalHistogram = createNewEmptyCheckpoint(_boundaries)\n  ) {}\n\n  record(value: number): void {\n    this._current.count += 1;\n    this._current.sum += value;\n\n    if (this._recordMinMax) {\n      this._current.min = Math.min(value, this._current.min);\n      this._current.max = Math.max(value, this._current.max);\n      this._current.hasMinMax = true;\n    }\n\n    const idx = binarySearchLB(this._boundaries, value);\n    this._current.buckets.counts[idx + 1] += 1;\n  }\n\n  setStartTime(startTime: HrTime): void {\n    this.startTime = startTime;\n  }\n\n  toPointValue(): InternalHistogram {\n    return this._current;\n  }\n}\n\n/**\n * Basic aggregator which observes events and counts them in pre-defined buckets\n * and provides the total sum and count of all observations.\n */\nexport class HistogramAggregator implements Aggregator<HistogramAccumulation> {\n  public kind: AggregatorKind.HISTOGRAM = AggregatorKind.HISTOGRAM;\n\n  /**\n   * @param _boundaries sorted upper bounds of recorded values.\n   * @param _recordMinMax If set to true, min and max will be recorded. Otherwise, min and max will not be recorded.\n   */\n  constructor(\n    private readonly _boundaries: number[],\n    private readonly _recordMinMax: boolean\n  ) {}\n\n  createAccumulation(startTime: HrTime) {\n    return new HistogramAccumulation(\n      startTime,\n      this._boundaries,\n      this._recordMinMax\n    );\n  }\n\n  /**\n   * Return the result of the merge of two histogram accumulations. As long as one Aggregator\n   * instance produces all Accumulations with constant boundaries we don't need to worry about\n   * merging accumulations with different boundaries.\n   */\n  merge(\n    previous: HistogramAccumulation,\n    delta: HistogramAccumulation\n  ): HistogramAccumulation {\n    const previousValue = previous.toPointValue();\n    const deltaValue = delta.toPointValue();\n\n    const previousCounts = previousValue.buckets.counts;\n    const deltaCounts = deltaValue.buckets.counts;\n\n    const mergedCounts = new Array(previousCounts.length);\n    for (let idx = 0; idx < previousCounts.length; idx++) {\n      mergedCounts[idx] = previousCounts[idx] + deltaCounts[idx];\n    }\n\n    let min = Infinity;\n    let max = -Infinity;\n\n    if (this._recordMinMax) {\n      if (previousValue.hasMinMax && deltaValue.hasMinMax) {\n        min = Math.min(previousValue.min, deltaValue.min);\n        max = Math.max(previousValue.max, deltaValue.max);\n      } else if (previousValue.hasMinMax) {\n        min = previousValue.min;\n        max = previousValue.max;\n      } else if (deltaValue.hasMinMax) {\n        min = deltaValue.min;\n        max = deltaValue.max;\n      }\n    }\n\n    return new HistogramAccumulation(\n      previous.startTime,\n      previousValue.buckets.boundaries,\n      this._recordMinMax,\n      {\n        buckets: {\n          boundaries: previousValue.buckets.boundaries,\n          counts: mergedCounts,\n        },\n        count: previousValue.count + deltaValue.count,\n        sum: previousValue.sum + deltaValue.sum,\n        hasMinMax:\n          this._recordMinMax &&\n          (previousValue.hasMinMax || deltaValue.hasMinMax),\n        min: min,\n        max: max,\n      }\n    );\n  }\n\n  /**\n   * Returns a new DELTA aggregation by comparing two cumulative measurements.\n   */\n  diff(\n    previous: HistogramAccumulation,\n    current: HistogramAccumulation\n  ): HistogramAccumulation {\n    const previousValue = previous.toPointValue();\n    const currentValue = current.toPointValue();\n\n    const previousCounts = previousValue.buckets.counts;\n    const currentCounts = currentValue.buckets.counts;\n\n    const diffedCounts = new Array(previousCounts.length);\n    for (let idx = 0; idx < previousCounts.length; idx++) {\n      diffedCounts[idx] = currentCounts[idx] - previousCounts[idx];\n    }\n\n    return new HistogramAccumulation(\n      current.startTime,\n      previousValue.buckets.boundaries,\n      this._recordMinMax,\n      {\n        buckets: {\n          boundaries: previousValue.buckets.boundaries,\n          counts: diffedCounts,\n        },\n        count: currentValue.count - previousValue.count,\n        sum: currentValue.sum - previousValue.sum,\n        hasMinMax: false,\n        min: Infinity,\n        max: -Infinity,\n      }\n    );\n  }\n\n  toMetricData(\n    descriptor: InstrumentDescriptor,\n    aggregationTemporality: AggregationTemporality,\n    accumulationByAttributes: AccumulationRecord<HistogramAccumulation>[],\n    endTime: HrTime\n  ): Maybe<HistogramMetricData> {\n    return {\n      descriptor,\n      aggregationTemporality,\n      dataPointType: DataPointType.HISTOGRAM,\n      dataPoints: accumulationByAttributes.map(([attributes, accumulation]) => {\n        const pointValue = accumulation.toPointValue();\n\n        // determine if instrument allows negative values.\n        const allowsNegativeValues =\n          descriptor.type === InstrumentType.UP_DOWN_COUNTER ||\n          descriptor.type === InstrumentType.OBSERVABLE_GAUGE ||\n          descriptor.type === InstrumentType.OBSERVABLE_UP_DOWN_COUNTER;\n\n        return {\n          attributes,\n          startTime: accumulation.startTime,\n          endTime,\n          value: {\n            min: pointValue.hasMinMax ? pointValue.min : undefined,\n            max: pointValue.hasMinMax ? pointValue.max : undefined,\n            sum: !allowsNegativeValues ? pointValue.sum : undefined,\n            buckets: pointValue.buckets,\n            count: pointValue.count,\n          },\n        };\n      }),\n    };\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport class Buckets {\n  /**\n   * The term index refers to the number of the exponential histogram bucket\n   * used to determine its boundaries. The lower boundary of a bucket is\n   * determined by base ** index and the upper boundary of a bucket is\n   * determined by base ** (index + 1). index values are signed to account\n   * for values less than or equal to 1.\n   *\n   * indexBase is the index of the 0th position in the\n   * backing array, i.e., backing[0] is the count\n   * in the bucket with index `indexBase`.\n   *\n   * indexStart is the smallest index value represented\n   * in the backing array.\n   *\n   * indexEnd is the largest index value represented in\n   * the backing array.\n   */\n  constructor(\n    public backing = new BucketsBacking(),\n    public indexBase = 0,\n    public indexStart = 0,\n    public indexEnd = 0\n  ) {}\n\n  /**\n   * Offset is the bucket index of the smallest entry in the counts array\n   * @returns {number}\n   */\n  get offset(): number {\n    return this.indexStart;\n  }\n\n  /**\n   * Buckets is a view into the backing array.\n   * @returns {number}\n   */\n  get length(): number {\n    if (this.backing.length === 0) {\n      return 0;\n    }\n\n    if (this.indexEnd === this.indexStart && this.at(0) === 0) {\n      return 0;\n    }\n\n    return this.indexEnd - this.indexStart + 1;\n  }\n\n  /**\n   * An array of counts, where count[i] carries the count\n   * of the bucket at index (offset+i).  count[i] is the count of\n   * values greater than base^(offset+i) and less than or equal to\n   * base^(offset+i+1).\n   * @returns {number} The logical counts based on the backing array\n   */\n  counts(): number[] {\n    return Array.from({ length: this.length }, (_, i) => this.at(i));\n  }\n\n  /**\n   * At returns the count of the bucket at a position in the logical\n   * array of counts.\n   * @param position\n   * @returns {number}\n   */\n  at(position: number): number {\n    const bias = this.indexBase - this.indexStart;\n    if (position < bias) {\n      position += this.backing.length;\n    }\n\n    position -= bias;\n    return this.backing.countAt(position);\n  }\n\n  /**\n   * incrementBucket increments the backing array index by `increment`\n   * @param bucketIndex\n   * @param increment\n   */\n  incrementBucket(bucketIndex: number, increment: number) {\n    this.backing.increment(bucketIndex, increment);\n  }\n\n  /**\n   * decrementBucket decrements the backing array index by `decrement`\n   * if decrement is greater than the current value, it's set to 0.\n   * @param bucketIndex\n   * @param decrement\n   */\n  decrementBucket(bucketIndex: number, decrement: number) {\n    this.backing.decrement(bucketIndex, decrement);\n  }\n\n  /**\n   * trim removes leading and / or trailing zero buckets (which can occur\n   * after diffing two histos) and rotates the backing array so that the\n   * smallest non-zero index is in the 0th position of the backing array\n   */\n  trim() {\n    for (let i = 0; i < this.length; i++) {\n      if (this.at(i) !== 0) {\n        this.indexStart += i;\n        break;\n      } else if (i === this.length - 1) {\n        //the entire array is zeroed out\n        this.indexStart = this.indexEnd = this.indexBase = 0;\n        return;\n      }\n    }\n\n    for (let i = this.length - 1; i >= 0; i--) {\n      if (this.at(i) !== 0) {\n        this.indexEnd -= this.length - i - 1;\n        break;\n      }\n    }\n\n    this._rotate();\n  }\n\n  /**\n   * downscale first rotates, then collapses 2**`by`-to-1 buckets.\n   * @param by\n   */\n  downscale(by: number) {\n    this._rotate();\n\n    const size = 1 + this.indexEnd - this.indexStart;\n    const each = 1 << by;\n    let inpos = 0;\n    let outpos = 0;\n\n    for (let pos = this.indexStart; pos <= this.indexEnd; ) {\n      let mod = pos % each;\n      if (mod < 0) {\n        mod += each;\n      }\n      for (let i = mod; i < each && inpos < size; i++) {\n        this._relocateBucket(outpos, inpos);\n        inpos++;\n        pos++;\n      }\n      outpos++;\n    }\n\n    this.indexStart >>= by;\n    this.indexEnd >>= by;\n    this.indexBase = this.indexStart;\n  }\n\n  /**\n   * Clone returns a deep copy of Buckets\n   * @returns {Buckets}\n   */\n  clone(): Buckets {\n    return new Buckets(\n      this.backing.clone(),\n      this.indexBase,\n      this.indexStart,\n      this.indexEnd\n    );\n  }\n\n  /**\n   * _rotate shifts the backing array contents so that indexStart ==\n   * indexBase to simplify the downscale logic.\n   */\n  private _rotate() {\n    const bias = this.indexBase - this.indexStart;\n\n    if (bias === 0) {\n      return;\n    } else if (bias > 0) {\n      this.backing.reverse(0, this.backing.length);\n      this.backing.reverse(0, bias);\n      this.backing.reverse(bias, this.backing.length);\n    } else {\n      // negative bias, this can happen when diffing two histograms\n      this.backing.reverse(0, this.backing.length);\n      this.backing.reverse(0, this.backing.length + bias);\n    }\n    this.indexBase = this.indexStart;\n  }\n\n  /**\n   * _relocateBucket adds the count in counts[src] to counts[dest] and\n   * resets count[src] to zero.\n   */\n  private _relocateBucket(dest: number, src: number) {\n    if (dest === src) {\n      return;\n    }\n    this.incrementBucket(dest, this.backing.emptyBucket(src));\n  }\n}\n\n/**\n * BucketsBacking holds the raw buckets and some utility methods to\n * manage them.\n */\nclass BucketsBacking {\n  constructor(private _counts = [0]) {}\n\n  /**\n   * length returns the physical size of the backing array, which\n   * is >= buckets.length()\n   */\n  get length(): number {\n    return this._counts.length;\n  }\n\n  /**\n   * countAt returns the count in a specific bucket\n   */\n  countAt(pos: number): number {\n    return this._counts[pos];\n  }\n\n  /**\n   * growTo grows a backing array and copies old entries\n   * into their correct new positions.\n   */\n  growTo(newSize: number, oldPositiveLimit: number, newPositiveLimit: number) {\n    const tmp = new Array<number>(newSize).fill(0);\n    tmp.splice(\n      newPositiveLimit,\n      this._counts.length - oldPositiveLimit,\n      ...this._counts.slice(oldPositiveLimit)\n    );\n    tmp.splice(0, oldPositiveLimit, ...this._counts.slice(0, oldPositiveLimit));\n    this._counts = tmp;\n  }\n\n  /**\n   * reverse the items in the backing array in the range [from, limit).\n   */\n  reverse(from: number, limit: number) {\n    const num = Math.floor((from + limit) / 2) - from;\n    for (let i = 0; i < num; i++) {\n      const tmp = this._counts[from + i];\n      this._counts[from + i] = this._counts[limit - i - 1];\n      this._counts[limit - i - 1] = tmp;\n    }\n  }\n\n  /**\n   * emptyBucket empties the count from a bucket, for\n   * moving into another.\n   */\n  emptyBucket(src: number): number {\n    const tmp = this._counts[src];\n    this._counts[src] = 0;\n    return tmp;\n  }\n\n  /**\n   * increments a bucket by `increment`\n   */\n  increment(bucketIndex: number, increment: number) {\n    this._counts[bucketIndex] += increment;\n  }\n\n  /**\n   * decrements a bucket by `decrement`\n   */\n  decrement(bucketIndex: number, decrement: number) {\n    if (this._counts[bucketIndex] >= decrement) {\n      this._counts[bucketIndex] -= decrement;\n    } else {\n      // this should not happen, but we're being defensive against\n      // negative counts.\n      this._counts[bucketIndex] = 0;\n    }\n  }\n\n  /**\n   * clone returns a deep copy of BucketsBacking\n   */\n  clone(): BucketsBacking {\n    return new BucketsBacking([...this._counts]);\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * The functions and constants in this file allow us to interact\n * with the internal representation of an IEEE 64-bit floating point\n * number. We need to work with all 64-bits, thus, care needs to be\n * taken when working with Javascript's bitwise operators (<<, >>, &,\n * |, etc) as they truncate operands to 32-bits. In order to work around\n * this we work with the 64-bits as two 32-bit halves, perform bitwise\n * operations on them independently, and combine the results (if needed).\n */\n\nexport const SIGNIFICAND_WIDTH = 52;\n\n/**\n * EXPONENT_MASK is set to 1 for the hi 32-bits of an IEEE 754\n * floating point exponent: 0x7ff00000.\n */\nconst EXPONENT_MASK = 0x7ff00000;\n\n/**\n * SIGNIFICAND_MASK is the mask for the significand portion of the hi 32-bits\n * of an IEEE 754 double-precision floating-point value: 0xfffff\n */\nconst SIGNIFICAND_MASK = 0xfffff;\n\n/**\n * EXPONENT_BIAS is the exponent bias specified for encoding\n * the IEEE 754 double-precision floating point exponent: 1023\n */\nconst EXPONENT_BIAS = 1023;\n\n/**\n * MIN_NORMAL_EXPONENT is the minimum exponent of a normalized\n * floating point: -1022.\n */\nexport const MIN_NORMAL_EXPONENT = -EXPONENT_BIAS + 1;\n\n/**\n * MAX_NORMAL_EXPONENT is the maximum exponent of a normalized\n * floating point: 1023.\n */\nexport const MAX_NORMAL_EXPONENT = EXPONENT_BIAS;\n\n/**\n * MIN_VALUE is the smallest normal number\n */\nexport const MIN_VALUE = Math.pow(2, -1022);\n\n/**\n * getNormalBase2 extracts the normalized base-2 fractional exponent.\n * This returns k for the equation f x 2**k where f is\n * in the range [1, 2).  Note that this function is not called for\n * subnormal numbers.\n * @param {number} value - the value to determine normalized base-2 fractional\n *    exponent for\n * @returns {number} the normalized base-2 exponent\n */\nexport function getNormalBase2(value: number): number {\n  const dv = new DataView(new ArrayBuffer(8));\n  dv.setFloat64(0, value);\n  // access the raw 64-bit float as 32-bit uints\n  const hiBits = dv.getUint32(0);\n  const expBits = (hiBits & EXPONENT_MASK) >> 20;\n  return expBits - EXPONENT_BIAS;\n}\n\n/**\n * GetSignificand returns the 52 bit (unsigned) significand as a signed value.\n * @param {number} value - the floating point number to extract the significand from\n * @returns {number} The 52-bit significand\n */\nexport function getSignificand(value: number): number {\n  const dv = new DataView(new ArrayBuffer(8));\n  dv.setFloat64(0, value);\n  // access the raw 64-bit float as two 32-bit uints\n  const hiBits = dv.getUint32(0);\n  const loBits = dv.getUint32(4);\n  // extract the significand bits from the hi bits and left shift 32 places note:\n  // we can't use the native << operator as it will truncate the result to 32-bits\n  const significandHiBits = (hiBits & SIGNIFICAND_MASK) * Math.pow(2, 32);\n  // combine the hi and lo bits and return\n  return significandHiBits + loBits;\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Note: other languages provide this as a built in function. This is\n * a naive, but functionally correct implementation. This is used sparingly,\n * when creating a new mapping in a running application.\n *\n * ldexp returns frac × 2**exp. With the following special cases:\n *   ldexp(±0, exp) = ±0\n *   ldexp(±Inf, exp) = ±Inf\n *   ldexp(NaN, exp) = NaN\n * @param frac\n * @param exp\n * @returns {number}\n */\nexport function ldexp(frac: number, exp: number): number {\n  if (\n    frac === 0 ||\n    frac === Number.POSITIVE_INFINITY ||\n    frac === Number.NEGATIVE_INFINITY ||\n    Number.isNaN(frac)\n  ) {\n    return frac;\n  }\n  return frac * Math.pow(2, exp);\n}\n\n/**\n * Computes the next power of two that is greater than or equal to v.\n * This implementation more efficient than, but functionally equivalent\n * to Math.pow(2, Math.ceil(Math.log(x)/Math.log(2))).\n * @param v\n * @returns {number}\n */\nexport function nextGreaterSquare(v: number): number {\n  // The following expression computes the least power-of-two\n  // that is >= v.  There are a number of tricky ways to\n  // do this, see https://stackoverflow.com/questions/466204/rounding-up-to-next-power-of-2\n  v--;\n  v |= v >> 1;\n  v |= v >> 2;\n  v |= v >> 4;\n  v |= v >> 8;\n  v |= v >> 16;\n  v++;\n  return v;\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport class MappingError extends Error {}\n\n/**\n * The mapping interface is used by the exponential histogram to determine\n * where to bucket values. The interface is implemented by ExponentMapping,\n * used for scales [-10, 0] and LogarithmMapping, used for scales [1, 20].\n */\nexport interface Mapping {\n  mapToIndex(value: number): number;\n  lowerBoundary(index: number): number;\n  get scale(): number;\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport * as ieee754 from './ieee754';\nimport * as util from '../util';\nimport { Mapping, MappingError } from './types';\n\n/**\n * ExponentMapping implements exponential mapping functions for\n * scales <=0. For scales > 0 LogarithmMapping should be used.\n */\nexport class ExponentMapping implements Mapping {\n  private readonly _shift: number;\n\n  constructor(scale: number) {\n    this._shift = -scale;\n  }\n\n  /**\n   * Maps positive floating point values to indexes corresponding to scale\n   * @param value\n   * @returns {number} index for provided value at the current scale\n   */\n  mapToIndex(value: number): number {\n    if (value < ieee754.MIN_VALUE) {\n      return this._minNormalLowerBoundaryIndex();\n    }\n\n    const exp = ieee754.getNormalBase2(value);\n\n    // In case the value is an exact power of two, compute a\n    // correction of -1. Note, we are using a custom _rightShift\n    // to accommodate a 52-bit argument, which the native bitwise\n    // operators do not support\n    const correction = this._rightShift(\n      ieee754.getSignificand(value) - 1,\n      ieee754.SIGNIFICAND_WIDTH\n    );\n\n    return (exp + correction) >> this._shift;\n  }\n\n  /**\n   * Returns the lower bucket boundary for the given index for scale\n   *\n   * @param index\n   * @returns {number}\n   */\n  lowerBoundary(index: number): number {\n    const minIndex = this._minNormalLowerBoundaryIndex();\n    if (index < minIndex) {\n      throw new MappingError(\n        `underflow: ${index} is < minimum lower boundary: ${minIndex}`\n      );\n    }\n    const maxIndex = this._maxNormalLowerBoundaryIndex();\n    if (index > maxIndex) {\n      throw new MappingError(\n        `overflow: ${index} is > maximum lower boundary: ${maxIndex}`\n      );\n    }\n\n    return util.ldexp(1, index << this._shift);\n  }\n\n  /**\n   * The scale used by this mapping\n   * @returns {number}\n   */\n  get scale(): number {\n    if (this._shift === 0) {\n      return 0;\n    }\n    return -this._shift;\n  }\n\n  private _minNormalLowerBoundaryIndex(): number {\n    let index = ieee754.MIN_NORMAL_EXPONENT >> this._shift;\n    if (this._shift < 2) {\n      index--;\n    }\n\n    return index;\n  }\n\n  private _maxNormalLowerBoundaryIndex(): number {\n    return ieee754.MAX_NORMAL_EXPONENT >> this._shift;\n  }\n\n  private _rightShift(value: number, shift: number): number {\n    return Math.floor(value * Math.pow(2, -shift));\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport * as ieee754 from './ieee754';\nimport * as util from '../util';\nimport { Mapping, MappingError } from './types';\n\n/**\n * LogarithmMapping implements exponential mapping functions for scale > 0.\n * For scales <= 0 the exponent mapping should be used.\n */\nexport class LogarithmMapping implements Mapping {\n  private readonly _scale: number;\n  private readonly _scaleFactor: number;\n  private readonly _inverseFactor: number;\n\n  constructor(scale: number) {\n    this._scale = scale;\n    this._scaleFactor = util.ldexp(Math.LOG2E, scale);\n    this._inverseFactor = util.ldexp(Math.LN2, -scale);\n  }\n\n  /**\n   * Maps positive floating point values to indexes corresponding to scale\n   * @param value\n   * @returns {number} index for provided value at the current scale\n   */\n  mapToIndex(value: number): number {\n    if (value <= ieee754.MIN_VALUE) {\n      return this._minNormalLowerBoundaryIndex() - 1;\n    }\n\n    // exact power of two special case\n    if (ieee754.getSignificand(value) === 0) {\n      const exp = ieee754.getNormalBase2(value);\n      return (exp << this._scale) - 1;\n    }\n\n    // non-power of two cases. use Math.floor to round the scaled logarithm\n    const index = Math.floor(Math.log(value) * this._scaleFactor);\n    const maxIndex = this._maxNormalLowerBoundaryIndex();\n    if (index >= maxIndex) {\n      return maxIndex;\n    }\n\n    return index;\n  }\n\n  /**\n   * Returns the lower bucket boundary for the given index for scale\n   *\n   * @param index\n   * @returns {number}\n   */\n  lowerBoundary(index: number): number {\n    const maxIndex = this._maxNormalLowerBoundaryIndex();\n    if (index >= maxIndex) {\n      if (index === maxIndex) {\n        return 2 * Math.exp((index - (1 << this._scale)) / this._scaleFactor);\n      }\n      throw new MappingError(\n        `overflow: ${index} is > maximum lower boundary: ${maxIndex}`\n      );\n    }\n\n    const minIndex = this._minNormalLowerBoundaryIndex();\n    if (index <= minIndex) {\n      if (index === minIndex) {\n        return ieee754.MIN_VALUE;\n      } else if (index === minIndex - 1) {\n        return Math.exp((index + (1 << this._scale)) / this._scaleFactor) / 2;\n      }\n      throw new MappingError(\n        `overflow: ${index} is < minimum lower boundary: ${minIndex}`\n      );\n    }\n\n    return Math.exp(index * this._inverseFactor);\n  }\n\n  /**\n   * The scale used by this mapping\n   * @returns {number}\n   */\n  get scale(): number {\n    return this._scale;\n  }\n\n  private _minNormalLowerBoundaryIndex(): number {\n    return ieee754.MIN_NORMAL_EXPONENT << this._scale;\n  }\n\n  private _maxNormalLowerBoundaryIndex(): number {\n    return ((ieee754.MAX_NORMAL_EXPONENT + 1) << this._scale) - 1;\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { ExponentMapping } from './ExponentMapping';\nimport { LogarithmMapping } from './LogarithmMapping';\nimport { MappingError, Mapping } from './types';\n\nconst MIN_SCALE = -10;\nconst MAX_SCALE = 20;\nconst PREBUILT_MAPPINGS = Array.from({ length: 31 }, (_, i) => {\n  if (i > 10) {\n    return new LogarithmMapping(i - 10);\n  }\n  return new ExponentMapping(i - 10);\n});\n\n/**\n * getMapping returns an appropriate mapping for the given scale. For scales -10\n * to 0 the underlying type will be ExponentMapping. For scales 1 to 20 the\n * underlying type will be LogarithmMapping.\n * @param scale a number in the range [-10, 20]\n * @returns {Mapping}\n */\nexport function getMapping(scale: number): Mapping {\n  if (scale > MAX_SCALE || scale < MIN_SCALE) {\n    throw new MappingError(\n      `expected scale >= ${MIN_SCALE} && <= ${MAX_SCALE}, got: ${scale}`\n    );\n  }\n  // mappings are offset by 10. scale -10 is at position 0 and scale 20 is at 30\n  return PREBUILT_MAPPINGS[scale + 10];\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Accumulation,\n  AccumulationRecord,\n  Aggregator,\n  AggregatorKind,\n  ExponentialHistogram,\n} from './types';\nimport {\n  DataPointType,\n  ExponentialHistogramMetricData,\n} from '../export/MetricData';\nimport { diag, HrTime } from '@opentelemetry/api';\nimport { InstrumentDescriptor, InstrumentType } from '../InstrumentDescriptor';\nimport { Maybe } from '../utils';\nimport { AggregationTemporality } from '../export/AggregationTemporality';\nimport { Buckets } from './exponential-histogram/Buckets';\nimport { getMapping } from './exponential-histogram/mapping/getMapping';\nimport { Mapping } from './exponential-histogram/mapping/types';\nimport { nextGreaterSquare } from './exponential-histogram/util';\n\n/**\n * Internal value type for ExponentialHistogramAggregation.\n * Differs from the exported type as undefined sum/min/max complicate arithmetic\n * performed by this aggregation, but are required to be undefined in the exported types.\n */\ninterface InternalHistogram extends ExponentialHistogram {\n  hasMinMax: boolean;\n  min: number;\n  max: number;\n  sum: number;\n}\n\n// HighLow is a utility class used for computing a common scale for\n// two exponential histogram accumulations\nclass HighLow {\n  static combine(h1: HighLow, h2: HighLow): HighLow {\n    return new HighLow(Math.min(h1.low, h2.low), Math.max(h1.high, h2.high));\n  }\n  constructor(\n    public low: number,\n    public high: number\n  ) {}\n}\n\nconst MAX_SCALE = 20;\nconst DEFAULT_MAX_SIZE = 160;\nconst MIN_MAX_SIZE = 2;\n\nexport class ExponentialHistogramAccumulation implements Accumulation {\n  constructor(\n    public startTime: HrTime = startTime,\n    private _maxSize = DEFAULT_MAX_SIZE,\n    private _recordMinMax = true,\n    private _sum = 0,\n    private _count = 0,\n    private _zeroCount = 0,\n    private _min = Number.POSITIVE_INFINITY,\n    private _max = Number.NEGATIVE_INFINITY,\n    private _positive = new Buckets(),\n    private _negative = new Buckets(),\n    private _mapping: Mapping = getMapping(MAX_SCALE)\n  ) {\n    if (this._maxSize < MIN_MAX_SIZE) {\n      diag.warn(`Exponential Histogram Max Size set to ${this._maxSize}, \\\n                changing to the minimum size of: ${MIN_MAX_SIZE}`);\n      this._maxSize = MIN_MAX_SIZE;\n    }\n  }\n\n  /**\n   * record updates a histogram with a single count\n   * @param {Number} value\n   */\n  record(value: number) {\n    this.updateByIncrement(value, 1);\n  }\n\n  /**\n   * Sets the start time for this accumulation\n   * @param {HrTime} startTime\n   */\n  setStartTime(startTime: HrTime): void {\n    this.startTime = startTime;\n  }\n\n  /**\n   * Returns the datapoint representation of this accumulation\n   * @param {HrTime} startTime\n   */\n  toPointValue(): InternalHistogram {\n    return {\n      hasMinMax: this._recordMinMax,\n      min: this.min,\n      max: this.max,\n      sum: this.sum,\n      positive: {\n        offset: this.positive.offset,\n        bucketCounts: this.positive.counts(),\n      },\n      negative: {\n        offset: this.negative.offset,\n        bucketCounts: this.negative.counts(),\n      },\n      count: this.count,\n      scale: this.scale,\n      zeroCount: this.zeroCount,\n    };\n  }\n\n  /**\n   * @returns {Number} The sum of values recorded by this accumulation\n   */\n  get sum(): number {\n    return this._sum;\n  }\n\n  /**\n   * @returns {Number} The minimum value recorded by this accumulation\n   */\n  get min(): number {\n    return this._min;\n  }\n\n  /**\n   * @returns {Number} The maximum value recorded by this accumulation\n   */\n  get max(): number {\n    return this._max;\n  }\n\n  /**\n   * @returns {Number} The count of values recorded by this accumulation\n   */\n  get count(): number {\n    return this._count;\n  }\n\n  /**\n   * @returns {Number} The number of 0 values recorded by this accumulation\n   */\n  get zeroCount(): number {\n    return this._zeroCount;\n  }\n\n  /**\n   * @returns {Number} The scale used by thie accumulation\n   */\n  get scale(): number {\n    if (this._count === this._zeroCount) {\n      // all zeros! scale doesn't matter, use zero\n      return 0;\n    }\n    return this._mapping.scale;\n  }\n\n  /**\n   * positive holds the postive values\n   * @returns {Buckets}\n   */\n  get positive(): Buckets {\n    return this._positive;\n  }\n\n  /**\n   * negative holds the negative values by their absolute value\n   * @returns {Buckets}\n   */\n  get negative(): Buckets {\n    return this._negative;\n  }\n\n  /**\n   * uppdateByIncr supports updating a histogram with a non-negative\n   * increment.\n   * @param value\n   * @param increment\n   */\n  updateByIncrement(value: number, increment: number) {\n    if (value > this._max) {\n      this._max = value;\n    }\n    if (value < this._min) {\n      this._min = value;\n    }\n\n    this._count += increment;\n\n    if (value === 0) {\n      this._zeroCount += increment;\n      return;\n    }\n\n    this._sum += value * increment;\n\n    if (value > 0) {\n      this._updateBuckets(this._positive, value, increment);\n    } else {\n      this._updateBuckets(this._negative, -value, increment);\n    }\n  }\n\n  /**\n   * merge combines data from previous value into self\n   * @param {ExponentialHistogramAccumulation} previous\n   */\n  merge(previous: ExponentialHistogramAccumulation) {\n    if (this._count === 0) {\n      this._min = previous.min;\n      this._max = previous.max;\n    } else if (previous.count !== 0) {\n      if (previous.min < this.min) {\n        this._min = previous.min;\n      }\n      if (previous.max > this.max) {\n        this._max = previous.max;\n      }\n    }\n\n    this.startTime = previous.startTime;\n    this._sum += previous.sum;\n    this._count += previous.count;\n    this._zeroCount += previous.zeroCount;\n\n    const minScale = this._minScale(previous);\n\n    this._downscale(this.scale - minScale);\n\n    this._mergeBuckets(this.positive, previous, previous.positive, minScale);\n    this._mergeBuckets(this.negative, previous, previous.negative, minScale);\n  }\n\n  /**\n   * diff substracts other from self\n   * @param {ExponentialHistogramAccumulation} other\n   */\n  diff(other: ExponentialHistogramAccumulation) {\n    this._min = Infinity;\n    this._max = -Infinity;\n    this._sum -= other.sum;\n    this._count -= other.count;\n    this._zeroCount -= other.zeroCount;\n\n    const minScale = this._minScale(other);\n\n    this._downscale(this.scale - minScale);\n\n    this._diffBuckets(this.positive, other, other.positive, minScale);\n    this._diffBuckets(this.negative, other, other.negative, minScale);\n  }\n\n  /**\n   * clone returns a deep copy of self\n   * @returns {ExponentialHistogramAccumulation}\n   */\n  clone(): ExponentialHistogramAccumulation {\n    return new ExponentialHistogramAccumulation(\n      this.startTime,\n      this._maxSize,\n      this._recordMinMax,\n      this._sum,\n      this._count,\n      this._zeroCount,\n      this._min,\n      this._max,\n      this.positive.clone(),\n      this.negative.clone(),\n      this._mapping\n    );\n  }\n\n  /**\n   * _updateBuckets maps the incoming value to a bucket index for the current\n   * scale. If the bucket index is outside of the range of the backing array,\n   * it will rescale the backing array and update the mapping for the new scale.\n   */\n  private _updateBuckets(buckets: Buckets, value: number, increment: number) {\n    let index = this._mapping.mapToIndex(value);\n\n    // rescale the mapping if needed\n    let rescalingNeeded = false;\n    let high = 0;\n    let low = 0;\n\n    if (buckets.length === 0) {\n      buckets.indexStart = index;\n      buckets.indexEnd = buckets.indexStart;\n      buckets.indexBase = buckets.indexStart;\n    } else if (\n      index < buckets.indexStart &&\n      buckets.indexEnd - index >= this._maxSize\n    ) {\n      rescalingNeeded = true;\n      low = index;\n      high = buckets.indexEnd;\n    } else if (\n      index > buckets.indexEnd &&\n      index - buckets.indexStart >= this._maxSize\n    ) {\n      rescalingNeeded = true;\n      low = buckets.indexStart;\n      high = index;\n    }\n\n    // rescale and compute index at new scale\n    if (rescalingNeeded) {\n      const change = this._changeScale(high, low);\n      this._downscale(change);\n      index = this._mapping.mapToIndex(value);\n    }\n\n    this._incrementIndexBy(buckets, index, increment);\n  }\n\n  /**\n   * _incrementIndexBy increments the count of the bucket specified by `index`.\n   * If the index is outside of the range [buckets.indexStart, buckets.indexEnd]\n   * the boundaries of the backing array will be adjusted and more buckets will\n   * be added if needed.\n   */\n  private _incrementIndexBy(\n    buckets: Buckets,\n    index: number,\n    increment: number\n  ) {\n    if (increment === 0) {\n      // nothing to do for a zero increment, can happen during a merge operation\n      return;\n    }\n\n    if (index < buckets.indexStart) {\n      const span = buckets.indexEnd - index;\n      if (span >= buckets.backing.length) {\n        this._grow(buckets, span + 1);\n      }\n      buckets.indexStart = index;\n    } else if (index > buckets.indexEnd) {\n      const span = index - buckets.indexStart;\n      if (span >= buckets.backing.length) {\n        this._grow(buckets, span + 1);\n      }\n      buckets.indexEnd = index;\n    }\n\n    let bucketIndex = index - buckets.indexBase;\n    if (bucketIndex < 0) {\n      bucketIndex += buckets.backing.length;\n    }\n    buckets.incrementBucket(bucketIndex, increment);\n  }\n\n  /**\n   * grow resizes the backing array by doubling in size up to maxSize.\n   * This extends the array with a bunch of zeros and copies the\n   * existing counts to the same position.\n   */\n  private _grow(buckets: Buckets, needed: number) {\n    const size = buckets.backing.length;\n    const bias = buckets.indexBase - buckets.indexStart;\n    const oldPositiveLimit = size - bias;\n    let newSize = nextGreaterSquare(needed);\n    if (newSize > this._maxSize) {\n      newSize = this._maxSize;\n    }\n    const newPositiveLimit = newSize - bias;\n    buckets.backing.growTo(newSize, oldPositiveLimit, newPositiveLimit);\n  }\n\n  /**\n   * _changeScale computes how much downscaling is needed by shifting the\n   * high and low values until they are separated by no more than size.\n   */\n  private _changeScale(high: number, low: number): number {\n    let change = 0;\n    while (high - low >= this._maxSize) {\n      high >>= 1;\n      low >>= 1;\n      change++;\n    }\n    return change;\n  }\n\n  /**\n   * _downscale subtracts `change` from the current mapping scale.\n   */\n  private _downscale(change: number) {\n    if (change === 0) {\n      return;\n    }\n    if (change < 0) {\n      // Note: this should be impossible. If we get here it's because\n      // there is a bug in the implementation.\n      throw new Error(`impossible change of scale: ${this.scale}`);\n    }\n    const newScale = this._mapping.scale - change;\n\n    this._positive.downscale(change);\n    this._negative.downscale(change);\n\n    this._mapping = getMapping(newScale);\n  }\n\n  /**\n   * _minScale is used by diff and merge to compute an ideal combined scale\n   */\n  private _minScale(other: ExponentialHistogramAccumulation): number {\n    const minScale = Math.min(this.scale, other.scale);\n\n    const highLowPos = HighLow.combine(\n      this._highLowAtScale(this.positive, this.scale, minScale),\n      this._highLowAtScale(other.positive, other.scale, minScale)\n    );\n\n    const highLowNeg = HighLow.combine(\n      this._highLowAtScale(this.negative, this.scale, minScale),\n      this._highLowAtScale(other.negative, other.scale, minScale)\n    );\n\n    return Math.min(\n      minScale - this._changeScale(highLowPos.high, highLowPos.low),\n      minScale - this._changeScale(highLowNeg.high, highLowNeg.low)\n    );\n  }\n\n  /**\n   * _highLowAtScale is used by diff and merge to compute an ideal combined scale.\n   */\n  private _highLowAtScale(\n    buckets: Buckets,\n    currentScale: number,\n    newScale: number\n  ): HighLow {\n    if (buckets.length === 0) {\n      return new HighLow(0, -1);\n    }\n    const shift = currentScale - newScale;\n    return new HighLow(buckets.indexStart >> shift, buckets.indexEnd >> shift);\n  }\n\n  /**\n   * _mergeBuckets translates index values from another histogram and\n   * adds the values into the corresponding buckets of this histogram.\n   */\n  private _mergeBuckets(\n    ours: Buckets,\n    other: ExponentialHistogramAccumulation,\n    theirs: Buckets,\n    scale: number\n  ) {\n    const theirOffset = theirs.offset;\n    const theirChange = other.scale - scale;\n\n    for (let i = 0; i < theirs.length; i++) {\n      this._incrementIndexBy(\n        ours,\n        (theirOffset + i) >> theirChange,\n        theirs.at(i)\n      );\n    }\n  }\n\n  /**\n   * _diffBuckets translates index values from another histogram and\n   * subtracts the values in the corresponding buckets of this histogram.\n   */\n  private _diffBuckets(\n    ours: Buckets,\n    other: ExponentialHistogramAccumulation,\n    theirs: Buckets,\n    scale: number\n  ) {\n    const theirOffset = theirs.offset;\n    const theirChange = other.scale - scale;\n\n    for (let i = 0; i < theirs.length; i++) {\n      const ourIndex = (theirOffset + i) >> theirChange;\n      let bucketIndex = ourIndex - ours.indexBase;\n      if (bucketIndex < 0) {\n        bucketIndex += ours.backing.length;\n      }\n      ours.decrementBucket(bucketIndex, theirs.at(i));\n    }\n\n    ours.trim();\n  }\n}\n\n/**\n * Aggregator for ExponentialHistogramAccumlations\n */\nexport class ExponentialHistogramAggregator\n  implements Aggregator<ExponentialHistogramAccumulation>\n{\n  public kind: AggregatorKind.EXPONENTIAL_HISTOGRAM =\n    AggregatorKind.EXPONENTIAL_HISTOGRAM;\n\n  /**\n   * @param _maxSize Maximum number of buckets for each of the positive\n   *    and negative ranges, exclusive of the zero-bucket.\n   * @param _recordMinMax If set to true, min and max will be recorded.\n   *    Otherwise, min and max will not be recorded.\n   */\n  constructor(\n    readonly _maxSize: number,\n    private readonly _recordMinMax: boolean\n  ) {}\n\n  createAccumulation(startTime: HrTime) {\n    return new ExponentialHistogramAccumulation(\n      startTime,\n      this._maxSize,\n      this._recordMinMax\n    );\n  }\n\n  /**\n   * Return the result of the merge of two exponential histogram accumulations.\n   */\n  merge(\n    previous: ExponentialHistogramAccumulation,\n    delta: ExponentialHistogramAccumulation\n  ): ExponentialHistogramAccumulation {\n    const result = delta.clone();\n    result.merge(previous);\n\n    return result;\n  }\n\n  /**\n   * Returns a new DELTA aggregation by comparing two cumulative measurements.\n   */\n  diff(\n    previous: ExponentialHistogramAccumulation,\n    current: ExponentialHistogramAccumulation\n  ): ExponentialHistogramAccumulation {\n    const result = current.clone();\n    result.diff(previous);\n\n    return result;\n  }\n\n  toMetricData(\n    descriptor: InstrumentDescriptor,\n    aggregationTemporality: AggregationTemporality,\n    accumulationByAttributes: AccumulationRecord<ExponentialHistogramAccumulation>[],\n    endTime: HrTime\n  ): Maybe<ExponentialHistogramMetricData> {\n    return {\n      descriptor,\n      aggregationTemporality,\n      dataPointType: DataPointType.EXPONENTIAL_HISTOGRAM,\n      dataPoints: accumulationByAttributes.map(([attributes, accumulation]) => {\n        const pointValue = accumulation.toPointValue();\n\n        // determine if instrument allows negative values.\n        const allowsNegativeValues =\n          descriptor.type === InstrumentType.UP_DOWN_COUNTER ||\n          descriptor.type === InstrumentType.OBSERVABLE_GAUGE ||\n          descriptor.type === InstrumentType.OBSERVABLE_UP_DOWN_COUNTER;\n\n        return {\n          attributes,\n          startTime: accumulation.startTime,\n          endTime,\n          value: {\n            min: pointValue.hasMinMax ? pointValue.min : undefined,\n            max: pointValue.hasMinMax ? pointValue.max : undefined,\n            sum: !allowsNegativeValues ? pointValue.sum : undefined,\n            positive: {\n              offset: pointValue.positive.offset,\n              bucketCounts: pointValue.positive.bucketCounts,\n            },\n            negative: {\n              offset: pointValue.negative.offset,\n              bucketCounts: pointValue.negative.bucketCounts,\n            },\n            count: pointValue.count,\n            scale: pointValue.scale,\n            zeroCount: pointValue.zeroCount,\n          },\n        };\n      }),\n    };\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Context, createContextKey } from '@opentelemetry/api';\n\nconst SUPPRESS_TRACING_KEY = createContextKey(\n  'OpenTelemetry SDK Context Key SUPPRESS_TRACING'\n);\n\nexport function suppressTracing(context: Context): Context {\n  return context.setValue(SUPPRESS_TRACING_KEY, true);\n}\n\nexport function unsuppressTracing(context: Context): Context {\n  return context.deleteValue(SUPPRESS_TRACING_KEY);\n}\n\nexport function isTracingSuppressed(context: Context): boolean {\n  return context.getValue(SUPPRESS_TRACING_KEY) === true;\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const BAGGAGE_KEY_PAIR_SEPARATOR = '=';\nexport const BAGGAGE_PROPERTIES_SEPARATOR = ';';\nexport const BAGGAGE_ITEMS_SEPARATOR = ',';\n\n// Name of the http header used to propagate the baggage\nexport const BAGGAGE_HEADER = 'baggage';\n// Maximum number of name-value pairs allowed by w3c spec\nexport const BAGGAGE_MAX_NAME_VALUE_PAIRS = 180;\n// Maximum number of bytes per a single name-value pair allowed by w3c spec\nexport const BAGGAGE_MAX_PER_NAME_VALUE_PAIRS = 4096;\n// Maximum total length of all name-value pairs allowed by w3c spec\nexport const BAGGAGE_MAX_TOTAL_LENGTH = 8192;\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {\n  Baggage,\n  BaggageEntryMetadata,\n  baggageEntryMetadataFromString,\n} from '@opentelemetry/api';\nimport {\n  BAGGAGE_ITEMS_SEPARATOR,\n  BAGGAGE_PROPERTIES_SEPARATOR,\n  BAGGAGE_KEY_PAIR_SEPARATOR,\n  BAGGAGE_MAX_TOTAL_LENGTH,\n} from './constants';\n\ntype ParsedBaggageKeyValue = {\n  key: string;\n  value: string;\n  metadata: BaggageEntryMetadata | undefined;\n};\n\nexport function serializeKeyPairs(keyPairs: string[]): string {\n  return keyPairs.reduce((hValue: string, current: string) => {\n    const value = `${hValue}${\n      hValue !== '' ? BAGGAGE_ITEMS_SEPARATOR : ''\n    }${current}`;\n    return value.length > BAGGAGE_MAX_TOTAL_LENGTH ? hValue : value;\n  }, '');\n}\n\nexport function getKeyPairs(baggage: Baggage): string[] {\n  return baggage.getAllEntries().map(([key, value]) => {\n    let entry = `${encodeURIComponent(key)}=${encodeURIComponent(value.value)}`;\n\n    // include opaque metadata if provided\n    // NOTE: we intentionally don't URI-encode the metadata - that responsibility falls on the metadata implementation\n    if (value.metadata !== undefined) {\n      entry += BAGGAGE_PROPERTIES_SEPARATOR + value.metadata.toString();\n    }\n\n    return entry;\n  });\n}\n\nexport function parsePairKeyValue(\n  entry: string\n): ParsedBaggageKeyValue | undefined {\n  const valueProps = entry.split(BAGGAGE_PROPERTIES_SEPARATOR);\n  if (valueProps.length <= 0) return;\n  const keyPairPart = valueProps.shift();\n  if (!keyPairPart) return;\n  const separatorIndex = keyPairPart.indexOf(BAGGAGE_KEY_PAIR_SEPARATOR);\n  if (separatorIndex <= 0) return;\n  const key = decodeURIComponent(\n    keyPairPart.substring(0, separatorIndex).trim()\n  );\n  const value = decodeURIComponent(\n    keyPairPart.substring(separatorIndex + 1).trim()\n  );\n  let metadata;\n  if (valueProps.length > 0) {\n    metadata = baggageEntryMetadataFromString(\n      valueProps.join(BAGGAGE_PROPERTIES_SEPARATOR)\n    );\n  }\n  return { key, value, metadata };\n}\n\n/**\n * Parse a string serialized in the baggage HTTP Format (without metadata):\n * https://github.com/w3c/baggage/blob/master/baggage/HTTP_HEADER_FORMAT.md\n */\nexport function parseKeyPairsIntoRecord(\n  value?: string\n): Record<string, string> {\n  if (typeof value !== 'string' || value.length === 0) return {};\n  return value\n    .split(BAGGAGE_ITEMS_SEPARATOR)\n    .map(entry => {\n      return parsePairKeyValue(entry);\n    })\n    .filter(keyPair => keyPair !== undefined && keyPair.value.length > 0)\n    .reduce<Record<string, string>>((headers, keyPair) => {\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      headers[keyPair!.key] = keyPair!.value;\n      return headers;\n    }, {});\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  BaggageEntry,\n  Context,\n  propagation,\n  TextMapGetter,\n  TextMapPropagator,\n  TextMapSetter,\n} from '@opentelemetry/api';\n\nimport { isTracingSuppressed } from '../../trace/suppress-tracing';\nimport {\n  BAGGAGE_HEADER,\n  BAGGAGE_ITEMS_SEPARATOR,\n  BAGGAGE_MAX_NAME_VALUE_PAIRS,\n  BAGGAGE_MAX_PER_NAME_VALUE_PAIRS,\n} from '../constants';\nimport { getKeyPairs, parsePairKeyValue, serializeKeyPairs } from '../utils';\n\n/**\n * Propagates {@link Baggage} through Context format propagation.\n *\n * Based on the Baggage specification:\n * https://w3c.github.io/baggage/\n */\nexport class W3CBaggagePropagator implements TextMapPropagator {\n  inject(context: Context, carrier: unknown, setter: TextMapSetter): void {\n    const baggage = propagation.getBaggage(context);\n    if (!baggage || isTracingSuppressed(context)) return;\n    const keyPairs = getKeyPairs(baggage)\n      .filter((pair: string) => {\n        return pair.length <= BAGGAGE_MAX_PER_NAME_VALUE_PAIRS;\n      })\n      .slice(0, BAGGAGE_MAX_NAME_VALUE_PAIRS);\n    const headerValue = serializeKeyPairs(keyPairs);\n    if (headerValue.length > 0) {\n      setter.set(carrier, BAGGAGE_HEADER, headerValue);\n    }\n  }\n\n  extract(context: Context, carrier: unknown, getter: TextMapGetter): Context {\n    const headerValue = getter.get(carrier, BAGGAGE_HEADER);\n    const baggageString = Array.isArray(headerValue)\n      ? headerValue.join(BAGGAGE_ITEMS_SEPARATOR)\n      : headerValue;\n    if (!baggageString) return context;\n    const baggage: Record<string, BaggageEntry> = {};\n    if (baggageString.length === 0) {\n      return context;\n    }\n    const pairs = baggageString.split(BAGGAGE_ITEMS_SEPARATOR);\n    pairs.forEach(entry => {\n      const keyPair = parsePairKeyValue(entry);\n      if (keyPair) {\n        const baggageEntry: BaggageEntry = { value: keyPair.value };\n        if (keyPair.metadata) {\n          baggageEntry.metadata = keyPair.metadata;\n        }\n        baggage[keyPair.key] = baggageEntry;\n      }\n    });\n    if (Object.entries(baggage).length === 0) {\n      return context;\n    }\n    return propagation.setBaggage(context, propagation.createBaggage(baggage));\n  }\n\n  fields(): string[] {\n    return [BAGGAGE_HEADER];\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport interface Clock {\n  /**\n   * Return the current time in milliseconds from some epoch such as the Unix epoch or process start\n   */\n  now(): number;\n}\n\n/**\n * A utility for returning wall times anchored to a given point in time. Wall time measurements will\n * not be taken from the system, but instead are computed by adding a monotonic clock time\n * to the anchor point.\n *\n * This is needed because the system time can change and result in unexpected situations like\n * spans ending before they are started. Creating an anchored clock for each local root span\n * ensures that span timings and durations are accurate while preventing span times from drifting\n * too far from the system clock.\n *\n * Only creating an anchored clock once per local trace ensures span times are correct relative\n * to each other. For example, a child span will never have a start time before its parent even\n * if the system clock is corrected during the local trace.\n *\n * Heavily inspired by the OTel Java anchored clock\n * https://github.com/open-telemetry/opentelemetry-java/blob/main/sdk/trace/src/main/java/io/opentelemetry/sdk/trace/AnchoredClock.java\n */\nexport class AnchoredClock implements Clock {\n  private _monotonicClock: Clock;\n  private _epochMillis: number;\n  private _performanceMillis: number;\n\n  /**\n   * Create a new AnchoredClock anchored to the current time returned by systemClock.\n   *\n   * @param systemClock should be a clock that returns the number of milliseconds since January 1 1970 such as Date\n   * @param monotonicClock should be a clock that counts milliseconds monotonically such as window.performance or perf_hooks.performance\n   */\n  public constructor(systemClock: Clock, monotonicClock: Clock) {\n    this._monotonicClock = monotonicClock;\n    this._epochMillis = systemClock.now();\n    this._performanceMillis = monotonicClock.now();\n  }\n\n  /**\n   * Returns the current time by adding the number of milliseconds since the\n   * AnchoredClock was created to the creation epoch time\n   */\n  public now(): number {\n    const delta = this._monotonicClock.now() - this._performanceMillis;\n    return this._epochMillis + delta;\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { diag, SpanAttributeValue, SpanAttributes } from '@opentelemetry/api';\n\nexport function sanitizeAttributes(attributes: unknown): SpanAttributes {\n  const out: SpanAttributes = {};\n\n  if (typeof attributes !== 'object' || attributes == null) {\n    return out;\n  }\n\n  for (const [key, val] of Object.entries(attributes)) {\n    if (!isAttributeKey(key)) {\n      diag.warn(`Invalid attribute key: ${key}`);\n      continue;\n    }\n    if (!isAttributeValue(val)) {\n      diag.warn(`Invalid attribute value set for key: ${key}`);\n      continue;\n    }\n    if (Array.isArray(val)) {\n      out[key] = val.slice();\n    } else {\n      out[key] = val;\n    }\n  }\n\n  return out;\n}\n\nexport function isAttributeKey(key: unknown): key is string {\n  return typeof key === 'string' && key.length > 0;\n}\n\nexport function isAttributeValue(val: unknown): val is SpanAttributeValue {\n  if (val == null) {\n    return true;\n  }\n\n  if (Array.isArray(val)) {\n    return isHomogeneousAttributeValueArray(val);\n  }\n\n  return isValidPrimitiveAttributeValue(val);\n}\n\nfunction isHomogeneousAttributeValueArray(arr: unknown[]): boolean {\n  let type: string | undefined;\n\n  for (const element of arr) {\n    // null/undefined elements are allowed\n    if (element == null) continue;\n\n    if (!type) {\n      if (isValidPrimitiveAttributeValue(element)) {\n        type = typeof element;\n        continue;\n      }\n      // encountered an invalid primitive\n      return false;\n    }\n\n    if (typeof element === type) {\n      continue;\n    }\n\n    return false;\n  }\n\n  return true;\n}\n\nfunction isValidPrimitiveAttributeValue(val: unknown): boolean {\n  switch (typeof val) {\n    case 'number':\n    case 'boolean':\n    case 'string':\n      return true;\n  }\n\n  return false;\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { diag, Exception } from '@opentelemetry/api';\nimport { ErrorHandler } from './types';\n\n/**\n * Returns a function that logs an error using the provided logger, or a\n * console logger if one was not provided.\n */\nexport function loggingErrorHandler(): ErrorHandler {\n  return (ex: Exception) => {\n    diag.error(stringifyException(ex));\n  };\n}\n\n/**\n * Converts an exception into a string representation\n * @param {Exception} ex\n */\nfunction stringifyException(ex: Exception | string): string {\n  if (typeof ex === 'string') {\n    return ex;\n  } else {\n    return JSON.stringify(flattenException(ex));\n  }\n}\n\n/**\n * Flattens an exception into key-value pairs by traversing the prototype chain\n * and coercing values to strings. Duplicate properties will not be overwritten;\n * the first insert wins.\n */\nfunction flattenException(ex: Exception): Record<string, string> {\n  const result = {} as Record<string, string>;\n  let current = ex;\n\n  while (current !== null) {\n    Object.getOwnPropertyNames(current).forEach(propertyName => {\n      if (result[propertyName]) return;\n      const value = current[propertyName as keyof typeof current];\n      if (value) {\n        result[propertyName] = String(value);\n      }\n    });\n    current = Object.getPrototypeOf(current);\n  }\n\n  return result;\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Exception } from '@opentelemetry/api';\nimport { loggingErrorHandler } from './logging-error-handler';\nimport { ErrorHandler } from './types';\n\n/** The global error handler delegate */\nlet delegateHandler = loggingErrorHandler();\n\n/**\n * Set the global error handler\n * @param {ErrorHandler} handler\n */\nexport function setGlobalErrorHandler(handler: ErrorHandler): void {\n  delegateHandler = handler;\n}\n\n/**\n * Return the global error handler\n * @param {Exception} ex\n */\nexport function globalErrorHandler(ex: Exception): void {\n  try {\n    delegateHandler(ex);\n  } catch {} // eslint-disable-line no-empty\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport enum TracesSamplerValues {\n  AlwaysOff = 'always_off',\n  AlwaysOn = 'always_on',\n  ParentBasedAlwaysOff = 'parentbased_always_off',\n  ParentBasedAlwaysOn = 'parentbased_always_on',\n  ParentBasedTraceIdRatio = 'parentbased_traceidratio',\n  TraceIdRatio = 'traceidratio',\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// Updates to this file should also be replicated to @opentelemetry/api too.\n\n/**\n * - globalThis (New standard)\n * - self (Will return the current window instance for supported browsers)\n * - window (fallback for older browser implementations)\n * - global (NodeJS implementation)\n * - <object> (When all else fails)\n */\n\n/** only globals that common to node and browsers are allowed */\n// eslint-disable-next-line node/no-unsupported-features/es-builtins, no-undef\nexport const _globalThis: typeof globalThis =\n  typeof globalThis === 'object'\n    ? globalThis\n    : typeof self === 'object'\n    ? self\n    : typeof window === 'object'\n    ? window\n    : typeof global === 'object'\n    ? global\n    : ({} as typeof globalThis);\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DiagLogLevel } from '@opentelemetry/api';\nimport { TracesSamplerValues } from './sampling';\nimport { _globalThis } from '../platform/browser/globalThis';\n\nconst DEFAULT_LIST_SEPARATOR = ',';\n\n/**\n * Environment interface to define all names\n */\n\nconst ENVIRONMENT_BOOLEAN_KEYS = ['OTEL_SDK_DISABLED'] as const;\n\ntype ENVIRONMENT_BOOLEANS = {\n  [K in (typeof ENVIRONMENT_BOOLEAN_KEYS)[number]]?: boolean;\n};\n\nfunction isEnvVarABoolean(key: unknown): key is keyof ENVIRONMENT_BOOLEANS {\n  return (\n    ENVIRONMENT_BOOLEAN_KEYS.indexOf(key as keyof ENVIRONMENT_BOOLEANS) > -1\n  );\n}\n\nconst ENVIRONMENT_NUMBERS_KEYS = [\n  'OTEL_BSP_EXPORT_TIMEOUT',\n  'OTEL_BSP_MAX_EXPORT_BATCH_SIZE',\n  'OTEL_BSP_MAX_QUEUE_SIZE',\n  'OTEL_BSP_SCHEDULE_DELAY',\n  'OTEL_BLRP_EXPORT_TIMEOUT',\n  'OTEL_BLRP_MAX_EXPORT_BATCH_SIZE',\n  'OTEL_BLRP_MAX_QUEUE_SIZE',\n  'OTEL_BLRP_SCHEDULE_DELAY',\n  'OTEL_ATTRIBUTE_VALUE_LENGTH_LIMIT',\n  'OTEL_ATTRIBUTE_COUNT_LIMIT',\n  'OTEL_SPAN_ATTRIBUTE_VALUE_LENGTH_LIMIT',\n  'OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT',\n  'OTEL_LOGRECORD_ATTRIBUTE_VALUE_LENGTH_LIMIT',\n  'OTEL_LOGRECORD_ATTRIBUTE_COUNT_LIMIT',\n  'OTEL_SPAN_EVENT_COUNT_LIMIT',\n  'OTEL_SPAN_LINK_COUNT_LIMIT',\n  'OTEL_SPAN_ATTRIBUTE_PER_EVENT_COUNT_LIMIT',\n  'OTEL_SPAN_ATTRIBUTE_PER_LINK_COUNT_LIMIT',\n  'OTEL_EXPORTER_OTLP_TIMEOUT',\n  'OTEL_EXPORTER_OTLP_TRACES_TIMEOUT',\n  'OTEL_EXPORTER_OTLP_METRICS_TIMEOUT',\n  'OTEL_EXPORTER_OTLP_LOGS_TIMEOUT',\n  'OTEL_EXPORTER_JAEGER_AGENT_PORT',\n] as const;\n\ntype ENVIRONMENT_NUMBERS = {\n  [K in (typeof ENVIRONMENT_NUMBERS_KEYS)[number]]?: number;\n};\n\nfunction isEnvVarANumber(key: unknown): key is keyof ENVIRONMENT_NUMBERS {\n  return (\n    ENVIRONMENT_NUMBERS_KEYS.indexOf(key as keyof ENVIRONMENT_NUMBERS) > -1\n  );\n}\n\nconst ENVIRONMENT_LISTS_KEYS = [\n  'OTEL_NO_PATCH_MODULES',\n  'OTEL_PROPAGATORS',\n] as const;\n\ntype ENVIRONMENT_LISTS = {\n  [K in (typeof ENVIRONMENT_LISTS_KEYS)[number]]?: string[];\n};\n\nfunction isEnvVarAList(key: unknown): key is keyof ENVIRONMENT_LISTS {\n  return ENVIRONMENT_LISTS_KEYS.indexOf(key as keyof ENVIRONMENT_LISTS) > -1;\n}\n\nexport type ENVIRONMENT = {\n  CONTAINER_NAME?: string;\n  ECS_CONTAINER_METADATA_URI_V4?: string;\n  ECS_CONTAINER_METADATA_URI?: string;\n  HOSTNAME?: string;\n  KUBERNETES_SERVICE_HOST?: string;\n  NAMESPACE?: string;\n  OTEL_EXPORTER_JAEGER_AGENT_HOST?: string;\n  OTEL_EXPORTER_JAEGER_ENDPOINT?: string;\n  OTEL_EXPORTER_JAEGER_PASSWORD?: string;\n  OTEL_EXPORTER_JAEGER_USER?: string;\n  OTEL_EXPORTER_OTLP_ENDPOINT?: string;\n  OTEL_EXPORTER_OTLP_TRACES_ENDPOINT?: string;\n  OTEL_EXPORTER_OTLP_METRICS_ENDPOINT?: string;\n  OTEL_EXPORTER_OTLP_LOGS_ENDPOINT?: string;\n  OTEL_EXPORTER_OTLP_HEADERS?: string;\n  OTEL_EXPORTER_OTLP_TRACES_HEADERS?: string;\n  OTEL_EXPORTER_OTLP_METRICS_HEADERS?: string;\n  OTEL_EXPORTER_OTLP_LOGS_HEADERS?: string;\n  OTEL_EXPORTER_ZIPKIN_ENDPOINT?: string;\n  OTEL_LOG_LEVEL?: DiagLogLevel;\n  OTEL_RESOURCE_ATTRIBUTES?: string;\n  OTEL_SERVICE_NAME?: string;\n  OTEL_TRACES_EXPORTER?: string;\n  OTEL_TRACES_SAMPLER_ARG?: string;\n  OTEL_TRACES_SAMPLER?: string;\n  OTEL_LOGS_EXPORTER?: string;\n  OTEL_EXPORTER_OTLP_INSECURE?: string;\n  OTEL_EXPORTER_OTLP_TRACES_INSECURE?: string;\n  OTEL_EXPORTER_OTLP_METRICS_INSECURE?: string;\n  OTEL_EXPORTER_OTLP_LOGS_INSECURE?: string;\n  OTEL_EXPORTER_OTLP_CERTIFICATE?: string;\n  OTEL_EXPORTER_OTLP_TRACES_CERTIFICATE?: string;\n  OTEL_EXPORTER_OTLP_METRICS_CERTIFICATE?: string;\n  OTEL_EXPORTER_OTLP_LOGS_CERTIFICATE?: string;\n  OTEL_EXPORTER_OTLP_COMPRESSION?: string;\n  OTEL_EXPORTER_OTLP_TRACES_COMPRESSION?: string;\n  OTEL_EXPORTER_OTLP_METRICS_COMPRESSION?: string;\n  OTEL_EXPORTER_OTLP_LOGS_COMPRESSION?: string;\n  OTEL_EXPORTER_OTLP_CLIENT_KEY?: string;\n  OTEL_EXPORTER_OTLP_TRACES_CLIENT_KEY?: string;\n  OTEL_EXPORTER_OTLP_METRICS_CLIENT_KEY?: string;\n  OTEL_EXPORTER_OTLP_LOGS_CLIENT_KEY?: string;\n  OTEL_EXPORTER_OTLP_CLIENT_CERTIFICATE?: string;\n  OTEL_EXPORTER_OTLP_TRACES_CLIENT_CERTIFICATE?: string;\n  OTEL_EXPORTER_OTLP_METRICS_CLIENT_CERTIFICATE?: string;\n  OTEL_EXPORTER_OTLP_LOGS_CLIENT_CERTIFICATE?: string;\n  OTEL_EXPORTER_OTLP_PROTOCOL?: string;\n  OTEL_EXPORTER_OTLP_TRACES_PROTOCOL?: string;\n  OTEL_EXPORTER_OTLP_METRICS_PROTOCOL?: string;\n  OTEL_EXPORTER_OTLP_LOGS_PROTOCOL?: string;\n  OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE?: string;\n} & ENVIRONMENT_BOOLEANS &\n  ENVIRONMENT_NUMBERS &\n  ENVIRONMENT_LISTS;\n\nexport type RAW_ENVIRONMENT = {\n  [key: string]: string | number | undefined | string[];\n};\n\nexport const DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT = Infinity;\n\nexport const DEFAULT_ATTRIBUTE_COUNT_LIMIT = 128;\n\nexport const DEFAULT_SPAN_ATTRIBUTE_PER_EVENT_COUNT_LIMIT = 128;\nexport const DEFAULT_SPAN_ATTRIBUTE_PER_LINK_COUNT_LIMIT = 128;\n\n/**\n * Default environment variables\n */\nexport const DEFAULT_ENVIRONMENT: Required<ENVIRONMENT> = {\n  OTEL_SDK_DISABLED: false,\n  CONTAINER_NAME: '',\n  ECS_CONTAINER_METADATA_URI_V4: '',\n  ECS_CONTAINER_METADATA_URI: '',\n  HOSTNAME: '',\n  KUBERNETES_SERVICE_HOST: '',\n  NAMESPACE: '',\n  OTEL_BSP_EXPORT_TIMEOUT: 30000,\n  OTEL_BSP_MAX_EXPORT_BATCH_SIZE: 512,\n  OTEL_BSP_MAX_QUEUE_SIZE: 2048,\n  OTEL_BSP_SCHEDULE_DELAY: 5000,\n  OTEL_BLRP_EXPORT_TIMEOUT: 30000,\n  OTEL_BLRP_MAX_EXPORT_BATCH_SIZE: 512,\n  OTEL_BLRP_MAX_QUEUE_SIZE: 2048,\n  OTEL_BLRP_SCHEDULE_DELAY: 5000,\n  OTEL_EXPORTER_JAEGER_AGENT_HOST: '',\n  OTEL_EXPORTER_JAEGER_AGENT_PORT: 6832,\n  OTEL_EXPORTER_JAEGER_ENDPOINT: '',\n  OTEL_EXPORTER_JAEGER_PASSWORD: '',\n  OTEL_EXPORTER_JAEGER_USER: '',\n  OTEL_EXPORTER_OTLP_ENDPOINT: '',\n  OTEL_EXPORTER_OTLP_TRACES_ENDPOINT: '',\n  OTEL_EXPORTER_OTLP_METRICS_ENDPOINT: '',\n  OTEL_EXPORTER_OTLP_LOGS_ENDPOINT: '',\n  OTEL_EXPORTER_OTLP_HEADERS: '',\n  OTEL_EXPORTER_OTLP_TRACES_HEADERS: '',\n  OTEL_EXPORTER_OTLP_METRICS_HEADERS: '',\n  OTEL_EXPORTER_OTLP_LOGS_HEADERS: '',\n  OTEL_EXPORTER_OTLP_TIMEOUT: 10000,\n  OTEL_EXPORTER_OTLP_TRACES_TIMEOUT: 10000,\n  OTEL_EXPORTER_OTLP_METRICS_TIMEOUT: 10000,\n  OTEL_EXPORTER_OTLP_LOGS_TIMEOUT: 10000,\n  OTEL_EXPORTER_ZIPKIN_ENDPOINT: 'http://localhost:9411/api/v2/spans',\n  OTEL_LOG_LEVEL: DiagLogLevel.INFO,\n  OTEL_NO_PATCH_MODULES: [],\n  OTEL_PROPAGATORS: ['tracecontext', 'baggage'],\n  OTEL_RESOURCE_ATTRIBUTES: '',\n  OTEL_SERVICE_NAME: '',\n  OTEL_ATTRIBUTE_VALUE_LENGTH_LIMIT: DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT,\n  OTEL_ATTRIBUTE_COUNT_LIMIT: DEFAULT_ATTRIBUTE_COUNT_LIMIT,\n  OTEL_SPAN_ATTRIBUTE_VALUE_LENGTH_LIMIT: DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT,\n  OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT: DEFAULT_ATTRIBUTE_COUNT_LIMIT,\n  OTEL_LOGRECORD_ATTRIBUTE_VALUE_LENGTH_LIMIT:\n    DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT,\n  OTEL_LOGRECORD_ATTRIBUTE_COUNT_LIMIT: DEFAULT_ATTRIBUTE_COUNT_LIMIT,\n  OTEL_SPAN_EVENT_COUNT_LIMIT: 128,\n  OTEL_SPAN_LINK_COUNT_LIMIT: 128,\n  OTEL_SPAN_ATTRIBUTE_PER_EVENT_COUNT_LIMIT:\n    DEFAULT_SPAN_ATTRIBUTE_PER_EVENT_COUNT_LIMIT,\n  OTEL_SPAN_ATTRIBUTE_PER_LINK_COUNT_LIMIT:\n    DEFAULT_SPAN_ATTRIBUTE_PER_LINK_COUNT_LIMIT,\n  OTEL_TRACES_EXPORTER: '',\n  OTEL_TRACES_SAMPLER: TracesSamplerValues.ParentBasedAlwaysOn,\n  OTEL_TRACES_SAMPLER_ARG: '',\n  OTEL_LOGS_EXPORTER: '',\n  OTEL_EXPORTER_OTLP_INSECURE: '',\n  OTEL_EXPORTER_OTLP_TRACES_INSECURE: '',\n  OTEL_EXPORTER_OTLP_METRICS_INSECURE: '',\n  OTEL_EXPORTER_OTLP_LOGS_INSECURE: '',\n  OTEL_EXPORTER_OTLP_CERTIFICATE: '',\n  OTEL_EXPORTER_OTLP_TRACES_CERTIFICATE: '',\n  OTEL_EXPORTER_OTLP_METRICS_CERTIFICATE: '',\n  OTEL_EXPORTER_OTLP_LOGS_CERTIFICATE: '',\n  OTEL_EXPORTER_OTLP_COMPRESSION: '',\n  OTEL_EXPORTER_OTLP_TRACES_COMPRESSION: '',\n  OTEL_EXPORTER_OTLP_METRICS_COMPRESSION: '',\n  OTEL_EXPORTER_OTLP_LOGS_COMPRESSION: '',\n  OTEL_EXPORTER_OTLP_CLIENT_KEY: '',\n  OTEL_EXPORTER_OTLP_TRACES_CLIENT_KEY: '',\n  OTEL_EXPORTER_OTLP_METRICS_CLIENT_KEY: '',\n  OTEL_EXPORTER_OTLP_LOGS_CLIENT_KEY: '',\n  OTEL_EXPORTER_OTLP_CLIENT_CERTIFICATE: '',\n  OTEL_EXPORTER_OTLP_TRACES_CLIENT_CERTIFICATE: '',\n  OTEL_EXPORTER_OTLP_METRICS_CLIENT_CERTIFICATE: '',\n  OTEL_EXPORTER_OTLP_LOGS_CLIENT_CERTIFICATE: '',\n  OTEL_EXPORTER_OTLP_PROTOCOL: 'http/protobuf',\n  OTEL_EXPORTER_OTLP_TRACES_PROTOCOL: 'http/protobuf',\n  OTEL_EXPORTER_OTLP_METRICS_PROTOCOL: 'http/protobuf',\n  OTEL_EXPORTER_OTLP_LOGS_PROTOCOL: 'http/protobuf',\n  OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE: 'cumulative',\n};\n\n/**\n * @param key\n * @param environment\n * @param values\n */\nfunction parseBoolean(\n  key: keyof ENVIRONMENT_BOOLEANS,\n  environment: ENVIRONMENT,\n  values: RAW_ENVIRONMENT\n) {\n  if (typeof values[key] === 'undefined') {\n    return;\n  }\n\n  const value = String(values[key]);\n  // support case-insensitive \"true\"\n  environment[key] = value.toLowerCase() === 'true';\n}\n\n/**\n * Parses a variable as number with number validation\n * @param name\n * @param environment\n * @param values\n * @param min\n * @param max\n */\nfunction parseNumber(\n  name: keyof ENVIRONMENT_NUMBERS,\n  environment: ENVIRONMENT,\n  values: RAW_ENVIRONMENT,\n  min = -Infinity,\n  max = Infinity\n) {\n  if (typeof values[name] !== 'undefined') {\n    const value = Number(values[name] as string);\n    if (!isNaN(value)) {\n      if (value < min) {\n        environment[name] = min;\n      } else if (value > max) {\n        environment[name] = max;\n      } else {\n        environment[name] = value;\n      }\n    }\n  }\n}\n\n/**\n * Parses list-like strings from input into output.\n * @param name\n * @param environment\n * @param values\n * @param separator\n */\nfunction parseStringList(\n  name: keyof ENVIRONMENT_LISTS,\n  output: ENVIRONMENT,\n  input: RAW_ENVIRONMENT,\n  separator = DEFAULT_LIST_SEPARATOR\n) {\n  const givenValue = input[name];\n  if (typeof givenValue === 'string') {\n    output[name] = givenValue.split(separator).map(v => v.trim());\n  }\n}\n\n// The support string -> DiagLogLevel mappings\nconst logLevelMap: { [key: string]: DiagLogLevel } = {\n  ALL: DiagLogLevel.ALL,\n  VERBOSE: DiagLogLevel.VERBOSE,\n  DEBUG: DiagLogLevel.DEBUG,\n  INFO: DiagLogLevel.INFO,\n  WARN: DiagLogLevel.WARN,\n  ERROR: DiagLogLevel.ERROR,\n  NONE: DiagLogLevel.NONE,\n};\n\n/**\n * Environmentally sets log level if valid log level string is provided\n * @param key\n * @param environment\n * @param values\n */\nfunction setLogLevelFromEnv(\n  key: keyof ENVIRONMENT,\n  environment: RAW_ENVIRONMENT | ENVIRONMENT,\n  values: RAW_ENVIRONMENT\n) {\n  const value = values[key];\n  if (typeof value === 'string') {\n    const theLevel = logLevelMap[value.toUpperCase()];\n    if (theLevel != null) {\n      environment[key] = theLevel;\n    }\n  }\n}\n\n/**\n * Parses environment values\n * @param values\n */\nexport function parseEnvironment(values: RAW_ENVIRONMENT): ENVIRONMENT {\n  const environment: ENVIRONMENT = {};\n\n  for (const env in DEFAULT_ENVIRONMENT) {\n    const key = env as keyof ENVIRONMENT;\n\n    switch (key) {\n      case 'OTEL_LOG_LEVEL':\n        setLogLevelFromEnv(key, environment, values);\n        break;\n\n      default:\n        if (isEnvVarABoolean(key)) {\n          parseBoolean(key, environment, values);\n        } else if (isEnvVarANumber(key)) {\n          parseNumber(key, environment, values);\n        } else if (isEnvVarAList(key)) {\n          parseStringList(key, environment, values);\n        } else {\n          const value = values[key];\n          if (typeof value !== 'undefined' && value !== null) {\n            environment[key] = String(value);\n          }\n        }\n    }\n  }\n\n  return environment;\n}\n\n/**\n * Get environment in node or browser without\n * populating default values.\n */\nexport function getEnvWithoutDefaults(): ENVIRONMENT {\n  return typeof process !== 'undefined' && process && process.env\n    ? parseEnvironment(process.env as RAW_ENVIRONMENT)\n    : parseEnvironment(_globalThis as typeof globalThis & RAW_ENVIRONMENT);\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as os from 'os';\nimport {\n  DEFAULT_ENVIRONMENT,\n  ENVIRONMENT,\n  RAW_ENVIRONMENT,\n  parseEnvironment,\n} from '../../utils/environment';\n\n/**\n * Gets the environment variables\n */\nexport function getEnv(): Required<ENVIRONMENT> {\n  const processEnv = parseEnvironment(process.env as RAW_ENVIRONMENT);\n  return Object.assign(\n    {\n      HOSTNAME: os.hostname(),\n    },\n    DEFAULT_ENVIRONMENT,\n    processEnv\n  );\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** only globals that common to node and browsers are allowed */\n// eslint-disable-next-line node/no-unsupported-features/es-builtins\nexport const _globalThis = typeof globalThis === 'object' ? globalThis : global;\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nfunction intValue(charCode: number): number {\n  // 0-9\n  if (charCode >= 48 && charCode <= 57) {\n    return charCode - 48;\n  }\n\n  // a-f\n  if (charCode >= 97 && charCode <= 102) {\n    return charCode - 87;\n  }\n\n  // A-F\n  return charCode - 55;\n}\n\nconst buf8 = Buffer.alloc(8);\nconst buf16 = Buffer.alloc(16);\n\nexport function hexToBase64(hexStr: string): string {\n  let buf;\n  if (hexStr.length === 16) {\n    buf = buf8;\n  } else if (hexStr.length === 32) {\n    buf = buf16;\n  } else {\n    buf = Buffer.alloc(hexStr.length / 2);\n  }\n  let offset = 0;\n\n  for (let i = 0; i < hexStr.length; i += 2) {\n    const hi = intValue(hexStr.charCodeAt(i));\n    const lo = intValue(hexStr.charCodeAt(i + 1));\n    buf.writeUInt8((hi << 4) | lo, offset++);\n  }\n\n  return buf.toString('base64');\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { IdGenerator } from '../../trace/IdGenerator';\nconst SPAN_ID_BYTES = 8;\nconst TRACE_ID_BYTES = 16;\n\n/**\n * @deprecated Use the one defined in @opentelemetry/sdk-trace-base instead.\n */\nexport class RandomIdGenerator implements IdGenerator {\n  /**\n   * Returns a random 16-byte trace ID formatted/encoded as a 32 lowercase hex\n   * characters corresponding to 128 bits.\n   */\n  generateTraceId = getIdGenerator(TRACE_ID_BYTES);\n\n  /**\n   * Returns a random 8-byte span ID formatted/encoded as a 16 lowercase hex\n   * characters corresponding to 64 bits.\n   */\n  generateSpanId = getIdGenerator(SPAN_ID_BYTES);\n}\n\nconst SHARED_BUFFER = Buffer.allocUnsafe(TRACE_ID_BYTES);\nfunction getIdGenerator(bytes: number): () => string {\n  return function generateId() {\n    for (let i = 0; i < bytes / 4; i++) {\n      // unsigned right shift drops decimal part of the number\n      // it is required because if a number between 2**32 and 2**32 - 1 is generated, an out of range error is thrown by writeUInt32BE\n      SHARED_BUFFER.writeUInt32BE((Math.random() * 2 ** 32) >>> 0, i * 4);\n    }\n\n    // If buffer is all 0, set the last byte to 1 to guarantee a valid w3c id is generated\n    for (let i = 0; i < bytes; i++) {\n      if (SHARED_BUFFER[i] > 0) {\n        break;\n      } else if (i === bytes - 1) {\n        SHARED_BUFFER[bytes - 1] = 1;\n      }\n    }\n\n    return SHARED_BUFFER.toString('hex', 0, bytes);\n  };\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { performance } from 'perf_hooks';\n\nexport const otperformance = performance;\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// this is autogenerated file, see scripts/version-update.js\nexport const VERSION = '1.17.1';\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// DO NOT EDIT, this is an Auto-generated file from scripts/semconv/templates//templates/SemanticAttributes.ts.j2\nexport const SemanticAttributes = {\n  /**\n   * The full invoked ARN as provided on the `Context` passed to the function (`Lambda-Runtime-Invoked-Function-Arn` header on the `/runtime/invocation/next` applicable).\n   *\n   * Note: This may be different from `faas.id` if an alias is involved.\n   */\n  AWS_LAMBDA_INVOKED_ARN: 'aws.lambda.invoked_arn',\n\n  /**\n   * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n   */\n  DB_SYSTEM: 'db.system',\n\n  /**\n   * The connection string used to connect to the database. It is recommended to remove embedded credentials.\n   */\n  DB_CONNECTION_STRING: 'db.connection_string',\n\n  /**\n   * Username for accessing the database.\n   */\n  DB_USER: 'db.user',\n\n  /**\n   * The fully-qualified class name of the [Java Database Connectivity (JDBC)](https://docs.oracle.com/javase/8/docs/technotes/guides/jdbc/) driver used to connect.\n   */\n  DB_JDBC_DRIVER_CLASSNAME: 'db.jdbc.driver_classname',\n\n  /**\n   * If no [tech-specific attribute](#call-level-attributes-for-specific-technologies) is defined, this attribute is used to report the name of the database being accessed. For commands that switch the database, this should be set to the target database (even if the command fails).\n   *\n   * Note: In some SQL databases, the database name to be used is called &#34;schema name&#34;.\n   */\n  DB_NAME: 'db.name',\n\n  /**\n   * The database statement being executed.\n   *\n   * Note: The value may be sanitized to exclude sensitive information.\n   */\n  DB_STATEMENT: 'db.statement',\n\n  /**\n   * The name of the operation being executed, e.g. the [MongoDB command name](https://docs.mongodb.com/manual/reference/command/#database-operations) such as `findAndModify`, or the SQL keyword.\n   *\n   * Note: When setting this to an SQL keyword, it is not recommended to attempt any client-side parsing of `db.statement` just to get this property, but it should be set if the operation name is provided by the library being instrumented. If the SQL statement has an ambiguous operation, or performs more than one operation, this value may be omitted.\n   */\n  DB_OPERATION: 'db.operation',\n\n  /**\n   * The Microsoft SQL Server [instance name](https://docs.microsoft.com/en-us/sql/connect/jdbc/building-the-connection-url?view=sql-server-ver15) connecting to. This name is used to determine the port of a named instance.\n   *\n   * Note: If setting a `db.mssql.instance_name`, `net.peer.port` is no longer required (but still recommended if non-standard).\n   */\n  DB_MSSQL_INSTANCE_NAME: 'db.mssql.instance_name',\n\n  /**\n   * The name of the keyspace being accessed. To be used instead of the generic `db.name` attribute.\n   */\n  DB_CASSANDRA_KEYSPACE: 'db.cassandra.keyspace',\n\n  /**\n   * The fetch size used for paging, i.e. how many rows will be returned at once.\n   */\n  DB_CASSANDRA_PAGE_SIZE: 'db.cassandra.page_size',\n\n  /**\n   * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).\n   */\n  DB_CASSANDRA_CONSISTENCY_LEVEL: 'db.cassandra.consistency_level',\n\n  /**\n   * The name of the primary table that the operation is acting upon, including the schema name (if applicable).\n   *\n   * Note: This mirrors the db.sql.table attribute but references cassandra rather than sql. It is not recommended to attempt any client-side parsing of `db.statement` just to get this property, but it should be set if it is provided by the library being instrumented. If the operation is acting upon an anonymous table, or more than one table, this value MUST NOT be set.\n   */\n  DB_CASSANDRA_TABLE: 'db.cassandra.table',\n\n  /**\n   * Whether or not the query is idempotent.\n   */\n  DB_CASSANDRA_IDEMPOTENCE: 'db.cassandra.idempotence',\n\n  /**\n   * The number of times a query was speculatively executed. Not set or `0` if the query was not executed speculatively.\n   */\n  DB_CASSANDRA_SPECULATIVE_EXECUTION_COUNT:\n    'db.cassandra.speculative_execution_count',\n\n  /**\n   * The ID of the coordinating node for a query.\n   */\n  DB_CASSANDRA_COORDINATOR_ID: 'db.cassandra.coordinator.id',\n\n  /**\n   * The data center of the coordinating node for a query.\n   */\n  DB_CASSANDRA_COORDINATOR_DC: 'db.cassandra.coordinator.dc',\n\n  /**\n   * The [HBase namespace](https://hbase.apache.org/book.html#_namespace) being accessed. To be used instead of the generic `db.name` attribute.\n   */\n  DB_HBASE_NAMESPACE: 'db.hbase.namespace',\n\n  /**\n   * The index of the database being accessed as used in the [`SELECT` command](https://redis.io/commands/select), provided as an integer. To be used instead of the generic `db.name` attribute.\n   */\n  DB_REDIS_DATABASE_INDEX: 'db.redis.database_index',\n\n  /**\n   * The collection being accessed within the database stated in `db.name`.\n   */\n  DB_MONGODB_COLLECTION: 'db.mongodb.collection',\n\n  /**\n   * The name of the primary table that the operation is acting upon, including the schema name (if applicable).\n   *\n   * Note: It is not recommended to attempt any client-side parsing of `db.statement` just to get this property, but it should be set if it is provided by the library being instrumented. If the operation is acting upon an anonymous table, or more than one table, this value MUST NOT be set.\n   */\n  DB_SQL_TABLE: 'db.sql.table',\n\n  /**\n   * The type of the exception (its fully-qualified class name, if applicable). The dynamic type of the exception should be preferred over the static type in languages that support it.\n   */\n  EXCEPTION_TYPE: 'exception.type',\n\n  /**\n   * The exception message.\n   */\n  EXCEPTION_MESSAGE: 'exception.message',\n\n  /**\n   * A stacktrace as a string in the natural representation for the language runtime. The representation is to be determined and documented by each language SIG.\n   */\n  EXCEPTION_STACKTRACE: 'exception.stacktrace',\n\n  /**\n  * SHOULD be set to true if the exception event is recorded at a point where it is known that the exception is escaping the scope of the span.\n  *\n  * Note: An exception is considered to have escaped (or left) the scope of a span,\nif that span is ended while the exception is still logically &#34;in flight&#34;.\nThis may be actually &#34;in flight&#34; in some languages (e.g. if the exception\nis passed to a Context manager&#39;s `__exit__` method in Python) but will\nusually be caught at the point of recording the exception in most languages.\n\nIt is usually not possible to determine at the point where an exception is thrown\nwhether it will escape the scope of a span.\nHowever, it is trivial to know that an exception\nwill escape, if one checks for an active exception just before ending the span,\nas done in the [example above](#exception-end-example).\n\nIt follows that an exception may still escape the scope of the span\neven if the `exception.escaped` attribute was not set or set to false,\nsince the event might have been recorded at a time where it was not\nclear whether the exception will escape.\n  */\n  EXCEPTION_ESCAPED: 'exception.escaped',\n\n  /**\n   * Type of the trigger on which the function is executed.\n   */\n  FAAS_TRIGGER: 'faas.trigger',\n\n  /**\n   * The execution ID of the current function execution.\n   */\n  FAAS_EXECUTION: 'faas.execution',\n\n  /**\n   * The name of the source on which the triggering operation was performed. For example, in Cloud Storage or S3 corresponds to the bucket name, and in Cosmos DB to the database name.\n   */\n  FAAS_DOCUMENT_COLLECTION: 'faas.document.collection',\n\n  /**\n   * Describes the type of the operation that was performed on the data.\n   */\n  FAAS_DOCUMENT_OPERATION: 'faas.document.operation',\n\n  /**\n   * A string containing the time when the data was accessed in the [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) format expressed in [UTC](https://www.w3.org/TR/NOTE-datetime).\n   */\n  FAAS_DOCUMENT_TIME: 'faas.document.time',\n\n  /**\n   * The document name/table subjected to the operation. For example, in Cloud Storage or S3 is the name of the file, and in Cosmos DB the table name.\n   */\n  FAAS_DOCUMENT_NAME: 'faas.document.name',\n\n  /**\n   * A string containing the function invocation time in the [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) format expressed in [UTC](https://www.w3.org/TR/NOTE-datetime).\n   */\n  FAAS_TIME: 'faas.time',\n\n  /**\n   * A string containing the schedule period as [Cron Expression](https://docs.oracle.com/cd/E12058_01/doc/doc.1014/e12030/cron_expressions.htm).\n   */\n  FAAS_CRON: 'faas.cron',\n\n  /**\n   * A boolean that is true if the serverless function is executed for the first time (aka cold-start).\n   */\n  FAAS_COLDSTART: 'faas.coldstart',\n\n  /**\n   * The name of the invoked function.\n   *\n   * Note: SHOULD be equal to the `faas.name` resource attribute of the invoked function.\n   */\n  FAAS_INVOKED_NAME: 'faas.invoked_name',\n\n  /**\n   * The cloud provider of the invoked function.\n   *\n   * Note: SHOULD be equal to the `cloud.provider` resource attribute of the invoked function.\n   */\n  FAAS_INVOKED_PROVIDER: 'faas.invoked_provider',\n\n  /**\n   * The cloud region of the invoked function.\n   *\n   * Note: SHOULD be equal to the `cloud.region` resource attribute of the invoked function.\n   */\n  FAAS_INVOKED_REGION: 'faas.invoked_region',\n\n  /**\n   * Transport protocol used. See note below.\n   */\n  NET_TRANSPORT: 'net.transport',\n\n  /**\n   * Remote address of the peer (dotted decimal for IPv4 or [RFC5952](https://tools.ietf.org/html/rfc5952) for IPv6).\n   */\n  NET_PEER_IP: 'net.peer.ip',\n\n  /**\n   * Remote port number.\n   */\n  NET_PEER_PORT: 'net.peer.port',\n\n  /**\n   * Remote hostname or similar, see note below.\n   */\n  NET_PEER_NAME: 'net.peer.name',\n\n  /**\n   * Like `net.peer.ip` but for the host IP. Useful in case of a multi-IP host.\n   */\n  NET_HOST_IP: 'net.host.ip',\n\n  /**\n   * Like `net.peer.port` but for the host port.\n   */\n  NET_HOST_PORT: 'net.host.port',\n\n  /**\n   * Local hostname or similar, see note below.\n   */\n  NET_HOST_NAME: 'net.host.name',\n\n  /**\n   * The internet connection type currently being used by the host.\n   */\n  NET_HOST_CONNECTION_TYPE: 'net.host.connection.type',\n\n  /**\n   * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n   */\n  NET_HOST_CONNECTION_SUBTYPE: 'net.host.connection.subtype',\n\n  /**\n   * The name of the mobile carrier.\n   */\n  NET_HOST_CARRIER_NAME: 'net.host.carrier.name',\n\n  /**\n   * The mobile carrier country code.\n   */\n  NET_HOST_CARRIER_MCC: 'net.host.carrier.mcc',\n\n  /**\n   * The mobile carrier network code.\n   */\n  NET_HOST_CARRIER_MNC: 'net.host.carrier.mnc',\n\n  /**\n   * The ISO 3166-1 alpha-2 2-character country code associated with the mobile carrier network.\n   */\n  NET_HOST_CARRIER_ICC: 'net.host.carrier.icc',\n\n  /**\n   * The [`service.name`](../../resource/semantic_conventions/README.md#service) of the remote service. SHOULD be equal to the actual `service.name` resource attribute of the remote service if any.\n   */\n  PEER_SERVICE: 'peer.service',\n\n  /**\n   * Username or client_id extracted from the access token or [Authorization](https://tools.ietf.org/html/rfc7235#section-4.2) header in the inbound request from outside the system.\n   */\n  ENDUSER_ID: 'enduser.id',\n\n  /**\n   * Actual/assumed role the client is making the request under extracted from token or application security context.\n   */\n  ENDUSER_ROLE: 'enduser.role',\n\n  /**\n   * Scopes or granted authorities the client currently possesses extracted from token or application security context. The value would come from the scope associated with an [OAuth 2.0 Access Token](https://tools.ietf.org/html/rfc6749#section-3.3) or an attribute value in a [SAML 2.0 Assertion](http://docs.oasis-open.org/security/saml/Post2.0/sstc-saml-tech-overview-2.0.html).\n   */\n  ENDUSER_SCOPE: 'enduser.scope',\n\n  /**\n   * Current &#34;managed&#34; thread ID (as opposed to OS thread ID).\n   */\n  THREAD_ID: 'thread.id',\n\n  /**\n   * Current thread name.\n   */\n  THREAD_NAME: 'thread.name',\n\n  /**\n   * The method or function name, or equivalent (usually rightmost part of the code unit&#39;s name).\n   */\n  CODE_FUNCTION: 'code.function',\n\n  /**\n   * The &#34;namespace&#34; within which `code.function` is defined. Usually the qualified class or module name, such that `code.namespace` + some separator + `code.function` form a unique identifier for the code unit.\n   */\n  CODE_NAMESPACE: 'code.namespace',\n\n  /**\n   * The source code file name that identifies the code unit as uniquely as possible (preferably an absolute file path).\n   */\n  CODE_FILEPATH: 'code.filepath',\n\n  /**\n   * The line number in `code.filepath` best representing the operation. It SHOULD point within the code unit named in `code.function`.\n   */\n  CODE_LINENO: 'code.lineno',\n\n  /**\n   * HTTP request method.\n   */\n  HTTP_METHOD: 'http.method',\n\n  /**\n   * Full HTTP request URL in the form `scheme://host[:port]/path?query[#fragment]`. Usually the fragment is not transmitted over HTTP, but if it is known, it should be included nevertheless.\n   *\n   * Note: `http.url` MUST NOT contain credentials passed via URL in form of `https://username:password@www.example.com/`. In such case the attribute&#39;s value should be `https://www.example.com/`.\n   */\n  HTTP_URL: 'http.url',\n\n  /**\n   * The full request target as passed in a HTTP request line or equivalent.\n   */\n  HTTP_TARGET: 'http.target',\n\n  /**\n   * The value of the [HTTP host header](https://tools.ietf.org/html/rfc7230#section-5.4). An empty Host header should also be reported, see note.\n   *\n   * Note: When the header is present but empty the attribute SHOULD be set to the empty string. Note that this is a valid situation that is expected in certain cases, according the aforementioned [section of RFC 7230](https://tools.ietf.org/html/rfc7230#section-5.4). When the header is not set the attribute MUST NOT be set.\n   */\n  HTTP_HOST: 'http.host',\n\n  /**\n   * The URI scheme identifying the used protocol.\n   */\n  HTTP_SCHEME: 'http.scheme',\n\n  /**\n   * [HTTP response status code](https://tools.ietf.org/html/rfc7231#section-6).\n   */\n  HTTP_STATUS_CODE: 'http.status_code',\n\n  /**\n   * Kind of HTTP protocol used.\n   *\n   * Note: If `net.transport` is not specified, it can be assumed to be `IP.TCP` except if `http.flavor` is `QUIC`, in which case `IP.UDP` is assumed.\n   */\n  HTTP_FLAVOR: 'http.flavor',\n\n  /**\n   * Value of the [HTTP User-Agent](https://tools.ietf.org/html/rfc7231#section-5.5.3) header sent by the client.\n   */\n  HTTP_USER_AGENT: 'http.user_agent',\n\n  /**\n   * The size of the request payload body in bytes. This is the number of bytes transferred excluding headers and is often, but not always, present as the [Content-Length](https://tools.ietf.org/html/rfc7230#section-3.3.2) header. For requests using transport encoding, this should be the compressed size.\n   */\n  HTTP_REQUEST_CONTENT_LENGTH: 'http.request_content_length',\n\n  /**\n   * The size of the uncompressed request payload body after transport decoding. Not set if transport encoding not used.\n   */\n  HTTP_REQUEST_CONTENT_LENGTH_UNCOMPRESSED:\n    'http.request_content_length_uncompressed',\n\n  /**\n   * The size of the response payload body in bytes. This is the number of bytes transferred excluding headers and is often, but not always, present as the [Content-Length](https://tools.ietf.org/html/rfc7230#section-3.3.2) header. For requests using transport encoding, this should be the compressed size.\n   */\n  HTTP_RESPONSE_CONTENT_LENGTH: 'http.response_content_length',\n\n  /**\n   * The size of the uncompressed response payload body after transport decoding. Not set if transport encoding not used.\n   */\n  HTTP_RESPONSE_CONTENT_LENGTH_UNCOMPRESSED:\n    'http.response_content_length_uncompressed',\n\n  /**\n   * The primary server name of the matched virtual host. This should be obtained via configuration. If no such configuration can be obtained, this attribute MUST NOT be set ( `net.host.name` should be used instead).\n   *\n   * Note: `http.url` is usually not readily available on the server side but would have to be assembled in a cumbersome and sometimes lossy process from other information (see e.g. open-telemetry/opentelemetry-python/pull/148). It is thus preferred to supply the raw data that is available.\n   */\n  HTTP_SERVER_NAME: 'http.server_name',\n\n  /**\n   * The matched route (path template).\n   */\n  HTTP_ROUTE: 'http.route',\n\n  /**\n  * The IP address of the original client behind all proxies, if known (e.g. from [X-Forwarded-For](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Forwarded-For)).\n  *\n  * Note: This is not necessarily the same as `net.peer.ip`, which would\nidentify the network-level peer, which may be a proxy.\n\nThis attribute should be set when a source of information different\nfrom the one used for `net.peer.ip`, is available even if that other\nsource just confirms the same value as `net.peer.ip`.\nRationale: For `net.peer.ip`, one typically does not know if it\ncomes from a proxy, reverse proxy, or the actual client. Setting\n`http.client_ip` when it&#39;s the same as `net.peer.ip` means that\none is at least somewhat confident that the address is not that of\nthe closest proxy.\n  */\n  HTTP_CLIENT_IP: 'http.client_ip',\n\n  /**\n   * The keys in the `RequestItems` object field.\n   */\n  AWS_DYNAMODB_TABLE_NAMES: 'aws.dynamodb.table_names',\n\n  /**\n   * The JSON-serialized value of each item in the `ConsumedCapacity` response field.\n   */\n  AWS_DYNAMODB_CONSUMED_CAPACITY: 'aws.dynamodb.consumed_capacity',\n\n  /**\n   * The JSON-serialized value of the `ItemCollectionMetrics` response field.\n   */\n  AWS_DYNAMODB_ITEM_COLLECTION_METRICS: 'aws.dynamodb.item_collection_metrics',\n\n  /**\n   * The value of the `ProvisionedThroughput.ReadCapacityUnits` request parameter.\n   */\n  AWS_DYNAMODB_PROVISIONED_READ_CAPACITY:\n    'aws.dynamodb.provisioned_read_capacity',\n\n  /**\n   * The value of the `ProvisionedThroughput.WriteCapacityUnits` request parameter.\n   */\n  AWS_DYNAMODB_PROVISIONED_WRITE_CAPACITY:\n    'aws.dynamodb.provisioned_write_capacity',\n\n  /**\n   * The value of the `ConsistentRead` request parameter.\n   */\n  AWS_DYNAMODB_CONSISTENT_READ: 'aws.dynamodb.consistent_read',\n\n  /**\n   * The value of the `ProjectionExpression` request parameter.\n   */\n  AWS_DYNAMODB_PROJECTION: 'aws.dynamodb.projection',\n\n  /**\n   * The value of the `Limit` request parameter.\n   */\n  AWS_DYNAMODB_LIMIT: 'aws.dynamodb.limit',\n\n  /**\n   * The value of the `AttributesToGet` request parameter.\n   */\n  AWS_DYNAMODB_ATTRIBUTES_TO_GET: 'aws.dynamodb.attributes_to_get',\n\n  /**\n   * The value of the `IndexName` request parameter.\n   */\n  AWS_DYNAMODB_INDEX_NAME: 'aws.dynamodb.index_name',\n\n  /**\n   * The value of the `Select` request parameter.\n   */\n  AWS_DYNAMODB_SELECT: 'aws.dynamodb.select',\n\n  /**\n   * The JSON-serialized value of each item of the `GlobalSecondaryIndexes` request field.\n   */\n  AWS_DYNAMODB_GLOBAL_SECONDARY_INDEXES:\n    'aws.dynamodb.global_secondary_indexes',\n\n  /**\n   * The JSON-serialized value of each item of the `LocalSecondaryIndexes` request field.\n   */\n  AWS_DYNAMODB_LOCAL_SECONDARY_INDEXES: 'aws.dynamodb.local_secondary_indexes',\n\n  /**\n   * The value of the `ExclusiveStartTableName` request parameter.\n   */\n  AWS_DYNAMODB_EXCLUSIVE_START_TABLE: 'aws.dynamodb.exclusive_start_table',\n\n  /**\n   * The the number of items in the `TableNames` response parameter.\n   */\n  AWS_DYNAMODB_TABLE_COUNT: 'aws.dynamodb.table_count',\n\n  /**\n   * The value of the `ScanIndexForward` request parameter.\n   */\n  AWS_DYNAMODB_SCAN_FORWARD: 'aws.dynamodb.scan_forward',\n\n  /**\n   * The value of the `Segment` request parameter.\n   */\n  AWS_DYNAMODB_SEGMENT: 'aws.dynamodb.segment',\n\n  /**\n   * The value of the `TotalSegments` request parameter.\n   */\n  AWS_DYNAMODB_TOTAL_SEGMENTS: 'aws.dynamodb.total_segments',\n\n  /**\n   * The value of the `Count` response parameter.\n   */\n  AWS_DYNAMODB_COUNT: 'aws.dynamodb.count',\n\n  /**\n   * The value of the `ScannedCount` response parameter.\n   */\n  AWS_DYNAMODB_SCANNED_COUNT: 'aws.dynamodb.scanned_count',\n\n  /**\n   * The JSON-serialized value of each item in the `AttributeDefinitions` request field.\n   */\n  AWS_DYNAMODB_ATTRIBUTE_DEFINITIONS: 'aws.dynamodb.attribute_definitions',\n\n  /**\n   * The JSON-serialized value of each item in the the `GlobalSecondaryIndexUpdates` request field.\n   */\n  AWS_DYNAMODB_GLOBAL_SECONDARY_INDEX_UPDATES:\n    'aws.dynamodb.global_secondary_index_updates',\n\n  /**\n   * A string identifying the messaging system.\n   */\n  MESSAGING_SYSTEM: 'messaging.system',\n\n  /**\n   * The message destination name. This might be equal to the span name but is required nevertheless.\n   */\n  MESSAGING_DESTINATION: 'messaging.destination',\n\n  /**\n   * The kind of message destination.\n   */\n  MESSAGING_DESTINATION_KIND: 'messaging.destination_kind',\n\n  /**\n   * A boolean that is true if the message destination is temporary.\n   */\n  MESSAGING_TEMP_DESTINATION: 'messaging.temp_destination',\n\n  /**\n   * The name of the transport protocol.\n   */\n  MESSAGING_PROTOCOL: 'messaging.protocol',\n\n  /**\n   * The version of the transport protocol.\n   */\n  MESSAGING_PROTOCOL_VERSION: 'messaging.protocol_version',\n\n  /**\n   * Connection string.\n   */\n  MESSAGING_URL: 'messaging.url',\n\n  /**\n   * A value used by the messaging system as an identifier for the message, represented as a string.\n   */\n  MESSAGING_MESSAGE_ID: 'messaging.message_id',\n\n  /**\n   * The [conversation ID](#conversations) identifying the conversation to which the message belongs, represented as a string. Sometimes called &#34;Correlation ID&#34;.\n   */\n  MESSAGING_CONVERSATION_ID: 'messaging.conversation_id',\n\n  /**\n   * The (uncompressed) size of the message payload in bytes. Also use this attribute if it is unknown whether the compressed or uncompressed payload size is reported.\n   */\n  MESSAGING_MESSAGE_PAYLOAD_SIZE_BYTES: 'messaging.message_payload_size_bytes',\n\n  /**\n   * The compressed size of the message payload in bytes.\n   */\n  MESSAGING_MESSAGE_PAYLOAD_COMPRESSED_SIZE_BYTES:\n    'messaging.message_payload_compressed_size_bytes',\n\n  /**\n   * A string identifying the kind of message consumption as defined in the [Operation names](#operation-names) section above. If the operation is &#34;send&#34;, this attribute MUST NOT be set, since the operation can be inferred from the span kind in that case.\n   */\n  MESSAGING_OPERATION: 'messaging.operation',\n\n  /**\n   * The identifier for the consumer receiving a message. For Kafka, set it to `{messaging.kafka.consumer_group} - {messaging.kafka.client_id}`, if both are present, or only `messaging.kafka.consumer_group`. For brokers, such as RabbitMQ and Artemis, set it to the `client_id` of the client consuming the message.\n   */\n  MESSAGING_CONSUMER_ID: 'messaging.consumer_id',\n\n  /**\n   * RabbitMQ message routing key.\n   */\n  MESSAGING_RABBITMQ_ROUTING_KEY: 'messaging.rabbitmq.routing_key',\n\n  /**\n   * Message keys in Kafka are used for grouping alike messages to ensure they&#39;re processed on the same partition. They differ from `messaging.message_id` in that they&#39;re not unique. If the key is `null`, the attribute MUST NOT be set.\n   *\n   * Note: If the key type is not string, it&#39;s string representation has to be supplied for the attribute. If the key has no unambiguous, canonical string form, don&#39;t include its value.\n   */\n  MESSAGING_KAFKA_MESSAGE_KEY: 'messaging.kafka.message_key',\n\n  /**\n   * Name of the Kafka Consumer Group that is handling the message. Only applies to consumers, not producers.\n   */\n  MESSAGING_KAFKA_CONSUMER_GROUP: 'messaging.kafka.consumer_group',\n\n  /**\n   * Client Id for the Consumer or Producer that is handling the message.\n   */\n  MESSAGING_KAFKA_CLIENT_ID: 'messaging.kafka.client_id',\n\n  /**\n   * Partition the message is sent to.\n   */\n  MESSAGING_KAFKA_PARTITION: 'messaging.kafka.partition',\n\n  /**\n   * A boolean that is true if the message is a tombstone.\n   */\n  MESSAGING_KAFKA_TOMBSTONE: 'messaging.kafka.tombstone',\n\n  /**\n   * A string identifying the remoting system.\n   */\n  RPC_SYSTEM: 'rpc.system',\n\n  /**\n   * The full (logical) name of the service being called, including its package name, if applicable.\n   *\n   * Note: This is the logical name of the service from the RPC interface perspective, which can be different from the name of any implementing class. The `code.namespace` attribute may be used to store the latter (despite the attribute name, it may include a class name; e.g., class with method actually executing the call on the server side, RPC client stub class on the client side).\n   */\n  RPC_SERVICE: 'rpc.service',\n\n  /**\n   * The name of the (logical) method being called, must be equal to the $method part in the span name.\n   *\n   * Note: This is the logical name of the method from the RPC interface perspective, which can be different from the name of any implementing method/function. The `code.function` attribute may be used to store the latter (e.g., method actually executing the call on the server side, RPC client stub method on the client side).\n   */\n  RPC_METHOD: 'rpc.method',\n\n  /**\n   * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n   */\n  RPC_GRPC_STATUS_CODE: 'rpc.grpc.status_code',\n\n  /**\n   * Protocol version as in `jsonrpc` property of request/response. Since JSON-RPC 1.0 does not specify this, the value can be omitted.\n   */\n  RPC_JSONRPC_VERSION: 'rpc.jsonrpc.version',\n\n  /**\n   * `id` property of request or response. Since protocol allows id to be int, string, `null` or missing (for notifications), value is expected to be cast to string for simplicity. Use empty string in case of `null` value. Omit entirely if this is a notification.\n   */\n  RPC_JSONRPC_REQUEST_ID: 'rpc.jsonrpc.request_id',\n\n  /**\n   * `error.code` property of response if it is an error response.\n   */\n  RPC_JSONRPC_ERROR_CODE: 'rpc.jsonrpc.error_code',\n\n  /**\n   * `error.message` property of response if it is an error response.\n   */\n  RPC_JSONRPC_ERROR_MESSAGE: 'rpc.jsonrpc.error_message',\n\n  /**\n   * Whether this is a received or sent message.\n   */\n  MESSAGE_TYPE: 'message.type',\n\n  /**\n   * MUST be calculated as two different counters starting from `1` one for sent messages and one for received message.\n   *\n   * Note: This way we guarantee that the values will be consistent between different implementations.\n   */\n  MESSAGE_ID: 'message.id',\n\n  /**\n   * Compressed size of the message in bytes.\n   */\n  MESSAGE_COMPRESSED_SIZE: 'message.compressed_size',\n\n  /**\n   * Uncompressed size of the message in bytes.\n   */\n  MESSAGE_UNCOMPRESSED_SIZE: 'message.uncompressed_size',\n};\n\nexport const DbSystemValues = {\n  /** Some other SQL database. Fallback only. See notes. */\n  OTHER_SQL: 'other_sql',\n  /** Microsoft SQL Server. */\n  MSSQL: 'mssql',\n  /** MySQL. */\n  MYSQL: 'mysql',\n  /** Oracle Database. */\n  ORACLE: 'oracle',\n  /** IBM Db2. */\n  DB2: 'db2',\n  /** PostgreSQL. */\n  POSTGRESQL: 'postgresql',\n  /** Amazon Redshift. */\n  REDSHIFT: 'redshift',\n  /** Apache Hive. */\n  HIVE: 'hive',\n  /** Cloudscape. */\n  CLOUDSCAPE: 'cloudscape',\n  /** HyperSQL DataBase. */\n  HSQLDB: 'hsqldb',\n  /** Progress Database. */\n  PROGRESS: 'progress',\n  /** SAP MaxDB. */\n  MAXDB: 'maxdb',\n  /** SAP HANA. */\n  HANADB: 'hanadb',\n  /** Ingres. */\n  INGRES: 'ingres',\n  /** FirstSQL. */\n  FIRSTSQL: 'firstsql',\n  /** EnterpriseDB. */\n  EDB: 'edb',\n  /** InterSystems Caché. */\n  CACHE: 'cache',\n  /** Adabas (Adaptable Database System). */\n  ADABAS: 'adabas',\n  /** Firebird. */\n  FIREBIRD: 'firebird',\n  /** Apache Derby. */\n  DERBY: 'derby',\n  /** FileMaker. */\n  FILEMAKER: 'filemaker',\n  /** Informix. */\n  INFORMIX: 'informix',\n  /** InstantDB. */\n  INSTANTDB: 'instantdb',\n  /** InterBase. */\n  INTERBASE: 'interbase',\n  /** MariaDB. */\n  MARIADB: 'mariadb',\n  /** Netezza. */\n  NETEZZA: 'netezza',\n  /** Pervasive PSQL. */\n  PERVASIVE: 'pervasive',\n  /** PointBase. */\n  POINTBASE: 'pointbase',\n  /** SQLite. */\n  SQLITE: 'sqlite',\n  /** Sybase. */\n  SYBASE: 'sybase',\n  /** Teradata. */\n  TERADATA: 'teradata',\n  /** Vertica. */\n  VERTICA: 'vertica',\n  /** H2. */\n  H2: 'h2',\n  /** ColdFusion IMQ. */\n  COLDFUSION: 'coldfusion',\n  /** Apache Cassandra. */\n  CASSANDRA: 'cassandra',\n  /** Apache HBase. */\n  HBASE: 'hbase',\n  /** MongoDB. */\n  MONGODB: 'mongodb',\n  /** Redis. */\n  REDIS: 'redis',\n  /** Couchbase. */\n  COUCHBASE: 'couchbase',\n  /** CouchDB. */\n  COUCHDB: 'couchdb',\n  /** Microsoft Azure Cosmos DB. */\n  COSMOSDB: 'cosmosdb',\n  /** Amazon DynamoDB. */\n  DYNAMODB: 'dynamodb',\n  /** Neo4j. */\n  NEO4J: 'neo4j',\n  /** Apache Geode. */\n  GEODE: 'geode',\n  /** Elasticsearch. */\n  ELASTICSEARCH: 'elasticsearch',\n  /** Memcached. */\n  MEMCACHED: 'memcached',\n  /** CockroachDB. */\n  COCKROACHDB: 'cockroachdb',\n} as const;\nexport type DbSystemValues =\n  (typeof DbSystemValues)[keyof typeof DbSystemValues];\n\nexport const DbCassandraConsistencyLevelValues = {\n  /** all. */\n  ALL: 'all',\n  /** each_quorum. */\n  EACH_QUORUM: 'each_quorum',\n  /** quorum. */\n  QUORUM: 'quorum',\n  /** local_quorum. */\n  LOCAL_QUORUM: 'local_quorum',\n  /** one. */\n  ONE: 'one',\n  /** two. */\n  TWO: 'two',\n  /** three. */\n  THREE: 'three',\n  /** local_one. */\n  LOCAL_ONE: 'local_one',\n  /** any. */\n  ANY: 'any',\n  /** serial. */\n  SERIAL: 'serial',\n  /** local_serial. */\n  LOCAL_SERIAL: 'local_serial',\n} as const;\nexport type DbCassandraConsistencyLevelValues =\n  (typeof DbCassandraConsistencyLevelValues)[keyof typeof DbCassandraConsistencyLevelValues];\n\nexport const FaasTriggerValues = {\n  /** A response to some data source operation such as a database or filesystem read/write. */\n  DATASOURCE: 'datasource',\n  /** To provide an answer to an inbound HTTP request. */\n  HTTP: 'http',\n  /** A function is set to be executed when messages are sent to a messaging system. */\n  PUBSUB: 'pubsub',\n  /** A function is scheduled to be executed regularly. */\n  TIMER: 'timer',\n  /** If none of the others apply. */\n  OTHER: 'other',\n} as const;\nexport type FaasTriggerValues =\n  (typeof FaasTriggerValues)[keyof typeof FaasTriggerValues];\n\nexport const FaasDocumentOperationValues = {\n  /** When a new object is created. */\n  INSERT: 'insert',\n  /** When an object is modified. */\n  EDIT: 'edit',\n  /** When an object is deleted. */\n  DELETE: 'delete',\n} as const;\nexport type FaasDocumentOperationValues =\n  (typeof FaasDocumentOperationValues)[keyof typeof FaasDocumentOperationValues];\n\nexport const FaasInvokedProviderValues = {\n  /** Alibaba Cloud. */\n  ALIBABA_CLOUD: 'alibaba_cloud',\n  /** Amazon Web Services. */\n  AWS: 'aws',\n  /** Microsoft Azure. */\n  AZURE: 'azure',\n  /** Google Cloud Platform. */\n  GCP: 'gcp',\n} as const;\nexport type FaasInvokedProviderValues =\n  (typeof FaasInvokedProviderValues)[keyof typeof FaasInvokedProviderValues];\n\nexport const NetTransportValues = {\n  /** ip_tcp. */\n  IP_TCP: 'ip_tcp',\n  /** ip_udp. */\n  IP_UDP: 'ip_udp',\n  /** Another IP-based protocol. */\n  IP: 'ip',\n  /** Unix Domain socket. See below. */\n  UNIX: 'unix',\n  /** Named or anonymous pipe. See note below. */\n  PIPE: 'pipe',\n  /** In-process communication. */\n  INPROC: 'inproc',\n  /** Something else (non IP-based). */\n  OTHER: 'other',\n} as const;\nexport type NetTransportValues =\n  (typeof NetTransportValues)[keyof typeof NetTransportValues];\n\nexport const NetHostConnectionTypeValues = {\n  /** wifi. */\n  WIFI: 'wifi',\n  /** wired. */\n  WIRED: 'wired',\n  /** cell. */\n  CELL: 'cell',\n  /** unavailable. */\n  UNAVAILABLE: 'unavailable',\n  /** unknown. */\n  UNKNOWN: 'unknown',\n} as const;\nexport type NetHostConnectionTypeValues =\n  (typeof NetHostConnectionTypeValues)[keyof typeof NetHostConnectionTypeValues];\n\nexport const NetHostConnectionSubtypeValues = {\n  /** GPRS. */\n  GPRS: 'gprs',\n  /** EDGE. */\n  EDGE: 'edge',\n  /** UMTS. */\n  UMTS: 'umts',\n  /** CDMA. */\n  CDMA: 'cdma',\n  /** EVDO Rel. 0. */\n  EVDO_0: 'evdo_0',\n  /** EVDO Rev. A. */\n  EVDO_A: 'evdo_a',\n  /** CDMA2000 1XRTT. */\n  CDMA2000_1XRTT: 'cdma2000_1xrtt',\n  /** HSDPA. */\n  HSDPA: 'hsdpa',\n  /** HSUPA. */\n  HSUPA: 'hsupa',\n  /** HSPA. */\n  HSPA: 'hspa',\n  /** IDEN. */\n  IDEN: 'iden',\n  /** EVDO Rev. B. */\n  EVDO_B: 'evdo_b',\n  /** LTE. */\n  LTE: 'lte',\n  /** EHRPD. */\n  EHRPD: 'ehrpd',\n  /** HSPAP. */\n  HSPAP: 'hspap',\n  /** GSM. */\n  GSM: 'gsm',\n  /** TD-SCDMA. */\n  TD_SCDMA: 'td_scdma',\n  /** IWLAN. */\n  IWLAN: 'iwlan',\n  /** 5G NR (New Radio). */\n  NR: 'nr',\n  /** 5G NRNSA (New Radio Non-Standalone). */\n  NRNSA: 'nrnsa',\n  /** LTE CA. */\n  LTE_CA: 'lte_ca',\n} as const;\nexport type NetHostConnectionSubtypeValues =\n  (typeof NetHostConnectionSubtypeValues)[keyof typeof NetHostConnectionSubtypeValues];\n\nexport const HttpFlavorValues = {\n  /** HTTP 1.0. */\n  HTTP_1_0: '1.0',\n  /** HTTP 1.1. */\n  HTTP_1_1: '1.1',\n  /** HTTP 2. */\n  HTTP_2_0: '2.0',\n  /** SPDY protocol. */\n  SPDY: 'SPDY',\n  /** QUIC protocol. */\n  QUIC: 'QUIC',\n} as const;\nexport type HttpFlavorValues =\n  (typeof HttpFlavorValues)[keyof typeof HttpFlavorValues];\n\nexport const MessagingDestinationKindValues = {\n  /** A message sent to a queue. */\n  QUEUE: 'queue',\n  /** A message sent to a topic. */\n  TOPIC: 'topic',\n} as const;\nexport type MessagingDestinationKindValues =\n  (typeof MessagingDestinationKindValues)[keyof typeof MessagingDestinationKindValues];\n\nexport const MessagingOperationValues = {\n  /** receive. */\n  RECEIVE: 'receive',\n  /** process. */\n  PROCESS: 'process',\n} as const;\nexport type MessagingOperationValues =\n  (typeof MessagingOperationValues)[keyof typeof MessagingOperationValues];\n\nexport const RpcGrpcStatusCodeValues = {\n  /** OK. */\n  OK: 0,\n  /** CANCELLED. */\n  CANCELLED: 1,\n  /** UNKNOWN. */\n  UNKNOWN: 2,\n  /** INVALID_ARGUMENT. */\n  INVALID_ARGUMENT: 3,\n  /** DEADLINE_EXCEEDED. */\n  DEADLINE_EXCEEDED: 4,\n  /** NOT_FOUND. */\n  NOT_FOUND: 5,\n  /** ALREADY_EXISTS. */\n  ALREADY_EXISTS: 6,\n  /** PERMISSION_DENIED. */\n  PERMISSION_DENIED: 7,\n  /** RESOURCE_EXHAUSTED. */\n  RESOURCE_EXHAUSTED: 8,\n  /** FAILED_PRECONDITION. */\n  FAILED_PRECONDITION: 9,\n  /** ABORTED. */\n  ABORTED: 10,\n  /** OUT_OF_RANGE. */\n  OUT_OF_RANGE: 11,\n  /** UNIMPLEMENTED. */\n  UNIMPLEMENTED: 12,\n  /** INTERNAL. */\n  INTERNAL: 13,\n  /** UNAVAILABLE. */\n  UNAVAILABLE: 14,\n  /** DATA_LOSS. */\n  DATA_LOSS: 15,\n  /** UNAUTHENTICATED. */\n  UNAUTHENTICATED: 16,\n} as const;\nexport type RpcGrpcStatusCodeValues =\n  (typeof RpcGrpcStatusCodeValues)[keyof typeof RpcGrpcStatusCodeValues];\n\nexport const MessageTypeValues = {\n  /** sent. */\n  SENT: 'SENT',\n  /** received. */\n  RECEIVED: 'RECEIVED',\n} as const;\nexport type MessageTypeValues =\n  (typeof MessageTypeValues)[keyof typeof MessageTypeValues];\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport * from './SemanticAttributes';\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// DO NOT EDIT, this is an Auto-generated file from scripts/semconv/templates//templates/SemanticAttributes.ts.j2\nexport const SemanticResourceAttributes = {\n  /**\n   * Name of the cloud provider.\n   */\n  CLOUD_PROVIDER: 'cloud.provider',\n\n  /**\n   * The cloud account ID the resource is assigned to.\n   */\n  CLOUD_ACCOUNT_ID: 'cloud.account.id',\n\n  /**\n   * The geographical region the resource is running. Refer to your provider&#39;s docs to see the available regions, for example [Alibaba Cloud regions](https://www.alibabacloud.com/help/doc-detail/40654.htm), [AWS regions](https://aws.amazon.com/about-aws/global-infrastructure/regions_az/), [Azure regions](https://azure.microsoft.com/en-us/global-infrastructure/geographies/), or [Google Cloud regions](https://cloud.google.com/about/locations).\n   */\n  CLOUD_REGION: 'cloud.region',\n\n  /**\n   * Cloud regions often have multiple, isolated locations known as zones to increase availability. Availability zone represents the zone where the resource is running.\n   *\n   * Note: Availability zones are called &#34;zones&#34; on Alibaba Cloud and Google Cloud.\n   */\n  CLOUD_AVAILABILITY_ZONE: 'cloud.availability_zone',\n\n  /**\n   * The cloud platform in use.\n   *\n   * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n   */\n  CLOUD_PLATFORM: 'cloud.platform',\n\n  /**\n   * The Amazon Resource Name (ARN) of an [ECS container instance](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ECS_instances.html).\n   */\n  AWS_ECS_CONTAINER_ARN: 'aws.ecs.container.arn',\n\n  /**\n   * The ARN of an [ECS cluster](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/clusters.html).\n   */\n  AWS_ECS_CLUSTER_ARN: 'aws.ecs.cluster.arn',\n\n  /**\n   * The [launch type](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html) for an ECS task.\n   */\n  AWS_ECS_LAUNCHTYPE: 'aws.ecs.launchtype',\n\n  /**\n   * The ARN of an [ECS task definition](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definitions.html).\n   */\n  AWS_ECS_TASK_ARN: 'aws.ecs.task.arn',\n\n  /**\n   * The task definition family this task definition is a member of.\n   */\n  AWS_ECS_TASK_FAMILY: 'aws.ecs.task.family',\n\n  /**\n   * The revision for this task definition.\n   */\n  AWS_ECS_TASK_REVISION: 'aws.ecs.task.revision',\n\n  /**\n   * The ARN of an EKS cluster.\n   */\n  AWS_EKS_CLUSTER_ARN: 'aws.eks.cluster.arn',\n\n  /**\n   * The name(s) of the AWS log group(s) an application is writing to.\n   *\n   * Note: Multiple log groups must be supported for cases like multi-container applications, where a single application has sidecar containers, and each write to their own log group.\n   */\n  AWS_LOG_GROUP_NAMES: 'aws.log.group.names',\n\n  /**\n   * The Amazon Resource Name(s) (ARN) of the AWS log group(s).\n   *\n   * Note: See the [log group ARN format documentation](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/iam-access-control-overview-cwl.html#CWL_ARN_Format).\n   */\n  AWS_LOG_GROUP_ARNS: 'aws.log.group.arns',\n\n  /**\n   * The name(s) of the AWS log stream(s) an application is writing to.\n   */\n  AWS_LOG_STREAM_NAMES: 'aws.log.stream.names',\n\n  /**\n   * The ARN(s) of the AWS log stream(s).\n   *\n   * Note: See the [log stream ARN format documentation](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/iam-access-control-overview-cwl.html#CWL_ARN_Format). One log group can contain several log streams, so these ARNs necessarily identify both a log group and a log stream.\n   */\n  AWS_LOG_STREAM_ARNS: 'aws.log.stream.arns',\n\n  /**\n   * Container name.\n   */\n  CONTAINER_NAME: 'container.name',\n\n  /**\n   * Container ID. Usually a UUID, as for example used to [identify Docker containers](https://docs.docker.com/engine/reference/run/#container-identification). The UUID might be abbreviated.\n   */\n  CONTAINER_ID: 'container.id',\n\n  /**\n   * The container runtime managing this container.\n   */\n  CONTAINER_RUNTIME: 'container.runtime',\n\n  /**\n   * Name of the image the container was built on.\n   */\n  CONTAINER_IMAGE_NAME: 'container.image.name',\n\n  /**\n   * Container image tag.\n   */\n  CONTAINER_IMAGE_TAG: 'container.image.tag',\n\n  /**\n   * Name of the [deployment environment](https://en.wikipedia.org/wiki/Deployment_environment) (aka deployment tier).\n   */\n  DEPLOYMENT_ENVIRONMENT: 'deployment.environment',\n\n  /**\n   * A unique identifier representing the device.\n   *\n   * Note: The device identifier MUST only be defined using the values outlined below. This value is not an advertising identifier and MUST NOT be used as such. On iOS (Swift or Objective-C), this value MUST be equal to the [vendor identifier](https://developer.apple.com/documentation/uikit/uidevice/1620059-identifierforvendor). On Android (Java or Kotlin), this value MUST be equal to the Firebase Installation ID or a globally unique UUID which is persisted across sessions in your application. More information can be found [here](https://developer.android.com/training/articles/user-data-ids) on best practices and exact implementation details. Caution should be taken when storing personal data or anything which can identify a user. GDPR and data protection laws may apply, ensure you do your own due diligence.\n   */\n  DEVICE_ID: 'device.id',\n\n  /**\n   * The model identifier for the device.\n   *\n   * Note: It&#39;s recommended this value represents a machine readable version of the model identifier rather than the market or consumer-friendly name of the device.\n   */\n  DEVICE_MODEL_IDENTIFIER: 'device.model.identifier',\n\n  /**\n   * The marketing name for the device model.\n   *\n   * Note: It&#39;s recommended this value represents a human readable version of the device model rather than a machine readable alternative.\n   */\n  DEVICE_MODEL_NAME: 'device.model.name',\n\n  /**\n   * The name of the single function that this runtime instance executes.\n   *\n   * Note: This is the name of the function as configured/deployed on the FaaS platform and is usually different from the name of the callback function (which may be stored in the [`code.namespace`/`code.function`](../../trace/semantic_conventions/span-general.md#source-code-attributes) span attributes).\n   */\n  FAAS_NAME: 'faas.name',\n\n  /**\n  * The unique ID of the single function that this runtime instance executes.\n  *\n  * Note: Depending on the cloud provider, use:\n\n* **AWS Lambda:** The function [ARN](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html).\nTake care not to use the &#34;invoked ARN&#34; directly but replace any\n[alias suffix](https://docs.aws.amazon.com/lambda/latest/dg/configuration-aliases.html) with the resolved function version, as the same runtime instance may be invokable with multiple\ndifferent aliases.\n* **GCP:** The [URI of the resource](https://cloud.google.com/iam/docs/full-resource-names)\n* **Azure:** The [Fully Qualified Resource ID](https://docs.microsoft.com/en-us/rest/api/resources/resources/get-by-id).\n\nOn some providers, it may not be possible to determine the full ID at startup,\nwhich is why this field cannot be made required. For example, on AWS the account ID\npart of the ARN is not available without calling another AWS API\nwhich may be deemed too slow for a short-running lambda function.\nAs an alternative, consider setting `faas.id` as a span attribute instead.\n  */\n  FAAS_ID: 'faas.id',\n\n  /**\n  * The immutable version of the function being executed.\n  *\n  * Note: Depending on the cloud provider and platform, use:\n\n* **AWS Lambda:** The [function version](https://docs.aws.amazon.com/lambda/latest/dg/configuration-versions.html)\n  (an integer represented as a decimal string).\n* **Google Cloud Run:** The [revision](https://cloud.google.com/run/docs/managing/revisions)\n  (i.e., the function name plus the revision suffix).\n* **Google Cloud Functions:** The value of the\n  [`K_REVISION` environment variable](https://cloud.google.com/functions/docs/env-var#runtime_environment_variables_set_automatically).\n* **Azure Functions:** Not applicable. Do not set this attribute.\n  */\n  FAAS_VERSION: 'faas.version',\n\n  /**\n   * The execution environment ID as a string, that will be potentially reused for other invocations to the same function/function version.\n   *\n   * Note: * **AWS Lambda:** Use the (full) log stream name.\n   */\n  FAAS_INSTANCE: 'faas.instance',\n\n  /**\n   * The amount of memory available to the serverless function in MiB.\n   *\n   * Note: It&#39;s recommended to set this attribute since e.g. too little memory can easily stop a Java AWS Lambda function from working correctly. On AWS Lambda, the environment variable `AWS_LAMBDA_FUNCTION_MEMORY_SIZE` provides this information.\n   */\n  FAAS_MAX_MEMORY: 'faas.max_memory',\n\n  /**\n   * Unique host ID. For Cloud, this must be the instance_id assigned by the cloud provider.\n   */\n  HOST_ID: 'host.id',\n\n  /**\n   * Name of the host. On Unix systems, it may contain what the hostname command returns, or the fully qualified hostname, or another name specified by the user.\n   */\n  HOST_NAME: 'host.name',\n\n  /**\n   * Type of host. For Cloud, this must be the machine type.\n   */\n  HOST_TYPE: 'host.type',\n\n  /**\n   * The CPU architecture the host system is running on.\n   */\n  HOST_ARCH: 'host.arch',\n\n  /**\n   * Name of the VM image or OS install the host was instantiated from.\n   */\n  HOST_IMAGE_NAME: 'host.image.name',\n\n  /**\n   * VM image ID. For Cloud, this value is from the provider.\n   */\n  HOST_IMAGE_ID: 'host.image.id',\n\n  /**\n   * The version string of the VM image as defined in [Version SpanAttributes](README.md#version-attributes).\n   */\n  HOST_IMAGE_VERSION: 'host.image.version',\n\n  /**\n   * The name of the cluster.\n   */\n  K8S_CLUSTER_NAME: 'k8s.cluster.name',\n\n  /**\n   * The name of the Node.\n   */\n  K8S_NODE_NAME: 'k8s.node.name',\n\n  /**\n   * The UID of the Node.\n   */\n  K8S_NODE_UID: 'k8s.node.uid',\n\n  /**\n   * The name of the namespace that the pod is running in.\n   */\n  K8S_NAMESPACE_NAME: 'k8s.namespace.name',\n\n  /**\n   * The UID of the Pod.\n   */\n  K8S_POD_UID: 'k8s.pod.uid',\n\n  /**\n   * The name of the Pod.\n   */\n  K8S_POD_NAME: 'k8s.pod.name',\n\n  /**\n   * The name of the Container in a Pod template.\n   */\n  K8S_CONTAINER_NAME: 'k8s.container.name',\n\n  /**\n   * The UID of the ReplicaSet.\n   */\n  K8S_REPLICASET_UID: 'k8s.replicaset.uid',\n\n  /**\n   * The name of the ReplicaSet.\n   */\n  K8S_REPLICASET_NAME: 'k8s.replicaset.name',\n\n  /**\n   * The UID of the Deployment.\n   */\n  K8S_DEPLOYMENT_UID: 'k8s.deployment.uid',\n\n  /**\n   * The name of the Deployment.\n   */\n  K8S_DEPLOYMENT_NAME: 'k8s.deployment.name',\n\n  /**\n   * The UID of the StatefulSet.\n   */\n  K8S_STATEFULSET_UID: 'k8s.statefulset.uid',\n\n  /**\n   * The name of the StatefulSet.\n   */\n  K8S_STATEFULSET_NAME: 'k8s.statefulset.name',\n\n  /**\n   * The UID of the DaemonSet.\n   */\n  K8S_DAEMONSET_UID: 'k8s.daemonset.uid',\n\n  /**\n   * The name of the DaemonSet.\n   */\n  K8S_DAEMONSET_NAME: 'k8s.daemonset.name',\n\n  /**\n   * The UID of the Job.\n   */\n  K8S_JOB_UID: 'k8s.job.uid',\n\n  /**\n   * The name of the Job.\n   */\n  K8S_JOB_NAME: 'k8s.job.name',\n\n  /**\n   * The UID of the CronJob.\n   */\n  K8S_CRONJOB_UID: 'k8s.cronjob.uid',\n\n  /**\n   * The name of the CronJob.\n   */\n  K8S_CRONJOB_NAME: 'k8s.cronjob.name',\n\n  /**\n   * The operating system type.\n   */\n  OS_TYPE: 'os.type',\n\n  /**\n   * Human readable (not intended to be parsed) OS version information, like e.g. reported by `ver` or `lsb_release -a` commands.\n   */\n  OS_DESCRIPTION: 'os.description',\n\n  /**\n   * Human readable operating system name.\n   */\n  OS_NAME: 'os.name',\n\n  /**\n   * The version string of the operating system as defined in [Version SpanAttributes](../../resource/semantic_conventions/README.md#version-attributes).\n   */\n  OS_VERSION: 'os.version',\n\n  /**\n   * Process identifier (PID).\n   */\n  PROCESS_PID: 'process.pid',\n\n  /**\n   * The name of the process executable. On Linux based systems, can be set to the `Name` in `proc/[pid]/status`. On Windows, can be set to the base name of `GetProcessImageFileNameW`.\n   */\n  PROCESS_EXECUTABLE_NAME: 'process.executable.name',\n\n  /**\n   * The full path to the process executable. On Linux based systems, can be set to the target of `proc/[pid]/exe`. On Windows, can be set to the result of `GetProcessImageFileNameW`.\n   */\n  PROCESS_EXECUTABLE_PATH: 'process.executable.path',\n\n  /**\n   * The command used to launch the process (i.e. the command name). On Linux based systems, can be set to the zeroth string in `proc/[pid]/cmdline`. On Windows, can be set to the first parameter extracted from `GetCommandLineW`.\n   */\n  PROCESS_COMMAND: 'process.command',\n\n  /**\n   * The full command used to launch the process as a single string representing the full command. On Windows, can be set to the result of `GetCommandLineW`. Do not set this if you have to assemble it just for monitoring; use `process.command_args` instead.\n   */\n  PROCESS_COMMAND_LINE: 'process.command_line',\n\n  /**\n   * All the command arguments (including the command/executable itself) as received by the process. On Linux-based systems (and some other Unixoid systems supporting procfs), can be set according to the list of null-delimited strings extracted from `proc/[pid]/cmdline`. For libc-based executables, this would be the full argv vector passed to `main`.\n   */\n  PROCESS_COMMAND_ARGS: 'process.command_args',\n\n  /**\n   * The username of the user that owns the process.\n   */\n  PROCESS_OWNER: 'process.owner',\n\n  /**\n   * The name of the runtime of this process. For compiled native binaries, this SHOULD be the name of the compiler.\n   */\n  PROCESS_RUNTIME_NAME: 'process.runtime.name',\n\n  /**\n   * The version of the runtime of this process, as returned by the runtime without modification.\n   */\n  PROCESS_RUNTIME_VERSION: 'process.runtime.version',\n\n  /**\n   * An additional description about the runtime of the process, for example a specific vendor customization of the runtime environment.\n   */\n  PROCESS_RUNTIME_DESCRIPTION: 'process.runtime.description',\n\n  /**\n   * Logical name of the service.\n   *\n   * Note: MUST be the same for all instances of horizontally scaled services. If the value was not specified, SDKs MUST fallback to `unknown_service:` concatenated with [`process.executable.name`](process.md#process), e.g. `unknown_service:bash`. If `process.executable.name` is not available, the value MUST be set to `unknown_service`.\n   */\n  SERVICE_NAME: 'service.name',\n\n  /**\n   * A namespace for `service.name`.\n   *\n   * Note: A string value having a meaning that helps to distinguish a group of services, for example the team name that owns a group of services. `service.name` is expected to be unique within the same namespace. If `service.namespace` is not specified in the Resource then `service.name` is expected to be unique for all services that have no explicit namespace defined (so the empty/unspecified namespace is simply one more valid namespace). Zero-length namespace string is assumed equal to unspecified namespace.\n   */\n  SERVICE_NAMESPACE: 'service.namespace',\n\n  /**\n   * The string ID of the service instance.\n   *\n   * Note: MUST be unique for each instance of the same `service.namespace,service.name` pair (in other words `service.namespace,service.name,service.instance.id` triplet MUST be globally unique). The ID helps to distinguish instances of the same service that exist at the same time (e.g. instances of a horizontally scaled service). It is preferable for the ID to be persistent and stay the same for the lifetime of the service instance, however it is acceptable that the ID is ephemeral and changes during important lifetime events for the service (e.g. service restarts). If the service has no inherent unique ID that can be used as the value of this attribute it is recommended to generate a random Version 1 or Version 4 RFC 4122 UUID (services aiming for reproducible UUIDs may also use Version 5, see RFC 4122 for more recommendations).\n   */\n  SERVICE_INSTANCE_ID: 'service.instance.id',\n\n  /**\n   * The version string of the service API or implementation.\n   */\n  SERVICE_VERSION: 'service.version',\n\n  /**\n   * The name of the telemetry SDK as defined above.\n   */\n  TELEMETRY_SDK_NAME: 'telemetry.sdk.name',\n\n  /**\n   * The language of the telemetry SDK.\n   */\n  TELEMETRY_SDK_LANGUAGE: 'telemetry.sdk.language',\n\n  /**\n   * The version string of the telemetry SDK.\n   */\n  TELEMETRY_SDK_VERSION: 'telemetry.sdk.version',\n\n  /**\n   * The version string of the auto instrumentation agent, if used.\n   */\n  TELEMETRY_AUTO_VERSION: 'telemetry.auto.version',\n\n  /**\n   * The name of the web engine.\n   */\n  WEBENGINE_NAME: 'webengine.name',\n\n  /**\n   * The version of the web engine.\n   */\n  WEBENGINE_VERSION: 'webengine.version',\n\n  /**\n   * Additional description of the web engine (e.g. detailed version and edition information).\n   */\n  WEBENGINE_DESCRIPTION: 'webengine.description',\n};\n\nexport const CloudProviderValues = {\n  /** Alibaba Cloud. */\n  ALIBABA_CLOUD: 'alibaba_cloud',\n  /** Amazon Web Services. */\n  AWS: 'aws',\n  /** Microsoft Azure. */\n  AZURE: 'azure',\n  /** Google Cloud Platform. */\n  GCP: 'gcp',\n} as const;\nexport type CloudProviderValues =\n  (typeof CloudProviderValues)[keyof typeof CloudProviderValues];\n\nexport const CloudPlatformValues = {\n  /** Alibaba Cloud Elastic Compute Service. */\n  ALIBABA_CLOUD_ECS: 'alibaba_cloud_ecs',\n  /** Alibaba Cloud Function Compute. */\n  ALIBABA_CLOUD_FC: 'alibaba_cloud_fc',\n  /** AWS Elastic Compute Cloud. */\n  AWS_EC2: 'aws_ec2',\n  /** AWS Elastic Container Service. */\n  AWS_ECS: 'aws_ecs',\n  /** AWS Elastic Kubernetes Service. */\n  AWS_EKS: 'aws_eks',\n  /** AWS Lambda. */\n  AWS_LAMBDA: 'aws_lambda',\n  /** AWS Elastic Beanstalk. */\n  AWS_ELASTIC_BEANSTALK: 'aws_elastic_beanstalk',\n  /** Azure Virtual Machines. */\n  AZURE_VM: 'azure_vm',\n  /** Azure Container Instances. */\n  AZURE_CONTAINER_INSTANCES: 'azure_container_instances',\n  /** Azure Kubernetes Service. */\n  AZURE_AKS: 'azure_aks',\n  /** Azure Functions. */\n  AZURE_FUNCTIONS: 'azure_functions',\n  /** Azure App Service. */\n  AZURE_APP_SERVICE: 'azure_app_service',\n  /** Google Cloud Compute Engine (GCE). */\n  GCP_COMPUTE_ENGINE: 'gcp_compute_engine',\n  /** Google Cloud Run. */\n  GCP_CLOUD_RUN: 'gcp_cloud_run',\n  /** Google Cloud Kubernetes Engine (GKE). */\n  GCP_KUBERNETES_ENGINE: 'gcp_kubernetes_engine',\n  /** Google Cloud Functions (GCF). */\n  GCP_CLOUD_FUNCTIONS: 'gcp_cloud_functions',\n  /** Google Cloud App Engine (GAE). */\n  GCP_APP_ENGINE: 'gcp_app_engine',\n} as const;\nexport type CloudPlatformValues =\n  (typeof CloudPlatformValues)[keyof typeof CloudPlatformValues];\n\nexport const AwsEcsLaunchtypeValues = {\n  /** ec2. */\n  EC2: 'ec2',\n  /** fargate. */\n  FARGATE: 'fargate',\n} as const;\nexport type AwsEcsLaunchtypeValues =\n  (typeof AwsEcsLaunchtypeValues)[keyof typeof AwsEcsLaunchtypeValues];\n\nexport const HostArchValues = {\n  /** AMD64. */\n  AMD64: 'amd64',\n  /** ARM32. */\n  ARM32: 'arm32',\n  /** ARM64. */\n  ARM64: 'arm64',\n  /** Itanium. */\n  IA64: 'ia64',\n  /** 32-bit PowerPC. */\n  PPC32: 'ppc32',\n  /** 64-bit PowerPC. */\n  PPC64: 'ppc64',\n  /** 32-bit x86. */\n  X86: 'x86',\n} as const;\nexport type HostArchValues =\n  (typeof HostArchValues)[keyof typeof HostArchValues];\n\nexport const OsTypeValues = {\n  /** Microsoft Windows. */\n  WINDOWS: 'windows',\n  /** Linux. */\n  LINUX: 'linux',\n  /** Apple Darwin. */\n  DARWIN: 'darwin',\n  /** FreeBSD. */\n  FREEBSD: 'freebsd',\n  /** NetBSD. */\n  NETBSD: 'netbsd',\n  /** OpenBSD. */\n  OPENBSD: 'openbsd',\n  /** DragonFly BSD. */\n  DRAGONFLYBSD: 'dragonflybsd',\n  /** HP-UX (Hewlett Packard Unix). */\n  HPUX: 'hpux',\n  /** AIX (Advanced Interactive eXecutive). */\n  AIX: 'aix',\n  /** Oracle Solaris. */\n  SOLARIS: 'solaris',\n  /** IBM z/OS. */\n  Z_OS: 'z_os',\n} as const;\nexport type OsTypeValues = (typeof OsTypeValues)[keyof typeof OsTypeValues];\n\nexport const TelemetrySdkLanguageValues = {\n  /** cpp. */\n  CPP: 'cpp',\n  /** dotnet. */\n  DOTNET: 'dotnet',\n  /** erlang. */\n  ERLANG: 'erlang',\n  /** go. */\n  GO: 'go',\n  /** java. */\n  JAVA: 'java',\n  /** nodejs. */\n  NODEJS: 'nodejs',\n  /** php. */\n  PHP: 'php',\n  /** python. */\n  PYTHON: 'python',\n  /** ruby. */\n  RUBY: 'ruby',\n  /** webjs. */\n  WEBJS: 'webjs',\n} as const;\nexport type TelemetrySdkLanguageValues =\n  (typeof TelemetrySdkLanguageValues)[keyof typeof TelemetrySdkLanguageValues];\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport * from './SemanticResourceAttributes';\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport * from './trace';\nexport * from './resource';\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { VERSION } from '../../version';\nimport {\n  TelemetrySdkLanguageValues,\n  SemanticResourceAttributes,\n} from '@opentelemetry/semantic-conventions';\n\n/** Constants describing the SDK in use */\nexport const SDK_INFO = {\n  [SemanticResourceAttributes.TELEMETRY_SDK_NAME]: 'opentelemetry',\n  [SemanticResourceAttributes.PROCESS_RUNTIME_NAME]: 'node',\n  [SemanticResourceAttributes.TELEMETRY_SDK_LANGUAGE]:\n    TelemetrySdkLanguageValues.NODEJS,\n  [SemanticResourceAttributes.TELEMETRY_SDK_VERSION]: VERSION,\n};\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport function unrefTimer(timer: NodeJS.Timer): void {\n  timer.unref();\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport * from './environment';\nexport * from './globalThis';\nexport * from './hex-to-base64';\nexport * from './RandomIdGenerator';\nexport * from './performance';\nexport * from './sdk-info';\nexport * from './timer-util';\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport * from './node';\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as api from '@opentelemetry/api';\nimport { otperformance as performance } from '../platform';\nimport { TimeOriginLegacy } from './types';\n\nconst NANOSECOND_DIGITS = 9;\nconst NANOSECOND_DIGITS_IN_MILLIS = 6;\nconst MILLISECONDS_TO_NANOSECONDS = Math.pow(10, NANOSECOND_DIGITS_IN_MILLIS);\nconst SECOND_TO_NANOSECONDS = Math.pow(10, NANOSECOND_DIGITS);\n\n/**\n * Converts a number of milliseconds from epoch to HrTime([seconds, remainder in nanoseconds]).\n * @param epochMillis\n */\nexport function millisToHrTime(epochMillis: number): api.HrTime {\n  const epochSeconds = epochMillis / 1000;\n  // Decimals only.\n  const seconds = Math.trunc(epochSeconds);\n  // Round sub-nanosecond accuracy to nanosecond.\n  const nanos = Math.round((epochMillis % 1000) * MILLISECONDS_TO_NANOSECONDS);\n  return [seconds, nanos];\n}\n\nexport function getTimeOrigin(): number {\n  let timeOrigin = performance.timeOrigin;\n  if (typeof timeOrigin !== 'number') {\n    const perf: TimeOriginLegacy = performance as unknown as TimeOriginLegacy;\n    timeOrigin = perf.timing && perf.timing.fetchStart;\n  }\n  return timeOrigin;\n}\n\n/**\n * Returns an hrtime calculated via performance component.\n * @param performanceNow\n */\nexport function hrTime(performanceNow?: number): api.HrTime {\n  const timeOrigin = millisToHrTime(getTimeOrigin());\n  const now = millisToHrTime(\n    typeof performanceNow === 'number' ? performanceNow : performance.now()\n  );\n\n  return addHrTimes(timeOrigin, now);\n}\n\n/**\n *\n * Converts a TimeInput to an HrTime, defaults to _hrtime().\n * @param time\n */\nexport function timeInputToHrTime(time: api.TimeInput): api.HrTime {\n  // process.hrtime\n  if (isTimeInputHrTime(time)) {\n    return time as api.HrTime;\n  } else if (typeof time === 'number') {\n    // Must be a performance.now() if it's smaller than process start time.\n    if (time < getTimeOrigin()) {\n      return hrTime(time);\n    } else {\n      // epoch milliseconds or performance.timeOrigin\n      return millisToHrTime(time);\n    }\n  } else if (time instanceof Date) {\n    return millisToHrTime(time.getTime());\n  } else {\n    throw TypeError('Invalid input type');\n  }\n}\n\n/**\n * Returns a duration of two hrTime.\n * @param startTime\n * @param endTime\n */\nexport function hrTimeDuration(\n  startTime: api.HrTime,\n  endTime: api.HrTime\n): api.HrTime {\n  let seconds = endTime[0] - startTime[0];\n  let nanos = endTime[1] - startTime[1];\n\n  // overflow\n  if (nanos < 0) {\n    seconds -= 1;\n    // negate\n    nanos += SECOND_TO_NANOSECONDS;\n  }\n\n  return [seconds, nanos];\n}\n\n/**\n * Convert hrTime to timestamp, for example \"2019-05-14T17:00:00.000123456Z\"\n * @param time\n */\nexport function hrTimeToTimeStamp(time: api.HrTime): string {\n  const precision = NANOSECOND_DIGITS;\n  const tmp = `${'0'.repeat(precision)}${time[1]}Z`;\n  const nanoString = tmp.substr(tmp.length - precision - 1);\n  const date = new Date(time[0] * 1000).toISOString();\n  return date.replace('000Z', nanoString);\n}\n\n/**\n * Convert hrTime to nanoseconds.\n * @param time\n */\nexport function hrTimeToNanoseconds(time: api.HrTime): number {\n  return time[0] * SECOND_TO_NANOSECONDS + time[1];\n}\n\n/**\n * Convert hrTime to milliseconds.\n * @param time\n */\nexport function hrTimeToMilliseconds(time: api.HrTime): number {\n  return time[0] * 1e3 + time[1] / 1e6;\n}\n\n/**\n * Convert hrTime to microseconds.\n * @param time\n */\nexport function hrTimeToMicroseconds(time: api.HrTime): number {\n  return time[0] * 1e6 + time[1] / 1e3;\n}\n\n/**\n * check if time is HrTime\n * @param value\n */\nexport function isTimeInputHrTime(value: unknown): value is api.HrTime {\n  return (\n    Array.isArray(value) &&\n    value.length === 2 &&\n    typeof value[0] === 'number' &&\n    typeof value[1] === 'number'\n  );\n}\n\n/**\n * check if input value is a correct types.TimeInput\n * @param value\n */\nexport function isTimeInput(\n  value: unknown\n): value is api.HrTime | number | Date {\n  return (\n    isTimeInputHrTime(value) ||\n    typeof value === 'number' ||\n    value instanceof Date\n  );\n}\n\n/**\n * Given 2 HrTime formatted times, return their sum as an HrTime.\n */\nexport function addHrTimes(time1: api.HrTime, time2: api.HrTime): api.HrTime {\n  const out = [time1[0] + time2[0], time1[1] + time2[1]] as api.HrTime;\n\n  // Nanoseconds\n  if (out[1] >= SECOND_TO_NANOSECONDS) {\n    out[1] -= SECOND_TO_NANOSECONDS;\n    out[0] += 1;\n  }\n\n  return out;\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport interface ExportResult {\n  code: ExportResultCode;\n  error?: Error;\n}\n\nexport enum ExportResultCode {\n  SUCCESS,\n  FAILED,\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Context,\n  TextMapGetter,\n  TextMapPropagator,\n  diag,\n  TextMapSetter,\n} from '@opentelemetry/api';\n\n/** Configuration object for composite propagator */\nexport interface CompositePropagatorConfig {\n  /**\n   * List of propagators to run. Propagators run in the\n   * list order. If a propagator later in the list writes the same context\n   * key as a propagator earlier in the list, the later on will \"win\".\n   */\n  propagators?: TextMapPropagator[];\n}\n\n/** Combines multiple propagators into a single propagator. */\nexport class CompositePropagator implements TextMapPropagator {\n  private readonly _propagators: TextMapPropagator[];\n  private readonly _fields: string[];\n\n  /**\n   * Construct a composite propagator from a list of propagators.\n   *\n   * @param [config] Configuration object for composite propagator\n   */\n  constructor(config: CompositePropagatorConfig = {}) {\n    this._propagators = config.propagators ?? [];\n\n    this._fields = Array.from(\n      new Set(\n        this._propagators\n          // older propagators may not have fields function, null check to be sure\n          .map(p => (typeof p.fields === 'function' ? p.fields() : []))\n          .reduce((x, y) => x.concat(y), [])\n      )\n    );\n  }\n\n  /**\n   * Run each of the configured propagators with the given context and carrier.\n   * Propagators are run in the order they are configured, so if multiple\n   * propagators write the same carrier key, the propagator later in the list\n   * will \"win\".\n   *\n   * @param context Context to inject\n   * @param carrier Carrier into which context will be injected\n   */\n  inject(context: Context, carrier: unknown, setter: TextMapSetter): void {\n    for (const propagator of this._propagators) {\n      try {\n        propagator.inject(context, carrier, setter);\n      } catch (err) {\n        diag.warn(\n          `Failed to inject with ${propagator.constructor.name}. Err: ${err.message}`\n        );\n      }\n    }\n  }\n\n  /**\n   * Run each of the configured propagators with the given context and carrier.\n   * Propagators are run in the order they are configured, so if multiple\n   * propagators write the same context key, the propagator later in the list\n   * will \"win\".\n   *\n   * @param context Context to add values to\n   * @param carrier Carrier from which to extract context\n   */\n  extract(context: Context, carrier: unknown, getter: TextMapGetter): Context {\n    return this._propagators.reduce((ctx, propagator) => {\n      try {\n        return propagator.extract(ctx, carrier, getter);\n      } catch (err) {\n        diag.warn(\n          `Failed to inject with ${propagator.constructor.name}. Err: ${err.message}`\n        );\n      }\n      return ctx;\n    }, context);\n  }\n\n  fields(): string[] {\n    // return a new array so our fields cannot be modified\n    return this._fields.slice();\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst VALID_KEY_CHAR_RANGE = '[_0-9a-z-*/]';\nconst VALID_KEY = `[a-z]${VALID_KEY_CHAR_RANGE}{0,255}`;\nconst VALID_VENDOR_KEY = `[a-z0-9]${VALID_KEY_CHAR_RANGE}{0,240}@[a-z]${VALID_KEY_CHAR_RANGE}{0,13}`;\nconst VALID_KEY_REGEX = new RegExp(`^(?:${VALID_KEY}|${VALID_VENDOR_KEY})$`);\nconst VALID_VALUE_BASE_REGEX = /^[ -~]{0,255}[!-~]$/;\nconst INVALID_VALUE_COMMA_EQUAL_REGEX = /,|=/;\n\n/**\n * Key is opaque string up to 256 characters printable. It MUST begin with a\n * lowercase letter, and can only contain lowercase letters a-z, digits 0-9,\n * underscores _, dashes -, asterisks *, and forward slashes /.\n * For multi-tenant vendor scenarios, an at sign (@) can be used to prefix the\n * vendor name. Vendors SHOULD set the tenant ID at the beginning of the key.\n * see https://www.w3.org/TR/trace-context/#key\n */\nexport function validateKey(key: string): boolean {\n  return VALID_KEY_REGEX.test(key);\n}\n\n/**\n * Value is opaque string up to 256 characters printable ASCII RFC0020\n * characters (i.e., the range 0x20 to 0x7E) except comma , and =.\n */\nexport function validateValue(value: string): boolean {\n  return (\n    VALID_VALUE_BASE_REGEX.test(value) &&\n    !INVALID_VALUE_COMMA_EQUAL_REGEX.test(value)\n  );\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as api from '@opentelemetry/api';\nimport { validateKey, validateValue } from '../internal/validators';\n\nconst MAX_TRACE_STATE_ITEMS = 32;\nconst MAX_TRACE_STATE_LEN = 512;\nconst LIST_MEMBERS_SEPARATOR = ',';\nconst LIST_MEMBER_KEY_VALUE_SPLITTER = '=';\n\n/**\n * TraceState must be a class and not a simple object type because of the spec\n * requirement (https://www.w3.org/TR/trace-context/#tracestate-field).\n *\n * Here is the list of allowed mutations:\n * - New key-value pair should be added into the beginning of the list\n * - The value of any key can be updated. Modified keys MUST be moved to the\n * beginning of the list.\n */\nexport class TraceState implements api.TraceState {\n  private _internalState: Map<string, string> = new Map();\n\n  constructor(rawTraceState?: string) {\n    if (rawTraceState) this._parse(rawTraceState);\n  }\n\n  set(key: string, value: string): TraceState {\n    // TODO: Benchmark the different approaches(map vs list) and\n    // use the faster one.\n    const traceState = this._clone();\n    if (traceState._internalState.has(key)) {\n      traceState._internalState.delete(key);\n    }\n    traceState._internalState.set(key, value);\n    return traceState;\n  }\n\n  unset(key: string): TraceState {\n    const traceState = this._clone();\n    traceState._internalState.delete(key);\n    return traceState;\n  }\n\n  get(key: string): string | undefined {\n    return this._internalState.get(key);\n  }\n\n  serialize(): string {\n    return this._keys()\n      .reduce((agg: string[], key) => {\n        agg.push(key + LIST_MEMBER_KEY_VALUE_SPLITTER + this.get(key));\n        return agg;\n      }, [])\n      .join(LIST_MEMBERS_SEPARATOR);\n  }\n\n  private _parse(rawTraceState: string) {\n    if (rawTraceState.length > MAX_TRACE_STATE_LEN) return;\n    this._internalState = rawTraceState\n      .split(LIST_MEMBERS_SEPARATOR)\n      .reverse() // Store in reverse so new keys (.set(...)) will be placed at the beginning\n      .reduce((agg: Map<string, string>, part: string) => {\n        const listMember = part.trim(); // Optional Whitespace (OWS) handling\n        const i = listMember.indexOf(LIST_MEMBER_KEY_VALUE_SPLITTER);\n        if (i !== -1) {\n          const key = listMember.slice(0, i);\n          const value = listMember.slice(i + 1, part.length);\n          if (validateKey(key) && validateValue(value)) {\n            agg.set(key, value);\n          } else {\n            // TODO: Consider to add warning log\n          }\n        }\n        return agg;\n      }, new Map());\n\n    // Because of the reverse() requirement, trunc must be done after map is created\n    if (this._internalState.size > MAX_TRACE_STATE_ITEMS) {\n      this._internalState = new Map(\n        Array.from(this._internalState.entries())\n          .reverse() // Use reverse same as original tracestate parse chain\n          .slice(0, MAX_TRACE_STATE_ITEMS)\n      );\n    }\n  }\n\n  private _keys(): string[] {\n    return Array.from(this._internalState.keys()).reverse();\n  }\n\n  private _clone(): TraceState {\n    const traceState = new TraceState();\n    traceState._internalState = new Map(this._internalState);\n    return traceState;\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Context,\n  isSpanContextValid,\n  SpanContext,\n  TextMapGetter,\n  TextMapPropagator,\n  TextMapSetter,\n  trace,\n  TraceFlags,\n} from '@opentelemetry/api';\nimport { isTracingSuppressed } from './suppress-tracing';\nimport { TraceState } from './TraceState';\n\nexport const TRACE_PARENT_HEADER = 'traceparent';\nexport const TRACE_STATE_HEADER = 'tracestate';\n\nconst VERSION = '00';\nconst VERSION_PART = '(?!ff)[\\\\da-f]{2}';\nconst TRACE_ID_PART = '(?![0]{32})[\\\\da-f]{32}';\nconst PARENT_ID_PART = '(?![0]{16})[\\\\da-f]{16}';\nconst FLAGS_PART = '[\\\\da-f]{2}';\nconst TRACE_PARENT_REGEX = new RegExp(\n  `^\\\\s?(${VERSION_PART})-(${TRACE_ID_PART})-(${PARENT_ID_PART})-(${FLAGS_PART})(-.*)?\\\\s?$`\n);\n\n/**\n * Parses information from the [traceparent] span tag and converts it into {@link SpanContext}\n * @param traceParent - A meta property that comes from server.\n *     It should be dynamically generated server side to have the server's request trace Id,\n *     a parent span Id that was set on the server's request span,\n *     and the trace flags to indicate the server's sampling decision\n *     (01 = sampled, 00 = not sampled).\n *     for example: '{version}-{traceId}-{spanId}-{sampleDecision}'\n *     For more information see {@link https://www.w3.org/TR/trace-context/}\n */\nexport function parseTraceParent(traceParent: string): SpanContext | null {\n  const match = TRACE_PARENT_REGEX.exec(traceParent);\n  if (!match) return null;\n\n  // According to the specification the implementation should be compatible\n  // with future versions. If there are more parts, we only reject it if it's using version 00\n  // See https://www.w3.org/TR/trace-context/#versioning-of-traceparent\n  if (match[1] === '00' && match[5]) return null;\n\n  return {\n    traceId: match[2],\n    spanId: match[3],\n    traceFlags: parseInt(match[4], 16),\n  };\n}\n\n/**\n * Propagates {@link SpanContext} through Trace Context format propagation.\n *\n * Based on the Trace Context specification:\n * https://www.w3.org/TR/trace-context/\n */\nexport class W3CTraceContextPropagator implements TextMapPropagator {\n  inject(context: Context, carrier: unknown, setter: TextMapSetter): void {\n    const spanContext = trace.getSpanContext(context);\n    if (\n      !spanContext ||\n      isTracingSuppressed(context) ||\n      !isSpanContextValid(spanContext)\n    )\n      return;\n\n    const traceParent = `${VERSION}-${spanContext.traceId}-${\n      spanContext.spanId\n    }-0${Number(spanContext.traceFlags || TraceFlags.NONE).toString(16)}`;\n\n    setter.set(carrier, TRACE_PARENT_HEADER, traceParent);\n    if (spanContext.traceState) {\n      setter.set(\n        carrier,\n        TRACE_STATE_HEADER,\n        spanContext.traceState.serialize()\n      );\n    }\n  }\n\n  extract(context: Context, carrier: unknown, getter: TextMapGetter): Context {\n    const traceParentHeader = getter.get(carrier, TRACE_PARENT_HEADER);\n    if (!traceParentHeader) return context;\n    const traceParent = Array.isArray(traceParentHeader)\n      ? traceParentHeader[0]\n      : traceParentHeader;\n    if (typeof traceParent !== 'string') return context;\n    const spanContext = parseTraceParent(traceParent);\n    if (!spanContext) return context;\n\n    spanContext.isRemote = true;\n\n    const traceStateHeader = getter.get(carrier, TRACE_STATE_HEADER);\n    if (traceStateHeader) {\n      // If more than one `tracestate` header is found, we merge them into a\n      // single header.\n      const state = Array.isArray(traceStateHeader)\n        ? traceStateHeader.join(',')\n        : traceStateHeader;\n      spanContext.traceState = new TraceState(\n        typeof state === 'string' ? state : undefined\n      );\n    }\n    return trace.setSpanContext(context, spanContext);\n  }\n\n  fields(): string[] {\n    return [TRACE_PARENT_HEADER, TRACE_STATE_HEADER];\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Context, createContextKey, Span } from '@opentelemetry/api';\n\nconst RPC_METADATA_KEY = createContextKey(\n  'OpenTelemetry SDK Context Key RPC_METADATA'\n);\n\nexport enum RPCType {\n  HTTP = 'http',\n}\n\ntype HTTPMetadata = {\n  type: RPCType.HTTP;\n  route?: string;\n  span: Span;\n};\n\n/**\n * Allows for future rpc metadata to be used with this mechanism\n */\nexport type RPCMetadata = HTTPMetadata;\n\nexport function setRPCMetadata(context: Context, meta: RPCMetadata): Context {\n  return context.setValue(RPC_METADATA_KEY, meta);\n}\n\nexport function deleteRPCMetadata(context: Context): Context {\n  return context.deleteValue(RPC_METADATA_KEY);\n}\n\nexport function getRPCMetadata(context: Context): RPCMetadata | undefined {\n  return context.getValue(RPC_METADATA_KEY) as RPCMetadata | undefined;\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Sampler, SamplingDecision, SamplingResult } from '@opentelemetry/api';\n\n/**\n * @deprecated Use the one defined in @opentelemetry/sdk-trace-base instead.\n * Sampler that samples no traces.\n */\nexport class AlwaysOffSampler implements Sampler {\n  shouldSample(): SamplingResult {\n    return {\n      decision: SamplingDecision.NOT_RECORD,\n    };\n  }\n\n  toString(): string {\n    return 'AlwaysOffSampler';\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Sampler, SamplingDecision, SamplingResult } from '@opentelemetry/api';\n\n/**\n * @deprecated Use the one defined in @opentelemetry/sdk-trace-base instead.\n * Sampler that samples all traces.\n */\nexport class AlwaysOnSampler implements Sampler {\n  shouldSample(): SamplingResult {\n    return {\n      decision: SamplingDecision.RECORD_AND_SAMPLED,\n    };\n  }\n\n  toString(): string {\n    return 'AlwaysOnSampler';\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Context,\n  isSpanContextValid,\n  Link,\n  Sampler,\n  SamplingResult,\n  SpanAttributes,\n  SpanKind,\n  TraceFlags,\n  trace,\n} from '@opentelemetry/api';\nimport { globalErrorHandler } from '../../common/global-error-handler';\nimport { AlwaysOffSampler } from './AlwaysOffSampler';\nimport { AlwaysOnSampler } from './AlwaysOnSampler';\n\n/**\n * @deprecated Use the one defined in @opentelemetry/sdk-trace-base instead.\n * A composite sampler that either respects the parent span's sampling decision\n * or delegates to `delegateSampler` for root spans.\n */\nexport class ParentBasedSampler implements Sampler {\n  private _root: Sampler;\n  private _remoteParentSampled: Sampler;\n  private _remoteParentNotSampled: Sampler;\n  private _localParentSampled: Sampler;\n  private _localParentNotSampled: Sampler;\n\n  constructor(config: ParentBasedSamplerConfig) {\n    this._root = config.root;\n\n    if (!this._root) {\n      globalErrorHandler(\n        new Error('ParentBasedSampler must have a root sampler configured')\n      );\n      this._root = new AlwaysOnSampler();\n    }\n\n    this._remoteParentSampled =\n      config.remoteParentSampled ?? new AlwaysOnSampler();\n    this._remoteParentNotSampled =\n      config.remoteParentNotSampled ?? new AlwaysOffSampler();\n    this._localParentSampled =\n      config.localParentSampled ?? new AlwaysOnSampler();\n    this._localParentNotSampled =\n      config.localParentNotSampled ?? new AlwaysOffSampler();\n  }\n\n  shouldSample(\n    context: Context,\n    traceId: string,\n    spanName: string,\n    spanKind: SpanKind,\n    attributes: SpanAttributes,\n    links: Link[]\n  ): SamplingResult {\n    const parentContext = trace.getSpanContext(context);\n\n    if (!parentContext || !isSpanContextValid(parentContext)) {\n      return this._root.shouldSample(\n        context,\n        traceId,\n        spanName,\n        spanKind,\n        attributes,\n        links\n      );\n    }\n\n    if (parentContext.isRemote) {\n      if (parentContext.traceFlags & TraceFlags.SAMPLED) {\n        return this._remoteParentSampled.shouldSample(\n          context,\n          traceId,\n          spanName,\n          spanKind,\n          attributes,\n          links\n        );\n      }\n      return this._remoteParentNotSampled.shouldSample(\n        context,\n        traceId,\n        spanName,\n        spanKind,\n        attributes,\n        links\n      );\n    }\n\n    if (parentContext.traceFlags & TraceFlags.SAMPLED) {\n      return this._localParentSampled.shouldSample(\n        context,\n        traceId,\n        spanName,\n        spanKind,\n        attributes,\n        links\n      );\n    }\n\n    return this._localParentNotSampled.shouldSample(\n      context,\n      traceId,\n      spanName,\n      spanKind,\n      attributes,\n      links\n    );\n  }\n\n  toString(): string {\n    return `ParentBased{root=${this._root.toString()}, remoteParentSampled=${this._remoteParentSampled.toString()}, remoteParentNotSampled=${this._remoteParentNotSampled.toString()}, localParentSampled=${this._localParentSampled.toString()}, localParentNotSampled=${this._localParentNotSampled.toString()}}`;\n  }\n}\n\ninterface ParentBasedSamplerConfig {\n  /** Sampler called for spans with no parent */\n  root: Sampler;\n  /** Sampler called for spans with a remote parent which was sampled. Default AlwaysOn */\n  remoteParentSampled?: Sampler;\n  /** Sampler called for spans with a remote parent which was not sampled. Default AlwaysOff */\n  remoteParentNotSampled?: Sampler;\n  /** Sampler called for spans with a local parent which was sampled. Default AlwaysOn */\n  localParentSampled?: Sampler;\n  /** Sampler called for spans with a local parent which was not sampled. Default AlwaysOff */\n  localParentNotSampled?: Sampler;\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Sampler,\n  SamplingDecision,\n  SamplingResult,\n  isValidTraceId,\n} from '@opentelemetry/api';\n\n/**\n * @deprecated Use the one defined in @opentelemetry/sdk-trace-base instead.\n * Sampler that samples a given fraction of traces based of trace id deterministically.\n */\nexport class TraceIdRatioBasedSampler implements Sampler {\n  private _upperBound: number;\n\n  constructor(private readonly _ratio: number = 0) {\n    this._ratio = this._normalize(_ratio);\n    this._upperBound = Math.floor(this._ratio * 0xffffffff);\n  }\n\n  shouldSample(context: unknown, traceId: string): SamplingResult {\n    return {\n      decision:\n        isValidTraceId(traceId) && this._accumulate(traceId) < this._upperBound\n          ? SamplingDecision.RECORD_AND_SAMPLED\n          : SamplingDecision.NOT_RECORD,\n    };\n  }\n\n  toString(): string {\n    return `TraceIdRatioBased{${this._ratio}}`;\n  }\n\n  private _normalize(ratio: number): number {\n    if (typeof ratio !== 'number' || isNaN(ratio)) return 0;\n    return ratio >= 1 ? 1 : ratio <= 0 ? 0 : ratio;\n  }\n\n  private _accumulate(traceId: string): number {\n    let accumulation = 0;\n    for (let i = 0; i < traceId.length / 8; i++) {\n      const pos = i * 8;\n      const part = parseInt(traceId.slice(pos, pos + 8), 16);\n      accumulation = (accumulation ^ part) >>> 0;\n    }\n    return accumulation;\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n/**\n * based on lodash in order to support esm builds without esModuleInterop.\n * lodash is using MIT License.\n **/\n\nconst objectTag = '[object Object]';\nconst nullTag = '[object Null]';\nconst undefinedTag = '[object Undefined]';\nconst funcProto = Function.prototype;\nconst funcToString = funcProto.toString;\nconst objectCtorString = funcToString.call(Object);\nconst getPrototype = overArg(Object.getPrototypeOf, Object);\nconst objectProto = Object.prototype;\nconst hasOwnProperty = objectProto.hasOwnProperty;\nconst symToStringTag = Symbol ? Symbol.toStringTag : undefined;\nconst nativeObjectToString = objectProto.toString;\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func: Function, transform: any): any {\n  return function (arg: any) {\n    return func(transform(arg));\n  };\n}\n\n/**\n * Checks if `value` is a plain object, that is, an object created by the\n * `Object` constructor or one with a `[[Prototype]]` of `null`.\n *\n * @static\n * @memberOf _\n * @since 0.8.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n * }\n *\n * _.isPlainObject(new Foo);\n * // => false\n *\n * _.isPlainObject([1, 2, 3]);\n * // => false\n *\n * _.isPlainObject({ 'x': 0, 'y': 0 });\n * // => true\n *\n * _.isPlainObject(Object.create(null));\n * // => true\n */\nexport function isPlainObject(value: any) {\n  if (!isObjectLike(value) || baseGetTag(value) !== objectTag) {\n    return false;\n  }\n  const proto = getPrototype(value);\n  if (proto === null) {\n    return true;\n  }\n  const Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;\n  return (\n    typeof Ctor == 'function' &&\n    Ctor instanceof Ctor &&\n    funcToString.call(Ctor) === objectCtorString\n  );\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value: any) {\n  return value != null && typeof value == 'object';\n}\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value: any) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return symToStringTag && symToStringTag in Object(value)\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value: any) {\n  const isOwn = hasOwnProperty.call(value, symToStringTag as any),\n    tag = value[symToStringTag as any];\n  let unmasked = false;\n\n  try {\n    value[symToStringTag as any] = undefined;\n    unmasked = true;\n  } catch (e) {\n    // silence\n  }\n\n  const result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag as any] = tag;\n    } else {\n      delete value[symToStringTag as any];\n    }\n  }\n  return result;\n}\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value: any) {\n  return nativeObjectToString.call(value);\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport { isPlainObject } from './lodash.merge';\n\nconst MAX_LEVEL = 20;\n\ninterface ObjectInto {\n  obj: any;\n  key: string;\n}\n\n/**\n * Merges objects together\n * @param args - objects / values to be merged\n */\nexport function merge(...args: any[]): any {\n  let result: any = args.shift();\n  const objects: WeakMap<any, ObjectInto[]> | undefined = new WeakMap<\n    any,\n    ObjectInto[]\n  >();\n  while (args.length > 0) {\n    result = mergeTwoObjects(result, args.shift(), 0, objects);\n  }\n\n  return result;\n}\n\nfunction takeValue(value: any): any {\n  if (isArray(value)) {\n    return value.slice();\n  }\n  return value;\n}\n\n/**\n * Merges two objects\n * @param one - first object\n * @param two - second object\n * @param level - current deep level\n * @param objects - objects holder that has been already referenced - to prevent\n * cyclic dependency\n */\nfunction mergeTwoObjects(\n  one: any,\n  two: any,\n  level = 0,\n  objects: WeakMap<any, ObjectInto[]>\n): any {\n  let result: any;\n  if (level > MAX_LEVEL) {\n    return undefined;\n  }\n  level++;\n  if (isPrimitive(one) || isPrimitive(two) || isFunction(two)) {\n    result = takeValue(two);\n  } else if (isArray(one)) {\n    result = one.slice();\n    if (isArray(two)) {\n      for (let i = 0, j = two.length; i < j; i++) {\n        result.push(takeValue(two[i]));\n      }\n    } else if (isObject(two)) {\n      const keys = Object.keys(two);\n      for (let i = 0, j = keys.length; i < j; i++) {\n        const key = keys[i];\n        result[key] = takeValue(two[key]);\n      }\n    }\n  } else if (isObject(one)) {\n    if (isObject(two)) {\n      if (!shouldMerge(one, two)) {\n        return two;\n      }\n      result = Object.assign({}, one);\n      const keys = Object.keys(two);\n\n      for (let i = 0, j = keys.length; i < j; i++) {\n        const key = keys[i];\n        const twoValue = two[key];\n\n        if (isPrimitive(twoValue)) {\n          if (typeof twoValue === 'undefined') {\n            delete result[key];\n          } else {\n            // result[key] = takeValue(twoValue);\n            result[key] = twoValue;\n          }\n        } else {\n          const obj1 = result[key];\n          const obj2 = twoValue;\n\n          if (\n            wasObjectReferenced(one, key, objects) ||\n            wasObjectReferenced(two, key, objects)\n          ) {\n            delete result[key];\n          } else {\n            if (isObject(obj1) && isObject(obj2)) {\n              const arr1 = objects.get(obj1) || [];\n              const arr2 = objects.get(obj2) || [];\n              arr1.push({ obj: one, key });\n              arr2.push({ obj: two, key });\n              objects.set(obj1, arr1);\n              objects.set(obj2, arr2);\n            }\n\n            result[key] = mergeTwoObjects(\n              result[key],\n              twoValue,\n              level,\n              objects\n            );\n          }\n        }\n      }\n    } else {\n      result = two;\n    }\n  }\n\n  return result;\n}\n\n/**\n * Function to check if object has been already reference\n * @param obj\n * @param key\n * @param objects\n */\nfunction wasObjectReferenced(\n  obj: any,\n  key: string,\n  objects: WeakMap<any, ObjectInto[]>\n): boolean {\n  const arr = objects.get(obj[key]) || [];\n  for (let i = 0, j = arr.length; i < j; i++) {\n    const info = arr[i];\n    if (info.key === key && info.obj === obj) {\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction isArray(value: any): boolean {\n  return Array.isArray(value);\n}\n\nfunction isFunction(value: any): boolean {\n  return typeof value === 'function';\n}\n\nfunction isObject(value: any): boolean {\n  return (\n    !isPrimitive(value) &&\n    !isArray(value) &&\n    !isFunction(value) &&\n    typeof value === 'object'\n  );\n}\n\nfunction isPrimitive(value: any): boolean {\n  return (\n    typeof value === 'string' ||\n    typeof value === 'number' ||\n    typeof value === 'boolean' ||\n    typeof value === 'undefined' ||\n    value instanceof Date ||\n    value instanceof RegExp ||\n    value === null\n  );\n}\n\nfunction shouldMerge(one: any, two: any): boolean {\n  if (!isPlainObject(one) || !isPlainObject(two)) {\n    return false;\n  }\n\n  return true;\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Error that is thrown on timeouts.\n */\nexport class TimeoutError extends Error {\n  constructor(message?: string) {\n    super(message);\n\n    // manually adjust prototype to retain `instanceof` functionality when targeting ES5, see:\n    // https://github.com/Microsoft/TypeScript-wiki/blob/main/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n    Object.setPrototypeOf(this, TimeoutError.prototype);\n  }\n}\n\n/**\n * Adds a timeout to a promise and rejects if the specified timeout has elapsed. Also rejects if the specified promise\n * rejects, and resolves if the specified promise resolves.\n *\n * <p> NOTE: this operation will continue even after it throws a {@link TimeoutError}.\n *\n * @param promise promise to use with timeout.\n * @param timeout the timeout in milliseconds until the returned promise is rejected.\n */\nexport function callWithTimeout<T>(\n  promise: Promise<T>,\n  timeout: number\n): Promise<T> {\n  let timeoutHandle: ReturnType<typeof setTimeout>;\n\n  const timeoutPromise = new Promise<never>(function timeoutFunction(\n    _resolve,\n    reject\n  ) {\n    timeoutHandle = setTimeout(function timeoutHandler() {\n      reject(new TimeoutError('Operation timed out.'));\n    }, timeout);\n  });\n\n  return Promise.race([promise, timeoutPromise]).then(\n    result => {\n      clearTimeout(timeoutHandle);\n      return result;\n    },\n    reason => {\n      clearTimeout(timeoutHandle);\n      throw reason;\n    }\n  );\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport function urlMatches(url: string, urlToMatch: string | RegExp): boolean {\n  if (typeof urlToMatch === 'string') {\n    return url === urlToMatch;\n  } else {\n    return !!url.match(urlToMatch);\n  }\n}\n/**\n * Check if {@param url} should be ignored when comparing against {@param ignoredUrls}\n * @param url\n * @param ignoredUrls\n */\nexport function isUrlIgnored(\n  url: string,\n  ignoredUrls?: Array<string | RegExp>\n): boolean {\n  if (!ignoredUrls) {\n    return false;\n  }\n\n  for (const ignoreUrl of ignoredUrls) {\n    if (urlMatches(url, ignoreUrl)) {\n      return true;\n    }\n  }\n  return false;\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ShimWrapped } from '../common/types';\n\n/**\n * Checks if certain function has been already wrapped\n * @param func\n */\nexport function isWrapped(func: unknown): func is ShimWrapped {\n  return (\n    typeof func === 'function' &&\n    typeof (func as ShimWrapped).__original === 'function' &&\n    typeof (func as ShimWrapped).__unwrap === 'function' &&\n    (func as ShimWrapped).__wrapped === true\n  );\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport class Deferred<T> {\n  private _promise: Promise<T>;\n  private _resolve!: (val: T) => void;\n  private _reject!: (error: unknown) => void;\n  constructor() {\n    this._promise = new Promise((resolve, reject) => {\n      this._resolve = resolve;\n      this._reject = reject;\n    });\n  }\n\n  get promise() {\n    return this._promise;\n  }\n\n  resolve(val: T) {\n    this._resolve(val);\n  }\n\n  reject(err: unknown) {\n    this._reject(err);\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Deferred } from './promise';\n\n/**\n * Bind the callback and only invoke the callback once regardless how many times `BindOnceFuture.call` is invoked.\n */\nexport class BindOnceFuture<\n  R,\n  This = unknown,\n  T extends (this: This, ...args: unknown[]) => R = () => R,\n> {\n  private _isCalled = false;\n  private _deferred = new Deferred<R>();\n  constructor(\n    private _callback: T,\n    private _that: This\n  ) {}\n\n  get isCalled() {\n    return this._isCalled;\n  }\n\n  get promise() {\n    return this._deferred.promise;\n  }\n\n  call(...args: Parameters<T>): Promise<R> {\n    if (!this._isCalled) {\n      this._isCalled = true;\n      try {\n        Promise.resolve(this._callback.call(this._that, ...args)).then(\n          val => this._deferred.resolve(val),\n          err => this._deferred.reject(err)\n        );\n      } catch (err) {\n        this._deferred.reject(err);\n      }\n    }\n    return this._deferred.promise;\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { context } from '@opentelemetry/api';\nimport { ExportResult } from '../ExportResult';\nimport { suppressTracing } from '../trace/suppress-tracing';\n\nexport interface Exporter<T> {\n  export(arg: T, resultCallback: (result: ExportResult) => void): void;\n}\n\n/**\n * @internal\n * Shared functionality used by Exporters while exporting data, including suppresion of Traces.\n */\nexport function _export<T>(\n  exporter: Exporter<T>,\n  arg: T\n): Promise<ExportResult> {\n  return new Promise(resolve => {\n    // prevent downstream exporter calls from generating spans\n    context.with(suppressTracing(context.active()), () => {\n      exporter.export(arg, (result: ExportResult) => {\n        resolve(result);\n      });\n    });\n  });\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport * from './baggage/propagation/W3CBaggagePropagator';\nexport * from './common/anchored-clock';\nexport * from './common/attributes';\nexport * from './common/global-error-handler';\nexport * from './common/logging-error-handler';\nexport * from './common/time';\nexport * from './common/types';\nexport * from './ExportResult';\nexport * from './version';\nexport * as baggageUtils from './baggage/utils';\nexport * from './platform';\nexport * from './propagation/composite';\nexport * from './trace/W3CTraceContextPropagator';\nexport * from './trace/IdGenerator';\nexport * from './trace/rpc-metadata';\nexport * from './trace/sampler/AlwaysOffSampler';\nexport * from './trace/sampler/AlwaysOnSampler';\nexport * from './trace/sampler/ParentBasedSampler';\nexport * from './trace/sampler/TraceIdRatioBasedSampler';\nexport * from './trace/suppress-tracing';\nexport * from './trace/TraceState';\nexport * from './utils/environment';\nexport * from './utils/merge';\nexport * from './utils/sampling';\nexport * from './utils/timeout';\nexport * from './utils/url';\nexport * from './utils/wrap';\nexport * from './utils/callback';\nexport * from './version';\nimport { _export } from './internal/exporter';\nexport const internal = {\n  _export,\n};\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Accumulation,\n  AccumulationRecord,\n  Aggregator,\n  AggregatorKind,\n  LastValue,\n} from './types';\nimport { HrTime } from '@opentelemetry/api';\nimport { millisToHrTime, hrTimeToMicroseconds } from '@opentelemetry/core';\nimport { DataPointType, GaugeMetricData } from '../export/MetricData';\nimport { InstrumentDescriptor } from '../InstrumentDescriptor';\nimport { Maybe } from '../utils';\nimport { AggregationTemporality } from '../export/AggregationTemporality';\n\nexport class LastValueAccumulation implements Accumulation {\n  constructor(\n    public startTime: HrTime,\n    private _current: number = 0,\n    public sampleTime: HrTime = [0, 0]\n  ) {}\n\n  record(value: number): void {\n    this._current = value;\n    this.sampleTime = millisToHrTime(Date.now());\n  }\n\n  setStartTime(startTime: HrTime): void {\n    this.startTime = startTime;\n  }\n\n  toPointValue(): LastValue {\n    return this._current;\n  }\n}\n\n/** Basic aggregator which calculates a LastValue from individual measurements. */\nexport class LastValueAggregator implements Aggregator<LastValueAccumulation> {\n  public kind: AggregatorKind.LAST_VALUE = AggregatorKind.LAST_VALUE;\n\n  createAccumulation(startTime: HrTime) {\n    return new LastValueAccumulation(startTime);\n  }\n\n  /**\n   * Returns the result of the merge of the given accumulations.\n   *\n   * Return the newly captured (delta) accumulation for LastValueAggregator.\n   */\n  merge(\n    previous: LastValueAccumulation,\n    delta: LastValueAccumulation\n  ): LastValueAccumulation {\n    // nanoseconds may lose precisions.\n    const latestAccumulation =\n      hrTimeToMicroseconds(delta.sampleTime) >=\n      hrTimeToMicroseconds(previous.sampleTime)\n        ? delta\n        : previous;\n    return new LastValueAccumulation(\n      previous.startTime,\n      latestAccumulation.toPointValue(),\n      latestAccumulation.sampleTime\n    );\n  }\n\n  /**\n   * Returns a new DELTA aggregation by comparing two cumulative measurements.\n   *\n   * A delta aggregation is not meaningful to LastValueAggregator, just return\n   * the newly captured (delta) accumulation for LastValueAggregator.\n   */\n  diff(\n    previous: LastValueAccumulation,\n    current: LastValueAccumulation\n  ): LastValueAccumulation {\n    // nanoseconds may lose precisions.\n    const latestAccumulation =\n      hrTimeToMicroseconds(current.sampleTime) >=\n      hrTimeToMicroseconds(previous.sampleTime)\n        ? current\n        : previous;\n    return new LastValueAccumulation(\n      current.startTime,\n      latestAccumulation.toPointValue(),\n      latestAccumulation.sampleTime\n    );\n  }\n\n  toMetricData(\n    descriptor: InstrumentDescriptor,\n    aggregationTemporality: AggregationTemporality,\n    accumulationByAttributes: AccumulationRecord<LastValueAccumulation>[],\n    endTime: HrTime\n  ): Maybe<GaugeMetricData> {\n    return {\n      descriptor,\n      aggregationTemporality,\n      dataPointType: DataPointType.GAUGE,\n      dataPoints: accumulationByAttributes.map(([attributes, accumulation]) => {\n        return {\n          attributes,\n          startTime: accumulation.startTime,\n          endTime,\n          value: accumulation.toPointValue(),\n        };\n      }),\n    };\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Sum,\n  AggregatorKind,\n  Aggregator,\n  Accumulation,\n  AccumulationRecord,\n} from './types';\nimport { HrTime } from '@opentelemetry/api';\nimport { DataPointType, SumMetricData } from '../export/MetricData';\nimport { InstrumentDescriptor } from '../InstrumentDescriptor';\nimport { Maybe } from '../utils';\nimport { AggregationTemporality } from '../export/AggregationTemporality';\n\nexport class SumAccumulation implements Accumulation {\n  constructor(\n    public startTime: HrTime,\n    public monotonic: boolean,\n    private _current: number = 0,\n    public reset = false\n  ) {}\n\n  record(value: number): void {\n    if (this.monotonic && value < 0) {\n      return;\n    }\n    this._current += value;\n  }\n\n  setStartTime(startTime: HrTime): void {\n    this.startTime = startTime;\n  }\n\n  toPointValue(): Sum {\n    return this._current;\n  }\n}\n\n/** Basic aggregator which calculates a Sum from individual measurements. */\nexport class SumAggregator implements Aggregator<SumAccumulation> {\n  public kind: AggregatorKind.SUM = AggregatorKind.SUM;\n\n  constructor(public monotonic: boolean) {}\n\n  createAccumulation(startTime: HrTime) {\n    return new SumAccumulation(startTime, this.monotonic);\n  }\n\n  /**\n   * Returns the result of the merge of the given accumulations.\n   */\n  merge(previous: SumAccumulation, delta: SumAccumulation): SumAccumulation {\n    const prevPv = previous.toPointValue();\n    const deltaPv = delta.toPointValue();\n    if (delta.reset) {\n      return new SumAccumulation(\n        delta.startTime,\n        this.monotonic,\n        deltaPv,\n        delta.reset\n      );\n    }\n    return new SumAccumulation(\n      previous.startTime,\n      this.monotonic,\n      prevPv + deltaPv\n    );\n  }\n\n  /**\n   * Returns a new DELTA aggregation by comparing two cumulative measurements.\n   */\n  diff(previous: SumAccumulation, current: SumAccumulation): SumAccumulation {\n    const prevPv = previous.toPointValue();\n    const currPv = current.toPointValue();\n    /**\n     * If the SumAggregator is a monotonic one and the previous point value is\n     * greater than the current one, a reset is deemed to be happened.\n     * Return the current point value to prevent the value from been reset.\n     */\n    if (this.monotonic && prevPv > currPv) {\n      return new SumAccumulation(\n        current.startTime,\n        this.monotonic,\n        currPv,\n        true\n      );\n    }\n    return new SumAccumulation(\n      current.startTime,\n      this.monotonic,\n      currPv - prevPv\n    );\n  }\n\n  toMetricData(\n    descriptor: InstrumentDescriptor,\n    aggregationTemporality: AggregationTemporality,\n    accumulationByAttributes: AccumulationRecord<SumAccumulation>[],\n    endTime: HrTime\n  ): Maybe<SumMetricData> {\n    return {\n      descriptor,\n      aggregationTemporality,\n      dataPointType: DataPointType.SUM,\n      dataPoints: accumulationByAttributes.map(([attributes, accumulation]) => {\n        return {\n          attributes,\n          startTime: accumulation.startTime,\n          endTime,\n          value: accumulation.toPointValue(),\n        };\n      }),\n      isMonotonic: this.monotonic,\n    };\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport * from './Drop';\nexport * from './Histogram';\nexport * from './ExponentialHistogram';\nexport * from './LastValue';\nexport * from './Sum';\nexport { Aggregator } from './types';\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as api from '@opentelemetry/api';\nimport {\n  Aggregator,\n  SumAggregator,\n  DropAggregator,\n  LastValueAggregator,\n  HistogramAggregator,\n  ExponentialHistogramAggregator,\n} from '../aggregator';\nimport { Accumulation } from '../aggregator/types';\nimport { InstrumentDescriptor, InstrumentType } from '../InstrumentDescriptor';\nimport { Maybe } from '../utils';\n\n/**\n * Configures how measurements are combined into metrics for views.\n *\n * Aggregation provides a set of built-in aggregations via static methods.\n */\nexport abstract class Aggregation {\n  abstract createAggregator(\n    instrument: InstrumentDescriptor\n  ): Aggregator<Maybe<Accumulation>>;\n\n  static Drop(): Aggregation {\n    return DROP_AGGREGATION;\n  }\n\n  static Sum(): Aggregation {\n    return SUM_AGGREGATION;\n  }\n\n  static LastValue(): Aggregation {\n    return LAST_VALUE_AGGREGATION;\n  }\n\n  static Histogram(): Aggregation {\n    return HISTOGRAM_AGGREGATION;\n  }\n\n  static ExponentialHistogram(): Aggregation {\n    return EXPONENTIAL_HISTOGRAM_AGGREGATION;\n  }\n\n  static Default(): Aggregation {\n    return DEFAULT_AGGREGATION;\n  }\n}\n\n/**\n * The default drop aggregation.\n */\nexport class DropAggregation extends Aggregation {\n  private static DEFAULT_INSTANCE = new DropAggregator();\n  createAggregator(_instrument: InstrumentDescriptor) {\n    return DropAggregation.DEFAULT_INSTANCE;\n  }\n}\n\n/**\n * The default sum aggregation.\n */\nexport class SumAggregation extends Aggregation {\n  private static MONOTONIC_INSTANCE = new SumAggregator(true);\n  private static NON_MONOTONIC_INSTANCE = new SumAggregator(false);\n  createAggregator(instrument: InstrumentDescriptor) {\n    switch (instrument.type) {\n      case InstrumentType.COUNTER:\n      case InstrumentType.OBSERVABLE_COUNTER:\n      case InstrumentType.HISTOGRAM: {\n        return SumAggregation.MONOTONIC_INSTANCE;\n      }\n      default: {\n        return SumAggregation.NON_MONOTONIC_INSTANCE;\n      }\n    }\n  }\n}\n\n/**\n * The default last value aggregation.\n */\nexport class LastValueAggregation extends Aggregation {\n  private static DEFAULT_INSTANCE = new LastValueAggregator();\n  createAggregator(_instrument: InstrumentDescriptor) {\n    return LastValueAggregation.DEFAULT_INSTANCE;\n  }\n}\n\n/**\n * The default histogram aggregation.\n */\nexport class HistogramAggregation extends Aggregation {\n  private static DEFAULT_INSTANCE = new HistogramAggregator(\n    [0, 5, 10, 25, 50, 75, 100, 250, 500, 750, 1000, 2500, 5000, 7500, 10000],\n    true\n  );\n  createAggregator(_instrument: InstrumentDescriptor) {\n    return HistogramAggregation.DEFAULT_INSTANCE;\n  }\n}\n\n/**\n * The explicit bucket histogram aggregation.\n */\nexport class ExplicitBucketHistogramAggregation extends Aggregation {\n  private _boundaries: number[];\n\n  /**\n   * @param boundaries the bucket boundaries of the histogram aggregation\n   * @param _recordMinMax If set to true, min and max will be recorded. Otherwise, min and max will not be recorded.\n   */\n  constructor(\n    boundaries: number[],\n    private readonly _recordMinMax = true\n  ) {\n    super();\n    if (boundaries === undefined || boundaries.length === 0) {\n      throw new Error('HistogramAggregator should be created with boundaries.');\n    }\n    // Copy the boundaries array for modification.\n    boundaries = boundaries.concat();\n    // We need to an ordered set to be able to correctly compute count for each\n    // boundary since we'll iterate on each in order.\n    boundaries = boundaries.sort((a, b) => a - b);\n    // Remove all Infinity from the boundaries.\n    const minusInfinityIndex = boundaries.lastIndexOf(-Infinity);\n    let infinityIndex: number | undefined = boundaries.indexOf(Infinity);\n    if (infinityIndex === -1) {\n      infinityIndex = undefined;\n    }\n    this._boundaries = boundaries.slice(minusInfinityIndex + 1, infinityIndex);\n  }\n\n  createAggregator(_instrument: InstrumentDescriptor) {\n    return new HistogramAggregator(this._boundaries, this._recordMinMax);\n  }\n}\n\nexport class ExponentialHistogramAggregation extends Aggregation {\n  constructor(\n    private readonly _maxSize: number = 160,\n    private readonly _recordMinMax = true\n  ) {\n    super();\n  }\n  createAggregator(_instrument: InstrumentDescriptor) {\n    return new ExponentialHistogramAggregator(\n      this._maxSize,\n      this._recordMinMax\n    );\n  }\n}\n\n/**\n * The default aggregation.\n */\nexport class DefaultAggregation extends Aggregation {\n  private _resolve(instrument: InstrumentDescriptor): Aggregation {\n    // cast to unknown to disable complaints on the (unreachable) fallback.\n    switch (instrument.type as unknown) {\n      case InstrumentType.COUNTER:\n      case InstrumentType.UP_DOWN_COUNTER:\n      case InstrumentType.OBSERVABLE_COUNTER:\n      case InstrumentType.OBSERVABLE_UP_DOWN_COUNTER: {\n        return SUM_AGGREGATION;\n      }\n      case InstrumentType.OBSERVABLE_GAUGE: {\n        return LAST_VALUE_AGGREGATION;\n      }\n      case InstrumentType.HISTOGRAM: {\n        return HISTOGRAM_AGGREGATION;\n      }\n    }\n    api.diag.warn(`Unable to recognize instrument type: ${instrument.type}`);\n    return DROP_AGGREGATION;\n  }\n\n  createAggregator(\n    instrument: InstrumentDescriptor\n  ): Aggregator<Maybe<Accumulation>> {\n    return this._resolve(instrument).createAggregator(instrument);\n  }\n}\n\nconst DROP_AGGREGATION = new DropAggregation();\nconst SUM_AGGREGATION = new SumAggregation();\nconst LAST_VALUE_AGGREGATION = new LastValueAggregation();\nconst HISTOGRAM_AGGREGATION = new HistogramAggregation();\nconst EXPONENTIAL_HISTOGRAM_AGGREGATION = new ExponentialHistogramAggregation();\nconst DEFAULT_AGGREGATION = new DefaultAggregation();\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { InstrumentType } from '../InstrumentDescriptor';\nimport { Aggregation } from '../view/Aggregation';\nimport { AggregationTemporality } from './AggregationTemporality';\n\n/**\n * Aggregation selector based on metric instrument types.\n */\nexport type AggregationSelector = (\n  instrumentType: InstrumentType\n) => Aggregation;\n\n/**\n * Aggregation temporality selector based on metric instrument types.\n */\nexport type AggregationTemporalitySelector = (\n  instrumentType: InstrumentType\n) => AggregationTemporality;\n\nexport const DEFAULT_AGGREGATION_SELECTOR: AggregationSelector =\n  _instrumentType => Aggregation.Default();\nexport const DEFAULT_AGGREGATION_TEMPORALITY_SELECTOR: AggregationTemporalitySelector =\n  _instrumentType => AggregationTemporality.CUMULATIVE;\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as api from '@opentelemetry/api';\nimport { AggregationTemporality } from './AggregationTemporality';\nimport { MetricProducer } from './MetricProducer';\nimport { CollectionResult } from './MetricData';\nimport { FlatMap, callWithTimeout } from '../utils';\nimport { InstrumentType } from '../InstrumentDescriptor';\nimport {\n  CollectionOptions,\n  ForceFlushOptions,\n  ShutdownOptions,\n} from '../types';\nimport { Aggregation } from '../view/Aggregation';\nimport {\n  AggregationSelector,\n  AggregationTemporalitySelector,\n  DEFAULT_AGGREGATION_SELECTOR,\n  DEFAULT_AGGREGATION_TEMPORALITY_SELECTOR,\n} from './AggregationSelector';\n\nexport interface MetricReaderOptions {\n  /**\n   * Aggregation selector based on metric instrument types. If no views are\n   * configured for a metric instrument, a per-metric-reader aggregation is\n   * selected with this selector.\n   */\n  aggregationSelector?: AggregationSelector;\n  /**\n   * Aggregation temporality selector based on metric instrument types. If\n   * not configured, cumulative is used for all instruments.\n   */\n  aggregationTemporalitySelector?: AggregationTemporalitySelector;\n  /**\n   * **Note, this option is experimental**. Additional MetricProducers to use as a source of\n   * aggregated metric data in addition to the SDK's metric data. The resource returned by\n   * these MetricProducers is ignored; the SDK's resource will be used instead.\n   * @experimental\n   */\n  metricProducers?: MetricProducer[];\n}\n\n/**\n * A registered reader of metrics that, when linked to a {@link MetricProducer}, offers global\n * control over metrics.\n */\nexport abstract class MetricReader {\n  // Tracks the shutdown state.\n  // TODO: use BindOncePromise here once a new version of @opentelemetry/core is available.\n  private _shutdown = false;\n  // Additional MetricProducers which will be combined with the SDK's output\n  private _metricProducers: MetricProducer[];\n  // MetricProducer used by this instance which produces metrics from the SDK\n  private _sdkMetricProducer?: MetricProducer;\n  private readonly _aggregationTemporalitySelector: AggregationTemporalitySelector;\n  private readonly _aggregationSelector: AggregationSelector;\n\n  constructor(options?: MetricReaderOptions) {\n    this._aggregationSelector =\n      options?.aggregationSelector ?? DEFAULT_AGGREGATION_SELECTOR;\n    this._aggregationTemporalitySelector =\n      options?.aggregationTemporalitySelector ??\n      DEFAULT_AGGREGATION_TEMPORALITY_SELECTOR;\n    this._metricProducers = options?.metricProducers ?? [];\n  }\n\n  /**\n   * Set the {@link MetricProducer} used by this instance. **This should only be called by the\n   * SDK and should be considered internal.**\n   *\n   * To add additional {@link MetricProducer}s to a {@link MetricReader}, pass them to the\n   * constructor as {@link MetricReaderOptions.metricProducers}.\n   *\n   * @internal\n   * @param metricProducer\n   */\n  setMetricProducer(metricProducer: MetricProducer) {\n    if (this._sdkMetricProducer) {\n      throw new Error(\n        'MetricReader can not be bound to a MeterProvider again.'\n      );\n    }\n    this._sdkMetricProducer = metricProducer;\n    this.onInitialized();\n  }\n\n  /**\n   * Select the {@link Aggregation} for the given {@link InstrumentType} for this\n   * reader.\n   */\n  selectAggregation(instrumentType: InstrumentType): Aggregation {\n    return this._aggregationSelector(instrumentType);\n  }\n\n  /**\n   * Select the {@link AggregationTemporality} for the given\n   * {@link InstrumentType} for this reader.\n   */\n  selectAggregationTemporality(\n    instrumentType: InstrumentType\n  ): AggregationTemporality {\n    return this._aggregationTemporalitySelector(instrumentType);\n  }\n\n  /**\n   * Handle once the SDK has initialized this {@link MetricReader}\n   * Overriding this method is optional.\n   */\n  protected onInitialized(): void {\n    // Default implementation is empty.\n  }\n\n  /**\n   * Handle a shutdown signal by the SDK.\n   *\n   * <p> For push exporters, this should shut down any intervals and close any open connections.\n   * @protected\n   */\n  protected abstract onShutdown(): Promise<void>;\n\n  /**\n   * Handle a force flush signal by the SDK.\n   *\n   * <p> In all scenarios metrics should be collected via {@link collect()}.\n   * <p> For push exporters, this should collect and report metrics.\n   * @protected\n   */\n  protected abstract onForceFlush(): Promise<void>;\n\n  /**\n   * Collect all metrics from the associated {@link MetricProducer}\n   */\n  async collect(options?: CollectionOptions): Promise<CollectionResult> {\n    if (this._sdkMetricProducer === undefined) {\n      throw new Error('MetricReader is not bound to a MetricProducer');\n    }\n\n    // Subsequent invocations to collect are not allowed. SDKs SHOULD return some failure for these calls.\n    if (this._shutdown) {\n      throw new Error('MetricReader is shutdown');\n    }\n\n    const [sdkCollectionResults, ...additionalCollectionResults] =\n      await Promise.all([\n        this._sdkMetricProducer.collect({\n          timeoutMillis: options?.timeoutMillis,\n        }),\n        ...this._metricProducers.map(producer =>\n          producer.collect({\n            timeoutMillis: options?.timeoutMillis,\n          })\n        ),\n      ]);\n\n    // Merge the results, keeping the SDK's Resource\n    const errors = sdkCollectionResults.errors.concat(\n      FlatMap(additionalCollectionResults, result => result.errors)\n    );\n    const resource = sdkCollectionResults.resourceMetrics.resource;\n    const scopeMetrics =\n      sdkCollectionResults.resourceMetrics.scopeMetrics.concat(\n        FlatMap(\n          additionalCollectionResults,\n          result => result.resourceMetrics.scopeMetrics\n        )\n      );\n    return {\n      resourceMetrics: {\n        resource,\n        scopeMetrics,\n      },\n      errors,\n    };\n  }\n\n  /**\n   * Shuts down the metric reader, the promise will reject after the optional timeout or resolve after completion.\n   *\n   * <p> NOTE: this operation will continue even after the promise rejects due to a timeout.\n   * @param options options with timeout.\n   */\n  async shutdown(options?: ShutdownOptions): Promise<void> {\n    // Do not call shutdown again if it has already been called.\n    if (this._shutdown) {\n      api.diag.error('Cannot call shutdown twice.');\n      return;\n    }\n\n    // No timeout if timeoutMillis is undefined or null.\n    if (options?.timeoutMillis == null) {\n      await this.onShutdown();\n    } else {\n      await callWithTimeout(this.onShutdown(), options.timeoutMillis);\n    }\n\n    this._shutdown = true;\n  }\n\n  /**\n   * Flushes metrics read by this reader, the promise will reject after the optional timeout or resolve after completion.\n   *\n   * <p> NOTE: this operation will continue even after the promise rejects due to a timeout.\n   * @param options options with timeout.\n   */\n  async forceFlush(options?: ForceFlushOptions): Promise<void> {\n    if (this._shutdown) {\n      api.diag.warn('Cannot forceFlush on already shutdown MetricReader.');\n      return;\n    }\n\n    // No timeout if timeoutMillis is undefined or null.\n    if (options?.timeoutMillis == null) {\n      await this.onForceFlush();\n      return;\n    }\n\n    await callWithTimeout(this.onForceFlush(), options.timeoutMillis);\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as api from '@opentelemetry/api';\nimport {\n  internal,\n  ExportResultCode,\n  globalErrorHandler,\n  unrefTimer,\n} from '@opentelemetry/core';\nimport { MetricReader } from './MetricReader';\nimport { PushMetricExporter } from './MetricExporter';\nimport { callWithTimeout, TimeoutError } from '../utils';\nimport { diag } from '@opentelemetry/api';\nimport { MetricProducer } from './MetricProducer';\n\nexport type PeriodicExportingMetricReaderOptions = {\n  /**\n   * The backing exporter for the metric reader.\n   */\n  exporter: PushMetricExporter;\n  /**\n   * An internal milliseconds for the metric reader to initiate metric\n   * collection.\n   */\n  exportIntervalMillis?: number;\n  /**\n   * Milliseconds for the async observable callback to timeout.\n   */\n  exportTimeoutMillis?: number;\n  /**\n   * **Note, this option is experimental**. Additional MetricProducers to use as a source of\n   * aggregated metric data in addition to the SDK's metric data. The resource returned by\n   * these MetricProducers is ignored; the SDK's resource will be used instead.\n   * @experimental\n   */\n  metricProducers?: MetricProducer[];\n};\n\n/**\n * {@link MetricReader} which collects metrics based on a user-configurable time interval, and passes the metrics to\n * the configured {@link PushMetricExporter}\n */\nexport class PeriodicExportingMetricReader extends MetricReader {\n  private _interval?: ReturnType<typeof setInterval>;\n  private _exporter: PushMetricExporter;\n  private readonly _exportInterval: number;\n  private readonly _exportTimeout: number;\n\n  constructor(options: PeriodicExportingMetricReaderOptions) {\n    super({\n      aggregationSelector: options.exporter.selectAggregation?.bind(\n        options.exporter\n      ),\n      aggregationTemporalitySelector:\n        options.exporter.selectAggregationTemporality?.bind(options.exporter),\n      metricProducers: options.metricProducers,\n    });\n\n    if (\n      options.exportIntervalMillis !== undefined &&\n      options.exportIntervalMillis <= 0\n    ) {\n      throw Error('exportIntervalMillis must be greater than 0');\n    }\n\n    if (\n      options.exportTimeoutMillis !== undefined &&\n      options.exportTimeoutMillis <= 0\n    ) {\n      throw Error('exportTimeoutMillis must be greater than 0');\n    }\n\n    if (\n      options.exportTimeoutMillis !== undefined &&\n      options.exportIntervalMillis !== undefined &&\n      options.exportIntervalMillis < options.exportTimeoutMillis\n    ) {\n      throw Error(\n        'exportIntervalMillis must be greater than or equal to exportTimeoutMillis'\n      );\n    }\n\n    this._exportInterval = options.exportIntervalMillis ?? 60000;\n    this._exportTimeout = options.exportTimeoutMillis ?? 30000;\n    this._exporter = options.exporter;\n  }\n\n  private async _runOnce(): Promise<void> {\n    try {\n      await callWithTimeout(this._doRun(), this._exportTimeout);\n    } catch (err) {\n      if (err instanceof TimeoutError) {\n        api.diag.error(\n          'Export took longer than %s milliseconds and timed out.',\n          this._exportTimeout\n        );\n        return;\n      }\n\n      globalErrorHandler(err);\n    }\n  }\n\n  private async _doRun(): Promise<void> {\n    const { resourceMetrics, errors } = await this.collect({\n      timeoutMillis: this._exportTimeout,\n    });\n\n    if (errors.length > 0) {\n      api.diag.error(\n        'PeriodicExportingMetricReader: metrics collection errors',\n        ...errors\n      );\n    }\n\n    const doExport = async () => {\n      const result = await internal._export(this._exporter, resourceMetrics);\n      if (result.code !== ExportResultCode.SUCCESS) {\n        throw new Error(\n          `PeriodicExportingMetricReader: metrics export failed (error ${result.error})`\n        );\n      }\n    };\n\n    // Avoid scheduling a promise to make the behavior more predictable and easier to test\n    if (resourceMetrics.resource.asyncAttributesPending) {\n      resourceMetrics.resource\n        .waitForAsyncAttributes?.()\n        .then(doExport, err =>\n          diag.debug('Error while resolving async portion of resource: ', err)\n        );\n    } else {\n      await doExport();\n    }\n  }\n\n  protected override onInitialized(): void {\n    // start running the interval as soon as this reader is initialized and keep handle for shutdown.\n    this._interval = setInterval(() => {\n      // this._runOnce never rejects. Using void operator to suppress @typescript-eslint/no-floating-promises.\n      void this._runOnce();\n    }, this._exportInterval);\n    unrefTimer(this._interval);\n  }\n\n  protected async onForceFlush(): Promise<void> {\n    await this._runOnce();\n    await this._exporter.forceFlush();\n  }\n\n  protected async onShutdown(): Promise<void> {\n    if (this._interval) {\n      clearInterval(this._interval);\n    }\n\n    await this._exporter.shutdown();\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ExportResultCode } from '@opentelemetry/core';\nimport { ExportResult } from '@opentelemetry/core';\nimport { InstrumentType } from '../InstrumentDescriptor';\nimport { AggregationTemporality } from './AggregationTemporality';\nimport { ResourceMetrics } from './MetricData';\nimport { PushMetricExporter } from './MetricExporter';\n\n/**\n * In-memory Metrics Exporter is a Push Metric Exporter\n * which accumulates metrics data in the local memory and\n * allows to inspect it (useful for e.g. unit tests).\n */\nexport class InMemoryMetricExporter implements PushMetricExporter {\n  protected _shutdown = false;\n  protected _aggregationTemporality: AggregationTemporality;\n  private _metrics: ResourceMetrics[] = [];\n\n  constructor(aggregationTemporality: AggregationTemporality) {\n    this._aggregationTemporality = aggregationTemporality;\n  }\n\n  /**\n   * @inheritedDoc\n   */\n  export(\n    metrics: ResourceMetrics,\n    resultCallback: (result: ExportResult) => void\n  ): void {\n    // Avoid storing metrics when exporter is shutdown\n    if (this._shutdown) {\n      setTimeout(() => resultCallback({ code: ExportResultCode.FAILED }), 0);\n      return;\n    }\n\n    this._metrics.push(metrics);\n    setTimeout(() => resultCallback({ code: ExportResultCode.SUCCESS }), 0);\n  }\n\n  /**\n   * Returns all the collected resource metrics\n   * @returns ResourceMetrics[]\n   */\n  public getMetrics(): ResourceMetrics[] {\n    return this._metrics;\n  }\n\n  forceFlush(): Promise<void> {\n    return Promise.resolve();\n  }\n\n  reset() {\n    this._metrics = [];\n  }\n\n  selectAggregationTemporality(\n    _instrumentType: InstrumentType\n  ): AggregationTemporality {\n    return this._aggregationTemporality;\n  }\n\n  shutdown(): Promise<void> {\n    this._shutdown = true;\n    return Promise.resolve();\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { ExportResult, ExportResultCode } from '@opentelemetry/core';\nimport { InstrumentType } from '../InstrumentDescriptor';\nimport { AggregationTemporality } from './AggregationTemporality';\nimport { ResourceMetrics } from './MetricData';\nimport { PushMetricExporter } from './MetricExporter';\nimport {\n  AggregationTemporalitySelector,\n  DEFAULT_AGGREGATION_TEMPORALITY_SELECTOR,\n} from './AggregationSelector';\n\ninterface ConsoleMetricExporterOptions {\n  temporalitySelector?: AggregationTemporalitySelector;\n}\n\n/* eslint-disable no-console */\nexport class ConsoleMetricExporter implements PushMetricExporter {\n  protected _shutdown = false;\n  protected _temporalitySelector: AggregationTemporalitySelector;\n\n  constructor(options?: ConsoleMetricExporterOptions) {\n    this._temporalitySelector =\n      options?.temporalitySelector ?? DEFAULT_AGGREGATION_TEMPORALITY_SELECTOR;\n  }\n\n  export(\n    metrics: ResourceMetrics,\n    resultCallback: (result: ExportResult) => void\n  ): void {\n    if (this._shutdown) {\n      // If the exporter is shutting down, by spec, we need to return FAILED as export result\n      setImmediate(resultCallback, { code: ExportResultCode.FAILED });\n      return;\n    }\n\n    return ConsoleMetricExporter._sendMetrics(metrics, resultCallback);\n  }\n\n  forceFlush(): Promise<void> {\n    return Promise.resolve();\n  }\n\n  selectAggregationTemporality(\n    _instrumentType: InstrumentType\n  ): AggregationTemporality {\n    return this._temporalitySelector(_instrumentType);\n  }\n\n  shutdown(): Promise<void> {\n    this._shutdown = true;\n    return Promise.resolve();\n  }\n\n  private static _sendMetrics(\n    metrics: ResourceMetrics,\n    done: (result: ExportResult) => void\n  ): void {\n    for (const scopeMetrics of metrics.scopeMetrics) {\n      for (const metric of scopeMetrics.metrics) {\n        console.dir({\n          descriptor: metric.descriptor,\n          dataPointType: metric.dataPointType,\n          dataPoints: metric.dataPoints,\n        });\n      }\n    }\n\n    done({ code: ExportResultCode.SUCCESS });\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport function defaultServiceName(): string {\n  return `unknown_service:${process.argv0}`;\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport const normalizeArch = (nodeArchString: string): string => {\n  // Maps from https://nodejs.org/api/os.html#osarch to arch values in spec:\n  // https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/resource/semantic_conventions/host.md\n  switch (nodeArchString) {\n    case 'arm':\n      return 'arm32';\n    case 'ppc':\n      return 'ppc32';\n    case 'x64':\n      return 'amd64';\n    default:\n      return nodeArchString;\n  }\n};\n\nexport const normalizeType = (nodePlatform: string): string => {\n  // Maps from https://nodejs.org/api/os.html#osplatform to arch values in spec:\n  // https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/resource/semantic_conventions/os.md\n  switch (nodePlatform) {\n    case 'sunos':\n      return 'solaris';\n    case 'win32':\n      return 'windows';\n    default:\n      return nodePlatform;\n  }\n};\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as child_process from 'child_process';\nimport * as util from 'util';\n\nexport const execAsync = util.promisify(child_process.exec);\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { execAsync } from './execAsync';\nimport { diag } from '@opentelemetry/api';\n\nexport async function getMachineId(): Promise<string> {\n  try {\n    const result = await execAsync('ioreg -rd1 -c \"IOPlatformExpertDevice\"');\n\n    const idLine = result.stdout\n      .split('\\n')\n      .find(line => line.includes('IOPlatformUUID'));\n\n    if (!idLine) {\n      return '';\n    }\n\n    const parts = idLine.split('\" = \"');\n    if (parts.length === 2) {\n      return parts[1].slice(0, -1);\n    }\n  } catch (e) {\n    diag.debug(`error reading machine id: ${e}`);\n  }\n\n  return '';\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { promises as fs } from 'fs';\nimport { diag } from '@opentelemetry/api';\n\nexport async function getMachineId(): Promise<string> {\n  const paths = ['/etc/machine-id', '/var/lib/dbus/machine-id'];\n\n  for (const path of paths) {\n    try {\n      const result = await fs.readFile(path, { encoding: 'utf8' });\n      return result.trim();\n    } catch (e) {\n      diag.debug(`error reading machine id: ${e}`);\n    }\n  }\n\n  return '';\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { promises as fs } from 'fs';\nimport { execAsync } from './execAsync';\nimport { diag } from '@opentelemetry/api';\n\nexport async function getMachineId(): Promise<string> {\n  try {\n    const result = await fs.readFile('/etc/hostid', { encoding: 'utf8' });\n    return result.trim();\n  } catch (e) {\n    diag.debug(`error reading machine id: ${e}`);\n  }\n\n  try {\n    const result = await execAsync('kenv -q smbios.system.uuid');\n    return result.stdout.trim();\n  } catch (e) {\n    diag.debug(`error reading machine id: ${e}`);\n  }\n\n  return '';\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as process from 'process';\nimport { execAsync } from './execAsync';\nimport { diag } from '@opentelemetry/api';\n\nexport async function getMachineId(): Promise<string> {\n  const args =\n    'QUERY HKEY_LOCAL_MACHINE\\\\SOFTWARE\\\\Microsoft\\\\Cryptography /v MachineGuid';\n  let command = '%windir%\\\\System32\\\\REG.exe';\n  if (process.arch === 'ia32' && 'PROCESSOR_ARCHITEW6432' in process.env) {\n    command = '%windir%\\\\sysnative\\\\cmd.exe /c ' + command;\n  }\n\n  try {\n    const result = await execAsync(`${command} ${args}`);\n    const parts = result.stdout.split('REG_SZ');\n    if (parts.length === 2) {\n      return parts[1].trim();\n    }\n  } catch (e) {\n    diag.debug(`error reading machine id: ${e}`);\n  }\n\n  return '';\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { diag } from '@opentelemetry/api';\n\nexport async function getMachineId(): Promise<string> {\n  diag.debug('could not read machine-id: unsupported platform');\n  return '';\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport * as process from 'process';\n\nlet getMachineId: () => Promise<string>;\n\nswitch (process.platform) {\n  case 'darwin':\n    ({ getMachineId } = require('./getMachineId-darwin'));\n    break;\n  case 'linux':\n    ({ getMachineId } = require('./getMachineId-linux'));\n    break;\n  case 'freebsd':\n    ({ getMachineId } = require('./getMachineId-bsd'));\n    break;\n  case 'win32':\n    ({ getMachineId } = require('./getMachineId-win'));\n    break;\n  default:\n    ({ getMachineId } = require('./getMachineId-unsupported'));\n}\n\nexport { getMachineId };\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SemanticResourceAttributes } from '@opentelemetry/semantic-conventions';\nimport { Resource } from '../../Resource';\nimport { DetectorSync, ResourceAttributes } from '../../types';\nimport { ResourceDetectionConfig } from '../../config';\nimport { arch, hostname } from 'os';\nimport { normalizeArch } from './utils';\nimport { getMachineId } from './machine-id/getMachineId';\n\n/**\n * HostDetectorSync detects the resources related to the host current process is\n * running on. Currently only non-cloud-based attributes are included.\n */\nclass HostDetectorSync implements DetectorSync {\n  detect(_config?: ResourceDetectionConfig): Resource {\n    const attributes: ResourceAttributes = {\n      [SemanticResourceAttributes.HOST_NAME]: hostname(),\n      [SemanticResourceAttributes.HOST_ARCH]: normalizeArch(arch()),\n    };\n\n    return new Resource(attributes, this._getAsyncAttributes());\n  }\n\n  private _getAsyncAttributes(): Promise<ResourceAttributes> {\n    return getMachineId().then(machineId => {\n      const attributes: ResourceAttributes = {};\n      if (machineId) {\n        attributes[SemanticResourceAttributes.HOST_ID] = machineId;\n      }\n      return attributes;\n    });\n  }\n}\n\nexport const hostDetectorSync = new HostDetectorSync();\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Detector } from '../../types';\nimport { ResourceDetectionConfig } from '../../config';\nimport { IResource } from '../../IResource';\nimport { hostDetectorSync } from './HostDetectorSync';\n\n/**\n * HostDetector detects the resources related to the host current process is\n * running on. Currently only non-cloud-based attributes are included.\n */\nclass HostDetector implements Detector {\n  detect(_config?: ResourceDetectionConfig): Promise<IResource> {\n    return Promise.resolve(hostDetectorSync.detect(_config));\n  }\n}\n\nexport const hostDetector = new HostDetector();\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SemanticResourceAttributes } from '@opentelemetry/semantic-conventions';\nimport { Resource } from '../../Resource';\nimport { DetectorSync, ResourceAttributes } from '../../types';\nimport { ResourceDetectionConfig } from '../../config';\nimport { platform, release } from 'os';\nimport { normalizeType } from './utils';\n\n/**\n * OSDetectorSync detects the resources related to the operating system (OS) on\n * which the process represented by this resource is running.\n */\nclass OSDetectorSync implements DetectorSync {\n  detect(_config?: ResourceDetectionConfig): Resource {\n    const attributes: ResourceAttributes = {\n      [SemanticResourceAttributes.OS_TYPE]: normalizeType(platform()),\n      [SemanticResourceAttributes.OS_VERSION]: release(),\n    };\n    return new Resource(attributes);\n  }\n}\n\nexport const osDetectorSync = new OSDetectorSync();\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Detector } from '../../types';\nimport { ResourceDetectionConfig } from '../../config';\nimport { IResource } from '../../IResource';\nimport { osDetectorSync } from './OSDetectorSync';\n\n/**\n * OSDetector detects the resources related to the operating system (OS) on\n * which the process represented by this resource is running.\n */\nclass OSDetector implements Detector {\n  detect(_config?: ResourceDetectionConfig): Promise<IResource> {\n    return Promise.resolve(osDetectorSync.detect(_config));\n  }\n}\n\nexport const osDetector = new OSDetector();\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { diag } from '@opentelemetry/api';\nimport { SemanticResourceAttributes } from '@opentelemetry/semantic-conventions';\nimport { Resource } from '../../Resource';\nimport { DetectorSync, ResourceAttributes } from '../../types';\nimport { ResourceDetectionConfig } from '../../config';\nimport { IResource } from '../../IResource';\nimport * as os from 'os';\n\n/**\n * ProcessDetectorSync will be used to detect the resources related current process running\n * and being instrumented from the NodeJS Process module.\n */\nclass ProcessDetectorSync implements DetectorSync {\n  detect(_config?: ResourceDetectionConfig): IResource {\n    const attributes: ResourceAttributes = {\n      [SemanticResourceAttributes.PROCESS_PID]: process.pid,\n      [SemanticResourceAttributes.PROCESS_EXECUTABLE_NAME]: process.title,\n      [SemanticResourceAttributes.PROCESS_EXECUTABLE_PATH]: process.execPath,\n      [SemanticResourceAttributes.PROCESS_COMMAND_ARGS]: [\n        process.argv[0],\n        ...process.execArgv,\n        ...process.argv.slice(1),\n      ],\n      [SemanticResourceAttributes.PROCESS_RUNTIME_VERSION]:\n        process.versions.node,\n      [SemanticResourceAttributes.PROCESS_RUNTIME_NAME]: 'nodejs',\n      [SemanticResourceAttributes.PROCESS_RUNTIME_DESCRIPTION]: 'Node.js',\n    };\n\n    if (process.argv.length > 1) {\n      attributes[SemanticResourceAttributes.PROCESS_COMMAND] = process.argv[1];\n    }\n\n    try {\n      const userInfo = os.userInfo();\n      attributes[SemanticResourceAttributes.PROCESS_OWNER] = userInfo.username;\n    } catch (e) {\n      diag.debug(`error obtaining process owner: ${e}`);\n    }\n\n    return new Resource(attributes);\n  }\n}\n\nexport const processDetectorSync = new ProcessDetectorSync();\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Detector } from '../../types';\nimport { ResourceDetectionConfig } from '../../config';\nimport { IResource } from '../../IResource';\nimport { processDetectorSync } from './ProcessDetectorSync';\n\n/**\n * ProcessDetector will be used to detect the resources related current process running\n * and being instrumented from the NodeJS Process module.\n */\nclass ProcessDetector implements Detector {\n  detect(config?: ResourceDetectionConfig): Promise<IResource> {\n    return Promise.resolve(processDetectorSync.detect(config));\n  }\n}\n\nexport const processDetector = new ProcessDetector();\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport * from './default-service-name';\nexport * from './HostDetector';\nexport * from './OSDetector';\nexport * from './HostDetectorSync';\nexport * from './OSDetectorSync';\nexport * from './ProcessDetector';\nexport * from './ProcessDetectorSync';\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport * from './node';\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { diag } from '@opentelemetry/api';\nimport { SemanticResourceAttributes } from '@opentelemetry/semantic-conventions';\nimport { SDK_INFO } from '@opentelemetry/core';\nimport { ResourceAttributes } from './types';\nimport { defaultServiceName } from './platform';\nimport { IResource } from './IResource';\n\n/**\n * A Resource describes the entity for which a signals (metrics or trace) are\n * collected.\n */\nexport class Resource implements IResource {\n  static readonly EMPTY = new Resource({});\n  private _syncAttributes?: ResourceAttributes;\n  private _asyncAttributesPromise?: Promise<ResourceAttributes>;\n  private _attributes?: ResourceAttributes;\n\n  /**\n   * Check if async attributes have resolved. This is useful to avoid awaiting\n   * waitForAsyncAttributes (which will introduce asynchronous behavior) when not necessary.\n   *\n   * @returns true if the resource \"attributes\" property is not yet settled to its final value\n   */\n  public asyncAttributesPending?: boolean;\n\n  /**\n   * Returns an empty Resource\n   */\n  static empty(): IResource {\n    return Resource.EMPTY;\n  }\n\n  /**\n   * Returns a Resource that identifies the SDK in use.\n   */\n  static default(): IResource {\n    return new Resource({\n      [SemanticResourceAttributes.SERVICE_NAME]: defaultServiceName(),\n      [SemanticResourceAttributes.TELEMETRY_SDK_LANGUAGE]:\n        SDK_INFO[SemanticResourceAttributes.TELEMETRY_SDK_LANGUAGE],\n      [SemanticResourceAttributes.TELEMETRY_SDK_NAME]:\n        SDK_INFO[SemanticResourceAttributes.TELEMETRY_SDK_NAME],\n      [SemanticResourceAttributes.TELEMETRY_SDK_VERSION]:\n        SDK_INFO[SemanticResourceAttributes.TELEMETRY_SDK_VERSION],\n    });\n  }\n\n  constructor(\n    /**\n     * A dictionary of attributes with string keys and values that provide\n     * information about the entity as numbers, strings or booleans\n     * TODO: Consider to add check/validation on attributes.\n     */\n    attributes: ResourceAttributes,\n    asyncAttributesPromise?: Promise<ResourceAttributes>\n  ) {\n    this._attributes = attributes;\n    this.asyncAttributesPending = asyncAttributesPromise != null;\n    this._syncAttributes = this._attributes ?? {};\n    this._asyncAttributesPromise = asyncAttributesPromise?.then(\n      asyncAttributes => {\n        this._attributes = Object.assign({}, this._attributes, asyncAttributes);\n        this.asyncAttributesPending = false;\n        return asyncAttributes;\n      },\n      err => {\n        diag.debug(\"a resource's async attributes promise rejected: %s\", err);\n        this.asyncAttributesPending = false;\n        return {};\n      }\n    );\n  }\n\n  get attributes(): ResourceAttributes {\n    if (this.asyncAttributesPending) {\n      diag.error(\n        'Accessing resource attributes before async attributes settled'\n      );\n    }\n\n    return this._attributes ?? {};\n  }\n\n  /**\n   * Returns a promise that will never be rejected. Resolves when all async attributes have finished being added to\n   * this Resource's attributes. This is useful in exporters to block until resource detection\n   * has finished.\n   */\n  async waitForAsyncAttributes?(): Promise<void> {\n    if (this.asyncAttributesPending) {\n      await this._asyncAttributesPromise;\n    }\n  }\n\n  /**\n   * Returns a new, merged {@link Resource} by merging the current Resource\n   * with the other Resource. In case of a collision, other Resource takes\n   * precedence.\n   *\n   * @param other the Resource that will be merged with this.\n   * @returns the newly merged Resource.\n   */\n  merge(other: IResource | null): IResource {\n    if (!other) return this;\n\n    // SpanAttributes from other resource overwrite attributes from this resource.\n    const mergedSyncAttributes = {\n      ...this._syncAttributes,\n      //Support for old resource implementation where _syncAttributes is not defined\n      ...((other as Resource)._syncAttributes ?? other.attributes),\n    };\n\n    if (\n      !this._asyncAttributesPromise &&\n      !(other as Resource)._asyncAttributesPromise\n    ) {\n      return new Resource(mergedSyncAttributes);\n    }\n\n    const mergedAttributesPromise = Promise.all([\n      this._asyncAttributesPromise,\n      (other as Resource)._asyncAttributesPromise,\n    ]).then(([thisAsyncAttributes, otherAsyncAttributes]) => {\n      return {\n        ...this._syncAttributes,\n        ...thisAsyncAttributes,\n        //Support for old resource implementation where _syncAttributes is not defined\n        ...((other as Resource)._syncAttributes ?? other.attributes),\n        ...otherAsyncAttributes,\n      };\n    });\n\n    return new Resource(mergedSyncAttributes, mergedAttributesPromise);\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  browserDetectorSync,\n  Detector,\n  IResource,\n  ResourceDetectionConfig,\n} from '..';\n\n/**\n * BrowserDetector will be used to detect the resources related to browser.\n */\nclass BrowserDetector implements Detector {\n  detect(config?: ResourceDetectionConfig): Promise<IResource> {\n    return Promise.resolve(browserDetectorSync.detect(config));\n  }\n}\n\nexport const browserDetector = new BrowserDetector();\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { diag } from '@opentelemetry/api';\nimport { getEnv } from '@opentelemetry/core';\nimport { SemanticResourceAttributes } from '@opentelemetry/semantic-conventions';\nimport { Resource } from '../Resource';\nimport { DetectorSync, ResourceAttributes } from '../types';\nimport { ResourceDetectionConfig } from '../config';\nimport { IResource } from '../IResource';\n\n/**\n * EnvDetectorSync can be used to detect the presence of and create a Resource\n * from the OTEL_RESOURCE_ATTRIBUTES environment variable.\n */\nclass EnvDetectorSync implements DetectorSync {\n  // Type, attribute keys, and attribute values should not exceed 256 characters.\n  private readonly _MAX_LENGTH = 255;\n\n  // OTEL_RESOURCE_ATTRIBUTES is a comma-separated list of attributes.\n  private readonly _COMMA_SEPARATOR = ',';\n\n  // OTEL_RESOURCE_ATTRIBUTES contains key value pair separated by '='.\n  private readonly _LABEL_KEY_VALUE_SPLITTER = '=';\n\n  private readonly _ERROR_MESSAGE_INVALID_CHARS =\n    'should be a ASCII string with a length greater than 0 and not exceed ' +\n    this._MAX_LENGTH +\n    ' characters.';\n\n  private readonly _ERROR_MESSAGE_INVALID_VALUE =\n    'should be a ASCII string with a length not exceed ' +\n    this._MAX_LENGTH +\n    ' characters.';\n\n  /**\n   * Returns a {@link Resource} populated with attributes from the\n   * OTEL_RESOURCE_ATTRIBUTES environment variable. Note this is an async\n   * function to conform to the Detector interface.\n   *\n   * @param config The resource detection config\n   */\n  detect(_config?: ResourceDetectionConfig): IResource {\n    const attributes: ResourceAttributes = {};\n    const env = getEnv();\n\n    const rawAttributes = env.OTEL_RESOURCE_ATTRIBUTES;\n    const serviceName = env.OTEL_SERVICE_NAME;\n\n    if (rawAttributes) {\n      try {\n        const parsedAttributes = this._parseResourceAttributes(rawAttributes);\n        Object.assign(attributes, parsedAttributes);\n      } catch (e) {\n        diag.debug(`EnvDetector failed: ${e.message}`);\n      }\n    }\n\n    if (serviceName) {\n      attributes[SemanticResourceAttributes.SERVICE_NAME] = serviceName;\n    }\n\n    return new Resource(attributes);\n  }\n\n  /**\n   * Creates an attribute map from the OTEL_RESOURCE_ATTRIBUTES environment\n   * variable.\n   *\n   * OTEL_RESOURCE_ATTRIBUTES: A comma-separated list of attributes describing\n   * the source in more detail, e.g. “key1=val1,key2=val2”. Domain names and\n   * paths are accepted as attribute keys. Values may be quoted or unquoted in\n   * general. If a value contains whitespaces, =, or \" characters, it must\n   * always be quoted.\n   *\n   * @param rawEnvAttributes The resource attributes as a comma-seperated list\n   * of key/value pairs.\n   * @returns The sanitized resource attributes.\n   */\n  private _parseResourceAttributes(\n    rawEnvAttributes?: string\n  ): ResourceAttributes {\n    if (!rawEnvAttributes) return {};\n\n    const attributes: ResourceAttributes = {};\n    const rawAttributes: string[] = rawEnvAttributes.split(\n      this._COMMA_SEPARATOR,\n      -1\n    );\n    for (const rawAttribute of rawAttributes) {\n      const keyValuePair: string[] = rawAttribute.split(\n        this._LABEL_KEY_VALUE_SPLITTER,\n        -1\n      );\n      if (keyValuePair.length !== 2) {\n        continue;\n      }\n      let [key, value] = keyValuePair;\n      // Leading and trailing whitespaces are trimmed.\n      key = key.trim();\n      value = value.trim().split(/^\"|\"$/).join('');\n      if (!this._isValidAndNotEmpty(key)) {\n        throw new Error(`Attribute key ${this._ERROR_MESSAGE_INVALID_CHARS}`);\n      }\n      if (!this._isValid(value)) {\n        throw new Error(`Attribute value ${this._ERROR_MESSAGE_INVALID_VALUE}`);\n      }\n      attributes[key] = decodeURIComponent(value);\n    }\n    return attributes;\n  }\n\n  /**\n   * Determines whether the given String is a valid printable ASCII string with\n   * a length not exceed _MAX_LENGTH characters.\n   *\n   * @param str The String to be validated.\n   * @returns Whether the String is valid.\n   */\n  private _isValid(name: string): boolean {\n    return name.length <= this._MAX_LENGTH && this._isBaggageOctetString(name);\n  }\n\n  // https://www.w3.org/TR/baggage/#definition\n  private _isBaggageOctetString(str: string): boolean {\n    for (let i = 0; i < str.length; i++) {\n      const ch = str.charCodeAt(i);\n      if (ch < 0x21 || ch === 0x2c || ch === 0x3b || ch === 0x5c || ch > 0x7e) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Determines whether the given String is a valid printable ASCII string with\n   * a length greater than 0 and not exceed _MAX_LENGTH characters.\n   *\n   * @param str The String to be validated.\n   * @returns Whether the String is valid and not empty.\n   */\n  private _isValidAndNotEmpty(str: string): boolean {\n    return str.length > 0 && this._isValid(str);\n  }\n}\n\nexport const envDetectorSync = new EnvDetectorSync();\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Detector } from '../types';\nimport { ResourceDetectionConfig } from '../config';\nimport { IResource } from '../IResource';\nimport { envDetectorSync } from './EnvDetectorSync';\n\n/**\n * EnvDetector can be used to detect the presence of and create a Resource\n * from the OTEL_RESOURCE_ATTRIBUTES environment variable.\n */\nclass EnvDetector implements Detector {\n  /**\n   * Returns a {@link Resource} populated with attributes from the\n   * OTEL_RESOURCE_ATTRIBUTES environment variable. Note this is an async\n   * function to conform to the Detector interface.\n   *\n   * @param config The resource detection config\n   */\n  detect(config?: ResourceDetectionConfig): Promise<IResource> {\n    return Promise.resolve(envDetectorSync.detect(config));\n  }\n}\n\nexport const envDetector = new EnvDetector();\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SemanticResourceAttributes } from '@opentelemetry/semantic-conventions';\nimport { DetectorSync, IResource, Resource, ResourceDetectionConfig } from '..';\nimport { ResourceAttributes } from '../types';\nimport { diag } from '@opentelemetry/api';\n\n/**\n * BrowserDetectorSync will be used to detect the resources related to browser.\n */\nclass BrowserDetectorSync implements DetectorSync {\n  detect(config?: ResourceDetectionConfig): IResource {\n    const isBrowser = typeof navigator !== 'undefined';\n    if (!isBrowser) {\n      return Resource.empty();\n    }\n    const browserResource: ResourceAttributes = {\n      [SemanticResourceAttributes.PROCESS_RUNTIME_NAME]: 'browser',\n      [SemanticResourceAttributes.PROCESS_RUNTIME_DESCRIPTION]: 'Web Browser',\n      [SemanticResourceAttributes.PROCESS_RUNTIME_VERSION]: navigator.userAgent,\n    };\n    return this._getResourceAttributes(browserResource, config);\n  }\n  /**\n   * Validates process resource attribute map from process variables\n   *\n   * @param browserResource The un-sanitized resource attributes from process as key/value pairs.\n   * @param config: Config\n   * @returns The sanitized resource attributes.\n   */\n  private _getResourceAttributes(\n    browserResource: ResourceAttributes,\n    _config?: ResourceDetectionConfig\n  ) {\n    if (\n      browserResource[SemanticResourceAttributes.PROCESS_RUNTIME_VERSION] === ''\n    ) {\n      diag.debug(\n        'BrowserDetector failed: Unable to find required browser resources. '\n      );\n      return Resource.empty();\n    } else {\n      return new Resource({\n        ...browserResource,\n      });\n    }\n  }\n}\n\nexport const browserDetectorSync = new BrowserDetectorSync();\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport * from './BrowserDetector';\nexport * from './EnvDetector';\nexport * from './BrowserDetectorSync';\nexport * from './EnvDetectorSync';\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const isPromiseLike = <R>(val: any): val is PromiseLike<R> => {\n  return (\n    val !== null && typeof val === 'object' && typeof val.then === 'function'\n  );\n};\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Resource } from './Resource';\nimport { ResourceDetectionConfig } from './config';\nimport { diag } from '@opentelemetry/api';\nimport { isPromiseLike } from './utils';\nimport { Detector, DetectorSync } from './types';\nimport { IResource } from './IResource';\n\n/**\n * Runs all resource detectors and returns the results merged into a single Resource. Promise\n * does not resolve until all the underlying detectors have resolved, unlike\n * detectResourcesSync.\n *\n * @deprecated use detectResourcesSync() instead.\n * @param config Configuration for resource detection\n */\nexport const detectResources = async (\n  config: ResourceDetectionConfig = {}\n): Promise<IResource> => {\n  const resources: IResource[] = await Promise.all(\n    (config.detectors || []).map(async d => {\n      try {\n        const resource = await d.detect(config);\n        diag.debug(`${d.constructor.name} found resource.`, resource);\n        return resource;\n      } catch (e) {\n        diag.debug(`${d.constructor.name} failed: ${e.message}`);\n        return Resource.empty();\n      }\n    })\n  );\n\n  // Future check if verbose logging is enabled issue #1903\n  logResources(resources);\n\n  return resources.reduce(\n    (acc, resource) => acc.merge(resource),\n    Resource.empty()\n  );\n};\n\n/**\n * Runs all resource detectors synchronously, merging their results. In case of attribute collision later resources will take precedence.\n *\n * @param config Configuration for resource detection\n */\nexport const detectResourcesSync = (\n  config: ResourceDetectionConfig = {}\n): IResource => {\n  const resources: IResource[] = (config.detectors ?? []).map(\n    (d: Detector | DetectorSync) => {\n      try {\n        const resourceOrPromise = d.detect(config);\n        let resource: IResource;\n        if (isPromiseLike<Resource>(resourceOrPromise)) {\n          const createPromise = async () => {\n            const resolvedResource = await resourceOrPromise;\n            return resolvedResource.attributes;\n          };\n          resource = new Resource({}, createPromise());\n        } else {\n          resource = resourceOrPromise as IResource;\n        }\n\n        if (resource.waitForAsyncAttributes) {\n          void resource\n            .waitForAsyncAttributes()\n            .then(() =>\n              diag.debug(`${d.constructor.name} found resource.`, resource)\n            );\n        } else {\n          diag.debug(`${d.constructor.name} found resource.`, resource);\n        }\n\n        return resource;\n      } catch (e) {\n        diag.error(`${d.constructor.name} failed: ${e.message}`);\n        return Resource.empty();\n      }\n    }\n  );\n\n  const mergedResources = resources.reduce(\n    (acc, resource) => acc.merge(resource),\n    Resource.empty()\n  );\n\n  if (mergedResources.waitForAsyncAttributes) {\n    void mergedResources.waitForAsyncAttributes().then(() => {\n      // Future check if verbose logging is enabled issue #1903\n      logResources(resources);\n    });\n  }\n\n  return mergedResources;\n};\n\n/**\n * Writes debug information about the detected resources to the logger defined in the resource detection config, if one is provided.\n *\n * @param resources The array of {@link Resource} that should be logged. Empty entries will be ignored.\n */\nconst logResources = (resources: Array<IResource>) => {\n  resources.forEach(resource => {\n    // Print only populated resources\n    if (Object.keys(resource.attributes).length > 0) {\n      const resourceDebugString = JSON.stringify(resource.attributes, null, 4);\n      diag.verbose(resourceDebugString);\n    }\n  });\n};\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport * from './Resource';\nexport * from './IResource';\nexport * from './platform';\nexport * from './types';\nexport * from './config';\nexport * from './detectors';\nexport * from './detect-resources';\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { InstrumentationScope } from '@opentelemetry/core';\nimport { InstrumentDescriptor } from '../InstrumentDescriptor';\nimport { InstrumentSelector } from './InstrumentSelector';\nimport { MeterSelector } from './MeterSelector';\nimport { View } from './View';\n\nexport class ViewRegistry {\n  private _registeredViews: View[] = [];\n\n  addView(view: View) {\n    this._registeredViews.push(view);\n  }\n\n  findViews(\n    instrument: InstrumentDescriptor,\n    meter: InstrumentationScope\n  ): View[] {\n    const views = this._registeredViews.filter(registeredView => {\n      return (\n        this._matchInstrument(registeredView.instrumentSelector, instrument) &&\n        this._matchMeter(registeredView.meterSelector, meter)\n      );\n    });\n\n    return views;\n  }\n\n  private _matchInstrument(\n    selector: InstrumentSelector,\n    instrument: InstrumentDescriptor\n  ): boolean {\n    return (\n      (selector.getType() === undefined ||\n        instrument.type === selector.getType()) &&\n      selector.getNameFilter().match(instrument.name) &&\n      selector.getUnitFilter().match(instrument.unit)\n    );\n  }\n\n  private _matchMeter(\n    selector: MeterSelector,\n    meter: InstrumentationScope\n  ): boolean {\n    return (\n      selector.getNameFilter().match(meter.name) &&\n      (meter.version === undefined ||\n        selector.getVersionFilter().match(meter.version)) &&\n      (meter.schemaUrl === undefined ||\n        selector.getSchemaUrlFilter().match(meter.schemaUrl))\n    );\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  context as contextApi,\n  diag,\n  Context,\n  MetricAttributes,\n  ValueType,\n  UpDownCounter,\n  Counter,\n  Histogram,\n  Observable,\n  ObservableCallback,\n  ObservableCounter,\n  ObservableGauge,\n  ObservableUpDownCounter,\n} from '@opentelemetry/api';\nimport { millisToHrTime } from '@opentelemetry/core';\nimport { InstrumentDescriptor } from './InstrumentDescriptor';\nimport { ObservableRegistry } from './state/ObservableRegistry';\nimport {\n  AsyncWritableMetricStorage,\n  WritableMetricStorage,\n} from './state/WritableMetricStorage';\n\nexport class SyncInstrument {\n  constructor(\n    private _writableMetricStorage: WritableMetricStorage,\n    protected _descriptor: InstrumentDescriptor\n  ) {}\n\n  protected _record(\n    value: number,\n    attributes: MetricAttributes = {},\n    context: Context = contextApi.active()\n  ) {\n    if (typeof value !== 'number') {\n      diag.warn(\n        `non-number value provided to metric ${this._descriptor.name}: ${value}`\n      );\n      return;\n    }\n    if (\n      this._descriptor.valueType === ValueType.INT &&\n      !Number.isInteger(value)\n    ) {\n      diag.warn(\n        `INT value type cannot accept a floating-point value for ${this._descriptor.name}, ignoring the fractional digits.`\n      );\n      value = Math.trunc(value);\n      // ignore non-finite values.\n      if (!Number.isInteger(value)) {\n        return;\n      }\n    }\n    this._writableMetricStorage.record(\n      value,\n      attributes,\n      context,\n      millisToHrTime(Date.now())\n    );\n  }\n}\n\n/**\n * The class implements {@link UpDownCounter} interface.\n */\nexport class UpDownCounterInstrument\n  extends SyncInstrument\n  implements UpDownCounter\n{\n  /**\n   * Increment value of counter by the input. Inputs may be negative.\n   */\n  add(value: number, attributes?: MetricAttributes, ctx?: Context): void {\n    this._record(value, attributes, ctx);\n  }\n}\n\n/**\n * The class implements {@link Counter} interface.\n */\nexport class CounterInstrument extends SyncInstrument implements Counter {\n  /**\n   * Increment value of counter by the input. Inputs may not be negative.\n   */\n  add(value: number, attributes?: MetricAttributes, ctx?: Context): void {\n    if (value < 0) {\n      diag.warn(\n        `negative value provided to counter ${this._descriptor.name}: ${value}`\n      );\n      return;\n    }\n\n    this._record(value, attributes, ctx);\n  }\n}\n\n/**\n * The class implements {@link Histogram} interface.\n */\nexport class HistogramInstrument extends SyncInstrument implements Histogram {\n  /**\n   * Records a measurement. Value of the measurement must not be negative.\n   */\n  record(value: number, attributes?: MetricAttributes, ctx?: Context): void {\n    if (value < 0) {\n      diag.warn(\n        `negative value provided to histogram ${this._descriptor.name}: ${value}`\n      );\n      return;\n    }\n    this._record(value, attributes, ctx);\n  }\n}\n\nexport class ObservableInstrument implements Observable {\n  /** @internal */\n  _metricStorages: AsyncWritableMetricStorage[];\n  /** @internal */\n  _descriptor: InstrumentDescriptor;\n\n  constructor(\n    descriptor: InstrumentDescriptor,\n    metricStorages: AsyncWritableMetricStorage[],\n    private _observableRegistry: ObservableRegistry\n  ) {\n    this._descriptor = descriptor;\n    this._metricStorages = metricStorages;\n  }\n\n  /**\n   * @see {Observable.addCallback}\n   */\n  addCallback(callback: ObservableCallback) {\n    this._observableRegistry.addCallback(callback, this);\n  }\n\n  /**\n   * @see {Observable.removeCallback}\n   */\n  removeCallback(callback: ObservableCallback) {\n    this._observableRegistry.removeCallback(callback, this);\n  }\n}\n\nexport class ObservableCounterInstrument\n  extends ObservableInstrument\n  implements ObservableCounter {}\nexport class ObservableGaugeInstrument\n  extends ObservableInstrument\n  implements ObservableGauge {}\nexport class ObservableUpDownCounterInstrument\n  extends ObservableInstrument\n  implements ObservableUpDownCounter {}\n\nexport function isObservableInstrument(\n  it: unknown\n): it is ObservableInstrument {\n  return it instanceof ObservableInstrument;\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Meter as IMeter,\n  MetricOptions,\n  Histogram,\n  Counter,\n  UpDownCounter,\n  ObservableGauge,\n  ObservableCounter,\n  ObservableUpDownCounter,\n  BatchObservableCallback,\n  Observable,\n} from '@opentelemetry/api';\nimport {\n  createInstrumentDescriptor,\n  InstrumentType,\n} from './InstrumentDescriptor';\nimport {\n  CounterInstrument,\n  HistogramInstrument,\n  ObservableCounterInstrument,\n  ObservableGaugeInstrument,\n  ObservableUpDownCounterInstrument,\n  UpDownCounterInstrument,\n} from './Instruments';\nimport { MeterSharedState } from './state/MeterSharedState';\n\n/**\n * This class implements the {@link IMeter} interface.\n */\nexport class Meter implements IMeter {\n  constructor(private _meterSharedState: MeterSharedState) {}\n\n  /**\n   * Create a {@link Histogram} instrument.\n   */\n  createHistogram(name: string, options?: MetricOptions): Histogram {\n    const descriptor = createInstrumentDescriptor(\n      name,\n      InstrumentType.HISTOGRAM,\n      options\n    );\n    const storage = this._meterSharedState.registerMetricStorage(descriptor);\n    return new HistogramInstrument(storage, descriptor);\n  }\n\n  /**\n   * Create a {@link Counter} instrument.\n   */\n  createCounter(name: string, options?: MetricOptions): Counter {\n    const descriptor = createInstrumentDescriptor(\n      name,\n      InstrumentType.COUNTER,\n      options\n    );\n    const storage = this._meterSharedState.registerMetricStorage(descriptor);\n    return new CounterInstrument(storage, descriptor);\n  }\n\n  /**\n   * Create a {@link UpDownCounter} instrument.\n   */\n  createUpDownCounter(name: string, options?: MetricOptions): UpDownCounter {\n    const descriptor = createInstrumentDescriptor(\n      name,\n      InstrumentType.UP_DOWN_COUNTER,\n      options\n    );\n    const storage = this._meterSharedState.registerMetricStorage(descriptor);\n    return new UpDownCounterInstrument(storage, descriptor);\n  }\n\n  /**\n   * Create a {@link ObservableGauge} instrument.\n   */\n  createObservableGauge(\n    name: string,\n    options?: MetricOptions\n  ): ObservableGauge {\n    const descriptor = createInstrumentDescriptor(\n      name,\n      InstrumentType.OBSERVABLE_GAUGE,\n      options\n    );\n    const storages =\n      this._meterSharedState.registerAsyncMetricStorage(descriptor);\n    return new ObservableGaugeInstrument(\n      descriptor,\n      storages,\n      this._meterSharedState.observableRegistry\n    );\n  }\n\n  /**\n   * Create a {@link ObservableCounter} instrument.\n   */\n  createObservableCounter(\n    name: string,\n    options?: MetricOptions\n  ): ObservableCounter {\n    const descriptor = createInstrumentDescriptor(\n      name,\n      InstrumentType.OBSERVABLE_COUNTER,\n      options\n    );\n    const storages =\n      this._meterSharedState.registerAsyncMetricStorage(descriptor);\n    return new ObservableCounterInstrument(\n      descriptor,\n      storages,\n      this._meterSharedState.observableRegistry\n    );\n  }\n\n  /**\n   * Create a {@link ObservableUpDownCounter} instrument.\n   */\n  createObservableUpDownCounter(\n    name: string,\n    options?: MetricOptions\n  ): ObservableUpDownCounter {\n    const descriptor = createInstrumentDescriptor(\n      name,\n      InstrumentType.OBSERVABLE_UP_DOWN_COUNTER,\n      options\n    );\n    const storages =\n      this._meterSharedState.registerAsyncMetricStorage(descriptor);\n    return new ObservableUpDownCounterInstrument(\n      descriptor,\n      storages,\n      this._meterSharedState.observableRegistry\n    );\n  }\n\n  /**\n   * @see {@link Meter.addBatchObservableCallback}\n   */\n  addBatchObservableCallback(\n    callback: BatchObservableCallback,\n    observables: Observable[]\n  ) {\n    this._meterSharedState.observableRegistry.addBatchCallback(\n      callback,\n      observables\n    );\n  }\n\n  /**\n   * @see {@link Meter.removeBatchObservableCallback}\n   */\n  removeBatchObservableCallback(\n    callback: BatchObservableCallback,\n    observables: Observable[]\n  ) {\n    this._meterSharedState.observableRegistry.removeBatchCallback(\n      callback,\n      observables\n    );\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { HrTime } from '@opentelemetry/api';\nimport { MetricData } from '../export/MetricData';\nimport { Maybe } from '../utils';\nimport { MetricCollectorHandle } from './MetricCollector';\nimport {\n  createInstrumentDescriptor,\n  InstrumentDescriptor,\n} from '../InstrumentDescriptor';\n\n/**\n * Internal interface.\n *\n * Represents a storage from which we can collect metrics.\n */\nexport abstract class MetricStorage {\n  constructor(protected _instrumentDescriptor: InstrumentDescriptor) {}\n\n  /**\n   * Collects the metrics from this storage.\n   *\n   * Note: This is a stateful operation and may reset any interval-related\n   * state for the MetricCollector.\n   */\n  abstract collect(\n    collector: MetricCollectorHandle,\n    collectionTime: HrTime\n  ): Maybe<MetricData>;\n\n  getInstrumentDescriptor(): Readonly<InstrumentDescriptor> {\n    return this._instrumentDescriptor;\n  }\n\n  updateDescription(description: string): void {\n    this._instrumentDescriptor = createInstrumentDescriptor(\n      this._instrumentDescriptor.name,\n      this._instrumentDescriptor.type,\n      {\n        description: description,\n        valueType: this._instrumentDescriptor.valueType,\n        unit: this._instrumentDescriptor.unit,\n      }\n    );\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { MetricAttributes } from '@opentelemetry/api';\nimport { hashAttributes } from '../utils';\n\nexport interface Hash<ValueType, HashCodeType> {\n  (value: ValueType): HashCodeType;\n}\n\nexport class HashMap<KeyType, ValueType, HashCodeType> {\n  private _valueMap = new Map<HashCodeType, ValueType>();\n  private _keyMap = new Map<HashCodeType, KeyType>();\n\n  constructor(private _hash: Hash<KeyType, HashCodeType>) {}\n\n  get(key: KeyType, hashCode?: HashCodeType) {\n    hashCode ??= this._hash(key);\n    return this._valueMap.get(hashCode);\n  }\n\n  getOrDefault(key: KeyType, defaultFactory: () => ValueType) {\n    const hash = this._hash(key);\n    if (this._valueMap.has(hash)) {\n      return this._valueMap.get(hash);\n    }\n    const val = defaultFactory();\n    if (!this._keyMap.has(hash)) {\n      this._keyMap.set(hash, key);\n    }\n    this._valueMap.set(hash, val);\n    return val;\n  }\n\n  set(key: KeyType, value: ValueType, hashCode?: HashCodeType) {\n    hashCode ??= this._hash(key);\n    if (!this._keyMap.has(hashCode)) {\n      this._keyMap.set(hashCode, key);\n    }\n    this._valueMap.set(hashCode, value);\n  }\n\n  has(key: KeyType, hashCode?: HashCodeType) {\n    hashCode ??= this._hash(key);\n    return this._valueMap.has(hashCode);\n  }\n\n  *keys(): IterableIterator<[KeyType, HashCodeType]> {\n    const keyIterator = this._keyMap.entries();\n    let next = keyIterator.next();\n    while (next.done !== true) {\n      yield [next.value[1], next.value[0]];\n      next = keyIterator.next();\n    }\n  }\n\n  *entries(): IterableIterator<[KeyType, ValueType, HashCodeType]> {\n    const valueIterator = this._valueMap.entries();\n    let next = valueIterator.next();\n    while (next.done !== true) {\n      // next.value[0] here can not be undefined\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      yield [this._keyMap.get(next.value[0])!, next.value[1], next.value[0]];\n      next = valueIterator.next();\n    }\n  }\n\n  get size() {\n    return this._valueMap.size;\n  }\n}\n\nexport class AttributeHashMap<ValueType> extends HashMap<\n  MetricAttributes,\n  ValueType,\n  string\n> {\n  constructor() {\n    super(hashAttributes);\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Context, HrTime, MetricAttributes } from '@opentelemetry/api';\nimport { Maybe } from '../utils';\nimport { Accumulation, Aggregator } from '../aggregator/types';\nimport { AttributeHashMap } from './HashMap';\n\n/**\n * Internal interface.\n *\n * Allows synchronous collection of metrics. This processor should allow\n * allocation of new aggregation cells for metrics and convert cumulative\n * recording to delta data points.\n */\nexport class DeltaMetricProcessor<T extends Maybe<Accumulation>> {\n  private _activeCollectionStorage = new AttributeHashMap<T>();\n  // TODO: find a reasonable mean to clean the memo;\n  // https://github.com/open-telemetry/opentelemetry-specification/pull/2208\n  private _cumulativeMemoStorage = new AttributeHashMap<T>();\n\n  constructor(private _aggregator: Aggregator<T>) {}\n\n  record(\n    value: number,\n    attributes: MetricAttributes,\n    _context: Context,\n    collectionTime: HrTime\n  ) {\n    const accumulation = this._activeCollectionStorage.getOrDefault(\n      attributes,\n      () => this._aggregator.createAccumulation(collectionTime)\n    );\n    accumulation?.record(value);\n  }\n\n  batchCumulate(\n    measurements: AttributeHashMap<number>,\n    collectionTime: HrTime\n  ) {\n    Array.from(measurements.entries()).forEach(\n      ([attributes, value, hashCode]) => {\n        const accumulation =\n          this._aggregator.createAccumulation(collectionTime);\n        accumulation?.record(value);\n        let delta = accumulation;\n        // Diff with recorded cumulative memo.\n        if (this._cumulativeMemoStorage.has(attributes, hashCode)) {\n          // has() returned true, previous is present.\n          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n          const previous = this._cumulativeMemoStorage.get(\n            attributes,\n            hashCode\n          )!;\n          delta = this._aggregator.diff(previous, accumulation);\n        }\n        // Merge with uncollected active delta.\n        if (this._activeCollectionStorage.has(attributes, hashCode)) {\n          // has() returned true, previous is present.\n          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n          const active = this._activeCollectionStorage.get(\n            attributes,\n            hashCode\n          )!;\n          delta = this._aggregator.merge(active, delta);\n        }\n\n        // Save the current record and the delta record.\n        this._cumulativeMemoStorage.set(attributes, accumulation, hashCode);\n        this._activeCollectionStorage.set(attributes, delta, hashCode);\n      }\n    );\n  }\n\n  /**\n   * Returns a collection of delta metrics. Start time is the when first\n   * time event collected.\n   */\n  collect() {\n    const unreportedDelta = this._activeCollectionStorage;\n    this._activeCollectionStorage = new AttributeHashMap();\n    return unreportedDelta;\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { HrTime } from '@opentelemetry/api';\nimport {\n  Accumulation,\n  AccumulationRecord,\n  Aggregator,\n} from '../aggregator/types';\nimport { MetricData } from '../export/MetricData';\nimport { InstrumentDescriptor } from '../InstrumentDescriptor';\nimport { AggregationTemporality } from '../export/AggregationTemporality';\nimport { Maybe } from '../utils';\nimport { MetricCollectorHandle } from './MetricCollector';\nimport { AttributeHashMap } from './HashMap';\n\n/**\n * Remembers what was presented to a specific exporter.\n */\ninterface LastReportedHistory<T extends Maybe<Accumulation>> {\n  /**\n   * The last accumulation of metric data.\n   */\n  accumulations: AttributeHashMap<T>;\n  /**\n   * The timestamp the data was reported.\n   */\n  collectionTime: HrTime;\n  /**\n   * The AggregationTemporality used to aggregate reports.\n   */\n  aggregationTemporality: AggregationTemporality;\n}\n\n/**\n * Internal interface.\n *\n * Provides unique reporting for each collector. Allows synchronous collection\n * of metrics and reports given temporality values.\n */\nexport class TemporalMetricProcessor<T extends Maybe<Accumulation>> {\n  private _unreportedAccumulations = new Map<\n    MetricCollectorHandle,\n    AttributeHashMap<T>[]\n  >();\n  private _reportHistory = new Map<\n    MetricCollectorHandle,\n    LastReportedHistory<T>\n  >();\n\n  constructor(\n    private _aggregator: Aggregator<T>,\n    collectorHandles: MetricCollectorHandle[]\n  ) {\n    collectorHandles.forEach(handle => {\n      this._unreportedAccumulations.set(handle, []);\n    });\n  }\n\n  /**\n   * Builds the {@link MetricData} streams to report against a specific MetricCollector.\n   * @param collector The information of the MetricCollector.\n   * @param collectors The registered collectors.\n   * @param instrumentDescriptor The instrumentation descriptor that these metrics generated with.\n   * @param currentAccumulations The current accumulation of metric data from instruments.\n   * @param collectionTime The current collection timestamp.\n   * @returns The {@link MetricData} points or `null`.\n   */\n  buildMetrics(\n    collector: MetricCollectorHandle,\n    instrumentDescriptor: InstrumentDescriptor,\n    currentAccumulations: AttributeHashMap<T>,\n    collectionTime: HrTime\n  ): Maybe<MetricData> {\n    this._stashAccumulations(currentAccumulations);\n    const unreportedAccumulations =\n      this._getMergedUnreportedAccumulations(collector);\n\n    let result = unreportedAccumulations;\n    let aggregationTemporality: AggregationTemporality;\n    // Check our last report time.\n    if (this._reportHistory.has(collector)) {\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      const last = this._reportHistory.get(collector)!;\n      const lastCollectionTime = last.collectionTime;\n      aggregationTemporality = last.aggregationTemporality;\n\n      // Use aggregation temporality + instrument to determine if we do a merge or a diff of\n      // previous. We have the following four scenarios:\n      // 1. Cumulative Aggregation (temporality) + Delta recording (sync instrument).\n      //    Here we merge with our last record to get a cumulative aggregation.\n      // 2. Cumulative Aggregation + Cumulative recording (async instrument).\n      //    Cumulative records are converted to delta recording with DeltaMetricProcessor.\n      //    Here we merge with our last record to get a cumulative aggregation.\n      // 3. Delta Aggregation + Delta recording\n      //    Calibrate the startTime of metric streams to be the reader's lastCollectionTime.\n      // 4. Delta Aggregation + Cumulative recording.\n      //    Cumulative records are converted to delta recording with DeltaMetricProcessor.\n      //    Calibrate the startTime of metric streams to be the reader's lastCollectionTime.\n      if (aggregationTemporality === AggregationTemporality.CUMULATIVE) {\n        // We need to make sure the current delta recording gets merged into the previous cumulative\n        // for the next cumulative recording.\n        result = TemporalMetricProcessor.merge(\n          last.accumulations,\n          unreportedAccumulations,\n          this._aggregator\n        );\n      } else {\n        result = TemporalMetricProcessor.calibrateStartTime(\n          last.accumulations,\n          unreportedAccumulations,\n          lastCollectionTime\n        );\n      }\n    } else {\n      // Call into user code to select aggregation temporality for the instrument.\n      aggregationTemporality = collector.selectAggregationTemporality(\n        instrumentDescriptor.type\n      );\n    }\n\n    // Update last reported (cumulative) accumulation.\n    this._reportHistory.set(collector, {\n      accumulations: result,\n      collectionTime,\n      aggregationTemporality,\n    });\n\n    const accumulationRecords = AttributesMapToAccumulationRecords(result);\n\n    // do not convert to metric data if there is nothing to convert.\n    if (accumulationRecords.length === 0) {\n      return undefined;\n    }\n\n    return this._aggregator.toMetricData(\n      instrumentDescriptor,\n      aggregationTemporality,\n      accumulationRecords,\n      /* endTime */ collectionTime\n    );\n  }\n\n  private _stashAccumulations(currentAccumulation: AttributeHashMap<T>) {\n    const registeredCollectors = this._unreportedAccumulations.keys();\n    for (const collector of registeredCollectors) {\n      let stash = this._unreportedAccumulations.get(collector);\n      if (stash === undefined) {\n        stash = [];\n        this._unreportedAccumulations.set(collector, stash);\n      }\n      stash.push(currentAccumulation);\n    }\n  }\n\n  private _getMergedUnreportedAccumulations(collector: MetricCollectorHandle) {\n    let result = new AttributeHashMap<T>();\n    const unreportedList = this._unreportedAccumulations.get(collector);\n    this._unreportedAccumulations.set(collector, []);\n    if (unreportedList === undefined) {\n      return result;\n    }\n    for (const it of unreportedList) {\n      result = TemporalMetricProcessor.merge(result, it, this._aggregator);\n    }\n    return result;\n  }\n\n  static merge<T extends Maybe<Accumulation>>(\n    last: AttributeHashMap<T>,\n    current: AttributeHashMap<T>,\n    aggregator: Aggregator<T>\n  ) {\n    const result = last;\n    const iterator = current.entries();\n    let next = iterator.next();\n    while (next.done !== true) {\n      const [key, record, hash] = next.value;\n      if (last.has(key, hash)) {\n        const lastAccumulation = last.get(key, hash);\n        // last.has() returned true, lastAccumulation is present.\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const accumulation = aggregator.merge(lastAccumulation!, record);\n        result.set(key, accumulation, hash);\n      } else {\n        result.set(key, record, hash);\n      }\n\n      next = iterator.next();\n    }\n    return result;\n  }\n\n  /**\n   * Calibrate the reported metric streams' startTime to lastCollectionTime. Leaves\n   * the new stream to be the initial observation time unchanged.\n   */\n  static calibrateStartTime<T extends Maybe<Accumulation>>(\n    last: AttributeHashMap<T>,\n    current: AttributeHashMap<T>,\n    lastCollectionTime: HrTime\n  ) {\n    for (const [key, hash] of last.keys()) {\n      const currentAccumulation = current.get(key, hash);\n      currentAccumulation?.setStartTime(lastCollectionTime);\n    }\n    return current;\n  }\n}\n\n// TypeScript complains about converting 3 elements tuple to AccumulationRecord<T>.\nfunction AttributesMapToAccumulationRecords<T>(\n  map: AttributeHashMap<T>\n): AccumulationRecord<T>[] {\n  return Array.from(map.entries()) as unknown as AccumulationRecord<T>[];\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { HrTime } from '@opentelemetry/api';\nimport { Accumulation, Aggregator } from '../aggregator/types';\nimport { InstrumentDescriptor } from '../InstrumentDescriptor';\nimport { AttributesProcessor } from '../view/AttributesProcessor';\nimport { MetricStorage } from './MetricStorage';\nimport { MetricData } from '../export/MetricData';\nimport { DeltaMetricProcessor } from './DeltaMetricProcessor';\nimport { TemporalMetricProcessor } from './TemporalMetricProcessor';\nimport { Maybe } from '../utils';\nimport { MetricCollectorHandle } from './MetricCollector';\nimport { AttributeHashMap } from './HashMap';\nimport { AsyncWritableMetricStorage } from './WritableMetricStorage';\n\n/**\n * Internal interface.\n *\n * Stores and aggregates {@link MetricData} for asynchronous instruments.\n */\nexport class AsyncMetricStorage<T extends Maybe<Accumulation>>\n  extends MetricStorage\n  implements AsyncWritableMetricStorage\n{\n  private _deltaMetricStorage: DeltaMetricProcessor<T>;\n  private _temporalMetricStorage: TemporalMetricProcessor<T>;\n\n  constructor(\n    _instrumentDescriptor: InstrumentDescriptor,\n    aggregator: Aggregator<T>,\n    private _attributesProcessor: AttributesProcessor,\n    collectorHandles: MetricCollectorHandle[]\n  ) {\n    super(_instrumentDescriptor);\n    this._deltaMetricStorage = new DeltaMetricProcessor(aggregator);\n    this._temporalMetricStorage = new TemporalMetricProcessor(\n      aggregator,\n      collectorHandles\n    );\n  }\n\n  record(measurements: AttributeHashMap<number>, observationTime: HrTime) {\n    const processed = new AttributeHashMap<number>();\n    Array.from(measurements.entries()).forEach(([attributes, value]) => {\n      processed.set(this._attributesProcessor.process(attributes), value);\n    });\n    this._deltaMetricStorage.batchCumulate(processed, observationTime);\n  }\n\n  /**\n   * Collects the metrics from this storage. The ObservableCallback is invoked\n   * during the collection.\n   *\n   * Note: This is a stateful operation and may reset any interval-related\n   * state for the MetricCollector.\n   */\n  collect(\n    collector: MetricCollectorHandle,\n    collectionTime: HrTime\n  ): Maybe<MetricData> {\n    const accumulations = this._deltaMetricStorage.collect();\n\n    return this._temporalMetricStorage.buildMetrics(\n      collector,\n      this._instrumentDescriptor,\n      accumulations,\n      collectionTime\n    );\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { InstrumentSelectorCriteria } from './InstrumentSelector';\nimport { InstrumentDescriptor } from '../InstrumentDescriptor';\n\nexport function getIncompatibilityDetails(\n  existing: InstrumentDescriptor,\n  otherDescriptor: InstrumentDescriptor\n) {\n  let incompatibility = '';\n  if (existing.unit !== otherDescriptor.unit) {\n    incompatibility += `\\t- Unit '${existing.unit}' does not match '${otherDescriptor.unit}'\\n`;\n  }\n  if (existing.type !== otherDescriptor.type) {\n    incompatibility += `\\t- Type '${existing.type}' does not match '${otherDescriptor.type}'\\n`;\n  }\n  if (existing.valueType !== otherDescriptor.valueType) {\n    incompatibility += `\\t- Value Type '${existing.valueType}' does not match '${otherDescriptor.valueType}'\\n`;\n  }\n  if (existing.description !== otherDescriptor.description) {\n    incompatibility += `\\t- Description '${existing.description}' does not match '${otherDescriptor.description}'\\n`;\n  }\n\n  return incompatibility;\n}\n\nexport function getValueTypeConflictResolutionRecipe(\n  existing: InstrumentDescriptor,\n  otherDescriptor: InstrumentDescriptor\n) {\n  return `\\t- use valueType '${existing.valueType}' on instrument creation or use an instrument name other than '${otherDescriptor.name}'`;\n}\n\nexport function getUnitConflictResolutionRecipe(\n  existing: InstrumentDescriptor,\n  otherDescriptor: InstrumentDescriptor\n) {\n  return `\\t- use unit '${existing.unit}' on instrument creation or use an instrument name other than '${otherDescriptor.name}'`;\n}\n\nexport function getTypeConflictResolutionRecipe(\n  existing: InstrumentDescriptor,\n  otherDescriptor: InstrumentDescriptor\n) {\n  const selector: InstrumentSelectorCriteria = {\n    name: otherDescriptor.name,\n    type: otherDescriptor.type,\n    unit: otherDescriptor.unit,\n  };\n\n  const selectorString = JSON.stringify(selector);\n\n  return `\\t- create a new view with a name other than '${existing.name}' and InstrumentSelector '${selectorString}'`;\n}\n\nexport function getDescriptionResolutionRecipe(\n  existing: InstrumentDescriptor,\n  otherDescriptor: InstrumentDescriptor\n): string {\n  const selector: InstrumentSelectorCriteria = {\n    name: otherDescriptor.name,\n    type: otherDescriptor.type,\n    unit: otherDescriptor.unit,\n  };\n\n  const selectorString = JSON.stringify(selector);\n\n  return `\\t- create a new view with a name other than '${existing.name}' and InstrumentSelector '${selectorString}'\n    \\t- OR - create a new view with the name ${existing.name} and description '${existing.description}' and InstrumentSelector ${selectorString}\n    \\t- OR - create a new view with the name ${otherDescriptor.name} and description '${existing.description}' and InstrumentSelector ${selectorString}`;\n}\n\nexport function getConflictResolutionRecipe(\n  existing: InstrumentDescriptor,\n  otherDescriptor: InstrumentDescriptor\n): string {\n  // Conflicts that cannot be solved via views.\n  if (existing.valueType !== otherDescriptor.valueType) {\n    return getValueTypeConflictResolutionRecipe(existing, otherDescriptor);\n  }\n\n  if (existing.unit !== otherDescriptor.unit) {\n    return getUnitConflictResolutionRecipe(existing, otherDescriptor);\n  }\n\n  // Conflicts that can be solved via views.\n  if (existing.type !== otherDescriptor.type) {\n    // this will automatically solve possible description conflicts.\n    return getTypeConflictResolutionRecipe(existing, otherDescriptor);\n  }\n\n  if (existing.description !== otherDescriptor.description) {\n    return getDescriptionResolutionRecipe(existing, otherDescriptor);\n  }\n\n  return '';\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { MetricStorage } from './MetricStorage';\nimport {\n  InstrumentDescriptor,\n  isDescriptorCompatibleWith,\n} from '../InstrumentDescriptor';\nimport * as api from '@opentelemetry/api';\nimport {\n  getConflictResolutionRecipe,\n  getIncompatibilityDetails,\n} from '../view/RegistrationConflicts';\nimport { MetricCollectorHandle } from './MetricCollector';\n\ntype StorageMap = Map<string, MetricStorage[]>;\n\n/**\n * Internal class for storing {@link MetricStorage}\n */\nexport class MetricStorageRegistry {\n  private readonly _sharedRegistry: StorageMap = new Map();\n  private readonly _perCollectorRegistry = new Map<\n    MetricCollectorHandle,\n    StorageMap\n  >();\n\n  static create() {\n    return new MetricStorageRegistry();\n  }\n\n  getStorages(collector: MetricCollectorHandle): MetricStorage[] {\n    let storages: MetricStorage[] = [];\n    for (const metricStorages of this._sharedRegistry.values()) {\n      storages = storages.concat(metricStorages);\n    }\n\n    const perCollectorStorages = this._perCollectorRegistry.get(collector);\n    if (perCollectorStorages != null) {\n      for (const metricStorages of perCollectorStorages.values()) {\n        storages = storages.concat(metricStorages);\n      }\n    }\n\n    return storages;\n  }\n\n  register(storage: MetricStorage) {\n    this._registerStorage(storage, this._sharedRegistry);\n  }\n\n  registerForCollector(\n    collector: MetricCollectorHandle,\n    storage: MetricStorage\n  ) {\n    let storageMap = this._perCollectorRegistry.get(collector);\n    if (storageMap == null) {\n      storageMap = new Map();\n      this._perCollectorRegistry.set(collector, storageMap);\n    }\n    this._registerStorage(storage, storageMap);\n  }\n\n  findOrUpdateCompatibleStorage<T extends MetricStorage>(\n    expectedDescriptor: InstrumentDescriptor\n  ): T | null {\n    const storages = this._sharedRegistry.get(expectedDescriptor.name);\n    if (storages === undefined) {\n      return null;\n    }\n\n    // If the descriptor is compatible, the type of their metric storage\n    // (either SyncMetricStorage or AsyncMetricStorage) must be compatible.\n    return this._findOrUpdateCompatibleStorage<T>(expectedDescriptor, storages);\n  }\n\n  findOrUpdateCompatibleCollectorStorage<T extends MetricStorage>(\n    collector: MetricCollectorHandle,\n    expectedDescriptor: InstrumentDescriptor\n  ): T | null {\n    const storageMap = this._perCollectorRegistry.get(collector);\n    if (storageMap === undefined) {\n      return null;\n    }\n\n    const storages = storageMap.get(expectedDescriptor.name);\n    if (storages === undefined) {\n      return null;\n    }\n\n    // If the descriptor is compatible, the type of their metric storage\n    // (either SyncMetricStorage or AsyncMetricStorage) must be compatible.\n    return this._findOrUpdateCompatibleStorage<T>(expectedDescriptor, storages);\n  }\n\n  private _registerStorage(storage: MetricStorage, storageMap: StorageMap) {\n    const descriptor = storage.getInstrumentDescriptor();\n    const storages = storageMap.get(descriptor.name);\n\n    if (storages === undefined) {\n      storageMap.set(descriptor.name, [storage]);\n      return;\n    }\n\n    storages.push(storage);\n  }\n\n  private _findOrUpdateCompatibleStorage<T extends MetricStorage>(\n    expectedDescriptor: InstrumentDescriptor,\n    existingStorages: MetricStorage[]\n  ): T | null {\n    let compatibleStorage = null;\n\n    for (const existingStorage of existingStorages) {\n      const existingDescriptor = existingStorage.getInstrumentDescriptor();\n\n      if (isDescriptorCompatibleWith(existingDescriptor, expectedDescriptor)) {\n        // Use the longer description if it does not match.\n        if (existingDescriptor.description !== expectedDescriptor.description) {\n          if (\n            expectedDescriptor.description.length >\n            existingDescriptor.description.length\n          ) {\n            existingStorage.updateDescription(expectedDescriptor.description);\n          }\n\n          api.diag.warn(\n            'A view or instrument with the name ',\n            expectedDescriptor.name,\n            ' has already been registered, but has a different description and is incompatible with another registered view.\\n',\n            'Details:\\n',\n            getIncompatibilityDetails(existingDescriptor, expectedDescriptor),\n            'The longer description will be used.\\nTo resolve the conflict:',\n            getConflictResolutionRecipe(existingDescriptor, expectedDescriptor)\n          );\n        }\n        // Storage is fully compatible. There will never be more than one pre-existing fully compatible storage.\n        compatibleStorage = existingStorage as T;\n      } else {\n        // The implementation SHOULD warn about duplicate instrument registration\n        // conflicts after applying View configuration.\n        api.diag.warn(\n          'A view or instrument with the name ',\n          expectedDescriptor.name,\n          ' has already been registered and is incompatible with another registered view.\\n',\n          'Details:\\n',\n          getIncompatibilityDetails(existingDescriptor, expectedDescriptor),\n          'To resolve the conflict:\\n',\n          getConflictResolutionRecipe(existingDescriptor, expectedDescriptor)\n        );\n      }\n    }\n\n    return compatibleStorage;\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Context, HrTime, MetricAttributes } from '@opentelemetry/api';\nimport { WritableMetricStorage } from './WritableMetricStorage';\n\n/**\n * Internal interface.\n */\nexport class MultiMetricStorage implements WritableMetricStorage {\n  constructor(private readonly _backingStorages: WritableMetricStorage[]) {}\n\n  record(\n    value: number,\n    attributes: MetricAttributes,\n    context: Context,\n    recordTime: HrTime\n  ) {\n    this._backingStorages.forEach(it => {\n      it.record(value, attributes, context, recordTime);\n    });\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  diag,\n  ObservableResult,\n  MetricAttributes,\n  ValueType,\n  BatchObservableResult,\n  Observable,\n} from '@opentelemetry/api';\nimport { AttributeHashMap } from './state/HashMap';\nimport { isObservableInstrument, ObservableInstrument } from './Instruments';\nimport { InstrumentDescriptor } from '.';\n\n/**\n * The class implements {@link ObservableResult} interface.\n */\nexport class ObservableResultImpl implements ObservableResult {\n  /**\n   * @internal\n   */\n  _buffer = new AttributeHashMap<number>();\n\n  constructor(private _descriptor: InstrumentDescriptor) {}\n\n  /**\n   * Observe a measurement of the value associated with the given attributes.\n   */\n  observe(value: number, attributes: MetricAttributes = {}): void {\n    if (typeof value !== 'number') {\n      diag.warn(\n        `non-number value provided to metric ${this._descriptor.name}: ${value}`\n      );\n      return;\n    }\n    if (\n      this._descriptor.valueType === ValueType.INT &&\n      !Number.isInteger(value)\n    ) {\n      diag.warn(\n        `INT value type cannot accept a floating-point value for ${this._descriptor.name}, ignoring the fractional digits.`\n      );\n      value = Math.trunc(value);\n      // ignore non-finite values.\n      if (!Number.isInteger(value)) {\n        return;\n      }\n    }\n    this._buffer.set(attributes, value);\n  }\n}\n\n/**\n * The class implements {@link BatchObservableCallback} interface.\n */\nexport class BatchObservableResultImpl implements BatchObservableResult {\n  /**\n   * @internal\n   */\n  _buffer: Map<ObservableInstrument, AttributeHashMap<number>> = new Map();\n\n  /**\n   * Observe a measurement of the value associated with the given attributes.\n   */\n  observe(\n    metric: Observable,\n    value: number,\n    attributes: MetricAttributes = {}\n  ): void {\n    if (!isObservableInstrument(metric)) {\n      return;\n    }\n    let map = this._buffer.get(metric);\n    if (map == null) {\n      map = new AttributeHashMap();\n      this._buffer.set(metric, map);\n    }\n    if (typeof value !== 'number') {\n      diag.warn(\n        `non-number value provided to metric ${metric._descriptor.name}: ${value}`\n      );\n      return;\n    }\n    if (\n      metric._descriptor.valueType === ValueType.INT &&\n      !Number.isInteger(value)\n    ) {\n      diag.warn(\n        `INT value type cannot accept a floating-point value for ${metric._descriptor.name}, ignoring the fractional digits.`\n      );\n      value = Math.trunc(value);\n      // ignore non-finite values.\n      if (!Number.isInteger(value)) {\n        return;\n      }\n    }\n    map.set(attributes, value);\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  diag,\n  HrTime,\n  BatchObservableCallback,\n  Observable,\n  ObservableCallback,\n} from '@opentelemetry/api';\nimport { isObservableInstrument, ObservableInstrument } from '../Instruments';\nimport {\n  BatchObservableResultImpl,\n  ObservableResultImpl,\n} from '../ObservableResult';\nimport {\n  callWithTimeout,\n  PromiseAllSettled,\n  isPromiseAllSettledRejectionResult,\n  setEquals,\n} from '../utils';\n\n/**\n * Records for single instrument observable callback.\n */\ninterface ObservableCallbackRecord {\n  callback: ObservableCallback;\n  instrument: ObservableInstrument;\n}\n\n/**\n * Records for multiple instruments observable callback.\n */\ninterface BatchObservableCallbackRecord {\n  callback: BatchObservableCallback;\n  instruments: Set<ObservableInstrument>;\n}\n\n/**\n * An internal interface for managing ObservableCallbacks.\n *\n * Every registered callback associated with a set of instruments are be evaluated\n * exactly once during collection prior to reading data for that instrument.\n */\nexport class ObservableRegistry {\n  private _callbacks: ObservableCallbackRecord[] = [];\n  private _batchCallbacks: BatchObservableCallbackRecord[] = [];\n\n  addCallback(callback: ObservableCallback, instrument: ObservableInstrument) {\n    const idx = this._findCallback(callback, instrument);\n    if (idx >= 0) {\n      return;\n    }\n    this._callbacks.push({ callback, instrument });\n  }\n\n  removeCallback(\n    callback: ObservableCallback,\n    instrument: ObservableInstrument\n  ) {\n    const idx = this._findCallback(callback, instrument);\n    if (idx < 0) {\n      return;\n    }\n    this._callbacks.splice(idx, 1);\n  }\n\n  addBatchCallback(\n    callback: BatchObservableCallback,\n    instruments: Observable[]\n  ) {\n    // Create a set of unique instruments.\n    const observableInstruments = new Set(\n      instruments.filter(isObservableInstrument)\n    );\n    if (observableInstruments.size === 0) {\n      diag.error(\n        'BatchObservableCallback is not associated with valid instruments',\n        instruments\n      );\n      return;\n    }\n    const idx = this._findBatchCallback(callback, observableInstruments);\n    if (idx >= 0) {\n      return;\n    }\n    this._batchCallbacks.push({ callback, instruments: observableInstruments });\n  }\n\n  removeBatchCallback(\n    callback: BatchObservableCallback,\n    instruments: Observable[]\n  ) {\n    // Create a set of unique instruments.\n    const observableInstruments = new Set(\n      instruments.filter(isObservableInstrument)\n    );\n    const idx = this._findBatchCallback(callback, observableInstruments);\n    if (idx < 0) {\n      return;\n    }\n    this._batchCallbacks.splice(idx, 1);\n  }\n\n  /**\n   * @returns a promise of rejected reasons for invoking callbacks.\n   */\n  async observe(\n    collectionTime: HrTime,\n    timeoutMillis?: number\n  ): Promise<unknown[]> {\n    const callbackFutures = this._observeCallbacks(\n      collectionTime,\n      timeoutMillis\n    );\n    const batchCallbackFutures = this._observeBatchCallbacks(\n      collectionTime,\n      timeoutMillis\n    );\n\n    const results = await PromiseAllSettled([\n      ...callbackFutures,\n      ...batchCallbackFutures,\n    ]);\n\n    const rejections = results\n      .filter(isPromiseAllSettledRejectionResult)\n      .map(it => it.reason);\n    return rejections;\n  }\n\n  private _observeCallbacks(observationTime: HrTime, timeoutMillis?: number) {\n    return this._callbacks.map(async ({ callback, instrument }) => {\n      const observableResult = new ObservableResultImpl(instrument._descriptor);\n      let callPromise: Promise<void> = Promise.resolve(\n        callback(observableResult)\n      );\n      if (timeoutMillis != null) {\n        callPromise = callWithTimeout(callPromise, timeoutMillis);\n      }\n      await callPromise;\n      instrument._metricStorages.forEach(metricStorage => {\n        metricStorage.record(observableResult._buffer, observationTime);\n      });\n    });\n  }\n\n  private _observeBatchCallbacks(\n    observationTime: HrTime,\n    timeoutMillis?: number\n  ) {\n    return this._batchCallbacks.map(async ({ callback, instruments }) => {\n      const observableResult = new BatchObservableResultImpl();\n      let callPromise: Promise<void> = Promise.resolve(\n        callback(observableResult)\n      );\n      if (timeoutMillis != null) {\n        callPromise = callWithTimeout(callPromise, timeoutMillis);\n      }\n      await callPromise;\n      instruments.forEach(instrument => {\n        const buffer = observableResult._buffer.get(instrument);\n        if (buffer == null) {\n          return;\n        }\n        instrument._metricStorages.forEach(metricStorage => {\n          metricStorage.record(buffer, observationTime);\n        });\n      });\n    });\n  }\n\n  private _findCallback(\n    callback: ObservableCallback,\n    instrument: ObservableInstrument\n  ) {\n    return this._callbacks.findIndex(record => {\n      return record.callback === callback && record.instrument === instrument;\n    });\n  }\n\n  private _findBatchCallback(\n    callback: BatchObservableCallback,\n    instruments: Set<ObservableInstrument>\n  ) {\n    return this._batchCallbacks.findIndex(record => {\n      return (\n        record.callback === callback &&\n        setEquals(record.instruments, instruments)\n      );\n    });\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Context, HrTime, MetricAttributes } from '@opentelemetry/api';\nimport { WritableMetricStorage } from './WritableMetricStorage';\nimport { Accumulation, Aggregator } from '../aggregator/types';\nimport { InstrumentDescriptor } from '../InstrumentDescriptor';\nimport { AttributesProcessor } from '../view/AttributesProcessor';\nimport { MetricStorage } from './MetricStorage';\nimport { MetricData } from '../export/MetricData';\nimport { DeltaMetricProcessor } from './DeltaMetricProcessor';\nimport { TemporalMetricProcessor } from './TemporalMetricProcessor';\nimport { Maybe } from '../utils';\nimport { MetricCollectorHandle } from './MetricCollector';\n\n/**\n * Internal interface.\n *\n * Stores and aggregates {@link MetricData} for synchronous instruments.\n */\nexport class SyncMetricStorage<T extends Maybe<Accumulation>>\n  extends MetricStorage\n  implements WritableMetricStorage\n{\n  private _deltaMetricStorage: DeltaMetricProcessor<T>;\n  private _temporalMetricStorage: TemporalMetricProcessor<T>;\n\n  constructor(\n    instrumentDescriptor: InstrumentDescriptor,\n    aggregator: Aggregator<T>,\n    private _attributesProcessor: AttributesProcessor,\n    collectorHandles: MetricCollectorHandle[]\n  ) {\n    super(instrumentDescriptor);\n    this._deltaMetricStorage = new DeltaMetricProcessor(aggregator);\n    this._temporalMetricStorage = new TemporalMetricProcessor(\n      aggregator,\n      collectorHandles\n    );\n  }\n\n  record(\n    value: number,\n    attributes: MetricAttributes,\n    context: Context,\n    recordTime: HrTime\n  ) {\n    attributes = this._attributesProcessor.process(attributes, context);\n    this._deltaMetricStorage.record(value, attributes, context, recordTime);\n  }\n\n  /**\n   * Collects the metrics from this storage.\n   *\n   * Note: This is a stateful operation and may reset any interval-related\n   * state for the MetricCollector.\n   */\n  collect(\n    collector: MetricCollectorHandle,\n    collectionTime: HrTime\n  ): Maybe<MetricData> {\n    const accumulations = this._deltaMetricStorage.collect();\n\n    return this._temporalMetricStorage.buildMetrics(\n      collector,\n      this._instrumentDescriptor,\n      accumulations,\n      collectionTime\n    );\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Context, MetricAttributes } from '@opentelemetry/api';\n\n/**\n * The {@link AttributesProcessor} is responsible for customizing which\n * attribute(s) are to be reported as metrics dimension(s) and adding\n * additional dimension(s) from the {@link Context}.\n */\nexport abstract class AttributesProcessor {\n  /**\n   * Process the metric instrument attributes.\n   *\n   * @param incoming The metric instrument attributes.\n   * @param context The active context when the instrument is synchronous.\n   * `undefined` otherwise.\n   */\n  abstract process(\n    incoming: MetricAttributes,\n    context?: Context\n  ): MetricAttributes;\n\n  static Noop() {\n    return NOOP;\n  }\n}\n\nexport class NoopAttributesProcessor extends AttributesProcessor {\n  process(incoming: MetricAttributes, _context?: Context) {\n    return incoming;\n  }\n}\n\n/**\n * {@link AttributesProcessor} that filters by allowed attribute names and drops any names that are not in the\n * allow list.\n */\nexport class FilteringAttributesProcessor extends AttributesProcessor {\n  constructor(private _allowedAttributeNames: string[]) {\n    super();\n  }\n\n  process(incoming: MetricAttributes, _context: Context): MetricAttributes {\n    const filteredAttributes: MetricAttributes = {};\n    Object.keys(incoming)\n      .filter(attributeName =>\n        this._allowedAttributeNames.includes(attributeName)\n      )\n      .forEach(\n        attributeName =>\n          (filteredAttributes[attributeName] = incoming[attributeName])\n      );\n    return filteredAttributes;\n  }\n}\n\nconst NOOP = new NoopAttributesProcessor();\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { HrTime } from '@opentelemetry/api';\nimport { InstrumentationScope } from '@opentelemetry/core';\nimport { MetricCollectOptions } from '../export/MetricProducer';\nimport { ScopeMetrics } from '../export/MetricData';\nimport {\n  createInstrumentDescriptorWithView,\n  InstrumentDescriptor,\n} from '../InstrumentDescriptor';\nimport { Meter } from '../Meter';\nimport { isNotNullish, Maybe } from '../utils';\nimport { AsyncMetricStorage } from './AsyncMetricStorage';\nimport { MeterProviderSharedState } from './MeterProviderSharedState';\nimport { MetricCollectorHandle } from './MetricCollector';\nimport { MetricStorageRegistry } from './MetricStorageRegistry';\nimport { MultiMetricStorage } from './MultiWritableMetricStorage';\nimport { ObservableRegistry } from './ObservableRegistry';\nimport { SyncMetricStorage } from './SyncMetricStorage';\nimport { Accumulation, Aggregator } from '../aggregator/types';\nimport { AttributesProcessor } from '../view/AttributesProcessor';\nimport { MetricStorage } from './MetricStorage';\n\n/**\n * An internal record for shared meter provider states.\n */\nexport class MeterSharedState {\n  metricStorageRegistry = new MetricStorageRegistry();\n  observableRegistry = new ObservableRegistry();\n  meter: Meter;\n\n  constructor(\n    private _meterProviderSharedState: MeterProviderSharedState,\n    private _instrumentationScope: InstrumentationScope\n  ) {\n    this.meter = new Meter(this);\n  }\n\n  registerMetricStorage(descriptor: InstrumentDescriptor) {\n    const storages = this._registerMetricStorage(descriptor, SyncMetricStorage);\n\n    if (storages.length === 1) {\n      return storages[0];\n    }\n    return new MultiMetricStorage(storages);\n  }\n\n  registerAsyncMetricStorage(descriptor: InstrumentDescriptor) {\n    const storages = this._registerMetricStorage(\n      descriptor,\n      AsyncMetricStorage\n    );\n\n    return storages;\n  }\n\n  /**\n   * @param collector opaque handle of {@link MetricCollector} which initiated the collection.\n   * @param collectionTime the HrTime at which the collection was initiated.\n   * @param options options for collection.\n   * @returns the list of metric data collected.\n   */\n  async collect(\n    collector: MetricCollectorHandle,\n    collectionTime: HrTime,\n    options?: MetricCollectOptions\n  ): Promise<ScopeMetricsResult | null> {\n    /**\n     * 1. Call all observable callbacks first.\n     * 2. Collect metric result for the collector.\n     */\n    const errors = await this.observableRegistry.observe(\n      collectionTime,\n      options?.timeoutMillis\n    );\n    const storages = this.metricStorageRegistry.getStorages(collector);\n\n    // prevent more allocations if there are no storages.\n    if (storages.length === 0) {\n      return null;\n    }\n\n    const metricDataList = storages\n      .map(metricStorage => {\n        return metricStorage.collect(collector, collectionTime);\n      })\n      .filter(isNotNullish);\n\n    // skip this scope if no data was collected (storage created, but no data observed)\n    if (metricDataList.length === 0) {\n      return { errors };\n    }\n\n    return {\n      scopeMetrics: {\n        scope: this._instrumentationScope,\n        metrics: metricDataList,\n      },\n      errors,\n    };\n  }\n\n  private _registerMetricStorage<\n    MetricStorageType extends MetricStorageConstructor,\n    R extends InstanceType<MetricStorageType>,\n  >(\n    descriptor: InstrumentDescriptor,\n    MetricStorageType: MetricStorageType\n  ): R[] {\n    const views = this._meterProviderSharedState.viewRegistry.findViews(\n      descriptor,\n      this._instrumentationScope\n    );\n    let storages = views.map(view => {\n      const viewDescriptor = createInstrumentDescriptorWithView(\n        view,\n        descriptor\n      );\n      const compatibleStorage =\n        this.metricStorageRegistry.findOrUpdateCompatibleStorage<R>(\n          viewDescriptor\n        );\n      if (compatibleStorage != null) {\n        return compatibleStorage;\n      }\n      const aggregator = view.aggregation.createAggregator(viewDescriptor);\n      const viewStorage = new MetricStorageType(\n        viewDescriptor,\n        aggregator,\n        view.attributesProcessor,\n        this._meterProviderSharedState.metricCollectors\n      ) as R;\n      this.metricStorageRegistry.register(viewStorage);\n      return viewStorage;\n    });\n\n    // Fallback to the per-collector aggregations if no view is configured for the instrument.\n    if (storages.length === 0) {\n      const perCollectorAggregations =\n        this._meterProviderSharedState.selectAggregations(descriptor.type);\n      const collectorStorages = perCollectorAggregations.map(\n        ([collector, aggregation]) => {\n          const compatibleStorage =\n            this.metricStorageRegistry.findOrUpdateCompatibleCollectorStorage<R>(\n              collector,\n              descriptor\n            );\n          if (compatibleStorage != null) {\n            return compatibleStorage;\n          }\n          const aggregator = aggregation.createAggregator(descriptor);\n          const storage = new MetricStorageType(\n            descriptor,\n            aggregator,\n            AttributesProcessor.Noop(),\n            [collector]\n          ) as R;\n          this.metricStorageRegistry.registerForCollector(collector, storage);\n          return storage;\n        }\n      );\n      storages = storages.concat(collectorStorages);\n    }\n\n    return storages;\n  }\n}\n\ninterface ScopeMetricsResult {\n  scopeMetrics?: ScopeMetrics;\n  errors: unknown[];\n}\n\ninterface MetricStorageConstructor {\n  new (\n    instrumentDescriptor: InstrumentDescriptor,\n    aggregator: Aggregator<Maybe<Accumulation>>,\n    attributesProcessor: AttributesProcessor,\n    collectors: MetricCollectorHandle[]\n  ): MetricStorage;\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { InstrumentationScope } from '@opentelemetry/core';\nimport { IResource } from '@opentelemetry/resources';\nimport { Aggregation, InstrumentType } from '..';\nimport { instrumentationScopeId } from '../utils';\nimport { ViewRegistry } from '../view/ViewRegistry';\nimport { MeterSharedState } from './MeterSharedState';\nimport { MetricCollector, MetricCollectorHandle } from './MetricCollector';\n\n/**\n * An internal record for shared meter provider states.\n */\nexport class MeterProviderSharedState {\n  viewRegistry = new ViewRegistry();\n\n  metricCollectors: MetricCollector[] = [];\n\n  meterSharedStates: Map<string, MeterSharedState> = new Map();\n\n  constructor(public resource: IResource) {}\n\n  getMeterSharedState(instrumentationScope: InstrumentationScope) {\n    const id = instrumentationScopeId(instrumentationScope);\n    let meterSharedState = this.meterSharedStates.get(id);\n    if (meterSharedState == null) {\n      meterSharedState = new MeterSharedState(this, instrumentationScope);\n      this.meterSharedStates.set(id, meterSharedState);\n    }\n    return meterSharedState;\n  }\n\n  selectAggregations(instrumentType: InstrumentType) {\n    const result: [MetricCollectorHandle, Aggregation][] = [];\n    for (const collector of this.metricCollectors) {\n      result.push([collector, collector.selectAggregation(instrumentType)]);\n    }\n    return result;\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { millisToHrTime } from '@opentelemetry/core';\nimport { AggregationTemporalitySelector } from '../export/AggregationSelector';\nimport { CollectionResult, ScopeMetrics } from '../export/MetricData';\nimport { MetricProducer, MetricCollectOptions } from '../export/MetricProducer';\nimport { MetricReader } from '../export/MetricReader';\nimport { InstrumentType } from '../InstrumentDescriptor';\nimport { ForceFlushOptions, ShutdownOptions } from '../types';\nimport { MeterProviderSharedState } from './MeterProviderSharedState';\n\n/**\n * An internal opaque interface that the MetricReader receives as\n * MetricProducer. It acts as the storage key to the internal metric stream\n * state for each MetricReader.\n */\nexport class MetricCollector implements MetricProducer {\n  constructor(\n    private _sharedState: MeterProviderSharedState,\n    private _metricReader: MetricReader\n  ) {}\n\n  async collect(options?: MetricCollectOptions): Promise<CollectionResult> {\n    const collectionTime = millisToHrTime(Date.now());\n    const scopeMetrics: ScopeMetrics[] = [];\n    const errors: unknown[] = [];\n\n    const meterCollectionPromises = Array.from(\n      this._sharedState.meterSharedStates.values()\n    ).map(async meterSharedState => {\n      const current = await meterSharedState.collect(\n        this,\n        collectionTime,\n        options\n      );\n\n      // only add scope metrics if available\n      if (current?.scopeMetrics != null) {\n        scopeMetrics.push(current.scopeMetrics);\n      }\n\n      // only add errors if available\n      if (current?.errors != null) {\n        errors.push(...current.errors);\n      }\n    });\n    await Promise.all(meterCollectionPromises);\n\n    return {\n      resourceMetrics: {\n        resource: this._sharedState.resource,\n        scopeMetrics: scopeMetrics,\n      },\n      errors: errors,\n    };\n  }\n\n  /**\n   * Delegates for MetricReader.forceFlush.\n   */\n  async forceFlush(options?: ForceFlushOptions): Promise<void> {\n    await this._metricReader.forceFlush(options);\n  }\n\n  /**\n   * Delegates for MetricReader.shutdown.\n   */\n  async shutdown(options?: ShutdownOptions): Promise<void> {\n    await this._metricReader.shutdown(options);\n  }\n\n  selectAggregationTemporality(instrumentType: InstrumentType) {\n    return this._metricReader.selectAggregationTemporality(instrumentType);\n  }\n\n  selectAggregation(instrumentType: InstrumentType) {\n    return this._metricReader.selectAggregation(instrumentType);\n  }\n}\n\n/**\n * An internal interface for MetricCollector. Exposes the necessary\n * information for metric collection.\n */\nexport interface MetricCollectorHandle {\n  selectAggregationTemporality: AggregationTemporalitySelector;\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  diag,\n  MeterProvider as IMeterProvider,\n  Meter as IMeter,\n  MeterOptions,\n  createNoopMeter,\n} from '@opentelemetry/api';\nimport { IResource, Resource } from '@opentelemetry/resources';\nimport { MetricReader } from './export/MetricReader';\nimport { MeterProviderSharedState } from './state/MeterProviderSharedState';\nimport { MetricCollector } from './state/MetricCollector';\nimport { ForceFlushOptions, ShutdownOptions } from './types';\nimport { View } from './view/View';\n\n/**\n * MeterProviderOptions provides an interface for configuring a MeterProvider.\n */\nexport interface MeterProviderOptions {\n  /** Resource associated with metric telemetry  */\n  resource?: IResource;\n  views?: View[];\n}\n\n/**\n * This class implements the {@link MeterProvider} interface.\n */\nexport class MeterProvider implements IMeterProvider {\n  private _sharedState: MeterProviderSharedState;\n  private _shutdown = false;\n\n  constructor(options?: MeterProviderOptions) {\n    const resource = Resource.default().merge(\n      options?.resource ?? Resource.empty()\n    );\n    this._sharedState = new MeterProviderSharedState(resource);\n    if (options?.views != null && options.views.length > 0) {\n      for (const view of options.views) {\n        this._sharedState.viewRegistry.addView(view);\n      }\n    }\n  }\n\n  /**\n   * Get a meter with the configuration of the MeterProvider.\n   */\n  getMeter(name: string, version = '', options: MeterOptions = {}): IMeter {\n    // https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/metrics/sdk.md#meter-creation\n    if (this._shutdown) {\n      diag.warn('A shutdown MeterProvider cannot provide a Meter');\n      return createNoopMeter();\n    }\n\n    return this._sharedState.getMeterSharedState({\n      name,\n      version,\n      schemaUrl: options.schemaUrl,\n    }).meter;\n  }\n\n  /**\n   * Register a {@link MetricReader} to the meter provider. After the\n   * registration, the MetricReader can start metrics collection.\n   *\n   * @param metricReader the metric reader to be registered.\n   */\n  addMetricReader(metricReader: MetricReader) {\n    const collector = new MetricCollector(this._sharedState, metricReader);\n    metricReader.setMetricProducer(collector);\n    this._sharedState.metricCollectors.push(collector);\n  }\n\n  /**\n   * Flush all buffered data and shut down the MeterProvider and all registered\n   * MetricReaders.\n   *\n   * Returns a promise which is resolved when all flushes are complete.\n   */\n  async shutdown(options?: ShutdownOptions): Promise<void> {\n    if (this._shutdown) {\n      diag.warn('shutdown may only be called once per MeterProvider');\n      return;\n    }\n\n    this._shutdown = true;\n\n    await Promise.all(\n      this._sharedState.metricCollectors.map(collector => {\n        return collector.shutdown(options);\n      })\n    );\n  }\n\n  /**\n   * Notifies all registered MetricReaders to flush any buffered data.\n   *\n   * Returns a promise which is resolved when all flushes are complete.\n   */\n  async forceFlush(options?: ForceFlushOptions): Promise<void> {\n    // do not flush after shutdown\n    if (this._shutdown) {\n      diag.warn('invalid attempt to force flush after MeterProvider shutdown');\n      return;\n    }\n\n    await Promise.all(\n      this._sharedState.metricCollectors.map(collector => {\n        return collector.forceFlush(options);\n      })\n    );\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// https://tc39.es/proposal-regex-escaping\n// escape ^ $ \\ .  + ? ( ) [ ] { } |\n// do not need to escape * as we interpret it as wildcard\nconst ESCAPE = /[\\^$\\\\.+?()[\\]{}|]/g;\n\nexport interface Predicate {\n  match(str: string): boolean;\n}\n\n/**\n * Wildcard pattern predicate, supports patterns like `*`, `foo*`, `*bar`.\n */\nexport class PatternPredicate implements Predicate {\n  private _matchAll: boolean;\n  private _regexp: RegExp;\n\n  constructor(pattern: string) {\n    if (pattern === '*') {\n      this._matchAll = true;\n      this._regexp = /.*/;\n    } else {\n      this._matchAll = false;\n      this._regexp = new RegExp(PatternPredicate.escapePattern(pattern));\n    }\n  }\n\n  match(str: string): boolean {\n    if (this._matchAll) {\n      return true;\n    }\n\n    return this._regexp.test(str);\n  }\n\n  static escapePattern(pattern: string): string {\n    return `^${pattern.replace(ESCAPE, '\\\\$&').replace('*', '.*')}$`;\n  }\n\n  static hasWildcard(pattern: string): boolean {\n    return pattern.includes('*');\n  }\n}\n\nexport class ExactPredicate implements Predicate {\n  private _matchAll: boolean;\n  private _pattern?: string;\n\n  constructor(pattern?: string) {\n    this._matchAll = pattern === undefined;\n    this._pattern = pattern;\n  }\n\n  match(str: string): boolean {\n    if (this._matchAll) {\n      return true;\n    }\n    if (str === this._pattern) {\n      return true;\n    }\n    return false;\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { InstrumentType } from '../InstrumentDescriptor';\nimport { ExactPredicate, PatternPredicate, Predicate } from './Predicate';\n\nexport interface InstrumentSelectorCriteria {\n  name?: string;\n  type?: InstrumentType;\n  unit?: string;\n}\n\nexport class InstrumentSelector {\n  private _nameFilter: Predicate;\n  private _type?: InstrumentType;\n  private _unitFilter: Predicate;\n\n  constructor(criteria?: InstrumentSelectorCriteria) {\n    this._nameFilter = new PatternPredicate(criteria?.name ?? '*');\n    this._type = criteria?.type;\n    this._unitFilter = new ExactPredicate(criteria?.unit);\n  }\n\n  getType() {\n    return this._type;\n  }\n\n  getNameFilter() {\n    return this._nameFilter;\n  }\n\n  getUnitFilter() {\n    return this._unitFilter;\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ExactPredicate, Predicate } from './Predicate';\n\nexport interface MeterSelectorCriteria {\n  name?: string;\n  version?: string;\n  schemaUrl?: string;\n}\n\nexport class MeterSelector {\n  private _nameFilter: Predicate;\n  private _versionFilter: Predicate;\n  private _schemaUrlFilter: Predicate;\n\n  constructor(criteria?: MeterSelectorCriteria) {\n    this._nameFilter = new ExactPredicate(criteria?.name);\n    this._versionFilter = new ExactPredicate(criteria?.version);\n    this._schemaUrlFilter = new ExactPredicate(criteria?.schemaUrl);\n  }\n\n  getNameFilter() {\n    return this._nameFilter;\n  }\n\n  /**\n   * TODO: semver filter? no spec yet.\n   */\n  getVersionFilter() {\n    return this._versionFilter;\n  }\n\n  getSchemaUrlFilter() {\n    return this._schemaUrlFilter;\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { PatternPredicate } from './Predicate';\nimport {\n  AttributesProcessor,\n  FilteringAttributesProcessor,\n} from './AttributesProcessor';\nimport { InstrumentSelector } from './InstrumentSelector';\nimport { MeterSelector } from './MeterSelector';\nimport { Aggregation } from './Aggregation';\nimport { InstrumentType } from '../InstrumentDescriptor';\n\nexport type ViewOptions = {\n  /**\n   *  Alters the metric stream:\n   *  This will be used as the name of the metrics stream.\n   *  If not provided, the original Instrument name will be used.\n   */\n  name?: string;\n  /**\n   * Alters the metric stream:\n   * This will be used as the description of the metrics stream.\n   * If not provided, the original Instrument description will be used by default.\n   *\n   * @example <caption>changes the description of all selected instruments to 'sample description'</caption>\n   * description: 'sample description'\n   */\n  description?: string;\n  /**\n   * Alters the metric stream:\n   * If provided, the attributes that are not in the list will be ignored.\n   * If not provided, all attribute keys will be used by default.\n   *\n   * @example <caption>drops all attributes with top-level keys except for 'myAttr' and 'myOtherAttr'</caption>\n   * attributeKeys: ['myAttr', 'myOtherAttr']\n   * @example <caption>drops all attributes</caption>\n   * attributeKeys: []\n   */\n  attributeKeys?: string[];\n  /**\n   * Alters the metric stream:\n   * Alters the {@link Aggregation} of the metric stream.\n   *\n   * @example <caption>changes the aggregation of the selected instrument(s) to ExplicitBucketHistogramAggregation</caption>\n   * aggregation: new ExplicitBucketHistogramAggregation([1, 10, 100])\n   * @example <caption>changes the aggregation of the selected instrument(s) to LastValueAggregation</caption>\n   * aggregation: new LastValueAggregation()\n   */\n  aggregation?: Aggregation;\n  /**\n   * Instrument selection criteria:\n   * The original type of the Instrument(s).\n   *\n   * @example <caption>selects all counters</caption>\n   * instrumentType: InstrumentType.COUNTER\n   * @example <caption>selects all histograms</caption>\n   * instrumentType: InstrumentType.HISTOGRAM\n   */\n  instrumentType?: InstrumentType;\n  /**\n   * Instrument selection criteria:\n   * Original name of the Instrument(s) with wildcard support.\n   *\n   * @example <caption>select all instruments</caption>\n   * instrumentName: '*'\n   * @example <caption>select all instruments starting with 'my.instruments.'</caption>\n   * instrumentName: 'my.instruments.*'\n   * @example <caption>select all instruments named 'my.instrument.requests' exactly</caption>\n   * instrumentName: 'my.instruments.requests'\n   */\n  instrumentName?: string;\n  /**\n   * Instrument selection criteria:\n   * The unit of the Instrument(s).\n   *\n   * @example <caption>select all instruments with unit 'ms'</caption>\n   * instrumentUnit: 'ms'\n   */\n  instrumentUnit?: string;\n  /**\n   * Instrument selection criteria:\n   * The name of the Meter. No wildcard support, name must match the meter exactly.\n   *\n   * @example <caption>select all meters named 'example.component.app' exactly</caption>\n   * meterName: 'example.component.app'\n   */\n  meterName?: string;\n  /**\n   * Instrument selection criteria:\n   * The version of the Meter. No wildcard support, version must match exactly.\n   *\n   * @example\n   * meterVersion: '1.0.1'\n   */\n  meterVersion?: string;\n  /**\n   * Instrument selection criteria:\n   * The schema URL of the Meter. No wildcard support, schema URL must match exactly.\n   *\n   * @example <caption>Select all meters with schema URL 'https://example.com/schema' exactly.</caption>\n   * meterSchemaUrl: 'https://example.com/schema'\n   */\n  meterSchemaUrl?: string;\n};\n\nfunction isSelectorNotProvided(options: ViewOptions): boolean {\n  return (\n    options.instrumentName == null &&\n    options.instrumentType == null &&\n    options.instrumentUnit == null &&\n    options.meterName == null &&\n    options.meterVersion == null &&\n    options.meterSchemaUrl == null\n  );\n}\n\n/**\n * Can be passed to a {@link MeterProvider} to select instruments and alter their metric stream.\n */\nexport class View {\n  readonly name?: string;\n  readonly description?: string;\n  readonly aggregation: Aggregation;\n  readonly attributesProcessor: AttributesProcessor;\n  readonly instrumentSelector: InstrumentSelector;\n  readonly meterSelector: MeterSelector;\n\n  /**\n   * Create a new {@link View} instance.\n   *\n   * Parameters can be categorized as two types:\n   *  Instrument selection criteria: Used to describe the instrument(s) this view will be applied to.\n   *  Will be treated as additive (the Instrument has to meet all the provided criteria to be selected).\n   *\n   *  Metric stream altering: Alter the metric stream of instruments selected by instrument selection criteria.\n   *\n   * @param viewOptions {@link ViewOptions} for altering the metric stream and instrument selection.\n   * @param viewOptions.name\n   * Alters the metric stream:\n   *  This will be used as the name of the metrics stream.\n   *  If not provided, the original Instrument name will be used.\n   * @param viewOptions.description\n   * Alters the metric stream:\n   *  This will be used as the description of the metrics stream.\n   *  If not provided, the original Instrument description will be used by default.\n   * @param viewOptions.attributeKeys\n   * Alters the metric stream:\n   *  If provided, the attributes that are not in the list will be ignored.\n   *  If not provided, all attribute keys will be used by default.\n   * @param viewOptions.aggregation\n   * Alters the metric stream:\n   *  Alters the {@link Aggregation} of the metric stream.\n   * @param viewOptions.instrumentName\n   * Instrument selection criteria:\n   *  Original name of the Instrument(s) with wildcard support.\n   * @param viewOptions.instrumentType\n   * Instrument selection criteria:\n   *  The original type of the Instrument(s).\n   * @param viewOptions.instrumentUnit\n   * Instrument selection criteria:\n   *  The unit of the Instrument(s).\n   * @param viewOptions.meterName\n   * Instrument selection criteria:\n   *  The name of the Meter. No wildcard support, name must match the meter exactly.\n   * @param viewOptions.meterVersion\n   * Instrument selection criteria:\n   *  The version of the Meter. No wildcard support, version must match exactly.\n   * @param viewOptions.meterSchemaUrl\n   * Instrument selection criteria:\n   *  The schema URL of the Meter. No wildcard support, schema URL must match exactly.\n   *\n   * @example\n   * // Create a view that changes the Instrument 'my.instrument' to use to an\n   * // ExplicitBucketHistogramAggregation with the boundaries [20, 30, 40]\n   * new View({\n   *   aggregation: new ExplicitBucketHistogramAggregation([20, 30, 40]),\n   *   instrumentName: 'my.instrument'\n   * })\n   */\n  constructor(viewOptions: ViewOptions) {\n    // If no criteria is provided, the SDK SHOULD treat it as an error.\n    // It is recommended that the SDK implementations fail fast.\n    if (isSelectorNotProvided(viewOptions)) {\n      throw new Error('Cannot create view with no selector arguments supplied');\n    }\n\n    // the SDK SHOULD NOT allow Views with a specified name to be declared with instrument selectors that\n    // may select more than one instrument (e.g. wild card instrument name) in the same Meter.\n    if (\n      viewOptions.name != null &&\n      (viewOptions?.instrumentName == null ||\n        PatternPredicate.hasWildcard(viewOptions.instrumentName))\n    ) {\n      throw new Error(\n        'Views with a specified name must be declared with an instrument selector that selects at most one instrument per meter.'\n      );\n    }\n\n    // Create AttributesProcessor if attributeKeys are defined set.\n    if (viewOptions.attributeKeys != null) {\n      this.attributesProcessor = new FilteringAttributesProcessor(\n        viewOptions.attributeKeys\n      );\n    } else {\n      this.attributesProcessor = AttributesProcessor.Noop();\n    }\n\n    this.name = viewOptions.name;\n    this.description = viewOptions.description;\n    this.aggregation = viewOptions.aggregation ?? Aggregation.Default();\n    this.instrumentSelector = new InstrumentSelector({\n      name: viewOptions.instrumentName,\n      type: viewOptions.instrumentType,\n      unit: viewOptions.instrumentUnit,\n    });\n    this.meterSelector = new MeterSelector({\n      name: viewOptions.meterName,\n      version: viewOptions.meterVersion,\n      schemaUrl: viewOptions.meterSchemaUrl,\n    });\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport {\n  Sum,\n  LastValue,\n  Histogram,\n  ExponentialHistogram,\n} from './aggregator/types';\n\nexport {\n  AggregationSelector,\n  AggregationTemporalitySelector,\n} from './export/AggregationSelector';\n\nexport { AggregationTemporality } from './export/AggregationTemporality';\n\nexport {\n  DataPoint,\n  DataPointType,\n  SumMetricData,\n  GaugeMetricData,\n  HistogramMetricData,\n  ExponentialHistogramMetricData,\n  ResourceMetrics,\n  ScopeMetrics,\n  MetricData,\n  CollectionResult,\n} from './export/MetricData';\n\nexport { PushMetricExporter } from './export/MetricExporter';\n\nexport { MetricReader, MetricReaderOptions } from './export/MetricReader';\n\nexport {\n  PeriodicExportingMetricReader,\n  PeriodicExportingMetricReaderOptions,\n} from './export/PeriodicExportingMetricReader';\n\nexport { InMemoryMetricExporter } from './export/InMemoryMetricExporter';\n\nexport { ConsoleMetricExporter } from './export/ConsoleMetricExporter';\n\nexport { MetricCollectOptions, MetricProducer } from './export/MetricProducer';\n\nexport { InstrumentDescriptor, InstrumentType } from './InstrumentDescriptor';\n\nexport { MeterProvider, MeterProviderOptions } from './MeterProvider';\n\nexport {\n  DefaultAggregation,\n  ExplicitBucketHistogramAggregation,\n  ExponentialHistogramAggregation,\n  DropAggregation,\n  HistogramAggregation,\n  LastValueAggregation,\n  SumAggregation,\n  Aggregation,\n} from './view/Aggregation';\n\nexport { View, ViewOptions } from './view/View';\n\nexport { TimeoutError } from './utils';\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Context, createContextKey } from '@opentelemetry/api';\n\nconst SUPPRESS_TRACING_KEY = createContextKey(\n  'OpenTelemetry SDK Context Key SUPPRESS_TRACING'\n);\n\nexport function suppressTracing(context: Context): Context {\n  return context.setValue(SUPPRESS_TRACING_KEY, true);\n}\n\nexport function unsuppressTracing(context: Context): Context {\n  return context.deleteValue(SUPPRESS_TRACING_KEY);\n}\n\nexport function isTracingSuppressed(context: Context): boolean {\n  return context.getValue(SUPPRESS_TRACING_KEY) === true;\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const BAGGAGE_KEY_PAIR_SEPARATOR = '=';\nexport const BAGGAGE_PROPERTIES_SEPARATOR = ';';\nexport const BAGGAGE_ITEMS_SEPARATOR = ',';\n\n// Name of the http header used to propagate the baggage\nexport const BAGGAGE_HEADER = 'baggage';\n// Maximum number of name-value pairs allowed by w3c spec\nexport const BAGGAGE_MAX_NAME_VALUE_PAIRS = 180;\n// Maximum number of bytes per a single name-value pair allowed by w3c spec\nexport const BAGGAGE_MAX_PER_NAME_VALUE_PAIRS = 4096;\n// Maximum total length of all name-value pairs allowed by w3c spec\nexport const BAGGAGE_MAX_TOTAL_LENGTH = 8192;\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {\n  Baggage,\n  BaggageEntryMetadata,\n  baggageEntryMetadataFromString,\n} from '@opentelemetry/api';\nimport {\n  BAGGAGE_ITEMS_SEPARATOR,\n  BAGGAGE_PROPERTIES_SEPARATOR,\n  BAGGAGE_KEY_PAIR_SEPARATOR,\n  BAGGAGE_MAX_TOTAL_LENGTH,\n} from './constants';\n\ntype ParsedBaggageKeyValue = {\n  key: string;\n  value: string;\n  metadata: BaggageEntryMetadata | undefined;\n};\n\nexport function serializeKeyPairs(keyPairs: string[]): string {\n  return keyPairs.reduce((hValue: string, current: string) => {\n    const value = `${hValue}${\n      hValue !== '' ? BAGGAGE_ITEMS_SEPARATOR : ''\n    }${current}`;\n    return value.length > BAGGAGE_MAX_TOTAL_LENGTH ? hValue : value;\n  }, '');\n}\n\nexport function getKeyPairs(baggage: Baggage): string[] {\n  return baggage.getAllEntries().map(([key, value]) => {\n    let entry = `${encodeURIComponent(key)}=${encodeURIComponent(value.value)}`;\n\n    // include opaque metadata if provided\n    // NOTE: we intentionally don't URI-encode the metadata - that responsibility falls on the metadata implementation\n    if (value.metadata !== undefined) {\n      entry += BAGGAGE_PROPERTIES_SEPARATOR + value.metadata.toString();\n    }\n\n    return entry;\n  });\n}\n\nexport function parsePairKeyValue(\n  entry: string\n): ParsedBaggageKeyValue | undefined {\n  const valueProps = entry.split(BAGGAGE_PROPERTIES_SEPARATOR);\n  if (valueProps.length <= 0) return;\n  const keyPairPart = valueProps.shift();\n  if (!keyPairPart) return;\n  const separatorIndex = keyPairPart.indexOf(BAGGAGE_KEY_PAIR_SEPARATOR);\n  if (separatorIndex <= 0) return;\n  const key = decodeURIComponent(\n    keyPairPart.substring(0, separatorIndex).trim()\n  );\n  const value = decodeURIComponent(\n    keyPairPart.substring(separatorIndex + 1).trim()\n  );\n  let metadata;\n  if (valueProps.length > 0) {\n    metadata = baggageEntryMetadataFromString(\n      valueProps.join(BAGGAGE_PROPERTIES_SEPARATOR)\n    );\n  }\n  return { key, value, metadata };\n}\n\n/**\n * Parse a string serialized in the baggage HTTP Format (without metadata):\n * https://github.com/w3c/baggage/blob/master/baggage/HTTP_HEADER_FORMAT.md\n */\nexport function parseKeyPairsIntoRecord(\n  value?: string\n): Record<string, string> {\n  if (typeof value !== 'string' || value.length === 0) return {};\n  return value\n    .split(BAGGAGE_ITEMS_SEPARATOR)\n    .map(entry => {\n      return parsePairKeyValue(entry);\n    })\n    .filter(keyPair => keyPair !== undefined && keyPair.value.length > 0)\n    .reduce<Record<string, string>>((headers, keyPair) => {\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      headers[keyPair!.key] = keyPair!.value;\n      return headers;\n    }, {});\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  BaggageEntry,\n  Context,\n  propagation,\n  TextMapGetter,\n  TextMapPropagator,\n  TextMapSetter,\n} from '@opentelemetry/api';\n\nimport { isTracingSuppressed } from '../../trace/suppress-tracing';\nimport {\n  BAGGAGE_HEADER,\n  BAGGAGE_ITEMS_SEPARATOR,\n  BAGGAGE_MAX_NAME_VALUE_PAIRS,\n  BAGGAGE_MAX_PER_NAME_VALUE_PAIRS,\n} from '../constants';\nimport { getKeyPairs, parsePairKeyValue, serializeKeyPairs } from '../utils';\n\n/**\n * Propagates {@link Baggage} through Context format propagation.\n *\n * Based on the Baggage specification:\n * https://w3c.github.io/baggage/\n */\nexport class W3CBaggagePropagator implements TextMapPropagator {\n  inject(context: Context, carrier: unknown, setter: TextMapSetter): void {\n    const baggage = propagation.getBaggage(context);\n    if (!baggage || isTracingSuppressed(context)) return;\n    const keyPairs = getKeyPairs(baggage)\n      .filter((pair: string) => {\n        return pair.length <= BAGGAGE_MAX_PER_NAME_VALUE_PAIRS;\n      })\n      .slice(0, BAGGAGE_MAX_NAME_VALUE_PAIRS);\n    const headerValue = serializeKeyPairs(keyPairs);\n    if (headerValue.length > 0) {\n      setter.set(carrier, BAGGAGE_HEADER, headerValue);\n    }\n  }\n\n  extract(context: Context, carrier: unknown, getter: TextMapGetter): Context {\n    const headerValue = getter.get(carrier, BAGGAGE_HEADER);\n    const baggageString = Array.isArray(headerValue)\n      ? headerValue.join(BAGGAGE_ITEMS_SEPARATOR)\n      : headerValue;\n    if (!baggageString) return context;\n    const baggage: Record<string, BaggageEntry> = {};\n    if (baggageString.length === 0) {\n      return context;\n    }\n    const pairs = baggageString.split(BAGGAGE_ITEMS_SEPARATOR);\n    pairs.forEach(entry => {\n      const keyPair = parsePairKeyValue(entry);\n      if (keyPair) {\n        const baggageEntry: BaggageEntry = { value: keyPair.value };\n        if (keyPair.metadata) {\n          baggageEntry.metadata = keyPair.metadata;\n        }\n        baggage[keyPair.key] = baggageEntry;\n      }\n    });\n    if (Object.entries(baggage).length === 0) {\n      return context;\n    }\n    return propagation.setBaggage(context, propagation.createBaggage(baggage));\n  }\n\n  fields(): string[] {\n    return [BAGGAGE_HEADER];\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport interface Clock {\n  /**\n   * Return the current time in milliseconds from some epoch such as the Unix epoch or process start\n   */\n  now(): number;\n}\n\n/**\n * A utility for returning wall times anchored to a given point in time. Wall time measurements will\n * not be taken from the system, but instead are computed by adding a monotonic clock time\n * to the anchor point.\n *\n * This is needed because the system time can change and result in unexpected situations like\n * spans ending before they are started. Creating an anchored clock for each local root span\n * ensures that span timings and durations are accurate while preventing span times from drifting\n * too far from the system clock.\n *\n * Only creating an anchored clock once per local trace ensures span times are correct relative\n * to each other. For example, a child span will never have a start time before its parent even\n * if the system clock is corrected during the local trace.\n *\n * Heavily inspired by the OTel Java anchored clock\n * https://github.com/open-telemetry/opentelemetry-java/blob/main/sdk/trace/src/main/java/io/opentelemetry/sdk/trace/AnchoredClock.java\n */\nexport class AnchoredClock implements Clock {\n  private _monotonicClock: Clock;\n  private _epochMillis: number;\n  private _performanceMillis: number;\n\n  /**\n   * Create a new AnchoredClock anchored to the current time returned by systemClock.\n   *\n   * @param systemClock should be a clock that returns the number of milliseconds since January 1 1970 such as Date\n   * @param monotonicClock should be a clock that counts milliseconds monotonically such as window.performance or perf_hooks.performance\n   */\n  public constructor(systemClock: Clock, monotonicClock: Clock) {\n    this._monotonicClock = monotonicClock;\n    this._epochMillis = systemClock.now();\n    this._performanceMillis = monotonicClock.now();\n  }\n\n  /**\n   * Returns the current time by adding the number of milliseconds since the\n   * AnchoredClock was created to the creation epoch time\n   */\n  public now(): number {\n    const delta = this._monotonicClock.now() - this._performanceMillis;\n    return this._epochMillis + delta;\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { diag, SpanAttributeValue, SpanAttributes } from '@opentelemetry/api';\n\nexport function sanitizeAttributes(attributes: unknown): SpanAttributes {\n  const out: SpanAttributes = {};\n\n  if (typeof attributes !== 'object' || attributes == null) {\n    return out;\n  }\n\n  for (const [key, val] of Object.entries(attributes)) {\n    if (!isAttributeKey(key)) {\n      diag.warn(`Invalid attribute key: ${key}`);\n      continue;\n    }\n    if (!isAttributeValue(val)) {\n      diag.warn(`Invalid attribute value set for key: ${key}`);\n      continue;\n    }\n    if (Array.isArray(val)) {\n      out[key] = val.slice();\n    } else {\n      out[key] = val;\n    }\n  }\n\n  return out;\n}\n\nexport function isAttributeKey(key: unknown): key is string {\n  return typeof key === 'string' && key.length > 0;\n}\n\nexport function isAttributeValue(val: unknown): val is SpanAttributeValue {\n  if (val == null) {\n    return true;\n  }\n\n  if (Array.isArray(val)) {\n    return isHomogeneousAttributeValueArray(val);\n  }\n\n  return isValidPrimitiveAttributeValue(val);\n}\n\nfunction isHomogeneousAttributeValueArray(arr: unknown[]): boolean {\n  let type: string | undefined;\n\n  for (const element of arr) {\n    // null/undefined elements are allowed\n    if (element == null) continue;\n\n    if (!type) {\n      if (isValidPrimitiveAttributeValue(element)) {\n        type = typeof element;\n        continue;\n      }\n      // encountered an invalid primitive\n      return false;\n    }\n\n    if (typeof element === type) {\n      continue;\n    }\n\n    return false;\n  }\n\n  return true;\n}\n\nfunction isValidPrimitiveAttributeValue(val: unknown): boolean {\n  switch (typeof val) {\n    case 'number':\n    case 'boolean':\n    case 'string':\n      return true;\n  }\n\n  return false;\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { diag, Exception } from '@opentelemetry/api';\nimport { ErrorHandler } from './types';\n\n/**\n * Returns a function that logs an error using the provided logger, or a\n * console logger if one was not provided.\n */\nexport function loggingErrorHandler(): ErrorHandler {\n  return (ex: Exception) => {\n    diag.error(stringifyException(ex));\n  };\n}\n\n/**\n * Converts an exception into a string representation\n * @param {Exception} ex\n */\nfunction stringifyException(ex: Exception | string): string {\n  if (typeof ex === 'string') {\n    return ex;\n  } else {\n    return JSON.stringify(flattenException(ex));\n  }\n}\n\n/**\n * Flattens an exception into key-value pairs by traversing the prototype chain\n * and coercing values to strings. Duplicate properties will not be overwritten;\n * the first insert wins.\n */\nfunction flattenException(ex: Exception): Record<string, string> {\n  const result = {} as Record<string, string>;\n  let current = ex;\n\n  while (current !== null) {\n    Object.getOwnPropertyNames(current).forEach(propertyName => {\n      if (result[propertyName]) return;\n      const value = current[propertyName as keyof typeof current];\n      if (value) {\n        result[propertyName] = String(value);\n      }\n    });\n    current = Object.getPrototypeOf(current);\n  }\n\n  return result;\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Exception } from '@opentelemetry/api';\nimport { loggingErrorHandler } from './logging-error-handler';\nimport { ErrorHandler } from './types';\n\n/** The global error handler delegate */\nlet delegateHandler = loggingErrorHandler();\n\n/**\n * Set the global error handler\n * @param {ErrorHandler} handler\n */\nexport function setGlobalErrorHandler(handler: ErrorHandler): void {\n  delegateHandler = handler;\n}\n\n/**\n * Return the global error handler\n * @param {Exception} ex\n */\nexport function globalErrorHandler(ex: Exception): void {\n  try {\n    delegateHandler(ex);\n  } catch {} // eslint-disable-line no-empty\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport enum TracesSamplerValues {\n  AlwaysOff = 'always_off',\n  AlwaysOn = 'always_on',\n  ParentBasedAlwaysOff = 'parentbased_always_off',\n  ParentBasedAlwaysOn = 'parentbased_always_on',\n  ParentBasedTraceIdRatio = 'parentbased_traceidratio',\n  TraceIdRatio = 'traceidratio',\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// Updates to this file should also be replicated to @opentelemetry/api too.\n\n/**\n * - globalThis (New standard)\n * - self (Will return the current window instance for supported browsers)\n * - window (fallback for older browser implementations)\n * - global (NodeJS implementation)\n * - <object> (When all else fails)\n */\n\n/** only globals that common to node and browsers are allowed */\n// eslint-disable-next-line node/no-unsupported-features/es-builtins, no-undef\nexport const _globalThis: typeof globalThis =\n  typeof globalThis === 'object'\n    ? globalThis\n    : typeof self === 'object'\n    ? self\n    : typeof window === 'object'\n    ? window\n    : typeof global === 'object'\n    ? global\n    : ({} as typeof globalThis);\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DiagLogLevel } from '@opentelemetry/api';\nimport { TracesSamplerValues } from './sampling';\nimport { _globalThis } from '../platform/browser/globalThis';\n\nconst DEFAULT_LIST_SEPARATOR = ',';\n\n/**\n * Environment interface to define all names\n */\n\nconst ENVIRONMENT_BOOLEAN_KEYS = ['OTEL_SDK_DISABLED'] as const;\n\ntype ENVIRONMENT_BOOLEANS = {\n  [K in (typeof ENVIRONMENT_BOOLEAN_KEYS)[number]]?: boolean;\n};\n\nfunction isEnvVarABoolean(key: unknown): key is keyof ENVIRONMENT_BOOLEANS {\n  return (\n    ENVIRONMENT_BOOLEAN_KEYS.indexOf(key as keyof ENVIRONMENT_BOOLEANS) > -1\n  );\n}\n\nconst ENVIRONMENT_NUMBERS_KEYS = [\n  'OTEL_BSP_EXPORT_TIMEOUT',\n  'OTEL_BSP_MAX_EXPORT_BATCH_SIZE',\n  'OTEL_BSP_MAX_QUEUE_SIZE',\n  'OTEL_BSP_SCHEDULE_DELAY',\n  'OTEL_BLRP_EXPORT_TIMEOUT',\n  'OTEL_BLRP_MAX_EXPORT_BATCH_SIZE',\n  'OTEL_BLRP_MAX_QUEUE_SIZE',\n  'OTEL_BLRP_SCHEDULE_DELAY',\n  'OTEL_ATTRIBUTE_VALUE_LENGTH_LIMIT',\n  'OTEL_ATTRIBUTE_COUNT_LIMIT',\n  'OTEL_SPAN_ATTRIBUTE_VALUE_LENGTH_LIMIT',\n  'OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT',\n  'OTEL_LOGRECORD_ATTRIBUTE_VALUE_LENGTH_LIMIT',\n  'OTEL_LOGRECORD_ATTRIBUTE_COUNT_LIMIT',\n  'OTEL_SPAN_EVENT_COUNT_LIMIT',\n  'OTEL_SPAN_LINK_COUNT_LIMIT',\n  'OTEL_SPAN_ATTRIBUTE_PER_EVENT_COUNT_LIMIT',\n  'OTEL_SPAN_ATTRIBUTE_PER_LINK_COUNT_LIMIT',\n  'OTEL_EXPORTER_OTLP_TIMEOUT',\n  'OTEL_EXPORTER_OTLP_TRACES_TIMEOUT',\n  'OTEL_EXPORTER_OTLP_METRICS_TIMEOUT',\n  'OTEL_EXPORTER_OTLP_LOGS_TIMEOUT',\n  'OTEL_EXPORTER_JAEGER_AGENT_PORT',\n] as const;\n\ntype ENVIRONMENT_NUMBERS = {\n  [K in (typeof ENVIRONMENT_NUMBERS_KEYS)[number]]?: number;\n};\n\nfunction isEnvVarANumber(key: unknown): key is keyof ENVIRONMENT_NUMBERS {\n  return (\n    ENVIRONMENT_NUMBERS_KEYS.indexOf(key as keyof ENVIRONMENT_NUMBERS) > -1\n  );\n}\n\nconst ENVIRONMENT_LISTS_KEYS = [\n  'OTEL_NO_PATCH_MODULES',\n  'OTEL_PROPAGATORS',\n] as const;\n\ntype ENVIRONMENT_LISTS = {\n  [K in (typeof ENVIRONMENT_LISTS_KEYS)[number]]?: string[];\n};\n\nfunction isEnvVarAList(key: unknown): key is keyof ENVIRONMENT_LISTS {\n  return ENVIRONMENT_LISTS_KEYS.indexOf(key as keyof ENVIRONMENT_LISTS) > -1;\n}\n\nexport type ENVIRONMENT = {\n  CONTAINER_NAME?: string;\n  ECS_CONTAINER_METADATA_URI_V4?: string;\n  ECS_CONTAINER_METADATA_URI?: string;\n  HOSTNAME?: string;\n  KUBERNETES_SERVICE_HOST?: string;\n  NAMESPACE?: string;\n  OTEL_EXPORTER_JAEGER_AGENT_HOST?: string;\n  OTEL_EXPORTER_JAEGER_ENDPOINT?: string;\n  OTEL_EXPORTER_JAEGER_PASSWORD?: string;\n  OTEL_EXPORTER_JAEGER_USER?: string;\n  OTEL_EXPORTER_OTLP_ENDPOINT?: string;\n  OTEL_EXPORTER_OTLP_TRACES_ENDPOINT?: string;\n  OTEL_EXPORTER_OTLP_METRICS_ENDPOINT?: string;\n  OTEL_EXPORTER_OTLP_LOGS_ENDPOINT?: string;\n  OTEL_EXPORTER_OTLP_HEADERS?: string;\n  OTEL_EXPORTER_OTLP_TRACES_HEADERS?: string;\n  OTEL_EXPORTER_OTLP_METRICS_HEADERS?: string;\n  OTEL_EXPORTER_OTLP_LOGS_HEADERS?: string;\n  OTEL_EXPORTER_ZIPKIN_ENDPOINT?: string;\n  OTEL_LOG_LEVEL?: DiagLogLevel;\n  OTEL_RESOURCE_ATTRIBUTES?: string;\n  OTEL_SERVICE_NAME?: string;\n  OTEL_TRACES_EXPORTER?: string;\n  OTEL_TRACES_SAMPLER_ARG?: string;\n  OTEL_TRACES_SAMPLER?: string;\n  OTEL_LOGS_EXPORTER?: string;\n  OTEL_EXPORTER_OTLP_INSECURE?: string;\n  OTEL_EXPORTER_OTLP_TRACES_INSECURE?: string;\n  OTEL_EXPORTER_OTLP_METRICS_INSECURE?: string;\n  OTEL_EXPORTER_OTLP_LOGS_INSECURE?: string;\n  OTEL_EXPORTER_OTLP_CERTIFICATE?: string;\n  OTEL_EXPORTER_OTLP_TRACES_CERTIFICATE?: string;\n  OTEL_EXPORTER_OTLP_METRICS_CERTIFICATE?: string;\n  OTEL_EXPORTER_OTLP_LOGS_CERTIFICATE?: string;\n  OTEL_EXPORTER_OTLP_COMPRESSION?: string;\n  OTEL_EXPORTER_OTLP_TRACES_COMPRESSION?: string;\n  OTEL_EXPORTER_OTLP_METRICS_COMPRESSION?: string;\n  OTEL_EXPORTER_OTLP_LOGS_COMPRESSION?: string;\n  OTEL_EXPORTER_OTLP_CLIENT_KEY?: string;\n  OTEL_EXPORTER_OTLP_TRACES_CLIENT_KEY?: string;\n  OTEL_EXPORTER_OTLP_METRICS_CLIENT_KEY?: string;\n  OTEL_EXPORTER_OTLP_LOGS_CLIENT_KEY?: string;\n  OTEL_EXPORTER_OTLP_CLIENT_CERTIFICATE?: string;\n  OTEL_EXPORTER_OTLP_TRACES_CLIENT_CERTIFICATE?: string;\n  OTEL_EXPORTER_OTLP_METRICS_CLIENT_CERTIFICATE?: string;\n  OTEL_EXPORTER_OTLP_LOGS_CLIENT_CERTIFICATE?: string;\n  OTEL_EXPORTER_OTLP_PROTOCOL?: string;\n  OTEL_EXPORTER_OTLP_TRACES_PROTOCOL?: string;\n  OTEL_EXPORTER_OTLP_METRICS_PROTOCOL?: string;\n  OTEL_EXPORTER_OTLP_LOGS_PROTOCOL?: string;\n  OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE?: string;\n} & ENVIRONMENT_BOOLEANS &\n  ENVIRONMENT_NUMBERS &\n  ENVIRONMENT_LISTS;\n\nexport type RAW_ENVIRONMENT = {\n  [key: string]: string | number | undefined | string[];\n};\n\nexport const DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT = Infinity;\n\nexport const DEFAULT_ATTRIBUTE_COUNT_LIMIT = 128;\n\nexport const DEFAULT_SPAN_ATTRIBUTE_PER_EVENT_COUNT_LIMIT = 128;\nexport const DEFAULT_SPAN_ATTRIBUTE_PER_LINK_COUNT_LIMIT = 128;\n\n/**\n * Default environment variables\n */\nexport const DEFAULT_ENVIRONMENT: Required<ENVIRONMENT> = {\n  OTEL_SDK_DISABLED: false,\n  CONTAINER_NAME: '',\n  ECS_CONTAINER_METADATA_URI_V4: '',\n  ECS_CONTAINER_METADATA_URI: '',\n  HOSTNAME: '',\n  KUBERNETES_SERVICE_HOST: '',\n  NAMESPACE: '',\n  OTEL_BSP_EXPORT_TIMEOUT: 30000,\n  OTEL_BSP_MAX_EXPORT_BATCH_SIZE: 512,\n  OTEL_BSP_MAX_QUEUE_SIZE: 2048,\n  OTEL_BSP_SCHEDULE_DELAY: 5000,\n  OTEL_BLRP_EXPORT_TIMEOUT: 30000,\n  OTEL_BLRP_MAX_EXPORT_BATCH_SIZE: 512,\n  OTEL_BLRP_MAX_QUEUE_SIZE: 2048,\n  OTEL_BLRP_SCHEDULE_DELAY: 5000,\n  OTEL_EXPORTER_JAEGER_AGENT_HOST: '',\n  OTEL_EXPORTER_JAEGER_AGENT_PORT: 6832,\n  OTEL_EXPORTER_JAEGER_ENDPOINT: '',\n  OTEL_EXPORTER_JAEGER_PASSWORD: '',\n  OTEL_EXPORTER_JAEGER_USER: '',\n  OTEL_EXPORTER_OTLP_ENDPOINT: '',\n  OTEL_EXPORTER_OTLP_TRACES_ENDPOINT: '',\n  OTEL_EXPORTER_OTLP_METRICS_ENDPOINT: '',\n  OTEL_EXPORTER_OTLP_LOGS_ENDPOINT: '',\n  OTEL_EXPORTER_OTLP_HEADERS: '',\n  OTEL_EXPORTER_OTLP_TRACES_HEADERS: '',\n  OTEL_EXPORTER_OTLP_METRICS_HEADERS: '',\n  OTEL_EXPORTER_OTLP_LOGS_HEADERS: '',\n  OTEL_EXPORTER_OTLP_TIMEOUT: 10000,\n  OTEL_EXPORTER_OTLP_TRACES_TIMEOUT: 10000,\n  OTEL_EXPORTER_OTLP_METRICS_TIMEOUT: 10000,\n  OTEL_EXPORTER_OTLP_LOGS_TIMEOUT: 10000,\n  OTEL_EXPORTER_ZIPKIN_ENDPOINT: 'http://localhost:9411/api/v2/spans',\n  OTEL_LOG_LEVEL: DiagLogLevel.INFO,\n  OTEL_NO_PATCH_MODULES: [],\n  OTEL_PROPAGATORS: ['tracecontext', 'baggage'],\n  OTEL_RESOURCE_ATTRIBUTES: '',\n  OTEL_SERVICE_NAME: '',\n  OTEL_ATTRIBUTE_VALUE_LENGTH_LIMIT: DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT,\n  OTEL_ATTRIBUTE_COUNT_LIMIT: DEFAULT_ATTRIBUTE_COUNT_LIMIT,\n  OTEL_SPAN_ATTRIBUTE_VALUE_LENGTH_LIMIT: DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT,\n  OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT: DEFAULT_ATTRIBUTE_COUNT_LIMIT,\n  OTEL_LOGRECORD_ATTRIBUTE_VALUE_LENGTH_LIMIT:\n    DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT,\n  OTEL_LOGRECORD_ATTRIBUTE_COUNT_LIMIT: DEFAULT_ATTRIBUTE_COUNT_LIMIT,\n  OTEL_SPAN_EVENT_COUNT_LIMIT: 128,\n  OTEL_SPAN_LINK_COUNT_LIMIT: 128,\n  OTEL_SPAN_ATTRIBUTE_PER_EVENT_COUNT_LIMIT:\n    DEFAULT_SPAN_ATTRIBUTE_PER_EVENT_COUNT_LIMIT,\n  OTEL_SPAN_ATTRIBUTE_PER_LINK_COUNT_LIMIT:\n    DEFAULT_SPAN_ATTRIBUTE_PER_LINK_COUNT_LIMIT,\n  OTEL_TRACES_EXPORTER: '',\n  OTEL_TRACES_SAMPLER: TracesSamplerValues.ParentBasedAlwaysOn,\n  OTEL_TRACES_SAMPLER_ARG: '',\n  OTEL_LOGS_EXPORTER: '',\n  OTEL_EXPORTER_OTLP_INSECURE: '',\n  OTEL_EXPORTER_OTLP_TRACES_INSECURE: '',\n  OTEL_EXPORTER_OTLP_METRICS_INSECURE: '',\n  OTEL_EXPORTER_OTLP_LOGS_INSECURE: '',\n  OTEL_EXPORTER_OTLP_CERTIFICATE: '',\n  OTEL_EXPORTER_OTLP_TRACES_CERTIFICATE: '',\n  OTEL_EXPORTER_OTLP_METRICS_CERTIFICATE: '',\n  OTEL_EXPORTER_OTLP_LOGS_CERTIFICATE: '',\n  OTEL_EXPORTER_OTLP_COMPRESSION: '',\n  OTEL_EXPORTER_OTLP_TRACES_COMPRESSION: '',\n  OTEL_EXPORTER_OTLP_METRICS_COMPRESSION: '',\n  OTEL_EXPORTER_OTLP_LOGS_COMPRESSION: '',\n  OTEL_EXPORTER_OTLP_CLIENT_KEY: '',\n  OTEL_EXPORTER_OTLP_TRACES_CLIENT_KEY: '',\n  OTEL_EXPORTER_OTLP_METRICS_CLIENT_KEY: '',\n  OTEL_EXPORTER_OTLP_LOGS_CLIENT_KEY: '',\n  OTEL_EXPORTER_OTLP_CLIENT_CERTIFICATE: '',\n  OTEL_EXPORTER_OTLP_TRACES_CLIENT_CERTIFICATE: '',\n  OTEL_EXPORTER_OTLP_METRICS_CLIENT_CERTIFICATE: '',\n  OTEL_EXPORTER_OTLP_LOGS_CLIENT_CERTIFICATE: '',\n  OTEL_EXPORTER_OTLP_PROTOCOL: 'http/protobuf',\n  OTEL_EXPORTER_OTLP_TRACES_PROTOCOL: 'http/protobuf',\n  OTEL_EXPORTER_OTLP_METRICS_PROTOCOL: 'http/protobuf',\n  OTEL_EXPORTER_OTLP_LOGS_PROTOCOL: 'http/protobuf',\n  OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE: 'cumulative',\n};\n\n/**\n * @param key\n * @param environment\n * @param values\n */\nfunction parseBoolean(\n  key: keyof ENVIRONMENT_BOOLEANS,\n  environment: ENVIRONMENT,\n  values: RAW_ENVIRONMENT\n) {\n  if (typeof values[key] === 'undefined') {\n    return;\n  }\n\n  const value = String(values[key]);\n  // support case-insensitive \"true\"\n  environment[key] = value.toLowerCase() === 'true';\n}\n\n/**\n * Parses a variable as number with number validation\n * @param name\n * @param environment\n * @param values\n * @param min\n * @param max\n */\nfunction parseNumber(\n  name: keyof ENVIRONMENT_NUMBERS,\n  environment: ENVIRONMENT,\n  values: RAW_ENVIRONMENT,\n  min = -Infinity,\n  max = Infinity\n) {\n  if (typeof values[name] !== 'undefined') {\n    const value = Number(values[name] as string);\n    if (!isNaN(value)) {\n      if (value < min) {\n        environment[name] = min;\n      } else if (value > max) {\n        environment[name] = max;\n      } else {\n        environment[name] = value;\n      }\n    }\n  }\n}\n\n/**\n * Parses list-like strings from input into output.\n * @param name\n * @param environment\n * @param values\n * @param separator\n */\nfunction parseStringList(\n  name: keyof ENVIRONMENT_LISTS,\n  output: ENVIRONMENT,\n  input: RAW_ENVIRONMENT,\n  separator = DEFAULT_LIST_SEPARATOR\n) {\n  const givenValue = input[name];\n  if (typeof givenValue === 'string') {\n    output[name] = givenValue.split(separator).map(v => v.trim());\n  }\n}\n\n// The support string -> DiagLogLevel mappings\nconst logLevelMap: { [key: string]: DiagLogLevel } = {\n  ALL: DiagLogLevel.ALL,\n  VERBOSE: DiagLogLevel.VERBOSE,\n  DEBUG: DiagLogLevel.DEBUG,\n  INFO: DiagLogLevel.INFO,\n  WARN: DiagLogLevel.WARN,\n  ERROR: DiagLogLevel.ERROR,\n  NONE: DiagLogLevel.NONE,\n};\n\n/**\n * Environmentally sets log level if valid log level string is provided\n * @param key\n * @param environment\n * @param values\n */\nfunction setLogLevelFromEnv(\n  key: keyof ENVIRONMENT,\n  environment: RAW_ENVIRONMENT | ENVIRONMENT,\n  values: RAW_ENVIRONMENT\n) {\n  const value = values[key];\n  if (typeof value === 'string') {\n    const theLevel = logLevelMap[value.toUpperCase()];\n    if (theLevel != null) {\n      environment[key] = theLevel;\n    }\n  }\n}\n\n/**\n * Parses environment values\n * @param values\n */\nexport function parseEnvironment(values: RAW_ENVIRONMENT): ENVIRONMENT {\n  const environment: ENVIRONMENT = {};\n\n  for (const env in DEFAULT_ENVIRONMENT) {\n    const key = env as keyof ENVIRONMENT;\n\n    switch (key) {\n      case 'OTEL_LOG_LEVEL':\n        setLogLevelFromEnv(key, environment, values);\n        break;\n\n      default:\n        if (isEnvVarABoolean(key)) {\n          parseBoolean(key, environment, values);\n        } else if (isEnvVarANumber(key)) {\n          parseNumber(key, environment, values);\n        } else if (isEnvVarAList(key)) {\n          parseStringList(key, environment, values);\n        } else {\n          const value = values[key];\n          if (typeof value !== 'undefined' && value !== null) {\n            environment[key] = String(value);\n          }\n        }\n    }\n  }\n\n  return environment;\n}\n\n/**\n * Get environment in node or browser without\n * populating default values.\n */\nexport function getEnvWithoutDefaults(): ENVIRONMENT {\n  return typeof process !== 'undefined' && process && process.env\n    ? parseEnvironment(process.env as RAW_ENVIRONMENT)\n    : parseEnvironment(_globalThis as typeof globalThis & RAW_ENVIRONMENT);\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as os from 'os';\nimport {\n  DEFAULT_ENVIRONMENT,\n  ENVIRONMENT,\n  RAW_ENVIRONMENT,\n  parseEnvironment,\n} from '../../utils/environment';\n\n/**\n * Gets the environment variables\n */\nexport function getEnv(): Required<ENVIRONMENT> {\n  const processEnv = parseEnvironment(process.env as RAW_ENVIRONMENT);\n  return Object.assign(\n    {\n      HOSTNAME: os.hostname(),\n    },\n    DEFAULT_ENVIRONMENT,\n    processEnv\n  );\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** only globals that common to node and browsers are allowed */\n// eslint-disable-next-line node/no-unsupported-features/es-builtins\nexport const _globalThis = typeof globalThis === 'object' ? globalThis : global;\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nfunction intValue(charCode: number): number {\n  // 0-9\n  if (charCode >= 48 && charCode <= 57) {\n    return charCode - 48;\n  }\n\n  // a-f\n  if (charCode >= 97 && charCode <= 102) {\n    return charCode - 87;\n  }\n\n  // A-F\n  return charCode - 55;\n}\n\nconst buf8 = Buffer.alloc(8);\nconst buf16 = Buffer.alloc(16);\n\nexport function hexToBase64(hexStr: string): string {\n  let buf;\n  if (hexStr.length === 16) {\n    buf = buf8;\n  } else if (hexStr.length === 32) {\n    buf = buf16;\n  } else {\n    buf = Buffer.alloc(hexStr.length / 2);\n  }\n  let offset = 0;\n\n  for (let i = 0; i < hexStr.length; i += 2) {\n    const hi = intValue(hexStr.charCodeAt(i));\n    const lo = intValue(hexStr.charCodeAt(i + 1));\n    buf.writeUInt8((hi << 4) | lo, offset++);\n  }\n\n  return buf.toString('base64');\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { IdGenerator } from '../../trace/IdGenerator';\nconst SPAN_ID_BYTES = 8;\nconst TRACE_ID_BYTES = 16;\n\n/**\n * @deprecated Use the one defined in @opentelemetry/sdk-trace-base instead.\n */\nexport class RandomIdGenerator implements IdGenerator {\n  /**\n   * Returns a random 16-byte trace ID formatted/encoded as a 32 lowercase hex\n   * characters corresponding to 128 bits.\n   */\n  generateTraceId = getIdGenerator(TRACE_ID_BYTES);\n\n  /**\n   * Returns a random 8-byte span ID formatted/encoded as a 16 lowercase hex\n   * characters corresponding to 64 bits.\n   */\n  generateSpanId = getIdGenerator(SPAN_ID_BYTES);\n}\n\nconst SHARED_BUFFER = Buffer.allocUnsafe(TRACE_ID_BYTES);\nfunction getIdGenerator(bytes: number): () => string {\n  return function generateId() {\n    for (let i = 0; i < bytes / 4; i++) {\n      // unsigned right shift drops decimal part of the number\n      // it is required because if a number between 2**32 and 2**32 - 1 is generated, an out of range error is thrown by writeUInt32BE\n      SHARED_BUFFER.writeUInt32BE((Math.random() * 2 ** 32) >>> 0, i * 4);\n    }\n\n    // If buffer is all 0, set the last byte to 1 to guarantee a valid w3c id is generated\n    for (let i = 0; i < bytes; i++) {\n      if (SHARED_BUFFER[i] > 0) {\n        break;\n      } else if (i === bytes - 1) {\n        SHARED_BUFFER[bytes - 1] = 1;\n      }\n    }\n\n    return SHARED_BUFFER.toString('hex', 0, bytes);\n  };\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { performance } from 'perf_hooks';\n\nexport const otperformance = performance;\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// this is autogenerated file, see scripts/version-update.js\nexport const VERSION = '1.17.0';\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// DO NOT EDIT, this is an Auto-generated file from scripts/semconv/templates//templates/SemanticAttributes.ts.j2\nexport const SemanticAttributes = {\n  /**\n   * The full invoked ARN as provided on the `Context` passed to the function (`Lambda-Runtime-Invoked-Function-Arn` header on the `/runtime/invocation/next` applicable).\n   *\n   * Note: This may be different from `faas.id` if an alias is involved.\n   */\n  AWS_LAMBDA_INVOKED_ARN: 'aws.lambda.invoked_arn',\n\n  /**\n   * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n   */\n  DB_SYSTEM: 'db.system',\n\n  /**\n   * The connection string used to connect to the database. It is recommended to remove embedded credentials.\n   */\n  DB_CONNECTION_STRING: 'db.connection_string',\n\n  /**\n   * Username for accessing the database.\n   */\n  DB_USER: 'db.user',\n\n  /**\n   * The fully-qualified class name of the [Java Database Connectivity (JDBC)](https://docs.oracle.com/javase/8/docs/technotes/guides/jdbc/) driver used to connect.\n   */\n  DB_JDBC_DRIVER_CLASSNAME: 'db.jdbc.driver_classname',\n\n  /**\n   * If no [tech-specific attribute](#call-level-attributes-for-specific-technologies) is defined, this attribute is used to report the name of the database being accessed. For commands that switch the database, this should be set to the target database (even if the command fails).\n   *\n   * Note: In some SQL databases, the database name to be used is called &#34;schema name&#34;.\n   */\n  DB_NAME: 'db.name',\n\n  /**\n   * The database statement being executed.\n   *\n   * Note: The value may be sanitized to exclude sensitive information.\n   */\n  DB_STATEMENT: 'db.statement',\n\n  /**\n   * The name of the operation being executed, e.g. the [MongoDB command name](https://docs.mongodb.com/manual/reference/command/#database-operations) such as `findAndModify`, or the SQL keyword.\n   *\n   * Note: When setting this to an SQL keyword, it is not recommended to attempt any client-side parsing of `db.statement` just to get this property, but it should be set if the operation name is provided by the library being instrumented. If the SQL statement has an ambiguous operation, or performs more than one operation, this value may be omitted.\n   */\n  DB_OPERATION: 'db.operation',\n\n  /**\n   * The Microsoft SQL Server [instance name](https://docs.microsoft.com/en-us/sql/connect/jdbc/building-the-connection-url?view=sql-server-ver15) connecting to. This name is used to determine the port of a named instance.\n   *\n   * Note: If setting a `db.mssql.instance_name`, `net.peer.port` is no longer required (but still recommended if non-standard).\n   */\n  DB_MSSQL_INSTANCE_NAME: 'db.mssql.instance_name',\n\n  /**\n   * The name of the keyspace being accessed. To be used instead of the generic `db.name` attribute.\n   */\n  DB_CASSANDRA_KEYSPACE: 'db.cassandra.keyspace',\n\n  /**\n   * The fetch size used for paging, i.e. how many rows will be returned at once.\n   */\n  DB_CASSANDRA_PAGE_SIZE: 'db.cassandra.page_size',\n\n  /**\n   * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).\n   */\n  DB_CASSANDRA_CONSISTENCY_LEVEL: 'db.cassandra.consistency_level',\n\n  /**\n   * The name of the primary table that the operation is acting upon, including the schema name (if applicable).\n   *\n   * Note: This mirrors the db.sql.table attribute but references cassandra rather than sql. It is not recommended to attempt any client-side parsing of `db.statement` just to get this property, but it should be set if it is provided by the library being instrumented. If the operation is acting upon an anonymous table, or more than one table, this value MUST NOT be set.\n   */\n  DB_CASSANDRA_TABLE: 'db.cassandra.table',\n\n  /**\n   * Whether or not the query is idempotent.\n   */\n  DB_CASSANDRA_IDEMPOTENCE: 'db.cassandra.idempotence',\n\n  /**\n   * The number of times a query was speculatively executed. Not set or `0` if the query was not executed speculatively.\n   */\n  DB_CASSANDRA_SPECULATIVE_EXECUTION_COUNT:\n    'db.cassandra.speculative_execution_count',\n\n  /**\n   * The ID of the coordinating node for a query.\n   */\n  DB_CASSANDRA_COORDINATOR_ID: 'db.cassandra.coordinator.id',\n\n  /**\n   * The data center of the coordinating node for a query.\n   */\n  DB_CASSANDRA_COORDINATOR_DC: 'db.cassandra.coordinator.dc',\n\n  /**\n   * The [HBase namespace](https://hbase.apache.org/book.html#_namespace) being accessed. To be used instead of the generic `db.name` attribute.\n   */\n  DB_HBASE_NAMESPACE: 'db.hbase.namespace',\n\n  /**\n   * The index of the database being accessed as used in the [`SELECT` command](https://redis.io/commands/select), provided as an integer. To be used instead of the generic `db.name` attribute.\n   */\n  DB_REDIS_DATABASE_INDEX: 'db.redis.database_index',\n\n  /**\n   * The collection being accessed within the database stated in `db.name`.\n   */\n  DB_MONGODB_COLLECTION: 'db.mongodb.collection',\n\n  /**\n   * The name of the primary table that the operation is acting upon, including the schema name (if applicable).\n   *\n   * Note: It is not recommended to attempt any client-side parsing of `db.statement` just to get this property, but it should be set if it is provided by the library being instrumented. If the operation is acting upon an anonymous table, or more than one table, this value MUST NOT be set.\n   */\n  DB_SQL_TABLE: 'db.sql.table',\n\n  /**\n   * The type of the exception (its fully-qualified class name, if applicable). The dynamic type of the exception should be preferred over the static type in languages that support it.\n   */\n  EXCEPTION_TYPE: 'exception.type',\n\n  /**\n   * The exception message.\n   */\n  EXCEPTION_MESSAGE: 'exception.message',\n\n  /**\n   * A stacktrace as a string in the natural representation for the language runtime. The representation is to be determined and documented by each language SIG.\n   */\n  EXCEPTION_STACKTRACE: 'exception.stacktrace',\n\n  /**\n  * SHOULD be set to true if the exception event is recorded at a point where it is known that the exception is escaping the scope of the span.\n  *\n  * Note: An exception is considered to have escaped (or left) the scope of a span,\nif that span is ended while the exception is still logically &#34;in flight&#34;.\nThis may be actually &#34;in flight&#34; in some languages (e.g. if the exception\nis passed to a Context manager&#39;s `__exit__` method in Python) but will\nusually be caught at the point of recording the exception in most languages.\n\nIt is usually not possible to determine at the point where an exception is thrown\nwhether it will escape the scope of a span.\nHowever, it is trivial to know that an exception\nwill escape, if one checks for an active exception just before ending the span,\nas done in the [example above](#exception-end-example).\n\nIt follows that an exception may still escape the scope of the span\neven if the `exception.escaped` attribute was not set or set to false,\nsince the event might have been recorded at a time where it was not\nclear whether the exception will escape.\n  */\n  EXCEPTION_ESCAPED: 'exception.escaped',\n\n  /**\n   * Type of the trigger on which the function is executed.\n   */\n  FAAS_TRIGGER: 'faas.trigger',\n\n  /**\n   * The execution ID of the current function execution.\n   */\n  FAAS_EXECUTION: 'faas.execution',\n\n  /**\n   * The name of the source on which the triggering operation was performed. For example, in Cloud Storage or S3 corresponds to the bucket name, and in Cosmos DB to the database name.\n   */\n  FAAS_DOCUMENT_COLLECTION: 'faas.document.collection',\n\n  /**\n   * Describes the type of the operation that was performed on the data.\n   */\n  FAAS_DOCUMENT_OPERATION: 'faas.document.operation',\n\n  /**\n   * A string containing the time when the data was accessed in the [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) format expressed in [UTC](https://www.w3.org/TR/NOTE-datetime).\n   */\n  FAAS_DOCUMENT_TIME: 'faas.document.time',\n\n  /**\n   * The document name/table subjected to the operation. For example, in Cloud Storage or S3 is the name of the file, and in Cosmos DB the table name.\n   */\n  FAAS_DOCUMENT_NAME: 'faas.document.name',\n\n  /**\n   * A string containing the function invocation time in the [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) format expressed in [UTC](https://www.w3.org/TR/NOTE-datetime).\n   */\n  FAAS_TIME: 'faas.time',\n\n  /**\n   * A string containing the schedule period as [Cron Expression](https://docs.oracle.com/cd/E12058_01/doc/doc.1014/e12030/cron_expressions.htm).\n   */\n  FAAS_CRON: 'faas.cron',\n\n  /**\n   * A boolean that is true if the serverless function is executed for the first time (aka cold-start).\n   */\n  FAAS_COLDSTART: 'faas.coldstart',\n\n  /**\n   * The name of the invoked function.\n   *\n   * Note: SHOULD be equal to the `faas.name` resource attribute of the invoked function.\n   */\n  FAAS_INVOKED_NAME: 'faas.invoked_name',\n\n  /**\n   * The cloud provider of the invoked function.\n   *\n   * Note: SHOULD be equal to the `cloud.provider` resource attribute of the invoked function.\n   */\n  FAAS_INVOKED_PROVIDER: 'faas.invoked_provider',\n\n  /**\n   * The cloud region of the invoked function.\n   *\n   * Note: SHOULD be equal to the `cloud.region` resource attribute of the invoked function.\n   */\n  FAAS_INVOKED_REGION: 'faas.invoked_region',\n\n  /**\n   * Transport protocol used. See note below.\n   */\n  NET_TRANSPORT: 'net.transport',\n\n  /**\n   * Remote address of the peer (dotted decimal for IPv4 or [RFC5952](https://tools.ietf.org/html/rfc5952) for IPv6).\n   */\n  NET_PEER_IP: 'net.peer.ip',\n\n  /**\n   * Remote port number.\n   */\n  NET_PEER_PORT: 'net.peer.port',\n\n  /**\n   * Remote hostname or similar, see note below.\n   */\n  NET_PEER_NAME: 'net.peer.name',\n\n  /**\n   * Like `net.peer.ip` but for the host IP. Useful in case of a multi-IP host.\n   */\n  NET_HOST_IP: 'net.host.ip',\n\n  /**\n   * Like `net.peer.port` but for the host port.\n   */\n  NET_HOST_PORT: 'net.host.port',\n\n  /**\n   * Local hostname or similar, see note below.\n   */\n  NET_HOST_NAME: 'net.host.name',\n\n  /**\n   * The internet connection type currently being used by the host.\n   */\n  NET_HOST_CONNECTION_TYPE: 'net.host.connection.type',\n\n  /**\n   * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n   */\n  NET_HOST_CONNECTION_SUBTYPE: 'net.host.connection.subtype',\n\n  /**\n   * The name of the mobile carrier.\n   */\n  NET_HOST_CARRIER_NAME: 'net.host.carrier.name',\n\n  /**\n   * The mobile carrier country code.\n   */\n  NET_HOST_CARRIER_MCC: 'net.host.carrier.mcc',\n\n  /**\n   * The mobile carrier network code.\n   */\n  NET_HOST_CARRIER_MNC: 'net.host.carrier.mnc',\n\n  /**\n   * The ISO 3166-1 alpha-2 2-character country code associated with the mobile carrier network.\n   */\n  NET_HOST_CARRIER_ICC: 'net.host.carrier.icc',\n\n  /**\n   * The [`service.name`](../../resource/semantic_conventions/README.md#service) of the remote service. SHOULD be equal to the actual `service.name` resource attribute of the remote service if any.\n   */\n  PEER_SERVICE: 'peer.service',\n\n  /**\n   * Username or client_id extracted from the access token or [Authorization](https://tools.ietf.org/html/rfc7235#section-4.2) header in the inbound request from outside the system.\n   */\n  ENDUSER_ID: 'enduser.id',\n\n  /**\n   * Actual/assumed role the client is making the request under extracted from token or application security context.\n   */\n  ENDUSER_ROLE: 'enduser.role',\n\n  /**\n   * Scopes or granted authorities the client currently possesses extracted from token or application security context. The value would come from the scope associated with an [OAuth 2.0 Access Token](https://tools.ietf.org/html/rfc6749#section-3.3) or an attribute value in a [SAML 2.0 Assertion](http://docs.oasis-open.org/security/saml/Post2.0/sstc-saml-tech-overview-2.0.html).\n   */\n  ENDUSER_SCOPE: 'enduser.scope',\n\n  /**\n   * Current &#34;managed&#34; thread ID (as opposed to OS thread ID).\n   */\n  THREAD_ID: 'thread.id',\n\n  /**\n   * Current thread name.\n   */\n  THREAD_NAME: 'thread.name',\n\n  /**\n   * The method or function name, or equivalent (usually rightmost part of the code unit&#39;s name).\n   */\n  CODE_FUNCTION: 'code.function',\n\n  /**\n   * The &#34;namespace&#34; within which `code.function` is defined. Usually the qualified class or module name, such that `code.namespace` + some separator + `code.function` form a unique identifier for the code unit.\n   */\n  CODE_NAMESPACE: 'code.namespace',\n\n  /**\n   * The source code file name that identifies the code unit as uniquely as possible (preferably an absolute file path).\n   */\n  CODE_FILEPATH: 'code.filepath',\n\n  /**\n   * The line number in `code.filepath` best representing the operation. It SHOULD point within the code unit named in `code.function`.\n   */\n  CODE_LINENO: 'code.lineno',\n\n  /**\n   * HTTP request method.\n   */\n  HTTP_METHOD: 'http.method',\n\n  /**\n   * Full HTTP request URL in the form `scheme://host[:port]/path?query[#fragment]`. Usually the fragment is not transmitted over HTTP, but if it is known, it should be included nevertheless.\n   *\n   * Note: `http.url` MUST NOT contain credentials passed via URL in form of `https://username:password@www.example.com/`. In such case the attribute&#39;s value should be `https://www.example.com/`.\n   */\n  HTTP_URL: 'http.url',\n\n  /**\n   * The full request target as passed in a HTTP request line or equivalent.\n   */\n  HTTP_TARGET: 'http.target',\n\n  /**\n   * The value of the [HTTP host header](https://tools.ietf.org/html/rfc7230#section-5.4). An empty Host header should also be reported, see note.\n   *\n   * Note: When the header is present but empty the attribute SHOULD be set to the empty string. Note that this is a valid situation that is expected in certain cases, according the aforementioned [section of RFC 7230](https://tools.ietf.org/html/rfc7230#section-5.4). When the header is not set the attribute MUST NOT be set.\n   */\n  HTTP_HOST: 'http.host',\n\n  /**\n   * The URI scheme identifying the used protocol.\n   */\n  HTTP_SCHEME: 'http.scheme',\n\n  /**\n   * [HTTP response status code](https://tools.ietf.org/html/rfc7231#section-6).\n   */\n  HTTP_STATUS_CODE: 'http.status_code',\n\n  /**\n   * Kind of HTTP protocol used.\n   *\n   * Note: If `net.transport` is not specified, it can be assumed to be `IP.TCP` except if `http.flavor` is `QUIC`, in which case `IP.UDP` is assumed.\n   */\n  HTTP_FLAVOR: 'http.flavor',\n\n  /**\n   * Value of the [HTTP User-Agent](https://tools.ietf.org/html/rfc7231#section-5.5.3) header sent by the client.\n   */\n  HTTP_USER_AGENT: 'http.user_agent',\n\n  /**\n   * The size of the request payload body in bytes. This is the number of bytes transferred excluding headers and is often, but not always, present as the [Content-Length](https://tools.ietf.org/html/rfc7230#section-3.3.2) header. For requests using transport encoding, this should be the compressed size.\n   */\n  HTTP_REQUEST_CONTENT_LENGTH: 'http.request_content_length',\n\n  /**\n   * The size of the uncompressed request payload body after transport decoding. Not set if transport encoding not used.\n   */\n  HTTP_REQUEST_CONTENT_LENGTH_UNCOMPRESSED:\n    'http.request_content_length_uncompressed',\n\n  /**\n   * The size of the response payload body in bytes. This is the number of bytes transferred excluding headers and is often, but not always, present as the [Content-Length](https://tools.ietf.org/html/rfc7230#section-3.3.2) header. For requests using transport encoding, this should be the compressed size.\n   */\n  HTTP_RESPONSE_CONTENT_LENGTH: 'http.response_content_length',\n\n  /**\n   * The size of the uncompressed response payload body after transport decoding. Not set if transport encoding not used.\n   */\n  HTTP_RESPONSE_CONTENT_LENGTH_UNCOMPRESSED:\n    'http.response_content_length_uncompressed',\n\n  /**\n   * The primary server name of the matched virtual host. This should be obtained via configuration. If no such configuration can be obtained, this attribute MUST NOT be set ( `net.host.name` should be used instead).\n   *\n   * Note: `http.url` is usually not readily available on the server side but would have to be assembled in a cumbersome and sometimes lossy process from other information (see e.g. open-telemetry/opentelemetry-python/pull/148). It is thus preferred to supply the raw data that is available.\n   */\n  HTTP_SERVER_NAME: 'http.server_name',\n\n  /**\n   * The matched route (path template).\n   */\n  HTTP_ROUTE: 'http.route',\n\n  /**\n  * The IP address of the original client behind all proxies, if known (e.g. from [X-Forwarded-For](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Forwarded-For)).\n  *\n  * Note: This is not necessarily the same as `net.peer.ip`, which would\nidentify the network-level peer, which may be a proxy.\n\nThis attribute should be set when a source of information different\nfrom the one used for `net.peer.ip`, is available even if that other\nsource just confirms the same value as `net.peer.ip`.\nRationale: For `net.peer.ip`, one typically does not know if it\ncomes from a proxy, reverse proxy, or the actual client. Setting\n`http.client_ip` when it&#39;s the same as `net.peer.ip` means that\none is at least somewhat confident that the address is not that of\nthe closest proxy.\n  */\n  HTTP_CLIENT_IP: 'http.client_ip',\n\n  /**\n   * The keys in the `RequestItems` object field.\n   */\n  AWS_DYNAMODB_TABLE_NAMES: 'aws.dynamodb.table_names',\n\n  /**\n   * The JSON-serialized value of each item in the `ConsumedCapacity` response field.\n   */\n  AWS_DYNAMODB_CONSUMED_CAPACITY: 'aws.dynamodb.consumed_capacity',\n\n  /**\n   * The JSON-serialized value of the `ItemCollectionMetrics` response field.\n   */\n  AWS_DYNAMODB_ITEM_COLLECTION_METRICS: 'aws.dynamodb.item_collection_metrics',\n\n  /**\n   * The value of the `ProvisionedThroughput.ReadCapacityUnits` request parameter.\n   */\n  AWS_DYNAMODB_PROVISIONED_READ_CAPACITY:\n    'aws.dynamodb.provisioned_read_capacity',\n\n  /**\n   * The value of the `ProvisionedThroughput.WriteCapacityUnits` request parameter.\n   */\n  AWS_DYNAMODB_PROVISIONED_WRITE_CAPACITY:\n    'aws.dynamodb.provisioned_write_capacity',\n\n  /**\n   * The value of the `ConsistentRead` request parameter.\n   */\n  AWS_DYNAMODB_CONSISTENT_READ: 'aws.dynamodb.consistent_read',\n\n  /**\n   * The value of the `ProjectionExpression` request parameter.\n   */\n  AWS_DYNAMODB_PROJECTION: 'aws.dynamodb.projection',\n\n  /**\n   * The value of the `Limit` request parameter.\n   */\n  AWS_DYNAMODB_LIMIT: 'aws.dynamodb.limit',\n\n  /**\n   * The value of the `AttributesToGet` request parameter.\n   */\n  AWS_DYNAMODB_ATTRIBUTES_TO_GET: 'aws.dynamodb.attributes_to_get',\n\n  /**\n   * The value of the `IndexName` request parameter.\n   */\n  AWS_DYNAMODB_INDEX_NAME: 'aws.dynamodb.index_name',\n\n  /**\n   * The value of the `Select` request parameter.\n   */\n  AWS_DYNAMODB_SELECT: 'aws.dynamodb.select',\n\n  /**\n   * The JSON-serialized value of each item of the `GlobalSecondaryIndexes` request field.\n   */\n  AWS_DYNAMODB_GLOBAL_SECONDARY_INDEXES:\n    'aws.dynamodb.global_secondary_indexes',\n\n  /**\n   * The JSON-serialized value of each item of the `LocalSecondaryIndexes` request field.\n   */\n  AWS_DYNAMODB_LOCAL_SECONDARY_INDEXES: 'aws.dynamodb.local_secondary_indexes',\n\n  /**\n   * The value of the `ExclusiveStartTableName` request parameter.\n   */\n  AWS_DYNAMODB_EXCLUSIVE_START_TABLE: 'aws.dynamodb.exclusive_start_table',\n\n  /**\n   * The the number of items in the `TableNames` response parameter.\n   */\n  AWS_DYNAMODB_TABLE_COUNT: 'aws.dynamodb.table_count',\n\n  /**\n   * The value of the `ScanIndexForward` request parameter.\n   */\n  AWS_DYNAMODB_SCAN_FORWARD: 'aws.dynamodb.scan_forward',\n\n  /**\n   * The value of the `Segment` request parameter.\n   */\n  AWS_DYNAMODB_SEGMENT: 'aws.dynamodb.segment',\n\n  /**\n   * The value of the `TotalSegments` request parameter.\n   */\n  AWS_DYNAMODB_TOTAL_SEGMENTS: 'aws.dynamodb.total_segments',\n\n  /**\n   * The value of the `Count` response parameter.\n   */\n  AWS_DYNAMODB_COUNT: 'aws.dynamodb.count',\n\n  /**\n   * The value of the `ScannedCount` response parameter.\n   */\n  AWS_DYNAMODB_SCANNED_COUNT: 'aws.dynamodb.scanned_count',\n\n  /**\n   * The JSON-serialized value of each item in the `AttributeDefinitions` request field.\n   */\n  AWS_DYNAMODB_ATTRIBUTE_DEFINITIONS: 'aws.dynamodb.attribute_definitions',\n\n  /**\n   * The JSON-serialized value of each item in the the `GlobalSecondaryIndexUpdates` request field.\n   */\n  AWS_DYNAMODB_GLOBAL_SECONDARY_INDEX_UPDATES:\n    'aws.dynamodb.global_secondary_index_updates',\n\n  /**\n   * A string identifying the messaging system.\n   */\n  MESSAGING_SYSTEM: 'messaging.system',\n\n  /**\n   * The message destination name. This might be equal to the span name but is required nevertheless.\n   */\n  MESSAGING_DESTINATION: 'messaging.destination',\n\n  /**\n   * The kind of message destination.\n   */\n  MESSAGING_DESTINATION_KIND: 'messaging.destination_kind',\n\n  /**\n   * A boolean that is true if the message destination is temporary.\n   */\n  MESSAGING_TEMP_DESTINATION: 'messaging.temp_destination',\n\n  /**\n   * The name of the transport protocol.\n   */\n  MESSAGING_PROTOCOL: 'messaging.protocol',\n\n  /**\n   * The version of the transport protocol.\n   */\n  MESSAGING_PROTOCOL_VERSION: 'messaging.protocol_version',\n\n  /**\n   * Connection string.\n   */\n  MESSAGING_URL: 'messaging.url',\n\n  /**\n   * A value used by the messaging system as an identifier for the message, represented as a string.\n   */\n  MESSAGING_MESSAGE_ID: 'messaging.message_id',\n\n  /**\n   * The [conversation ID](#conversations) identifying the conversation to which the message belongs, represented as a string. Sometimes called &#34;Correlation ID&#34;.\n   */\n  MESSAGING_CONVERSATION_ID: 'messaging.conversation_id',\n\n  /**\n   * The (uncompressed) size of the message payload in bytes. Also use this attribute if it is unknown whether the compressed or uncompressed payload size is reported.\n   */\n  MESSAGING_MESSAGE_PAYLOAD_SIZE_BYTES: 'messaging.message_payload_size_bytes',\n\n  /**\n   * The compressed size of the message payload in bytes.\n   */\n  MESSAGING_MESSAGE_PAYLOAD_COMPRESSED_SIZE_BYTES:\n    'messaging.message_payload_compressed_size_bytes',\n\n  /**\n   * A string identifying the kind of message consumption as defined in the [Operation names](#operation-names) section above. If the operation is &#34;send&#34;, this attribute MUST NOT be set, since the operation can be inferred from the span kind in that case.\n   */\n  MESSAGING_OPERATION: 'messaging.operation',\n\n  /**\n   * The identifier for the consumer receiving a message. For Kafka, set it to `{messaging.kafka.consumer_group} - {messaging.kafka.client_id}`, if both are present, or only `messaging.kafka.consumer_group`. For brokers, such as RabbitMQ and Artemis, set it to the `client_id` of the client consuming the message.\n   */\n  MESSAGING_CONSUMER_ID: 'messaging.consumer_id',\n\n  /**\n   * RabbitMQ message routing key.\n   */\n  MESSAGING_RABBITMQ_ROUTING_KEY: 'messaging.rabbitmq.routing_key',\n\n  /**\n   * Message keys in Kafka are used for grouping alike messages to ensure they&#39;re processed on the same partition. They differ from `messaging.message_id` in that they&#39;re not unique. If the key is `null`, the attribute MUST NOT be set.\n   *\n   * Note: If the key type is not string, it&#39;s string representation has to be supplied for the attribute. If the key has no unambiguous, canonical string form, don&#39;t include its value.\n   */\n  MESSAGING_KAFKA_MESSAGE_KEY: 'messaging.kafka.message_key',\n\n  /**\n   * Name of the Kafka Consumer Group that is handling the message. Only applies to consumers, not producers.\n   */\n  MESSAGING_KAFKA_CONSUMER_GROUP: 'messaging.kafka.consumer_group',\n\n  /**\n   * Client Id for the Consumer or Producer that is handling the message.\n   */\n  MESSAGING_KAFKA_CLIENT_ID: 'messaging.kafka.client_id',\n\n  /**\n   * Partition the message is sent to.\n   */\n  MESSAGING_KAFKA_PARTITION: 'messaging.kafka.partition',\n\n  /**\n   * A boolean that is true if the message is a tombstone.\n   */\n  MESSAGING_KAFKA_TOMBSTONE: 'messaging.kafka.tombstone',\n\n  /**\n   * A string identifying the remoting system.\n   */\n  RPC_SYSTEM: 'rpc.system',\n\n  /**\n   * The full (logical) name of the service being called, including its package name, if applicable.\n   *\n   * Note: This is the logical name of the service from the RPC interface perspective, which can be different from the name of any implementing class. The `code.namespace` attribute may be used to store the latter (despite the attribute name, it may include a class name; e.g., class with method actually executing the call on the server side, RPC client stub class on the client side).\n   */\n  RPC_SERVICE: 'rpc.service',\n\n  /**\n   * The name of the (logical) method being called, must be equal to the $method part in the span name.\n   *\n   * Note: This is the logical name of the method from the RPC interface perspective, which can be different from the name of any implementing method/function. The `code.function` attribute may be used to store the latter (e.g., method actually executing the call on the server side, RPC client stub method on the client side).\n   */\n  RPC_METHOD: 'rpc.method',\n\n  /**\n   * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n   */\n  RPC_GRPC_STATUS_CODE: 'rpc.grpc.status_code',\n\n  /**\n   * Protocol version as in `jsonrpc` property of request/response. Since JSON-RPC 1.0 does not specify this, the value can be omitted.\n   */\n  RPC_JSONRPC_VERSION: 'rpc.jsonrpc.version',\n\n  /**\n   * `id` property of request or response. Since protocol allows id to be int, string, `null` or missing (for notifications), value is expected to be cast to string for simplicity. Use empty string in case of `null` value. Omit entirely if this is a notification.\n   */\n  RPC_JSONRPC_REQUEST_ID: 'rpc.jsonrpc.request_id',\n\n  /**\n   * `error.code` property of response if it is an error response.\n   */\n  RPC_JSONRPC_ERROR_CODE: 'rpc.jsonrpc.error_code',\n\n  /**\n   * `error.message` property of response if it is an error response.\n   */\n  RPC_JSONRPC_ERROR_MESSAGE: 'rpc.jsonrpc.error_message',\n\n  /**\n   * Whether this is a received or sent message.\n   */\n  MESSAGE_TYPE: 'message.type',\n\n  /**\n   * MUST be calculated as two different counters starting from `1` one for sent messages and one for received message.\n   *\n   * Note: This way we guarantee that the values will be consistent between different implementations.\n   */\n  MESSAGE_ID: 'message.id',\n\n  /**\n   * Compressed size of the message in bytes.\n   */\n  MESSAGE_COMPRESSED_SIZE: 'message.compressed_size',\n\n  /**\n   * Uncompressed size of the message in bytes.\n   */\n  MESSAGE_UNCOMPRESSED_SIZE: 'message.uncompressed_size',\n};\n\nexport const DbSystemValues = {\n  /** Some other SQL database. Fallback only. See notes. */\n  OTHER_SQL: 'other_sql',\n  /** Microsoft SQL Server. */\n  MSSQL: 'mssql',\n  /** MySQL. */\n  MYSQL: 'mysql',\n  /** Oracle Database. */\n  ORACLE: 'oracle',\n  /** IBM Db2. */\n  DB2: 'db2',\n  /** PostgreSQL. */\n  POSTGRESQL: 'postgresql',\n  /** Amazon Redshift. */\n  REDSHIFT: 'redshift',\n  /** Apache Hive. */\n  HIVE: 'hive',\n  /** Cloudscape. */\n  CLOUDSCAPE: 'cloudscape',\n  /** HyperSQL DataBase. */\n  HSQLDB: 'hsqldb',\n  /** Progress Database. */\n  PROGRESS: 'progress',\n  /** SAP MaxDB. */\n  MAXDB: 'maxdb',\n  /** SAP HANA. */\n  HANADB: 'hanadb',\n  /** Ingres. */\n  INGRES: 'ingres',\n  /** FirstSQL. */\n  FIRSTSQL: 'firstsql',\n  /** EnterpriseDB. */\n  EDB: 'edb',\n  /** InterSystems Caché. */\n  CACHE: 'cache',\n  /** Adabas (Adaptable Database System). */\n  ADABAS: 'adabas',\n  /** Firebird. */\n  FIREBIRD: 'firebird',\n  /** Apache Derby. */\n  DERBY: 'derby',\n  /** FileMaker. */\n  FILEMAKER: 'filemaker',\n  /** Informix. */\n  INFORMIX: 'informix',\n  /** InstantDB. */\n  INSTANTDB: 'instantdb',\n  /** InterBase. */\n  INTERBASE: 'interbase',\n  /** MariaDB. */\n  MARIADB: 'mariadb',\n  /** Netezza. */\n  NETEZZA: 'netezza',\n  /** Pervasive PSQL. */\n  PERVASIVE: 'pervasive',\n  /** PointBase. */\n  POINTBASE: 'pointbase',\n  /** SQLite. */\n  SQLITE: 'sqlite',\n  /** Sybase. */\n  SYBASE: 'sybase',\n  /** Teradata. */\n  TERADATA: 'teradata',\n  /** Vertica. */\n  VERTICA: 'vertica',\n  /** H2. */\n  H2: 'h2',\n  /** ColdFusion IMQ. */\n  COLDFUSION: 'coldfusion',\n  /** Apache Cassandra. */\n  CASSANDRA: 'cassandra',\n  /** Apache HBase. */\n  HBASE: 'hbase',\n  /** MongoDB. */\n  MONGODB: 'mongodb',\n  /** Redis. */\n  REDIS: 'redis',\n  /** Couchbase. */\n  COUCHBASE: 'couchbase',\n  /** CouchDB. */\n  COUCHDB: 'couchdb',\n  /** Microsoft Azure Cosmos DB. */\n  COSMOSDB: 'cosmosdb',\n  /** Amazon DynamoDB. */\n  DYNAMODB: 'dynamodb',\n  /** Neo4j. */\n  NEO4J: 'neo4j',\n  /** Apache Geode. */\n  GEODE: 'geode',\n  /** Elasticsearch. */\n  ELASTICSEARCH: 'elasticsearch',\n  /** Memcached. */\n  MEMCACHED: 'memcached',\n  /** CockroachDB. */\n  COCKROACHDB: 'cockroachdb',\n} as const;\nexport type DbSystemValues =\n  (typeof DbSystemValues)[keyof typeof DbSystemValues];\n\nexport const DbCassandraConsistencyLevelValues = {\n  /** all. */\n  ALL: 'all',\n  /** each_quorum. */\n  EACH_QUORUM: 'each_quorum',\n  /** quorum. */\n  QUORUM: 'quorum',\n  /** local_quorum. */\n  LOCAL_QUORUM: 'local_quorum',\n  /** one. */\n  ONE: 'one',\n  /** two. */\n  TWO: 'two',\n  /** three. */\n  THREE: 'three',\n  /** local_one. */\n  LOCAL_ONE: 'local_one',\n  /** any. */\n  ANY: 'any',\n  /** serial. */\n  SERIAL: 'serial',\n  /** local_serial. */\n  LOCAL_SERIAL: 'local_serial',\n} as const;\nexport type DbCassandraConsistencyLevelValues =\n  (typeof DbCassandraConsistencyLevelValues)[keyof typeof DbCassandraConsistencyLevelValues];\n\nexport const FaasTriggerValues = {\n  /** A response to some data source operation such as a database or filesystem read/write. */\n  DATASOURCE: 'datasource',\n  /** To provide an answer to an inbound HTTP request. */\n  HTTP: 'http',\n  /** A function is set to be executed when messages are sent to a messaging system. */\n  PUBSUB: 'pubsub',\n  /** A function is scheduled to be executed regularly. */\n  TIMER: 'timer',\n  /** If none of the others apply. */\n  OTHER: 'other',\n} as const;\nexport type FaasTriggerValues =\n  (typeof FaasTriggerValues)[keyof typeof FaasTriggerValues];\n\nexport const FaasDocumentOperationValues = {\n  /** When a new object is created. */\n  INSERT: 'insert',\n  /** When an object is modified. */\n  EDIT: 'edit',\n  /** When an object is deleted. */\n  DELETE: 'delete',\n} as const;\nexport type FaasDocumentOperationValues =\n  (typeof FaasDocumentOperationValues)[keyof typeof FaasDocumentOperationValues];\n\nexport const FaasInvokedProviderValues = {\n  /** Alibaba Cloud. */\n  ALIBABA_CLOUD: 'alibaba_cloud',\n  /** Amazon Web Services. */\n  AWS: 'aws',\n  /** Microsoft Azure. */\n  AZURE: 'azure',\n  /** Google Cloud Platform. */\n  GCP: 'gcp',\n} as const;\nexport type FaasInvokedProviderValues =\n  (typeof FaasInvokedProviderValues)[keyof typeof FaasInvokedProviderValues];\n\nexport const NetTransportValues = {\n  /** ip_tcp. */\n  IP_TCP: 'ip_tcp',\n  /** ip_udp. */\n  IP_UDP: 'ip_udp',\n  /** Another IP-based protocol. */\n  IP: 'ip',\n  /** Unix Domain socket. See below. */\n  UNIX: 'unix',\n  /** Named or anonymous pipe. See note below. */\n  PIPE: 'pipe',\n  /** In-process communication. */\n  INPROC: 'inproc',\n  /** Something else (non IP-based). */\n  OTHER: 'other',\n} as const;\nexport type NetTransportValues =\n  (typeof NetTransportValues)[keyof typeof NetTransportValues];\n\nexport const NetHostConnectionTypeValues = {\n  /** wifi. */\n  WIFI: 'wifi',\n  /** wired. */\n  WIRED: 'wired',\n  /** cell. */\n  CELL: 'cell',\n  /** unavailable. */\n  UNAVAILABLE: 'unavailable',\n  /** unknown. */\n  UNKNOWN: 'unknown',\n} as const;\nexport type NetHostConnectionTypeValues =\n  (typeof NetHostConnectionTypeValues)[keyof typeof NetHostConnectionTypeValues];\n\nexport const NetHostConnectionSubtypeValues = {\n  /** GPRS. */\n  GPRS: 'gprs',\n  /** EDGE. */\n  EDGE: 'edge',\n  /** UMTS. */\n  UMTS: 'umts',\n  /** CDMA. */\n  CDMA: 'cdma',\n  /** EVDO Rel. 0. */\n  EVDO_0: 'evdo_0',\n  /** EVDO Rev. A. */\n  EVDO_A: 'evdo_a',\n  /** CDMA2000 1XRTT. */\n  CDMA2000_1XRTT: 'cdma2000_1xrtt',\n  /** HSDPA. */\n  HSDPA: 'hsdpa',\n  /** HSUPA. */\n  HSUPA: 'hsupa',\n  /** HSPA. */\n  HSPA: 'hspa',\n  /** IDEN. */\n  IDEN: 'iden',\n  /** EVDO Rev. B. */\n  EVDO_B: 'evdo_b',\n  /** LTE. */\n  LTE: 'lte',\n  /** EHRPD. */\n  EHRPD: 'ehrpd',\n  /** HSPAP. */\n  HSPAP: 'hspap',\n  /** GSM. */\n  GSM: 'gsm',\n  /** TD-SCDMA. */\n  TD_SCDMA: 'td_scdma',\n  /** IWLAN. */\n  IWLAN: 'iwlan',\n  /** 5G NR (New Radio). */\n  NR: 'nr',\n  /** 5G NRNSA (New Radio Non-Standalone). */\n  NRNSA: 'nrnsa',\n  /** LTE CA. */\n  LTE_CA: 'lte_ca',\n} as const;\nexport type NetHostConnectionSubtypeValues =\n  (typeof NetHostConnectionSubtypeValues)[keyof typeof NetHostConnectionSubtypeValues];\n\nexport const HttpFlavorValues = {\n  /** HTTP 1.0. */\n  HTTP_1_0: '1.0',\n  /** HTTP 1.1. */\n  HTTP_1_1: '1.1',\n  /** HTTP 2. */\n  HTTP_2_0: '2.0',\n  /** SPDY protocol. */\n  SPDY: 'SPDY',\n  /** QUIC protocol. */\n  QUIC: 'QUIC',\n} as const;\nexport type HttpFlavorValues =\n  (typeof HttpFlavorValues)[keyof typeof HttpFlavorValues];\n\nexport const MessagingDestinationKindValues = {\n  /** A message sent to a queue. */\n  QUEUE: 'queue',\n  /** A message sent to a topic. */\n  TOPIC: 'topic',\n} as const;\nexport type MessagingDestinationKindValues =\n  (typeof MessagingDestinationKindValues)[keyof typeof MessagingDestinationKindValues];\n\nexport const MessagingOperationValues = {\n  /** receive. */\n  RECEIVE: 'receive',\n  /** process. */\n  PROCESS: 'process',\n} as const;\nexport type MessagingOperationValues =\n  (typeof MessagingOperationValues)[keyof typeof MessagingOperationValues];\n\nexport const RpcGrpcStatusCodeValues = {\n  /** OK. */\n  OK: 0,\n  /** CANCELLED. */\n  CANCELLED: 1,\n  /** UNKNOWN. */\n  UNKNOWN: 2,\n  /** INVALID_ARGUMENT. */\n  INVALID_ARGUMENT: 3,\n  /** DEADLINE_EXCEEDED. */\n  DEADLINE_EXCEEDED: 4,\n  /** NOT_FOUND. */\n  NOT_FOUND: 5,\n  /** ALREADY_EXISTS. */\n  ALREADY_EXISTS: 6,\n  /** PERMISSION_DENIED. */\n  PERMISSION_DENIED: 7,\n  /** RESOURCE_EXHAUSTED. */\n  RESOURCE_EXHAUSTED: 8,\n  /** FAILED_PRECONDITION. */\n  FAILED_PRECONDITION: 9,\n  /** ABORTED. */\n  ABORTED: 10,\n  /** OUT_OF_RANGE. */\n  OUT_OF_RANGE: 11,\n  /** UNIMPLEMENTED. */\n  UNIMPLEMENTED: 12,\n  /** INTERNAL. */\n  INTERNAL: 13,\n  /** UNAVAILABLE. */\n  UNAVAILABLE: 14,\n  /** DATA_LOSS. */\n  DATA_LOSS: 15,\n  /** UNAUTHENTICATED. */\n  UNAUTHENTICATED: 16,\n} as const;\nexport type RpcGrpcStatusCodeValues =\n  (typeof RpcGrpcStatusCodeValues)[keyof typeof RpcGrpcStatusCodeValues];\n\nexport const MessageTypeValues = {\n  /** sent. */\n  SENT: 'SENT',\n  /** received. */\n  RECEIVED: 'RECEIVED',\n} as const;\nexport type MessageTypeValues =\n  (typeof MessageTypeValues)[keyof typeof MessageTypeValues];\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport * from './SemanticAttributes';\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// DO NOT EDIT, this is an Auto-generated file from scripts/semconv/templates//templates/SemanticAttributes.ts.j2\nexport const SemanticResourceAttributes = {\n  /**\n   * Name of the cloud provider.\n   */\n  CLOUD_PROVIDER: 'cloud.provider',\n\n  /**\n   * The cloud account ID the resource is assigned to.\n   */\n  CLOUD_ACCOUNT_ID: 'cloud.account.id',\n\n  /**\n   * The geographical region the resource is running. Refer to your provider&#39;s docs to see the available regions, for example [Alibaba Cloud regions](https://www.alibabacloud.com/help/doc-detail/40654.htm), [AWS regions](https://aws.amazon.com/about-aws/global-infrastructure/regions_az/), [Azure regions](https://azure.microsoft.com/en-us/global-infrastructure/geographies/), or [Google Cloud regions](https://cloud.google.com/about/locations).\n   */\n  CLOUD_REGION: 'cloud.region',\n\n  /**\n   * Cloud regions often have multiple, isolated locations known as zones to increase availability. Availability zone represents the zone where the resource is running.\n   *\n   * Note: Availability zones are called &#34;zones&#34; on Alibaba Cloud and Google Cloud.\n   */\n  CLOUD_AVAILABILITY_ZONE: 'cloud.availability_zone',\n\n  /**\n   * The cloud platform in use.\n   *\n   * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n   */\n  CLOUD_PLATFORM: 'cloud.platform',\n\n  /**\n   * The Amazon Resource Name (ARN) of an [ECS container instance](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ECS_instances.html).\n   */\n  AWS_ECS_CONTAINER_ARN: 'aws.ecs.container.arn',\n\n  /**\n   * The ARN of an [ECS cluster](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/clusters.html).\n   */\n  AWS_ECS_CLUSTER_ARN: 'aws.ecs.cluster.arn',\n\n  /**\n   * The [launch type](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html) for an ECS task.\n   */\n  AWS_ECS_LAUNCHTYPE: 'aws.ecs.launchtype',\n\n  /**\n   * The ARN of an [ECS task definition](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definitions.html).\n   */\n  AWS_ECS_TASK_ARN: 'aws.ecs.task.arn',\n\n  /**\n   * The task definition family this task definition is a member of.\n   */\n  AWS_ECS_TASK_FAMILY: 'aws.ecs.task.family',\n\n  /**\n   * The revision for this task definition.\n   */\n  AWS_ECS_TASK_REVISION: 'aws.ecs.task.revision',\n\n  /**\n   * The ARN of an EKS cluster.\n   */\n  AWS_EKS_CLUSTER_ARN: 'aws.eks.cluster.arn',\n\n  /**\n   * The name(s) of the AWS log group(s) an application is writing to.\n   *\n   * Note: Multiple log groups must be supported for cases like multi-container applications, where a single application has sidecar containers, and each write to their own log group.\n   */\n  AWS_LOG_GROUP_NAMES: 'aws.log.group.names',\n\n  /**\n   * The Amazon Resource Name(s) (ARN) of the AWS log group(s).\n   *\n   * Note: See the [log group ARN format documentation](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/iam-access-control-overview-cwl.html#CWL_ARN_Format).\n   */\n  AWS_LOG_GROUP_ARNS: 'aws.log.group.arns',\n\n  /**\n   * The name(s) of the AWS log stream(s) an application is writing to.\n   */\n  AWS_LOG_STREAM_NAMES: 'aws.log.stream.names',\n\n  /**\n   * The ARN(s) of the AWS log stream(s).\n   *\n   * Note: See the [log stream ARN format documentation](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/iam-access-control-overview-cwl.html#CWL_ARN_Format). One log group can contain several log streams, so these ARNs necessarily identify both a log group and a log stream.\n   */\n  AWS_LOG_STREAM_ARNS: 'aws.log.stream.arns',\n\n  /**\n   * Container name.\n   */\n  CONTAINER_NAME: 'container.name',\n\n  /**\n   * Container ID. Usually a UUID, as for example used to [identify Docker containers](https://docs.docker.com/engine/reference/run/#container-identification). The UUID might be abbreviated.\n   */\n  CONTAINER_ID: 'container.id',\n\n  /**\n   * The container runtime managing this container.\n   */\n  CONTAINER_RUNTIME: 'container.runtime',\n\n  /**\n   * Name of the image the container was built on.\n   */\n  CONTAINER_IMAGE_NAME: 'container.image.name',\n\n  /**\n   * Container image tag.\n   */\n  CONTAINER_IMAGE_TAG: 'container.image.tag',\n\n  /**\n   * Name of the [deployment environment](https://en.wikipedia.org/wiki/Deployment_environment) (aka deployment tier).\n   */\n  DEPLOYMENT_ENVIRONMENT: 'deployment.environment',\n\n  /**\n   * A unique identifier representing the device.\n   *\n   * Note: The device identifier MUST only be defined using the values outlined below. This value is not an advertising identifier and MUST NOT be used as such. On iOS (Swift or Objective-C), this value MUST be equal to the [vendor identifier](https://developer.apple.com/documentation/uikit/uidevice/1620059-identifierforvendor). On Android (Java or Kotlin), this value MUST be equal to the Firebase Installation ID or a globally unique UUID which is persisted across sessions in your application. More information can be found [here](https://developer.android.com/training/articles/user-data-ids) on best practices and exact implementation details. Caution should be taken when storing personal data or anything which can identify a user. GDPR and data protection laws may apply, ensure you do your own due diligence.\n   */\n  DEVICE_ID: 'device.id',\n\n  /**\n   * The model identifier for the device.\n   *\n   * Note: It&#39;s recommended this value represents a machine readable version of the model identifier rather than the market or consumer-friendly name of the device.\n   */\n  DEVICE_MODEL_IDENTIFIER: 'device.model.identifier',\n\n  /**\n   * The marketing name for the device model.\n   *\n   * Note: It&#39;s recommended this value represents a human readable version of the device model rather than a machine readable alternative.\n   */\n  DEVICE_MODEL_NAME: 'device.model.name',\n\n  /**\n   * The name of the single function that this runtime instance executes.\n   *\n   * Note: This is the name of the function as configured/deployed on the FaaS platform and is usually different from the name of the callback function (which may be stored in the [`code.namespace`/`code.function`](../../trace/semantic_conventions/span-general.md#source-code-attributes) span attributes).\n   */\n  FAAS_NAME: 'faas.name',\n\n  /**\n  * The unique ID of the single function that this runtime instance executes.\n  *\n  * Note: Depending on the cloud provider, use:\n\n* **AWS Lambda:** The function [ARN](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html).\nTake care not to use the &#34;invoked ARN&#34; directly but replace any\n[alias suffix](https://docs.aws.amazon.com/lambda/latest/dg/configuration-aliases.html) with the resolved function version, as the same runtime instance may be invokable with multiple\ndifferent aliases.\n* **GCP:** The [URI of the resource](https://cloud.google.com/iam/docs/full-resource-names)\n* **Azure:** The [Fully Qualified Resource ID](https://docs.microsoft.com/en-us/rest/api/resources/resources/get-by-id).\n\nOn some providers, it may not be possible to determine the full ID at startup,\nwhich is why this field cannot be made required. For example, on AWS the account ID\npart of the ARN is not available without calling another AWS API\nwhich may be deemed too slow for a short-running lambda function.\nAs an alternative, consider setting `faas.id` as a span attribute instead.\n  */\n  FAAS_ID: 'faas.id',\n\n  /**\n  * The immutable version of the function being executed.\n  *\n  * Note: Depending on the cloud provider and platform, use:\n\n* **AWS Lambda:** The [function version](https://docs.aws.amazon.com/lambda/latest/dg/configuration-versions.html)\n  (an integer represented as a decimal string).\n* **Google Cloud Run:** The [revision](https://cloud.google.com/run/docs/managing/revisions)\n  (i.e., the function name plus the revision suffix).\n* **Google Cloud Functions:** The value of the\n  [`K_REVISION` environment variable](https://cloud.google.com/functions/docs/env-var#runtime_environment_variables_set_automatically).\n* **Azure Functions:** Not applicable. Do not set this attribute.\n  */\n  FAAS_VERSION: 'faas.version',\n\n  /**\n   * The execution environment ID as a string, that will be potentially reused for other invocations to the same function/function version.\n   *\n   * Note: * **AWS Lambda:** Use the (full) log stream name.\n   */\n  FAAS_INSTANCE: 'faas.instance',\n\n  /**\n   * The amount of memory available to the serverless function in MiB.\n   *\n   * Note: It&#39;s recommended to set this attribute since e.g. too little memory can easily stop a Java AWS Lambda function from working correctly. On AWS Lambda, the environment variable `AWS_LAMBDA_FUNCTION_MEMORY_SIZE` provides this information.\n   */\n  FAAS_MAX_MEMORY: 'faas.max_memory',\n\n  /**\n   * Unique host ID. For Cloud, this must be the instance_id assigned by the cloud provider.\n   */\n  HOST_ID: 'host.id',\n\n  /**\n   * Name of the host. On Unix systems, it may contain what the hostname command returns, or the fully qualified hostname, or another name specified by the user.\n   */\n  HOST_NAME: 'host.name',\n\n  /**\n   * Type of host. For Cloud, this must be the machine type.\n   */\n  HOST_TYPE: 'host.type',\n\n  /**\n   * The CPU architecture the host system is running on.\n   */\n  HOST_ARCH: 'host.arch',\n\n  /**\n   * Name of the VM image or OS install the host was instantiated from.\n   */\n  HOST_IMAGE_NAME: 'host.image.name',\n\n  /**\n   * VM image ID. For Cloud, this value is from the provider.\n   */\n  HOST_IMAGE_ID: 'host.image.id',\n\n  /**\n   * The version string of the VM image as defined in [Version SpanAttributes](README.md#version-attributes).\n   */\n  HOST_IMAGE_VERSION: 'host.image.version',\n\n  /**\n   * The name of the cluster.\n   */\n  K8S_CLUSTER_NAME: 'k8s.cluster.name',\n\n  /**\n   * The name of the Node.\n   */\n  K8S_NODE_NAME: 'k8s.node.name',\n\n  /**\n   * The UID of the Node.\n   */\n  K8S_NODE_UID: 'k8s.node.uid',\n\n  /**\n   * The name of the namespace that the pod is running in.\n   */\n  K8S_NAMESPACE_NAME: 'k8s.namespace.name',\n\n  /**\n   * The UID of the Pod.\n   */\n  K8S_POD_UID: 'k8s.pod.uid',\n\n  /**\n   * The name of the Pod.\n   */\n  K8S_POD_NAME: 'k8s.pod.name',\n\n  /**\n   * The name of the Container in a Pod template.\n   */\n  K8S_CONTAINER_NAME: 'k8s.container.name',\n\n  /**\n   * The UID of the ReplicaSet.\n   */\n  K8S_REPLICASET_UID: 'k8s.replicaset.uid',\n\n  /**\n   * The name of the ReplicaSet.\n   */\n  K8S_REPLICASET_NAME: 'k8s.replicaset.name',\n\n  /**\n   * The UID of the Deployment.\n   */\n  K8S_DEPLOYMENT_UID: 'k8s.deployment.uid',\n\n  /**\n   * The name of the Deployment.\n   */\n  K8S_DEPLOYMENT_NAME: 'k8s.deployment.name',\n\n  /**\n   * The UID of the StatefulSet.\n   */\n  K8S_STATEFULSET_UID: 'k8s.statefulset.uid',\n\n  /**\n   * The name of the StatefulSet.\n   */\n  K8S_STATEFULSET_NAME: 'k8s.statefulset.name',\n\n  /**\n   * The UID of the DaemonSet.\n   */\n  K8S_DAEMONSET_UID: 'k8s.daemonset.uid',\n\n  /**\n   * The name of the DaemonSet.\n   */\n  K8S_DAEMONSET_NAME: 'k8s.daemonset.name',\n\n  /**\n   * The UID of the Job.\n   */\n  K8S_JOB_UID: 'k8s.job.uid',\n\n  /**\n   * The name of the Job.\n   */\n  K8S_JOB_NAME: 'k8s.job.name',\n\n  /**\n   * The UID of the CronJob.\n   */\n  K8S_CRONJOB_UID: 'k8s.cronjob.uid',\n\n  /**\n   * The name of the CronJob.\n   */\n  K8S_CRONJOB_NAME: 'k8s.cronjob.name',\n\n  /**\n   * The operating system type.\n   */\n  OS_TYPE: 'os.type',\n\n  /**\n   * Human readable (not intended to be parsed) OS version information, like e.g. reported by `ver` or `lsb_release -a` commands.\n   */\n  OS_DESCRIPTION: 'os.description',\n\n  /**\n   * Human readable operating system name.\n   */\n  OS_NAME: 'os.name',\n\n  /**\n   * The version string of the operating system as defined in [Version SpanAttributes](../../resource/semantic_conventions/README.md#version-attributes).\n   */\n  OS_VERSION: 'os.version',\n\n  /**\n   * Process identifier (PID).\n   */\n  PROCESS_PID: 'process.pid',\n\n  /**\n   * The name of the process executable. On Linux based systems, can be set to the `Name` in `proc/[pid]/status`. On Windows, can be set to the base name of `GetProcessImageFileNameW`.\n   */\n  PROCESS_EXECUTABLE_NAME: 'process.executable.name',\n\n  /**\n   * The full path to the process executable. On Linux based systems, can be set to the target of `proc/[pid]/exe`. On Windows, can be set to the result of `GetProcessImageFileNameW`.\n   */\n  PROCESS_EXECUTABLE_PATH: 'process.executable.path',\n\n  /**\n   * The command used to launch the process (i.e. the command name). On Linux based systems, can be set to the zeroth string in `proc/[pid]/cmdline`. On Windows, can be set to the first parameter extracted from `GetCommandLineW`.\n   */\n  PROCESS_COMMAND: 'process.command',\n\n  /**\n   * The full command used to launch the process as a single string representing the full command. On Windows, can be set to the result of `GetCommandLineW`. Do not set this if you have to assemble it just for monitoring; use `process.command_args` instead.\n   */\n  PROCESS_COMMAND_LINE: 'process.command_line',\n\n  /**\n   * All the command arguments (including the command/executable itself) as received by the process. On Linux-based systems (and some other Unixoid systems supporting procfs), can be set according to the list of null-delimited strings extracted from `proc/[pid]/cmdline`. For libc-based executables, this would be the full argv vector passed to `main`.\n   */\n  PROCESS_COMMAND_ARGS: 'process.command_args',\n\n  /**\n   * The username of the user that owns the process.\n   */\n  PROCESS_OWNER: 'process.owner',\n\n  /**\n   * The name of the runtime of this process. For compiled native binaries, this SHOULD be the name of the compiler.\n   */\n  PROCESS_RUNTIME_NAME: 'process.runtime.name',\n\n  /**\n   * The version of the runtime of this process, as returned by the runtime without modification.\n   */\n  PROCESS_RUNTIME_VERSION: 'process.runtime.version',\n\n  /**\n   * An additional description about the runtime of the process, for example a specific vendor customization of the runtime environment.\n   */\n  PROCESS_RUNTIME_DESCRIPTION: 'process.runtime.description',\n\n  /**\n   * Logical name of the service.\n   *\n   * Note: MUST be the same for all instances of horizontally scaled services. If the value was not specified, SDKs MUST fallback to `unknown_service:` concatenated with [`process.executable.name`](process.md#process), e.g. `unknown_service:bash`. If `process.executable.name` is not available, the value MUST be set to `unknown_service`.\n   */\n  SERVICE_NAME: 'service.name',\n\n  /**\n   * A namespace for `service.name`.\n   *\n   * Note: A string value having a meaning that helps to distinguish a group of services, for example the team name that owns a group of services. `service.name` is expected to be unique within the same namespace. If `service.namespace` is not specified in the Resource then `service.name` is expected to be unique for all services that have no explicit namespace defined (so the empty/unspecified namespace is simply one more valid namespace). Zero-length namespace string is assumed equal to unspecified namespace.\n   */\n  SERVICE_NAMESPACE: 'service.namespace',\n\n  /**\n   * The string ID of the service instance.\n   *\n   * Note: MUST be unique for each instance of the same `service.namespace,service.name` pair (in other words `service.namespace,service.name,service.instance.id` triplet MUST be globally unique). The ID helps to distinguish instances of the same service that exist at the same time (e.g. instances of a horizontally scaled service). It is preferable for the ID to be persistent and stay the same for the lifetime of the service instance, however it is acceptable that the ID is ephemeral and changes during important lifetime events for the service (e.g. service restarts). If the service has no inherent unique ID that can be used as the value of this attribute it is recommended to generate a random Version 1 or Version 4 RFC 4122 UUID (services aiming for reproducible UUIDs may also use Version 5, see RFC 4122 for more recommendations).\n   */\n  SERVICE_INSTANCE_ID: 'service.instance.id',\n\n  /**\n   * The version string of the service API or implementation.\n   */\n  SERVICE_VERSION: 'service.version',\n\n  /**\n   * The name of the telemetry SDK as defined above.\n   */\n  TELEMETRY_SDK_NAME: 'telemetry.sdk.name',\n\n  /**\n   * The language of the telemetry SDK.\n   */\n  TELEMETRY_SDK_LANGUAGE: 'telemetry.sdk.language',\n\n  /**\n   * The version string of the telemetry SDK.\n   */\n  TELEMETRY_SDK_VERSION: 'telemetry.sdk.version',\n\n  /**\n   * The version string of the auto instrumentation agent, if used.\n   */\n  TELEMETRY_AUTO_VERSION: 'telemetry.auto.version',\n\n  /**\n   * The name of the web engine.\n   */\n  WEBENGINE_NAME: 'webengine.name',\n\n  /**\n   * The version of the web engine.\n   */\n  WEBENGINE_VERSION: 'webengine.version',\n\n  /**\n   * Additional description of the web engine (e.g. detailed version and edition information).\n   */\n  WEBENGINE_DESCRIPTION: 'webengine.description',\n};\n\nexport const CloudProviderValues = {\n  /** Alibaba Cloud. */\n  ALIBABA_CLOUD: 'alibaba_cloud',\n  /** Amazon Web Services. */\n  AWS: 'aws',\n  /** Microsoft Azure. */\n  AZURE: 'azure',\n  /** Google Cloud Platform. */\n  GCP: 'gcp',\n} as const;\nexport type CloudProviderValues =\n  (typeof CloudProviderValues)[keyof typeof CloudProviderValues];\n\nexport const CloudPlatformValues = {\n  /** Alibaba Cloud Elastic Compute Service. */\n  ALIBABA_CLOUD_ECS: 'alibaba_cloud_ecs',\n  /** Alibaba Cloud Function Compute. */\n  ALIBABA_CLOUD_FC: 'alibaba_cloud_fc',\n  /** AWS Elastic Compute Cloud. */\n  AWS_EC2: 'aws_ec2',\n  /** AWS Elastic Container Service. */\n  AWS_ECS: 'aws_ecs',\n  /** AWS Elastic Kubernetes Service. */\n  AWS_EKS: 'aws_eks',\n  /** AWS Lambda. */\n  AWS_LAMBDA: 'aws_lambda',\n  /** AWS Elastic Beanstalk. */\n  AWS_ELASTIC_BEANSTALK: 'aws_elastic_beanstalk',\n  /** Azure Virtual Machines. */\n  AZURE_VM: 'azure_vm',\n  /** Azure Container Instances. */\n  AZURE_CONTAINER_INSTANCES: 'azure_container_instances',\n  /** Azure Kubernetes Service. */\n  AZURE_AKS: 'azure_aks',\n  /** Azure Functions. */\n  AZURE_FUNCTIONS: 'azure_functions',\n  /** Azure App Service. */\n  AZURE_APP_SERVICE: 'azure_app_service',\n  /** Google Cloud Compute Engine (GCE). */\n  GCP_COMPUTE_ENGINE: 'gcp_compute_engine',\n  /** Google Cloud Run. */\n  GCP_CLOUD_RUN: 'gcp_cloud_run',\n  /** Google Cloud Kubernetes Engine (GKE). */\n  GCP_KUBERNETES_ENGINE: 'gcp_kubernetes_engine',\n  /** Google Cloud Functions (GCF). */\n  GCP_CLOUD_FUNCTIONS: 'gcp_cloud_functions',\n  /** Google Cloud App Engine (GAE). */\n  GCP_APP_ENGINE: 'gcp_app_engine',\n} as const;\nexport type CloudPlatformValues =\n  (typeof CloudPlatformValues)[keyof typeof CloudPlatformValues];\n\nexport const AwsEcsLaunchtypeValues = {\n  /** ec2. */\n  EC2: 'ec2',\n  /** fargate. */\n  FARGATE: 'fargate',\n} as const;\nexport type AwsEcsLaunchtypeValues =\n  (typeof AwsEcsLaunchtypeValues)[keyof typeof AwsEcsLaunchtypeValues];\n\nexport const HostArchValues = {\n  /** AMD64. */\n  AMD64: 'amd64',\n  /** ARM32. */\n  ARM32: 'arm32',\n  /** ARM64. */\n  ARM64: 'arm64',\n  /** Itanium. */\n  IA64: 'ia64',\n  /** 32-bit PowerPC. */\n  PPC32: 'ppc32',\n  /** 64-bit PowerPC. */\n  PPC64: 'ppc64',\n  /** 32-bit x86. */\n  X86: 'x86',\n} as const;\nexport type HostArchValues =\n  (typeof HostArchValues)[keyof typeof HostArchValues];\n\nexport const OsTypeValues = {\n  /** Microsoft Windows. */\n  WINDOWS: 'windows',\n  /** Linux. */\n  LINUX: 'linux',\n  /** Apple Darwin. */\n  DARWIN: 'darwin',\n  /** FreeBSD. */\n  FREEBSD: 'freebsd',\n  /** NetBSD. */\n  NETBSD: 'netbsd',\n  /** OpenBSD. */\n  OPENBSD: 'openbsd',\n  /** DragonFly BSD. */\n  DRAGONFLYBSD: 'dragonflybsd',\n  /** HP-UX (Hewlett Packard Unix). */\n  HPUX: 'hpux',\n  /** AIX (Advanced Interactive eXecutive). */\n  AIX: 'aix',\n  /** Oracle Solaris. */\n  SOLARIS: 'solaris',\n  /** IBM z/OS. */\n  Z_OS: 'z_os',\n} as const;\nexport type OsTypeValues = (typeof OsTypeValues)[keyof typeof OsTypeValues];\n\nexport const TelemetrySdkLanguageValues = {\n  /** cpp. */\n  CPP: 'cpp',\n  /** dotnet. */\n  DOTNET: 'dotnet',\n  /** erlang. */\n  ERLANG: 'erlang',\n  /** go. */\n  GO: 'go',\n  /** java. */\n  JAVA: 'java',\n  /** nodejs. */\n  NODEJS: 'nodejs',\n  /** php. */\n  PHP: 'php',\n  /** python. */\n  PYTHON: 'python',\n  /** ruby. */\n  RUBY: 'ruby',\n  /** webjs. */\n  WEBJS: 'webjs',\n} as const;\nexport type TelemetrySdkLanguageValues =\n  (typeof TelemetrySdkLanguageValues)[keyof typeof TelemetrySdkLanguageValues];\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport * from './SemanticResourceAttributes';\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport * from './trace';\nexport * from './resource';\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { VERSION } from '../../version';\nimport {\n  TelemetrySdkLanguageValues,\n  SemanticResourceAttributes,\n} from '@opentelemetry/semantic-conventions';\n\n/** Constants describing the SDK in use */\nexport const SDK_INFO = {\n  [SemanticResourceAttributes.TELEMETRY_SDK_NAME]: 'opentelemetry',\n  [SemanticResourceAttributes.PROCESS_RUNTIME_NAME]: 'node',\n  [SemanticResourceAttributes.TELEMETRY_SDK_LANGUAGE]:\n    TelemetrySdkLanguageValues.NODEJS,\n  [SemanticResourceAttributes.TELEMETRY_SDK_VERSION]: VERSION,\n};\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport function unrefTimer(timer: NodeJS.Timer): void {\n  timer.unref();\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport * from './environment';\nexport * from './globalThis';\nexport * from './hex-to-base64';\nexport * from './RandomIdGenerator';\nexport * from './performance';\nexport * from './sdk-info';\nexport * from './timer-util';\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport * from './node';\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as api from '@opentelemetry/api';\nimport { otperformance as performance } from '../platform';\nimport { TimeOriginLegacy } from './types';\n\nconst NANOSECOND_DIGITS = 9;\nconst NANOSECOND_DIGITS_IN_MILLIS = 6;\nconst MILLISECONDS_TO_NANOSECONDS = Math.pow(10, NANOSECOND_DIGITS_IN_MILLIS);\nconst SECOND_TO_NANOSECONDS = Math.pow(10, NANOSECOND_DIGITS);\n\n/**\n * Converts a number of milliseconds from epoch to HrTime([seconds, remainder in nanoseconds]).\n * @param epochMillis\n */\nexport function millisToHrTime(epochMillis: number): api.HrTime {\n  const epochSeconds = epochMillis / 1000;\n  // Decimals only.\n  const seconds = Math.trunc(epochSeconds);\n  // Round sub-nanosecond accuracy to nanosecond.\n  const nanos = Math.round((epochMillis % 1000) * MILLISECONDS_TO_NANOSECONDS);\n  return [seconds, nanos];\n}\n\nexport function getTimeOrigin(): number {\n  let timeOrigin = performance.timeOrigin;\n  if (typeof timeOrigin !== 'number') {\n    const perf: TimeOriginLegacy = performance as unknown as TimeOriginLegacy;\n    timeOrigin = perf.timing && perf.timing.fetchStart;\n  }\n  return timeOrigin;\n}\n\n/**\n * Returns an hrtime calculated via performance component.\n * @param performanceNow\n */\nexport function hrTime(performanceNow?: number): api.HrTime {\n  const timeOrigin = millisToHrTime(getTimeOrigin());\n  const now = millisToHrTime(\n    typeof performanceNow === 'number' ? performanceNow : performance.now()\n  );\n\n  return addHrTimes(timeOrigin, now);\n}\n\n/**\n *\n * Converts a TimeInput to an HrTime, defaults to _hrtime().\n * @param time\n */\nexport function timeInputToHrTime(time: api.TimeInput): api.HrTime {\n  // process.hrtime\n  if (isTimeInputHrTime(time)) {\n    return time as api.HrTime;\n  } else if (typeof time === 'number') {\n    // Must be a performance.now() if it's smaller than process start time.\n    if (time < getTimeOrigin()) {\n      return hrTime(time);\n    } else {\n      // epoch milliseconds or performance.timeOrigin\n      return millisToHrTime(time);\n    }\n  } else if (time instanceof Date) {\n    return millisToHrTime(time.getTime());\n  } else {\n    throw TypeError('Invalid input type');\n  }\n}\n\n/**\n * Returns a duration of two hrTime.\n * @param startTime\n * @param endTime\n */\nexport function hrTimeDuration(\n  startTime: api.HrTime,\n  endTime: api.HrTime\n): api.HrTime {\n  let seconds = endTime[0] - startTime[0];\n  let nanos = endTime[1] - startTime[1];\n\n  // overflow\n  if (nanos < 0) {\n    seconds -= 1;\n    // negate\n    nanos += SECOND_TO_NANOSECONDS;\n  }\n\n  return [seconds, nanos];\n}\n\n/**\n * Convert hrTime to timestamp, for example \"2019-05-14T17:00:00.000123456Z\"\n * @param time\n */\nexport function hrTimeToTimeStamp(time: api.HrTime): string {\n  const precision = NANOSECOND_DIGITS;\n  const tmp = `${'0'.repeat(precision)}${time[1]}Z`;\n  const nanoString = tmp.substr(tmp.length - precision - 1);\n  const date = new Date(time[0] * 1000).toISOString();\n  return date.replace('000Z', nanoString);\n}\n\n/**\n * Convert hrTime to nanoseconds.\n * @param time\n */\nexport function hrTimeToNanoseconds(time: api.HrTime): number {\n  return time[0] * SECOND_TO_NANOSECONDS + time[1];\n}\n\n/**\n * Convert hrTime to milliseconds.\n * @param time\n */\nexport function hrTimeToMilliseconds(time: api.HrTime): number {\n  return time[0] * 1e3 + time[1] / 1e6;\n}\n\n/**\n * Convert hrTime to microseconds.\n * @param time\n */\nexport function hrTimeToMicroseconds(time: api.HrTime): number {\n  return time[0] * 1e6 + time[1] / 1e3;\n}\n\n/**\n * check if time is HrTime\n * @param value\n */\nexport function isTimeInputHrTime(value: unknown): value is api.HrTime {\n  return (\n    Array.isArray(value) &&\n    value.length === 2 &&\n    typeof value[0] === 'number' &&\n    typeof value[1] === 'number'\n  );\n}\n\n/**\n * check if input value is a correct types.TimeInput\n * @param value\n */\nexport function isTimeInput(\n  value: unknown\n): value is api.HrTime | number | Date {\n  return (\n    isTimeInputHrTime(value) ||\n    typeof value === 'number' ||\n    value instanceof Date\n  );\n}\n\n/**\n * Given 2 HrTime formatted times, return their sum as an HrTime.\n */\nexport function addHrTimes(time1: api.HrTime, time2: api.HrTime): api.HrTime {\n  const out = [time1[0] + time2[0], time1[1] + time2[1]] as api.HrTime;\n\n  // Nanoseconds\n  if (out[1] >= SECOND_TO_NANOSECONDS) {\n    out[1] -= SECOND_TO_NANOSECONDS;\n    out[0] += 1;\n  }\n\n  return out;\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport interface ExportResult {\n  code: ExportResultCode;\n  error?: Error;\n}\n\nexport enum ExportResultCode {\n  SUCCESS,\n  FAILED,\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Context,\n  TextMapGetter,\n  TextMapPropagator,\n  diag,\n  TextMapSetter,\n} from '@opentelemetry/api';\n\n/** Configuration object for composite propagator */\nexport interface CompositePropagatorConfig {\n  /**\n   * List of propagators to run. Propagators run in the\n   * list order. If a propagator later in the list writes the same context\n   * key as a propagator earlier in the list, the later on will \"win\".\n   */\n  propagators?: TextMapPropagator[];\n}\n\n/** Combines multiple propagators into a single propagator. */\nexport class CompositePropagator implements TextMapPropagator {\n  private readonly _propagators: TextMapPropagator[];\n  private readonly _fields: string[];\n\n  /**\n   * Construct a composite propagator from a list of propagators.\n   *\n   * @param [config] Configuration object for composite propagator\n   */\n  constructor(config: CompositePropagatorConfig = {}) {\n    this._propagators = config.propagators ?? [];\n\n    this._fields = Array.from(\n      new Set(\n        this._propagators\n          // older propagators may not have fields function, null check to be sure\n          .map(p => (typeof p.fields === 'function' ? p.fields() : []))\n          .reduce((x, y) => x.concat(y), [])\n      )\n    );\n  }\n\n  /**\n   * Run each of the configured propagators with the given context and carrier.\n   * Propagators are run in the order they are configured, so if multiple\n   * propagators write the same carrier key, the propagator later in the list\n   * will \"win\".\n   *\n   * @param context Context to inject\n   * @param carrier Carrier into which context will be injected\n   */\n  inject(context: Context, carrier: unknown, setter: TextMapSetter): void {\n    for (const propagator of this._propagators) {\n      try {\n        propagator.inject(context, carrier, setter);\n      } catch (err) {\n        diag.warn(\n          `Failed to inject with ${propagator.constructor.name}. Err: ${err.message}`\n        );\n      }\n    }\n  }\n\n  /**\n   * Run each of the configured propagators with the given context and carrier.\n   * Propagators are run in the order they are configured, so if multiple\n   * propagators write the same context key, the propagator later in the list\n   * will \"win\".\n   *\n   * @param context Context to add values to\n   * @param carrier Carrier from which to extract context\n   */\n  extract(context: Context, carrier: unknown, getter: TextMapGetter): Context {\n    return this._propagators.reduce((ctx, propagator) => {\n      try {\n        return propagator.extract(ctx, carrier, getter);\n      } catch (err) {\n        diag.warn(\n          `Failed to inject with ${propagator.constructor.name}. Err: ${err.message}`\n        );\n      }\n      return ctx;\n    }, context);\n  }\n\n  fields(): string[] {\n    // return a new array so our fields cannot be modified\n    return this._fields.slice();\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst VALID_KEY_CHAR_RANGE = '[_0-9a-z-*/]';\nconst VALID_KEY = `[a-z]${VALID_KEY_CHAR_RANGE}{0,255}`;\nconst VALID_VENDOR_KEY = `[a-z0-9]${VALID_KEY_CHAR_RANGE}{0,240}@[a-z]${VALID_KEY_CHAR_RANGE}{0,13}`;\nconst VALID_KEY_REGEX = new RegExp(`^(?:${VALID_KEY}|${VALID_VENDOR_KEY})$`);\nconst VALID_VALUE_BASE_REGEX = /^[ -~]{0,255}[!-~]$/;\nconst INVALID_VALUE_COMMA_EQUAL_REGEX = /,|=/;\n\n/**\n * Key is opaque string up to 256 characters printable. It MUST begin with a\n * lowercase letter, and can only contain lowercase letters a-z, digits 0-9,\n * underscores _, dashes -, asterisks *, and forward slashes /.\n * For multi-tenant vendor scenarios, an at sign (@) can be used to prefix the\n * vendor name. Vendors SHOULD set the tenant ID at the beginning of the key.\n * see https://www.w3.org/TR/trace-context/#key\n */\nexport function validateKey(key: string): boolean {\n  return VALID_KEY_REGEX.test(key);\n}\n\n/**\n * Value is opaque string up to 256 characters printable ASCII RFC0020\n * characters (i.e., the range 0x20 to 0x7E) except comma , and =.\n */\nexport function validateValue(value: string): boolean {\n  return (\n    VALID_VALUE_BASE_REGEX.test(value) &&\n    !INVALID_VALUE_COMMA_EQUAL_REGEX.test(value)\n  );\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as api from '@opentelemetry/api';\nimport { validateKey, validateValue } from '../internal/validators';\n\nconst MAX_TRACE_STATE_ITEMS = 32;\nconst MAX_TRACE_STATE_LEN = 512;\nconst LIST_MEMBERS_SEPARATOR = ',';\nconst LIST_MEMBER_KEY_VALUE_SPLITTER = '=';\n\n/**\n * TraceState must be a class and not a simple object type because of the spec\n * requirement (https://www.w3.org/TR/trace-context/#tracestate-field).\n *\n * Here is the list of allowed mutations:\n * - New key-value pair should be added into the beginning of the list\n * - The value of any key can be updated. Modified keys MUST be moved to the\n * beginning of the list.\n */\nexport class TraceState implements api.TraceState {\n  private _internalState: Map<string, string> = new Map();\n\n  constructor(rawTraceState?: string) {\n    if (rawTraceState) this._parse(rawTraceState);\n  }\n\n  set(key: string, value: string): TraceState {\n    // TODO: Benchmark the different approaches(map vs list) and\n    // use the faster one.\n    const traceState = this._clone();\n    if (traceState._internalState.has(key)) {\n      traceState._internalState.delete(key);\n    }\n    traceState._internalState.set(key, value);\n    return traceState;\n  }\n\n  unset(key: string): TraceState {\n    const traceState = this._clone();\n    traceState._internalState.delete(key);\n    return traceState;\n  }\n\n  get(key: string): string | undefined {\n    return this._internalState.get(key);\n  }\n\n  serialize(): string {\n    return this._keys()\n      .reduce((agg: string[], key) => {\n        agg.push(key + LIST_MEMBER_KEY_VALUE_SPLITTER + this.get(key));\n        return agg;\n      }, [])\n      .join(LIST_MEMBERS_SEPARATOR);\n  }\n\n  private _parse(rawTraceState: string) {\n    if (rawTraceState.length > MAX_TRACE_STATE_LEN) return;\n    this._internalState = rawTraceState\n      .split(LIST_MEMBERS_SEPARATOR)\n      .reverse() // Store in reverse so new keys (.set(...)) will be placed at the beginning\n      .reduce((agg: Map<string, string>, part: string) => {\n        const listMember = part.trim(); // Optional Whitespace (OWS) handling\n        const i = listMember.indexOf(LIST_MEMBER_KEY_VALUE_SPLITTER);\n        if (i !== -1) {\n          const key = listMember.slice(0, i);\n          const value = listMember.slice(i + 1, part.length);\n          if (validateKey(key) && validateValue(value)) {\n            agg.set(key, value);\n          } else {\n            // TODO: Consider to add warning log\n          }\n        }\n        return agg;\n      }, new Map());\n\n    // Because of the reverse() requirement, trunc must be done after map is created\n    if (this._internalState.size > MAX_TRACE_STATE_ITEMS) {\n      this._internalState = new Map(\n        Array.from(this._internalState.entries())\n          .reverse() // Use reverse same as original tracestate parse chain\n          .slice(0, MAX_TRACE_STATE_ITEMS)\n      );\n    }\n  }\n\n  private _keys(): string[] {\n    return Array.from(this._internalState.keys()).reverse();\n  }\n\n  private _clone(): TraceState {\n    const traceState = new TraceState();\n    traceState._internalState = new Map(this._internalState);\n    return traceState;\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Context,\n  isSpanContextValid,\n  SpanContext,\n  TextMapGetter,\n  TextMapPropagator,\n  TextMapSetter,\n  trace,\n  TraceFlags,\n} from '@opentelemetry/api';\nimport { isTracingSuppressed } from './suppress-tracing';\nimport { TraceState } from './TraceState';\n\nexport const TRACE_PARENT_HEADER = 'traceparent';\nexport const TRACE_STATE_HEADER = 'tracestate';\n\nconst VERSION = '00';\nconst VERSION_PART = '(?!ff)[\\\\da-f]{2}';\nconst TRACE_ID_PART = '(?![0]{32})[\\\\da-f]{32}';\nconst PARENT_ID_PART = '(?![0]{16})[\\\\da-f]{16}';\nconst FLAGS_PART = '[\\\\da-f]{2}';\nconst TRACE_PARENT_REGEX = new RegExp(\n  `^\\\\s?(${VERSION_PART})-(${TRACE_ID_PART})-(${PARENT_ID_PART})-(${FLAGS_PART})(-.*)?\\\\s?$`\n);\n\n/**\n * Parses information from the [traceparent] span tag and converts it into {@link SpanContext}\n * @param traceParent - A meta property that comes from server.\n *     It should be dynamically generated server side to have the server's request trace Id,\n *     a parent span Id that was set on the server's request span,\n *     and the trace flags to indicate the server's sampling decision\n *     (01 = sampled, 00 = not sampled).\n *     for example: '{version}-{traceId}-{spanId}-{sampleDecision}'\n *     For more information see {@link https://www.w3.org/TR/trace-context/}\n */\nexport function parseTraceParent(traceParent: string): SpanContext | null {\n  const match = TRACE_PARENT_REGEX.exec(traceParent);\n  if (!match) return null;\n\n  // According to the specification the implementation should be compatible\n  // with future versions. If there are more parts, we only reject it if it's using version 00\n  // See https://www.w3.org/TR/trace-context/#versioning-of-traceparent\n  if (match[1] === '00' && match[5]) return null;\n\n  return {\n    traceId: match[2],\n    spanId: match[3],\n    traceFlags: parseInt(match[4], 16),\n  };\n}\n\n/**\n * Propagates {@link SpanContext} through Trace Context format propagation.\n *\n * Based on the Trace Context specification:\n * https://www.w3.org/TR/trace-context/\n */\nexport class W3CTraceContextPropagator implements TextMapPropagator {\n  inject(context: Context, carrier: unknown, setter: TextMapSetter): void {\n    const spanContext = trace.getSpanContext(context);\n    if (\n      !spanContext ||\n      isTracingSuppressed(context) ||\n      !isSpanContextValid(spanContext)\n    )\n      return;\n\n    const traceParent = `${VERSION}-${spanContext.traceId}-${\n      spanContext.spanId\n    }-0${Number(spanContext.traceFlags || TraceFlags.NONE).toString(16)}`;\n\n    setter.set(carrier, TRACE_PARENT_HEADER, traceParent);\n    if (spanContext.traceState) {\n      setter.set(\n        carrier,\n        TRACE_STATE_HEADER,\n        spanContext.traceState.serialize()\n      );\n    }\n  }\n\n  extract(context: Context, carrier: unknown, getter: TextMapGetter): Context {\n    const traceParentHeader = getter.get(carrier, TRACE_PARENT_HEADER);\n    if (!traceParentHeader) return context;\n    const traceParent = Array.isArray(traceParentHeader)\n      ? traceParentHeader[0]\n      : traceParentHeader;\n    if (typeof traceParent !== 'string') return context;\n    const spanContext = parseTraceParent(traceParent);\n    if (!spanContext) return context;\n\n    spanContext.isRemote = true;\n\n    const traceStateHeader = getter.get(carrier, TRACE_STATE_HEADER);\n    if (traceStateHeader) {\n      // If more than one `tracestate` header is found, we merge them into a\n      // single header.\n      const state = Array.isArray(traceStateHeader)\n        ? traceStateHeader.join(',')\n        : traceStateHeader;\n      spanContext.traceState = new TraceState(\n        typeof state === 'string' ? state : undefined\n      );\n    }\n    return trace.setSpanContext(context, spanContext);\n  }\n\n  fields(): string[] {\n    return [TRACE_PARENT_HEADER, TRACE_STATE_HEADER];\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Context, createContextKey, Span } from '@opentelemetry/api';\n\nconst RPC_METADATA_KEY = createContextKey(\n  'OpenTelemetry SDK Context Key RPC_METADATA'\n);\n\nexport enum RPCType {\n  HTTP = 'http',\n}\n\ntype HTTPMetadata = {\n  type: RPCType.HTTP;\n  route?: string;\n  span: Span;\n};\n\n/**\n * Allows for future rpc metadata to be used with this mechanism\n */\nexport type RPCMetadata = HTTPMetadata;\n\nexport function setRPCMetadata(context: Context, meta: RPCMetadata): Context {\n  return context.setValue(RPC_METADATA_KEY, meta);\n}\n\nexport function deleteRPCMetadata(context: Context): Context {\n  return context.deleteValue(RPC_METADATA_KEY);\n}\n\nexport function getRPCMetadata(context: Context): RPCMetadata | undefined {\n  return context.getValue(RPC_METADATA_KEY) as RPCMetadata | undefined;\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Sampler, SamplingDecision, SamplingResult } from '@opentelemetry/api';\n\n/**\n * @deprecated Use the one defined in @opentelemetry/sdk-trace-base instead.\n * Sampler that samples no traces.\n */\nexport class AlwaysOffSampler implements Sampler {\n  shouldSample(): SamplingResult {\n    return {\n      decision: SamplingDecision.NOT_RECORD,\n    };\n  }\n\n  toString(): string {\n    return 'AlwaysOffSampler';\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Sampler, SamplingDecision, SamplingResult } from '@opentelemetry/api';\n\n/**\n * @deprecated Use the one defined in @opentelemetry/sdk-trace-base instead.\n * Sampler that samples all traces.\n */\nexport class AlwaysOnSampler implements Sampler {\n  shouldSample(): SamplingResult {\n    return {\n      decision: SamplingDecision.RECORD_AND_SAMPLED,\n    };\n  }\n\n  toString(): string {\n    return 'AlwaysOnSampler';\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Context,\n  isSpanContextValid,\n  Link,\n  Sampler,\n  SamplingResult,\n  SpanAttributes,\n  SpanKind,\n  TraceFlags,\n  trace,\n} from '@opentelemetry/api';\nimport { globalErrorHandler } from '../../common/global-error-handler';\nimport { AlwaysOffSampler } from './AlwaysOffSampler';\nimport { AlwaysOnSampler } from './AlwaysOnSampler';\n\n/**\n * @deprecated Use the one defined in @opentelemetry/sdk-trace-base instead.\n * A composite sampler that either respects the parent span's sampling decision\n * or delegates to `delegateSampler` for root spans.\n */\nexport class ParentBasedSampler implements Sampler {\n  private _root: Sampler;\n  private _remoteParentSampled: Sampler;\n  private _remoteParentNotSampled: Sampler;\n  private _localParentSampled: Sampler;\n  private _localParentNotSampled: Sampler;\n\n  constructor(config: ParentBasedSamplerConfig) {\n    this._root = config.root;\n\n    if (!this._root) {\n      globalErrorHandler(\n        new Error('ParentBasedSampler must have a root sampler configured')\n      );\n      this._root = new AlwaysOnSampler();\n    }\n\n    this._remoteParentSampled =\n      config.remoteParentSampled ?? new AlwaysOnSampler();\n    this._remoteParentNotSampled =\n      config.remoteParentNotSampled ?? new AlwaysOffSampler();\n    this._localParentSampled =\n      config.localParentSampled ?? new AlwaysOnSampler();\n    this._localParentNotSampled =\n      config.localParentNotSampled ?? new AlwaysOffSampler();\n  }\n\n  shouldSample(\n    context: Context,\n    traceId: string,\n    spanName: string,\n    spanKind: SpanKind,\n    attributes: SpanAttributes,\n    links: Link[]\n  ): SamplingResult {\n    const parentContext = trace.getSpanContext(context);\n\n    if (!parentContext || !isSpanContextValid(parentContext)) {\n      return this._root.shouldSample(\n        context,\n        traceId,\n        spanName,\n        spanKind,\n        attributes,\n        links\n      );\n    }\n\n    if (parentContext.isRemote) {\n      if (parentContext.traceFlags & TraceFlags.SAMPLED) {\n        return this._remoteParentSampled.shouldSample(\n          context,\n          traceId,\n          spanName,\n          spanKind,\n          attributes,\n          links\n        );\n      }\n      return this._remoteParentNotSampled.shouldSample(\n        context,\n        traceId,\n        spanName,\n        spanKind,\n        attributes,\n        links\n      );\n    }\n\n    if (parentContext.traceFlags & TraceFlags.SAMPLED) {\n      return this._localParentSampled.shouldSample(\n        context,\n        traceId,\n        spanName,\n        spanKind,\n        attributes,\n        links\n      );\n    }\n\n    return this._localParentNotSampled.shouldSample(\n      context,\n      traceId,\n      spanName,\n      spanKind,\n      attributes,\n      links\n    );\n  }\n\n  toString(): string {\n    return `ParentBased{root=${this._root.toString()}, remoteParentSampled=${this._remoteParentSampled.toString()}, remoteParentNotSampled=${this._remoteParentNotSampled.toString()}, localParentSampled=${this._localParentSampled.toString()}, localParentNotSampled=${this._localParentNotSampled.toString()}}`;\n  }\n}\n\ninterface ParentBasedSamplerConfig {\n  /** Sampler called for spans with no parent */\n  root: Sampler;\n  /** Sampler called for spans with a remote parent which was sampled. Default AlwaysOn */\n  remoteParentSampled?: Sampler;\n  /** Sampler called for spans with a remote parent which was not sampled. Default AlwaysOff */\n  remoteParentNotSampled?: Sampler;\n  /** Sampler called for spans with a local parent which was sampled. Default AlwaysOn */\n  localParentSampled?: Sampler;\n  /** Sampler called for spans with a local parent which was not sampled. Default AlwaysOff */\n  localParentNotSampled?: Sampler;\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Sampler,\n  SamplingDecision,\n  SamplingResult,\n  isValidTraceId,\n} from '@opentelemetry/api';\n\n/**\n * @deprecated Use the one defined in @opentelemetry/sdk-trace-base instead.\n * Sampler that samples a given fraction of traces based of trace id deterministically.\n */\nexport class TraceIdRatioBasedSampler implements Sampler {\n  private _upperBound: number;\n\n  constructor(private readonly _ratio: number = 0) {\n    this._ratio = this._normalize(_ratio);\n    this._upperBound = Math.floor(this._ratio * 0xffffffff);\n  }\n\n  shouldSample(context: unknown, traceId: string): SamplingResult {\n    return {\n      decision:\n        isValidTraceId(traceId) && this._accumulate(traceId) < this._upperBound\n          ? SamplingDecision.RECORD_AND_SAMPLED\n          : SamplingDecision.NOT_RECORD,\n    };\n  }\n\n  toString(): string {\n    return `TraceIdRatioBased{${this._ratio}}`;\n  }\n\n  private _normalize(ratio: number): number {\n    if (typeof ratio !== 'number' || isNaN(ratio)) return 0;\n    return ratio >= 1 ? 1 : ratio <= 0 ? 0 : ratio;\n  }\n\n  private _accumulate(traceId: string): number {\n    let accumulation = 0;\n    for (let i = 0; i < traceId.length / 8; i++) {\n      const pos = i * 8;\n      const part = parseInt(traceId.slice(pos, pos + 8), 16);\n      accumulation = (accumulation ^ part) >>> 0;\n    }\n    return accumulation;\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n/**\n * based on lodash in order to support esm builds without esModuleInterop.\n * lodash is using MIT License.\n **/\n\nconst objectTag = '[object Object]';\nconst nullTag = '[object Null]';\nconst undefinedTag = '[object Undefined]';\nconst funcProto = Function.prototype;\nconst funcToString = funcProto.toString;\nconst objectCtorString = funcToString.call(Object);\nconst getPrototype = overArg(Object.getPrototypeOf, Object);\nconst objectProto = Object.prototype;\nconst hasOwnProperty = objectProto.hasOwnProperty;\nconst symToStringTag = Symbol ? Symbol.toStringTag : undefined;\nconst nativeObjectToString = objectProto.toString;\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func: Function, transform: any): any {\n  return function (arg: any) {\n    return func(transform(arg));\n  };\n}\n\n/**\n * Checks if `value` is a plain object, that is, an object created by the\n * `Object` constructor or one with a `[[Prototype]]` of `null`.\n *\n * @static\n * @memberOf _\n * @since 0.8.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n * }\n *\n * _.isPlainObject(new Foo);\n * // => false\n *\n * _.isPlainObject([1, 2, 3]);\n * // => false\n *\n * _.isPlainObject({ 'x': 0, 'y': 0 });\n * // => true\n *\n * _.isPlainObject(Object.create(null));\n * // => true\n */\nexport function isPlainObject(value: any) {\n  if (!isObjectLike(value) || baseGetTag(value) !== objectTag) {\n    return false;\n  }\n  const proto = getPrototype(value);\n  if (proto === null) {\n    return true;\n  }\n  const Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;\n  return (\n    typeof Ctor == 'function' &&\n    Ctor instanceof Ctor &&\n    funcToString.call(Ctor) === objectCtorString\n  );\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value: any) {\n  return value != null && typeof value == 'object';\n}\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value: any) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return symToStringTag && symToStringTag in Object(value)\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value: any) {\n  const isOwn = hasOwnProperty.call(value, symToStringTag as any),\n    tag = value[symToStringTag as any];\n  let unmasked = false;\n\n  try {\n    value[symToStringTag as any] = undefined;\n    unmasked = true;\n  } catch (e) {\n    // silence\n  }\n\n  const result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag as any] = tag;\n    } else {\n      delete value[symToStringTag as any];\n    }\n  }\n  return result;\n}\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value: any) {\n  return nativeObjectToString.call(value);\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport { isPlainObject } from './lodash.merge';\n\nconst MAX_LEVEL = 20;\n\ninterface ObjectInto {\n  obj: any;\n  key: string;\n}\n\n/**\n * Merges objects together\n * @param args - objects / values to be merged\n */\nexport function merge(...args: any[]): any {\n  let result: any = args.shift();\n  const objects: WeakMap<any, ObjectInto[]> | undefined = new WeakMap<\n    any,\n    ObjectInto[]\n  >();\n  while (args.length > 0) {\n    result = mergeTwoObjects(result, args.shift(), 0, objects);\n  }\n\n  return result;\n}\n\nfunction takeValue(value: any): any {\n  if (isArray(value)) {\n    return value.slice();\n  }\n  return value;\n}\n\n/**\n * Merges two objects\n * @param one - first object\n * @param two - second object\n * @param level - current deep level\n * @param objects - objects holder that has been already referenced - to prevent\n * cyclic dependency\n */\nfunction mergeTwoObjects(\n  one: any,\n  two: any,\n  level = 0,\n  objects: WeakMap<any, ObjectInto[]>\n): any {\n  let result: any;\n  if (level > MAX_LEVEL) {\n    return undefined;\n  }\n  level++;\n  if (isPrimitive(one) || isPrimitive(two) || isFunction(two)) {\n    result = takeValue(two);\n  } else if (isArray(one)) {\n    result = one.slice();\n    if (isArray(two)) {\n      for (let i = 0, j = two.length; i < j; i++) {\n        result.push(takeValue(two[i]));\n      }\n    } else if (isObject(two)) {\n      const keys = Object.keys(two);\n      for (let i = 0, j = keys.length; i < j; i++) {\n        const key = keys[i];\n        result[key] = takeValue(two[key]);\n      }\n    }\n  } else if (isObject(one)) {\n    if (isObject(two)) {\n      if (!shouldMerge(one, two)) {\n        return two;\n      }\n      result = Object.assign({}, one);\n      const keys = Object.keys(two);\n\n      for (let i = 0, j = keys.length; i < j; i++) {\n        const key = keys[i];\n        const twoValue = two[key];\n\n        if (isPrimitive(twoValue)) {\n          if (typeof twoValue === 'undefined') {\n            delete result[key];\n          } else {\n            // result[key] = takeValue(twoValue);\n            result[key] = twoValue;\n          }\n        } else {\n          const obj1 = result[key];\n          const obj2 = twoValue;\n\n          if (\n            wasObjectReferenced(one, key, objects) ||\n            wasObjectReferenced(two, key, objects)\n          ) {\n            delete result[key];\n          } else {\n            if (isObject(obj1) && isObject(obj2)) {\n              const arr1 = objects.get(obj1) || [];\n              const arr2 = objects.get(obj2) || [];\n              arr1.push({ obj: one, key });\n              arr2.push({ obj: two, key });\n              objects.set(obj1, arr1);\n              objects.set(obj2, arr2);\n            }\n\n            result[key] = mergeTwoObjects(\n              result[key],\n              twoValue,\n              level,\n              objects\n            );\n          }\n        }\n      }\n    } else {\n      result = two;\n    }\n  }\n\n  return result;\n}\n\n/**\n * Function to check if object has been already reference\n * @param obj\n * @param key\n * @param objects\n */\nfunction wasObjectReferenced(\n  obj: any,\n  key: string,\n  objects: WeakMap<any, ObjectInto[]>\n): boolean {\n  const arr = objects.get(obj[key]) || [];\n  for (let i = 0, j = arr.length; i < j; i++) {\n    const info = arr[i];\n    if (info.key === key && info.obj === obj) {\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction isArray(value: any): boolean {\n  return Array.isArray(value);\n}\n\nfunction isFunction(value: any): boolean {\n  return typeof value === 'function';\n}\n\nfunction isObject(value: any): boolean {\n  return (\n    !isPrimitive(value) &&\n    !isArray(value) &&\n    !isFunction(value) &&\n    typeof value === 'object'\n  );\n}\n\nfunction isPrimitive(value: any): boolean {\n  return (\n    typeof value === 'string' ||\n    typeof value === 'number' ||\n    typeof value === 'boolean' ||\n    typeof value === 'undefined' ||\n    value instanceof Date ||\n    value instanceof RegExp ||\n    value === null\n  );\n}\n\nfunction shouldMerge(one: any, two: any): boolean {\n  if (!isPlainObject(one) || !isPlainObject(two)) {\n    return false;\n  }\n\n  return true;\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Error that is thrown on timeouts.\n */\nexport class TimeoutError extends Error {\n  constructor(message?: string) {\n    super(message);\n\n    // manually adjust prototype to retain `instanceof` functionality when targeting ES5, see:\n    // https://github.com/Microsoft/TypeScript-wiki/blob/main/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n    Object.setPrototypeOf(this, TimeoutError.prototype);\n  }\n}\n\n/**\n * Adds a timeout to a promise and rejects if the specified timeout has elapsed. Also rejects if the specified promise\n * rejects, and resolves if the specified promise resolves.\n *\n * <p> NOTE: this operation will continue even after it throws a {@link TimeoutError}.\n *\n * @param promise promise to use with timeout.\n * @param timeout the timeout in milliseconds until the returned promise is rejected.\n */\nexport function callWithTimeout<T>(\n  promise: Promise<T>,\n  timeout: number\n): Promise<T> {\n  let timeoutHandle: ReturnType<typeof setTimeout>;\n\n  const timeoutPromise = new Promise<never>(function timeoutFunction(\n    _resolve,\n    reject\n  ) {\n    timeoutHandle = setTimeout(function timeoutHandler() {\n      reject(new TimeoutError('Operation timed out.'));\n    }, timeout);\n  });\n\n  return Promise.race([promise, timeoutPromise]).then(\n    result => {\n      clearTimeout(timeoutHandle);\n      return result;\n    },\n    reason => {\n      clearTimeout(timeoutHandle);\n      throw reason;\n    }\n  );\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport function urlMatches(url: string, urlToMatch: string | RegExp): boolean {\n  if (typeof urlToMatch === 'string') {\n    return url === urlToMatch;\n  } else {\n    return !!url.match(urlToMatch);\n  }\n}\n/**\n * Check if {@param url} should be ignored when comparing against {@param ignoredUrls}\n * @param url\n * @param ignoredUrls\n */\nexport function isUrlIgnored(\n  url: string,\n  ignoredUrls?: Array<string | RegExp>\n): boolean {\n  if (!ignoredUrls) {\n    return false;\n  }\n\n  for (const ignoreUrl of ignoredUrls) {\n    if (urlMatches(url, ignoreUrl)) {\n      return true;\n    }\n  }\n  return false;\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ShimWrapped } from '../common/types';\n\n/**\n * Checks if certain function has been already wrapped\n * @param func\n */\nexport function isWrapped(func: unknown): func is ShimWrapped {\n  return (\n    typeof func === 'function' &&\n    typeof (func as ShimWrapped).__original === 'function' &&\n    typeof (func as ShimWrapped).__unwrap === 'function' &&\n    (func as ShimWrapped).__wrapped === true\n  );\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport class Deferred<T> {\n  private _promise: Promise<T>;\n  private _resolve!: (val: T) => void;\n  private _reject!: (error: unknown) => void;\n  constructor() {\n    this._promise = new Promise((resolve, reject) => {\n      this._resolve = resolve;\n      this._reject = reject;\n    });\n  }\n\n  get promise() {\n    return this._promise;\n  }\n\n  resolve(val: T) {\n    this._resolve(val);\n  }\n\n  reject(err: unknown) {\n    this._reject(err);\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Deferred } from './promise';\n\n/**\n * Bind the callback and only invoke the callback once regardless how many times `BindOnceFuture.call` is invoked.\n */\nexport class BindOnceFuture<\n  R,\n  This = unknown,\n  T extends (this: This, ...args: unknown[]) => R = () => R,\n> {\n  private _isCalled = false;\n  private _deferred = new Deferred<R>();\n  constructor(\n    private _callback: T,\n    private _that: This\n  ) {}\n\n  get isCalled() {\n    return this._isCalled;\n  }\n\n  get promise() {\n    return this._deferred.promise;\n  }\n\n  call(...args: Parameters<T>): Promise<R> {\n    if (!this._isCalled) {\n      this._isCalled = true;\n      try {\n        Promise.resolve(this._callback.call(this._that, ...args)).then(\n          val => this._deferred.resolve(val),\n          err => this._deferred.reject(err)\n        );\n      } catch (err) {\n        this._deferred.reject(err);\n      }\n    }\n    return this._deferred.promise;\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { context } from '@opentelemetry/api';\nimport { ExportResult } from '../ExportResult';\nimport { suppressTracing } from '../trace/suppress-tracing';\n\nexport interface Exporter<T> {\n  export(arg: T, resultCallback: (result: ExportResult) => void): void;\n}\n\n/**\n * @internal\n * Shared functionality used by Exporters while exporting data, including suppresion of Traces.\n */\nexport function _export<T>(\n  exporter: Exporter<T>,\n  arg: T\n): Promise<ExportResult> {\n  return new Promise(resolve => {\n    // prevent downstream exporter calls from generating spans\n    context.with(suppressTracing(context.active()), () => {\n      exporter.export(arg, (result: ExportResult) => {\n        resolve(result);\n      });\n    });\n  });\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport * from './baggage/propagation/W3CBaggagePropagator';\nexport * from './common/anchored-clock';\nexport * from './common/attributes';\nexport * from './common/global-error-handler';\nexport * from './common/logging-error-handler';\nexport * from './common/time';\nexport * from './common/types';\nexport * from './ExportResult';\nexport * from './version';\nexport * as baggageUtils from './baggage/utils';\nexport * from './platform';\nexport * from './propagation/composite';\nexport * from './trace/W3CTraceContextPropagator';\nexport * from './trace/IdGenerator';\nexport * from './trace/rpc-metadata';\nexport * from './trace/sampler/AlwaysOffSampler';\nexport * from './trace/sampler/AlwaysOnSampler';\nexport * from './trace/sampler/ParentBasedSampler';\nexport * from './trace/sampler/TraceIdRatioBasedSampler';\nexport * from './trace/suppress-tracing';\nexport * from './trace/TraceState';\nexport * from './utils/environment';\nexport * from './utils/merge';\nexport * from './utils/sampling';\nexport * from './utils/timeout';\nexport * from './utils/url';\nexport * from './utils/wrap';\nexport * from './utils/callback';\nexport * from './version';\nimport { _export } from './internal/exporter';\nexport const internal = {\n  _export,\n};\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * AggregationTemporality indicates the way additive quantities are expressed.\n */\nexport enum AggregationTemporality {\n  DELTA,\n  CUMULATIVE,\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { HrTime, MetricAttributes } from '@opentelemetry/api';\nimport { InstrumentationScope } from '@opentelemetry/core';\nimport { IResource } from '@opentelemetry/resources';\nimport { InstrumentDescriptor } from '../InstrumentDescriptor';\nimport { AggregationTemporality } from './AggregationTemporality';\nimport { Histogram, ExponentialHistogram } from '../aggregator/types';\n\n/**\n * Basic metric data fields.\n */\ninterface BaseMetricData {\n  readonly descriptor: InstrumentDescriptor;\n  readonly aggregationTemporality: AggregationTemporality;\n  /**\n   * DataPointType of the metric instrument.\n   */\n  readonly dataPointType: DataPointType;\n}\n\n/**\n * Represents a metric data aggregated by either a LastValueAggregation or\n * SumAggregation.\n */\nexport interface SumMetricData extends BaseMetricData {\n  readonly dataPointType: DataPointType.SUM;\n  readonly dataPoints: DataPoint<number>[];\n  readonly isMonotonic: boolean;\n}\n\nexport interface GaugeMetricData extends BaseMetricData {\n  readonly dataPointType: DataPointType.GAUGE;\n  readonly dataPoints: DataPoint<number>[];\n}\n\n/**\n * Represents a metric data aggregated by a HistogramAggregation.\n */\nexport interface HistogramMetricData extends BaseMetricData {\n  readonly dataPointType: DataPointType.HISTOGRAM;\n  readonly dataPoints: DataPoint<Histogram>[];\n}\n\n/**\n * Represents a metric data aggregated by a ExponentialHistogramAggregation.\n */\nexport interface ExponentialHistogramMetricData extends BaseMetricData {\n  readonly dataPointType: DataPointType.EXPONENTIAL_HISTOGRAM;\n  readonly dataPoints: DataPoint<ExponentialHistogram>[];\n}\n\n/**\n * Represents an aggregated metric data.\n */\nexport type MetricData =\n  | SumMetricData\n  | GaugeMetricData\n  | HistogramMetricData\n  | ExponentialHistogramMetricData;\n\nexport interface ScopeMetrics {\n  scope: InstrumentationScope;\n  metrics: MetricData[];\n}\n\nexport interface ResourceMetrics {\n  resource: IResource;\n  scopeMetrics: ScopeMetrics[];\n}\n\n/**\n * Represents the collection result of the metrics. If there are any\n * non-critical errors in the collection, like throwing in a single observable\n * callback, these errors are aggregated in the {@link CollectionResult.errors}\n * array and other successfully collected metrics are returned.\n */\nexport interface CollectionResult {\n  /**\n   * Collected metrics.\n   */\n  resourceMetrics: ResourceMetrics;\n  /**\n   * Arbitrary JavaScript exception values.\n   */\n  errors: unknown[];\n}\n\n/**\n * The aggregated point data type.\n */\nexport enum DataPointType {\n  /**\n   * A histogram data point contains a histogram statistics of collected\n   * values with a list of explicit bucket boundaries and statistics such\n   * as min, max, count, and sum of all collected values.\n   */\n  HISTOGRAM,\n  /**\n   * An exponential histogram data point contains a histogram statistics of\n   * collected values where bucket boundaries are automatically calculated\n   * using an exponential function, and statistics such as min, max, count,\n   * and sum of all collected values.\n   */\n  EXPONENTIAL_HISTOGRAM,\n  /**\n   * A gauge metric data point has only a single numeric value.\n   */\n  GAUGE,\n  /**\n   * A sum metric data point has a single numeric value and a\n   * monotonicity-indicator.\n   */\n  SUM,\n}\n\n/**\n * Represents an aggregated point data with start time, end time and their\n * associated attributes and points.\n */\nexport interface DataPoint<T> {\n  /**\n   * The start epoch timestamp of the DataPoint, usually the time when\n   * the metric was created when the preferred AggregationTemporality is\n   * CUMULATIVE, or last collection time otherwise.\n   */\n  readonly startTime: HrTime;\n  /**\n   * The end epoch timestamp when data were collected, usually it represents\n   * the moment when `MetricReader.collect` was called.\n   */\n  readonly endTime: HrTime;\n  /**\n   * The attributes associated with this DataPoint.\n   */\n  readonly attributes: MetricAttributes;\n  /**\n   * The value for this DataPoint. The type of the value is indicated by the\n   * {@link DataPointType}.\n   */\n  readonly value: T;\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { MetricAttributes } from '@opentelemetry/api';\nimport { InstrumentationScope } from '@opentelemetry/core';\n\nexport type Maybe<T> = T | undefined;\n\nexport function isNotNullish<T>(item: Maybe<T>): item is T {\n  return item !== undefined && item !== null;\n}\n\n/**\n * Converting the unordered attributes into unique identifier string.\n * @param attributes user provided unordered MetricAttributes.\n */\nexport function hashAttributes(attributes: MetricAttributes): string {\n  let keys = Object.keys(attributes);\n  if (keys.length === 0) return '';\n\n  // Return a string that is stable on key orders.\n  keys = keys.sort();\n  return JSON.stringify(keys.map(key => [key, attributes[key]]));\n}\n\n/**\n * Converting the instrumentation scope object to a unique identifier string.\n * @param instrumentationScope\n */\nexport function instrumentationScopeId(\n  instrumentationScope: InstrumentationScope\n): string {\n  return `${instrumentationScope.name}:${instrumentationScope.version ?? ''}:${\n    instrumentationScope.schemaUrl ?? ''\n  }`;\n}\n\n/**\n * Error that is thrown on timeouts.\n */\nexport class TimeoutError extends Error {\n  constructor(message?: string) {\n    super(message);\n\n    // manually adjust prototype to retain `instanceof` functionality when targeting ES5, see:\n    // https://github.com/Microsoft/TypeScript-wiki/blob/main/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n    Object.setPrototypeOf(this, TimeoutError.prototype);\n  }\n}\n\n/**\n * Adds a timeout to a promise and rejects if the specified timeout has elapsed. Also rejects if the specified promise\n * rejects, and resolves if the specified promise resolves.\n *\n * <p> NOTE: this operation will continue even after it throws a {@link TimeoutError}.\n *\n * @param promise promise to use with timeout.\n * @param timeout the timeout in milliseconds until the returned promise is rejected.\n */\nexport function callWithTimeout<T>(\n  promise: Promise<T>,\n  timeout: number\n): Promise<T> {\n  let timeoutHandle: ReturnType<typeof setTimeout>;\n\n  const timeoutPromise = new Promise<never>(function timeoutFunction(\n    _resolve,\n    reject\n  ) {\n    timeoutHandle = setTimeout(function timeoutHandler() {\n      reject(new TimeoutError('Operation timed out.'));\n    }, timeout);\n  });\n\n  return Promise.race([promise, timeoutPromise]).then(\n    result => {\n      clearTimeout(timeoutHandle);\n      return result;\n    },\n    reason => {\n      clearTimeout(timeoutHandle);\n      throw reason;\n    }\n  );\n}\n\nexport interface PromiseAllSettledFulfillResult<T> {\n  status: 'fulfilled';\n  value: T;\n}\n\nexport interface PromiseAllSettledRejectionResult {\n  status: 'rejected';\n  reason: unknown;\n}\n\nexport type PromiseAllSettledResult<T> =\n  | PromiseAllSettledFulfillResult<T>\n  | PromiseAllSettledRejectionResult;\n\n/**\n * Node.js v12.9 lower and browser compatible `Promise.allSettled`.\n */\nexport async function PromiseAllSettled<T>(\n  promises: Promise<T>[]\n): Promise<PromiseAllSettledResult<T>[]> {\n  return Promise.all(\n    promises.map<Promise<PromiseAllSettledResult<T>>>(async p => {\n      try {\n        const ret = await p;\n        return {\n          status: 'fulfilled',\n          value: ret,\n        };\n      } catch (e) {\n        return {\n          status: 'rejected',\n          reason: e,\n        };\n      }\n    })\n  );\n}\n\nexport function isPromiseAllSettledRejectionResult(\n  it: PromiseAllSettledResult<unknown>\n): it is PromiseAllSettledRejectionResult {\n  return it.status === 'rejected';\n}\n\n/**\n * Node.js v11.0 lower and browser compatible `Array.prototype.flatMap`.\n */\nexport function FlatMap<T, R>(arr: T[], fn: (it: T) => R[]): R[] {\n  const result: R[] = [];\n  arr.forEach(it => {\n    result.push(...fn(it));\n  });\n  return result;\n}\n\nexport function setEquals(lhs: Set<unknown>, rhs: Set<unknown>): boolean {\n  if (lhs.size !== rhs.size) {\n    return false;\n  }\n  for (const item of lhs) {\n    if (!rhs.has(item)) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * Binary search the sorted array to the find lower bound for the value.\n * @param arr\n * @param value\n * @returns\n */\nexport function binarySearchLB(arr: number[], value: number): number {\n  let lo = 0;\n  let hi = arr.length - 1;\n\n  while (hi - lo > 1) {\n    const mid = Math.trunc((hi + lo) / 2);\n    if (arr[mid] <= value) {\n      lo = mid;\n    } else {\n      hi = mid - 1;\n    }\n  }\n\n  if (arr[hi] <= value) {\n    return hi;\n  } else if (arr[lo] <= value) {\n    return lo;\n  }\n  return -1;\n}\n\nexport function equalsCaseInsensitive(lhs: string, rhs: string): boolean {\n  return lhs.toLowerCase() === rhs.toLowerCase();\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { HrTime, MetricAttributes } from '@opentelemetry/api';\nimport { AggregationTemporality } from '../export/AggregationTemporality';\nimport { MetricData } from '../export/MetricData';\nimport { InstrumentDescriptor } from '../InstrumentDescriptor';\nimport { Maybe } from '../utils';\n\n/** The kind of aggregator. */\nexport enum AggregatorKind {\n  DROP,\n  SUM,\n  LAST_VALUE,\n  HISTOGRAM,\n  EXPONENTIAL_HISTOGRAM,\n}\n\n/** DataPoint value type for SumAggregation. */\nexport type Sum = number;\n\n/** DataPoint value type for LastValueAggregation. */\nexport type LastValue = number;\n\n/** DataPoint value type for HistogramAggregation. */\nexport interface Histogram {\n  /**\n   * Buckets are implemented using two different arrays:\n   *  - boundaries: contains every finite bucket boundary, which are inclusive lower bounds\n   *  - counts: contains event counts for each bucket\n   *\n   * Note that we'll always have n+1 buckets, where n is the number of boundaries.\n   * This is because we need to count events that are below the lowest boundary.\n   *\n   * Example: if we measure the values: [5, 30, 5, 40, 5, 15, 15, 15, 25]\n   *  with the boundaries [ 10, 20, 30 ], we will have the following state:\n   *\n   * buckets: {\n   *\tboundaries: [10, 20, 30],\n   *\tcounts: [3, 3, 1, 2],\n   * }\n   */\n  buckets: {\n    boundaries: number[];\n    counts: number[];\n  };\n  sum?: number;\n  count: number;\n  min?: number;\n  max?: number;\n}\n\n/** DataPoint value type for ExponentialHistogramAggregation. */\nexport interface ExponentialHistogram {\n  count: number;\n  sum?: number;\n  scale: number;\n  zeroCount: number;\n  positive: {\n    offset: number;\n    bucketCounts: number[];\n  };\n  negative: {\n    offset: number;\n    bucketCounts: number[];\n  };\n  min?: number;\n  max?: number;\n}\n\n/**\n * An Aggregator accumulation state.\n */\nexport interface Accumulation {\n  setStartTime(startTime: HrTime): void;\n  record(value: number): void;\n}\n\nexport type AccumulationRecord<T> = [MetricAttributes, T];\n\n/**\n * Base interface for aggregators. Aggregators are responsible for holding\n * aggregated values and taking a snapshot of these values upon export.\n */\nexport interface Aggregator<T> {\n  /** The kind of the aggregator. */\n  kind: AggregatorKind;\n\n  /**\n   * Create a clean state of accumulation.\n   */\n  createAccumulation(startTime: HrTime): T;\n\n  /**\n   * Returns the result of the merge of the given accumulations.\n   *\n   * This should always assume that the accumulations do not overlap and merge together for a new\n   * cumulative report.\n   *\n   * @param previous the previously captured accumulation\n   * @param delta the newly captured (delta) accumulation\n   * @returns the result of the merge of the given accumulations\n   */\n  merge(previous: T, delta: T): T;\n\n  /**\n   * Returns a new DELTA aggregation by comparing two cumulative measurements.\n   *\n   * @param previous the previously captured accumulation\n   * @param current the newly captured (cumulative) accumulation\n   * @returns The resulting delta accumulation\n   */\n  diff(previous: T, current: T): T;\n\n  /**\n   * Returns the {@link MetricData} that this {@link Aggregator} will produce.\n   *\n   * @param descriptor the metric instrument descriptor.\n   * @param aggregationTemporality the temporality of the resulting {@link MetricData}\n   * @param accumulationByAttributes the array of attributes and accumulation pairs.\n   * @param endTime the end time of the metric data.\n   * @return the {@link MetricData} that this {@link Aggregator} will produce.\n   */\n  toMetricData(\n    descriptor: InstrumentDescriptor,\n    aggregationTemporality: AggregationTemporality,\n    accumulationByAttributes: AccumulationRecord<T>[],\n    endTime: HrTime\n  ): Maybe<MetricData>;\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { HrTime } from '@opentelemetry/api';\nimport { AggregationTemporality } from '../export/AggregationTemporality';\nimport { MetricData } from '../export/MetricData';\nimport { InstrumentDescriptor } from '../InstrumentDescriptor';\nimport { Maybe } from '../utils';\nimport { AggregatorKind, Aggregator, AccumulationRecord } from './types';\n\n/** Basic aggregator for None which keeps no recorded value. */\nexport class DropAggregator implements Aggregator<undefined> {\n  kind: AggregatorKind.DROP = AggregatorKind.DROP;\n\n  createAccumulation() {\n    return undefined;\n  }\n\n  merge(_previous: undefined, _delta: undefined) {\n    return undefined;\n  }\n\n  diff(_previous: undefined, _current: undefined) {\n    return undefined;\n  }\n\n  toMetricData(\n    _descriptor: InstrumentDescriptor,\n    _aggregationTemporality: AggregationTemporality,\n    _accumulationByAttributes: AccumulationRecord<undefined>[],\n    _endTime: HrTime\n  ): Maybe<MetricData> {\n    return undefined;\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { MetricOptions, ValueType, diag } from '@opentelemetry/api';\nimport { View } from './view/View';\nimport { equalsCaseInsensitive } from './utils';\n\n/**\n * Supported types of metric instruments.\n */\nexport enum InstrumentType {\n  COUNTER = 'COUNTER',\n  HISTOGRAM = 'HISTOGRAM',\n  UP_DOWN_COUNTER = 'UP_DOWN_COUNTER',\n  OBSERVABLE_COUNTER = 'OBSERVABLE_COUNTER',\n  OBSERVABLE_GAUGE = 'OBSERVABLE_GAUGE',\n  OBSERVABLE_UP_DOWN_COUNTER = 'OBSERVABLE_UP_DOWN_COUNTER',\n}\n\n/**\n * An interface describing the instrument.\n */\nexport interface InstrumentDescriptor {\n  readonly name: string;\n  readonly description: string;\n  readonly unit: string;\n  readonly type: InstrumentType;\n  readonly valueType: ValueType;\n}\n\nexport function createInstrumentDescriptor(\n  name: string,\n  type: InstrumentType,\n  options?: MetricOptions\n): InstrumentDescriptor {\n  if (!isValidName(name)) {\n    diag.warn(\n      `Invalid metric name: \"${name}\". The metric name should be a ASCII string with a length no greater than 255 characters.`\n    );\n  }\n  return {\n    name,\n    type,\n    description: options?.description ?? '',\n    unit: options?.unit ?? '',\n    valueType: options?.valueType ?? ValueType.DOUBLE,\n  };\n}\n\nexport function createInstrumentDescriptorWithView(\n  view: View,\n  instrument: InstrumentDescriptor\n): InstrumentDescriptor {\n  return {\n    name: view.name ?? instrument.name,\n    description: view.description ?? instrument.description,\n    type: instrument.type,\n    unit: instrument.unit,\n    valueType: instrument.valueType,\n  };\n}\n\nexport function isDescriptorCompatibleWith(\n  descriptor: InstrumentDescriptor,\n  otherDescriptor: InstrumentDescriptor\n) {\n  // Names are case-insensitive strings.\n  return (\n    equalsCaseInsensitive(descriptor.name, otherDescriptor.name) &&\n    descriptor.unit === otherDescriptor.unit &&\n    descriptor.type === otherDescriptor.type &&\n    descriptor.valueType === otherDescriptor.valueType\n  );\n}\n\n// ASCII string with a length no greater than 255 characters.\n// NB: the first character counted separately from the rest.\nconst NAME_REGEXP = /^[a-z][a-z0-9_.-]{0,254}$/i;\nexport function isValidName(name: string): boolean {\n  return name.match(NAME_REGEXP) != null;\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Accumulation,\n  AccumulationRecord,\n  Aggregator,\n  AggregatorKind,\n} from './types';\nimport { DataPointType, HistogramMetricData } from '../export/MetricData';\nimport { HrTime } from '@opentelemetry/api';\nimport { InstrumentDescriptor, InstrumentType } from '../InstrumentDescriptor';\nimport { binarySearchLB, Maybe } from '../utils';\nimport { AggregationTemporality } from '../export/AggregationTemporality';\n\n/**\n * Internal value type for HistogramAggregation.\n * Differs from the exported type as undefined sum/min/max complicate arithmetic\n * performed by this aggregation, but are required to be undefined in the exported types.\n */\ninterface InternalHistogram {\n  buckets: {\n    boundaries: number[];\n    counts: number[];\n  };\n  sum: number;\n  count: number;\n  hasMinMax: boolean;\n  min: number;\n  max: number;\n}\n\nfunction createNewEmptyCheckpoint(boundaries: number[]): InternalHistogram {\n  const counts = boundaries.map(() => 0);\n  counts.push(0);\n  return {\n    buckets: {\n      boundaries,\n      counts,\n    },\n    sum: 0,\n    count: 0,\n    hasMinMax: false,\n    min: Infinity,\n    max: -Infinity,\n  };\n}\n\nexport class HistogramAccumulation implements Accumulation {\n  constructor(\n    public startTime: HrTime,\n    private readonly _boundaries: number[],\n    private _recordMinMax = true,\n    private _current: InternalHistogram = createNewEmptyCheckpoint(_boundaries)\n  ) {}\n\n  record(value: number): void {\n    this._current.count += 1;\n    this._current.sum += value;\n\n    if (this._recordMinMax) {\n      this._current.min = Math.min(value, this._current.min);\n      this._current.max = Math.max(value, this._current.max);\n      this._current.hasMinMax = true;\n    }\n\n    const idx = binarySearchLB(this._boundaries, value);\n    this._current.buckets.counts[idx + 1] += 1;\n  }\n\n  setStartTime(startTime: HrTime): void {\n    this.startTime = startTime;\n  }\n\n  toPointValue(): InternalHistogram {\n    return this._current;\n  }\n}\n\n/**\n * Basic aggregator which observes events and counts them in pre-defined buckets\n * and provides the total sum and count of all observations.\n */\nexport class HistogramAggregator implements Aggregator<HistogramAccumulation> {\n  public kind: AggregatorKind.HISTOGRAM = AggregatorKind.HISTOGRAM;\n\n  /**\n   * @param _boundaries sorted upper bounds of recorded values.\n   * @param _recordMinMax If set to true, min and max will be recorded. Otherwise, min and max will not be recorded.\n   */\n  constructor(\n    private readonly _boundaries: number[],\n    private readonly _recordMinMax: boolean\n  ) {}\n\n  createAccumulation(startTime: HrTime) {\n    return new HistogramAccumulation(\n      startTime,\n      this._boundaries,\n      this._recordMinMax\n    );\n  }\n\n  /**\n   * Return the result of the merge of two histogram accumulations. As long as one Aggregator\n   * instance produces all Accumulations with constant boundaries we don't need to worry about\n   * merging accumulations with different boundaries.\n   */\n  merge(\n    previous: HistogramAccumulation,\n    delta: HistogramAccumulation\n  ): HistogramAccumulation {\n    const previousValue = previous.toPointValue();\n    const deltaValue = delta.toPointValue();\n\n    const previousCounts = previousValue.buckets.counts;\n    const deltaCounts = deltaValue.buckets.counts;\n\n    const mergedCounts = new Array(previousCounts.length);\n    for (let idx = 0; idx < previousCounts.length; idx++) {\n      mergedCounts[idx] = previousCounts[idx] + deltaCounts[idx];\n    }\n\n    let min = Infinity;\n    let max = -Infinity;\n\n    if (this._recordMinMax) {\n      if (previousValue.hasMinMax && deltaValue.hasMinMax) {\n        min = Math.min(previousValue.min, deltaValue.min);\n        max = Math.max(previousValue.max, deltaValue.max);\n      } else if (previousValue.hasMinMax) {\n        min = previousValue.min;\n        max = previousValue.max;\n      } else if (deltaValue.hasMinMax) {\n        min = deltaValue.min;\n        max = deltaValue.max;\n      }\n    }\n\n    return new HistogramAccumulation(\n      previous.startTime,\n      previousValue.buckets.boundaries,\n      this._recordMinMax,\n      {\n        buckets: {\n          boundaries: previousValue.buckets.boundaries,\n          counts: mergedCounts,\n        },\n        count: previousValue.count + deltaValue.count,\n        sum: previousValue.sum + deltaValue.sum,\n        hasMinMax:\n          this._recordMinMax &&\n          (previousValue.hasMinMax || deltaValue.hasMinMax),\n        min: min,\n        max: max,\n      }\n    );\n  }\n\n  /**\n   * Returns a new DELTA aggregation by comparing two cumulative measurements.\n   */\n  diff(\n    previous: HistogramAccumulation,\n    current: HistogramAccumulation\n  ): HistogramAccumulation {\n    const previousValue = previous.toPointValue();\n    const currentValue = current.toPointValue();\n\n    const previousCounts = previousValue.buckets.counts;\n    const currentCounts = currentValue.buckets.counts;\n\n    const diffedCounts = new Array(previousCounts.length);\n    for (let idx = 0; idx < previousCounts.length; idx++) {\n      diffedCounts[idx] = currentCounts[idx] - previousCounts[idx];\n    }\n\n    return new HistogramAccumulation(\n      current.startTime,\n      previousValue.buckets.boundaries,\n      this._recordMinMax,\n      {\n        buckets: {\n          boundaries: previousValue.buckets.boundaries,\n          counts: diffedCounts,\n        },\n        count: currentValue.count - previousValue.count,\n        sum: currentValue.sum - previousValue.sum,\n        hasMinMax: false,\n        min: Infinity,\n        max: -Infinity,\n      }\n    );\n  }\n\n  toMetricData(\n    descriptor: InstrumentDescriptor,\n    aggregationTemporality: AggregationTemporality,\n    accumulationByAttributes: AccumulationRecord<HistogramAccumulation>[],\n    endTime: HrTime\n  ): Maybe<HistogramMetricData> {\n    return {\n      descriptor,\n      aggregationTemporality,\n      dataPointType: DataPointType.HISTOGRAM,\n      dataPoints: accumulationByAttributes.map(([attributes, accumulation]) => {\n        const pointValue = accumulation.toPointValue();\n\n        // determine if instrument allows negative values.\n        const allowsNegativeValues =\n          descriptor.type === InstrumentType.UP_DOWN_COUNTER ||\n          descriptor.type === InstrumentType.OBSERVABLE_GAUGE ||\n          descriptor.type === InstrumentType.OBSERVABLE_UP_DOWN_COUNTER;\n\n        return {\n          attributes,\n          startTime: accumulation.startTime,\n          endTime,\n          value: {\n            min: pointValue.hasMinMax ? pointValue.min : undefined,\n            max: pointValue.hasMinMax ? pointValue.max : undefined,\n            sum: !allowsNegativeValues ? pointValue.sum : undefined,\n            buckets: pointValue.buckets,\n            count: pointValue.count,\n          },\n        };\n      }),\n    };\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport class Buckets {\n  /**\n   * The term index refers to the number of the exponential histogram bucket\n   * used to determine its boundaries. The lower boundary of a bucket is\n   * determined by base ** index and the upper boundary of a bucket is\n   * determined by base ** (index + 1). index values are signed to account\n   * for values less than or equal to 1.\n   *\n   * indexBase is the index of the 0th position in the\n   * backing array, i.e., backing[0] is the count\n   * in the bucket with index `indexBase`.\n   *\n   * indexStart is the smallest index value represented\n   * in the backing array.\n   *\n   * indexEnd is the largest index value represented in\n   * the backing array.\n   */\n  constructor(\n    public backing = new BucketsBacking(),\n    public indexBase = 0,\n    public indexStart = 0,\n    public indexEnd = 0\n  ) {}\n\n  /**\n   * Offset is the bucket index of the smallest entry in the counts array\n   * @returns {number}\n   */\n  get offset(): number {\n    return this.indexStart;\n  }\n\n  /**\n   * Buckets is a view into the backing array.\n   * @returns {number}\n   */\n  get length(): number {\n    if (this.backing.length === 0) {\n      return 0;\n    }\n\n    if (this.indexEnd === this.indexStart && this.at(0) === 0) {\n      return 0;\n    }\n\n    return this.indexEnd - this.indexStart + 1;\n  }\n\n  /**\n   * An array of counts, where count[i] carries the count\n   * of the bucket at index (offset+i).  count[i] is the count of\n   * values greater than base^(offset+i) and less than or equal to\n   * base^(offset+i+1).\n   * @returns {number} The logical counts based on the backing array\n   */\n  counts(): number[] {\n    return Array.from({ length: this.length }, (_, i) => this.at(i));\n  }\n\n  /**\n   * At returns the count of the bucket at a position in the logical\n   * array of counts.\n   * @param position\n   * @returns {number}\n   */\n  at(position: number): number {\n    const bias = this.indexBase - this.indexStart;\n    if (position < bias) {\n      position += this.backing.length;\n    }\n\n    position -= bias;\n    return this.backing.countAt(position);\n  }\n\n  /**\n   * incrementBucket increments the backing array index by `increment`\n   * @param bucketIndex\n   * @param increment\n   */\n  incrementBucket(bucketIndex: number, increment: number) {\n    this.backing.increment(bucketIndex, increment);\n  }\n\n  /**\n   * decrementBucket decrements the backing array index by `decrement`\n   * if decrement is greater than the current value, it's set to 0.\n   * @param bucketIndex\n   * @param decrement\n   */\n  decrementBucket(bucketIndex: number, decrement: number) {\n    this.backing.decrement(bucketIndex, decrement);\n  }\n\n  /**\n   * trim removes leading and / or trailing zero buckets (which can occur\n   * after diffing two histos) and rotates the backing array so that the\n   * smallest non-zero index is in the 0th position of the backing array\n   */\n  trim() {\n    for (let i = 0; i < this.length; i++) {\n      if (this.at(i) !== 0) {\n        this.indexStart += i;\n        break;\n      } else if (i === this.length - 1) {\n        //the entire array is zeroed out\n        this.indexStart = this.indexEnd = this.indexBase = 0;\n        return;\n      }\n    }\n\n    for (let i = this.length - 1; i >= 0; i--) {\n      if (this.at(i) !== 0) {\n        this.indexEnd -= this.length - i - 1;\n        break;\n      }\n    }\n\n    this._rotate();\n  }\n\n  /**\n   * downscale first rotates, then collapses 2**`by`-to-1 buckets.\n   * @param by\n   */\n  downscale(by: number) {\n    this._rotate();\n\n    const size = 1 + this.indexEnd - this.indexStart;\n    const each = 1 << by;\n    let inpos = 0;\n    let outpos = 0;\n\n    for (let pos = this.indexStart; pos <= this.indexEnd; ) {\n      let mod = pos % each;\n      if (mod < 0) {\n        mod += each;\n      }\n      for (let i = mod; i < each && inpos < size; i++) {\n        this._relocateBucket(outpos, inpos);\n        inpos++;\n        pos++;\n      }\n      outpos++;\n    }\n\n    this.indexStart >>= by;\n    this.indexEnd >>= by;\n    this.indexBase = this.indexStart;\n  }\n\n  /**\n   * Clone returns a deep copy of Buckets\n   * @returns {Buckets}\n   */\n  clone(): Buckets {\n    return new Buckets(\n      this.backing.clone(),\n      this.indexBase,\n      this.indexStart,\n      this.indexEnd\n    );\n  }\n\n  /**\n   * _rotate shifts the backing array contents so that indexStart ==\n   * indexBase to simplify the downscale logic.\n   */\n  private _rotate() {\n    const bias = this.indexBase - this.indexStart;\n\n    if (bias === 0) {\n      return;\n    } else if (bias > 0) {\n      this.backing.reverse(0, this.backing.length);\n      this.backing.reverse(0, bias);\n      this.backing.reverse(bias, this.backing.length);\n    } else {\n      // negative bias, this can happen when diffing two histograms\n      this.backing.reverse(0, this.backing.length);\n      this.backing.reverse(0, this.backing.length + bias);\n    }\n    this.indexBase = this.indexStart;\n  }\n\n  /**\n   * _relocateBucket adds the count in counts[src] to counts[dest] and\n   * resets count[src] to zero.\n   */\n  private _relocateBucket(dest: number, src: number) {\n    if (dest === src) {\n      return;\n    }\n    this.incrementBucket(dest, this.backing.emptyBucket(src));\n  }\n}\n\n/**\n * BucketsBacking holds the raw buckets and some utility methods to\n * manage them.\n */\nclass BucketsBacking {\n  constructor(private _counts = [0]) {}\n\n  /**\n   * length returns the physical size of the backing array, which\n   * is >= buckets.length()\n   */\n  get length(): number {\n    return this._counts.length;\n  }\n\n  /**\n   * countAt returns the count in a specific bucket\n   */\n  countAt(pos: number): number {\n    return this._counts[pos];\n  }\n\n  /**\n   * growTo grows a backing array and copies old entries\n   * into their correct new positions.\n   */\n  growTo(newSize: number, oldPositiveLimit: number, newPositiveLimit: number) {\n    const tmp = new Array<number>(newSize).fill(0);\n    tmp.splice(\n      newPositiveLimit,\n      this._counts.length - oldPositiveLimit,\n      ...this._counts.slice(oldPositiveLimit)\n    );\n    tmp.splice(0, oldPositiveLimit, ...this._counts.slice(0, oldPositiveLimit));\n    this._counts = tmp;\n  }\n\n  /**\n   * reverse the items in the backing array in the range [from, limit).\n   */\n  reverse(from: number, limit: number) {\n    const num = Math.floor((from + limit) / 2) - from;\n    for (let i = 0; i < num; i++) {\n      const tmp = this._counts[from + i];\n      this._counts[from + i] = this._counts[limit - i - 1];\n      this._counts[limit - i - 1] = tmp;\n    }\n  }\n\n  /**\n   * emptyBucket empties the count from a bucket, for\n   * moving into another.\n   */\n  emptyBucket(src: number): number {\n    const tmp = this._counts[src];\n    this._counts[src] = 0;\n    return tmp;\n  }\n\n  /**\n   * increments a bucket by `increment`\n   */\n  increment(bucketIndex: number, increment: number) {\n    this._counts[bucketIndex] += increment;\n  }\n\n  /**\n   * decrements a bucket by `decrement`\n   */\n  decrement(bucketIndex: number, decrement: number) {\n    if (this._counts[bucketIndex] >= decrement) {\n      this._counts[bucketIndex] -= decrement;\n    } else {\n      // this should not happen, but we're being defensive against\n      // negative counts.\n      this._counts[bucketIndex] = 0;\n    }\n  }\n\n  /**\n   * clone returns a deep copy of BucketsBacking\n   */\n  clone(): BucketsBacking {\n    return new BucketsBacking([...this._counts]);\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * The functions and constants in this file allow us to interact\n * with the internal representation of an IEEE 64-bit floating point\n * number. We need to work with all 64-bits, thus, care needs to be\n * taken when working with Javascript's bitwise operators (<<, >>, &,\n * |, etc) as they truncate operands to 32-bits. In order to work around\n * this we work with the 64-bits as two 32-bit halves, perform bitwise\n * operations on them independently, and combine the results (if needed).\n */\n\nexport const SIGNIFICAND_WIDTH = 52;\n\n/**\n * EXPONENT_MASK is set to 1 for the hi 32-bits of an IEEE 754\n * floating point exponent: 0x7ff00000.\n */\nconst EXPONENT_MASK = 0x7ff00000;\n\n/**\n * SIGNIFICAND_MASK is the mask for the significand portion of the hi 32-bits\n * of an IEEE 754 double-precision floating-point value: 0xfffff\n */\nconst SIGNIFICAND_MASK = 0xfffff;\n\n/**\n * EXPONENT_BIAS is the exponent bias specified for encoding\n * the IEEE 754 double-precision floating point exponent: 1023\n */\nconst EXPONENT_BIAS = 1023;\n\n/**\n * MIN_NORMAL_EXPONENT is the minimum exponent of a normalized\n * floating point: -1022.\n */\nexport const MIN_NORMAL_EXPONENT = -EXPONENT_BIAS + 1;\n\n/**\n * MAX_NORMAL_EXPONENT is the maximum exponent of a normalized\n * floating point: 1023.\n */\nexport const MAX_NORMAL_EXPONENT = EXPONENT_BIAS;\n\n/**\n * MIN_VALUE is the smallest normal number\n */\nexport const MIN_VALUE = Math.pow(2, -1022);\n\n/**\n * getNormalBase2 extracts the normalized base-2 fractional exponent.\n * This returns k for the equation f x 2**k where f is\n * in the range [1, 2).  Note that this function is not called for\n * subnormal numbers.\n * @param {number} value - the value to determine normalized base-2 fractional\n *    exponent for\n * @returns {number} the normalized base-2 exponent\n */\nexport function getNormalBase2(value: number): number {\n  const dv = new DataView(new ArrayBuffer(8));\n  dv.setFloat64(0, value);\n  // access the raw 64-bit float as 32-bit uints\n  const hiBits = dv.getUint32(0);\n  const expBits = (hiBits & EXPONENT_MASK) >> 20;\n  return expBits - EXPONENT_BIAS;\n}\n\n/**\n * GetSignificand returns the 52 bit (unsigned) significand as a signed value.\n * @param {number} value - the floating point number to extract the significand from\n * @returns {number} The 52-bit significand\n */\nexport function getSignificand(value: number): number {\n  const dv = new DataView(new ArrayBuffer(8));\n  dv.setFloat64(0, value);\n  // access the raw 64-bit float as two 32-bit uints\n  const hiBits = dv.getUint32(0);\n  const loBits = dv.getUint32(4);\n  // extract the significand bits from the hi bits and left shift 32 places note:\n  // we can't use the native << operator as it will truncate the result to 32-bits\n  const significandHiBits = (hiBits & SIGNIFICAND_MASK) * Math.pow(2, 32);\n  // combine the hi and lo bits and return\n  return significandHiBits + loBits;\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Note: other languages provide this as a built in function. This is\n * a naive, but functionally correct implementation. This is used sparingly,\n * when creating a new mapping in a running application.\n *\n * ldexp returns frac × 2**exp. With the following special cases:\n *   ldexp(±0, exp) = ±0\n *   ldexp(±Inf, exp) = ±Inf\n *   ldexp(NaN, exp) = NaN\n * @param frac\n * @param exp\n * @returns {number}\n */\nexport function ldexp(frac: number, exp: number): number {\n  if (\n    frac === 0 ||\n    frac === Number.POSITIVE_INFINITY ||\n    frac === Number.NEGATIVE_INFINITY ||\n    Number.isNaN(frac)\n  ) {\n    return frac;\n  }\n  return frac * Math.pow(2, exp);\n}\n\n/**\n * Computes the next power of two that is greater than or equal to v.\n * This implementation more efficient than, but functionally equivalent\n * to Math.pow(2, Math.ceil(Math.log(x)/Math.log(2))).\n * @param v\n * @returns {number}\n */\nexport function nextGreaterSquare(v: number): number {\n  // The following expression computes the least power-of-two\n  // that is >= v.  There are a number of tricky ways to\n  // do this, see https://stackoverflow.com/questions/466204/rounding-up-to-next-power-of-2\n  v--;\n  v |= v >> 1;\n  v |= v >> 2;\n  v |= v >> 4;\n  v |= v >> 8;\n  v |= v >> 16;\n  v++;\n  return v;\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport class MappingError extends Error {}\n\n/**\n * The mapping interface is used by the exponential histogram to determine\n * where to bucket values. The interface is implemented by ExponentMapping,\n * used for scales [-10, 0] and LogarithmMapping, used for scales [1, 20].\n */\nexport interface Mapping {\n  mapToIndex(value: number): number;\n  lowerBoundary(index: number): number;\n  get scale(): number;\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport * as ieee754 from './ieee754';\nimport * as util from '../util';\nimport { Mapping, MappingError } from './types';\n\n/**\n * ExponentMapping implements exponential mapping functions for\n * scales <=0. For scales > 0 LogarithmMapping should be used.\n */\nexport class ExponentMapping implements Mapping {\n  private readonly _shift: number;\n\n  constructor(scale: number) {\n    this._shift = -scale;\n  }\n\n  /**\n   * Maps positive floating point values to indexes corresponding to scale\n   * @param value\n   * @returns {number} index for provided value at the current scale\n   */\n  mapToIndex(value: number): number {\n    if (value < ieee754.MIN_VALUE) {\n      return this._minNormalLowerBoundaryIndex();\n    }\n\n    const exp = ieee754.getNormalBase2(value);\n\n    // In case the value is an exact power of two, compute a\n    // correction of -1. Note, we are using a custom _rightShift\n    // to accommodate a 52-bit argument, which the native bitwise\n    // operators do not support\n    const correction = this._rightShift(\n      ieee754.getSignificand(value) - 1,\n      ieee754.SIGNIFICAND_WIDTH\n    );\n\n    return (exp + correction) >> this._shift;\n  }\n\n  /**\n   * Returns the lower bucket boundary for the given index for scale\n   *\n   * @param index\n   * @returns {number}\n   */\n  lowerBoundary(index: number): number {\n    const minIndex = this._minNormalLowerBoundaryIndex();\n    if (index < minIndex) {\n      throw new MappingError(\n        `underflow: ${index} is < minimum lower boundary: ${minIndex}`\n      );\n    }\n    const maxIndex = this._maxNormalLowerBoundaryIndex();\n    if (index > maxIndex) {\n      throw new MappingError(\n        `overflow: ${index} is > maximum lower boundary: ${maxIndex}`\n      );\n    }\n\n    return util.ldexp(1, index << this._shift);\n  }\n\n  /**\n   * The scale used by this mapping\n   * @returns {number}\n   */\n  get scale(): number {\n    if (this._shift === 0) {\n      return 0;\n    }\n    return -this._shift;\n  }\n\n  private _minNormalLowerBoundaryIndex(): number {\n    let index = ieee754.MIN_NORMAL_EXPONENT >> this._shift;\n    if (this._shift < 2) {\n      index--;\n    }\n\n    return index;\n  }\n\n  private _maxNormalLowerBoundaryIndex(): number {\n    return ieee754.MAX_NORMAL_EXPONENT >> this._shift;\n  }\n\n  private _rightShift(value: number, shift: number): number {\n    return Math.floor(value * Math.pow(2, -shift));\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport * as ieee754 from './ieee754';\nimport * as util from '../util';\nimport { Mapping, MappingError } from './types';\n\n/**\n * LogarithmMapping implements exponential mapping functions for scale > 0.\n * For scales <= 0 the exponent mapping should be used.\n */\nexport class LogarithmMapping implements Mapping {\n  private readonly _scale: number;\n  private readonly _scaleFactor: number;\n  private readonly _inverseFactor: number;\n\n  constructor(scale: number) {\n    this._scale = scale;\n    this._scaleFactor = util.ldexp(Math.LOG2E, scale);\n    this._inverseFactor = util.ldexp(Math.LN2, -scale);\n  }\n\n  /**\n   * Maps positive floating point values to indexes corresponding to scale\n   * @param value\n   * @returns {number} index for provided value at the current scale\n   */\n  mapToIndex(value: number): number {\n    if (value <= ieee754.MIN_VALUE) {\n      return this._minNormalLowerBoundaryIndex() - 1;\n    }\n\n    // exact power of two special case\n    if (ieee754.getSignificand(value) === 0) {\n      const exp = ieee754.getNormalBase2(value);\n      return (exp << this._scale) - 1;\n    }\n\n    // non-power of two cases. use Math.floor to round the scaled logarithm\n    const index = Math.floor(Math.log(value) * this._scaleFactor);\n    const maxIndex = this._maxNormalLowerBoundaryIndex();\n    if (index >= maxIndex) {\n      return maxIndex;\n    }\n\n    return index;\n  }\n\n  /**\n   * Returns the lower bucket boundary for the given index for scale\n   *\n   * @param index\n   * @returns {number}\n   */\n  lowerBoundary(index: number): number {\n    const maxIndex = this._maxNormalLowerBoundaryIndex();\n    if (index >= maxIndex) {\n      if (index === maxIndex) {\n        return 2 * Math.exp((index - (1 << this._scale)) / this._scaleFactor);\n      }\n      throw new MappingError(\n        `overflow: ${index} is > maximum lower boundary: ${maxIndex}`\n      );\n    }\n\n    const minIndex = this._minNormalLowerBoundaryIndex();\n    if (index <= minIndex) {\n      if (index === minIndex) {\n        return ieee754.MIN_VALUE;\n      } else if (index === minIndex - 1) {\n        return Math.exp((index + (1 << this._scale)) / this._scaleFactor) / 2;\n      }\n      throw new MappingError(\n        `overflow: ${index} is < minimum lower boundary: ${minIndex}`\n      );\n    }\n\n    return Math.exp(index * this._inverseFactor);\n  }\n\n  /**\n   * The scale used by this mapping\n   * @returns {number}\n   */\n  get scale(): number {\n    return this._scale;\n  }\n\n  private _minNormalLowerBoundaryIndex(): number {\n    return ieee754.MIN_NORMAL_EXPONENT << this._scale;\n  }\n\n  private _maxNormalLowerBoundaryIndex(): number {\n    return ((ieee754.MAX_NORMAL_EXPONENT + 1) << this._scale) - 1;\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { ExponentMapping } from './ExponentMapping';\nimport { LogarithmMapping } from './LogarithmMapping';\nimport { MappingError, Mapping } from './types';\n\nconst MIN_SCALE = -10;\nconst MAX_SCALE = 20;\nconst PREBUILT_MAPPINGS = Array.from({ length: 31 }, (_, i) => {\n  if (i > 10) {\n    return new LogarithmMapping(i - 10);\n  }\n  return new ExponentMapping(i - 10);\n});\n\n/**\n * getMapping returns an appropriate mapping for the given scale. For scales -10\n * to 0 the underlying type will be ExponentMapping. For scales 1 to 20 the\n * underlying type will be LogarithmMapping.\n * @param scale a number in the range [-10, 20]\n * @returns {Mapping}\n */\nexport function getMapping(scale: number): Mapping {\n  if (scale > MAX_SCALE || scale < MIN_SCALE) {\n    throw new MappingError(\n      `expected scale >= ${MIN_SCALE} && <= ${MAX_SCALE}, got: ${scale}`\n    );\n  }\n  // mappings are offset by 10. scale -10 is at position 0 and scale 20 is at 30\n  return PREBUILT_MAPPINGS[scale + 10];\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Accumulation,\n  AccumulationRecord,\n  Aggregator,\n  AggregatorKind,\n  ExponentialHistogram,\n} from './types';\nimport {\n  DataPointType,\n  ExponentialHistogramMetricData,\n} from '../export/MetricData';\nimport { diag, HrTime } from '@opentelemetry/api';\nimport { InstrumentDescriptor, InstrumentType } from '../InstrumentDescriptor';\nimport { Maybe } from '../utils';\nimport { AggregationTemporality } from '../export/AggregationTemporality';\nimport { Buckets } from './exponential-histogram/Buckets';\nimport { getMapping } from './exponential-histogram/mapping/getMapping';\nimport { Mapping } from './exponential-histogram/mapping/types';\nimport { nextGreaterSquare } from './exponential-histogram/util';\n\n/**\n * Internal value type for ExponentialHistogramAggregation.\n * Differs from the exported type as undefined sum/min/max complicate arithmetic\n * performed by this aggregation, but are required to be undefined in the exported types.\n */\ninterface InternalHistogram extends ExponentialHistogram {\n  hasMinMax: boolean;\n  min: number;\n  max: number;\n  sum: number;\n}\n\n// HighLow is a utility class used for computing a common scale for\n// two exponential histogram accumulations\nclass HighLow {\n  static combine(h1: HighLow, h2: HighLow): HighLow {\n    return new HighLow(Math.min(h1.low, h2.low), Math.max(h1.high, h2.high));\n  }\n  constructor(\n    public low: number,\n    public high: number\n  ) {}\n}\n\nconst MAX_SCALE = 20;\nconst DEFAULT_MAX_SIZE = 160;\nconst MIN_MAX_SIZE = 2;\n\nexport class ExponentialHistogramAccumulation implements Accumulation {\n  constructor(\n    public startTime: HrTime = startTime,\n    private _maxSize = DEFAULT_MAX_SIZE,\n    private _recordMinMax = true,\n    private _sum = 0,\n    private _count = 0,\n    private _zeroCount = 0,\n    private _min = Number.POSITIVE_INFINITY,\n    private _max = Number.NEGATIVE_INFINITY,\n    private _positive = new Buckets(),\n    private _negative = new Buckets(),\n    private _mapping: Mapping = getMapping(MAX_SCALE)\n  ) {\n    if (this._maxSize < MIN_MAX_SIZE) {\n      diag.warn(`Exponential Histogram Max Size set to ${this._maxSize}, \\\n                changing to the minimum size of: ${MIN_MAX_SIZE}`);\n      this._maxSize = MIN_MAX_SIZE;\n    }\n  }\n\n  /**\n   * record updates a histogram with a single count\n   * @param {Number} value\n   */\n  record(value: number) {\n    this.updateByIncrement(value, 1);\n  }\n\n  /**\n   * Sets the start time for this accumulation\n   * @param {HrTime} startTime\n   */\n  setStartTime(startTime: HrTime): void {\n    this.startTime = startTime;\n  }\n\n  /**\n   * Returns the datapoint representation of this accumulation\n   * @param {HrTime} startTime\n   */\n  toPointValue(): InternalHistogram {\n    return {\n      hasMinMax: this._recordMinMax,\n      min: this.min,\n      max: this.max,\n      sum: this.sum,\n      positive: {\n        offset: this.positive.offset,\n        bucketCounts: this.positive.counts(),\n      },\n      negative: {\n        offset: this.negative.offset,\n        bucketCounts: this.negative.counts(),\n      },\n      count: this.count,\n      scale: this.scale,\n      zeroCount: this.zeroCount,\n    };\n  }\n\n  /**\n   * @returns {Number} The sum of values recorded by this accumulation\n   */\n  get sum(): number {\n    return this._sum;\n  }\n\n  /**\n   * @returns {Number} The minimum value recorded by this accumulation\n   */\n  get min(): number {\n    return this._min;\n  }\n\n  /**\n   * @returns {Number} The maximum value recorded by this accumulation\n   */\n  get max(): number {\n    return this._max;\n  }\n\n  /**\n   * @returns {Number} The count of values recorded by this accumulation\n   */\n  get count(): number {\n    return this._count;\n  }\n\n  /**\n   * @returns {Number} The number of 0 values recorded by this accumulation\n   */\n  get zeroCount(): number {\n    return this._zeroCount;\n  }\n\n  /**\n   * @returns {Number} The scale used by thie accumulation\n   */\n  get scale(): number {\n    if (this._count === this._zeroCount) {\n      // all zeros! scale doesn't matter, use zero\n      return 0;\n    }\n    return this._mapping.scale;\n  }\n\n  /**\n   * positive holds the postive values\n   * @returns {Buckets}\n   */\n  get positive(): Buckets {\n    return this._positive;\n  }\n\n  /**\n   * negative holds the negative values by their absolute value\n   * @returns {Buckets}\n   */\n  get negative(): Buckets {\n    return this._negative;\n  }\n\n  /**\n   * uppdateByIncr supports updating a histogram with a non-negative\n   * increment.\n   * @param value\n   * @param increment\n   */\n  updateByIncrement(value: number, increment: number) {\n    if (value > this._max) {\n      this._max = value;\n    }\n    if (value < this._min) {\n      this._min = value;\n    }\n\n    this._count += increment;\n\n    if (value === 0) {\n      this._zeroCount += increment;\n      return;\n    }\n\n    this._sum += value * increment;\n\n    if (value > 0) {\n      this._updateBuckets(this._positive, value, increment);\n    } else {\n      this._updateBuckets(this._negative, -value, increment);\n    }\n  }\n\n  /**\n   * merge combines data from previous value into self\n   * @param {ExponentialHistogramAccumulation} previous\n   */\n  merge(previous: ExponentialHistogramAccumulation) {\n    if (this._count === 0) {\n      this._min = previous.min;\n      this._max = previous.max;\n    } else if (previous.count !== 0) {\n      if (previous.min < this.min) {\n        this._min = previous.min;\n      }\n      if (previous.max > this.max) {\n        this._max = previous.max;\n      }\n    }\n\n    this.startTime = previous.startTime;\n    this._sum += previous.sum;\n    this._count += previous.count;\n    this._zeroCount += previous.zeroCount;\n\n    const minScale = this._minScale(previous);\n\n    this._downscale(this.scale - minScale);\n\n    this._mergeBuckets(this.positive, previous, previous.positive, minScale);\n    this._mergeBuckets(this.negative, previous, previous.negative, minScale);\n  }\n\n  /**\n   * diff substracts other from self\n   * @param {ExponentialHistogramAccumulation} other\n   */\n  diff(other: ExponentialHistogramAccumulation) {\n    this._min = Infinity;\n    this._max = -Infinity;\n    this._sum -= other.sum;\n    this._count -= other.count;\n    this._zeroCount -= other.zeroCount;\n\n    const minScale = this._minScale(other);\n\n    this._downscale(this.scale - minScale);\n\n    this._diffBuckets(this.positive, other, other.positive, minScale);\n    this._diffBuckets(this.negative, other, other.negative, minScale);\n  }\n\n  /**\n   * clone returns a deep copy of self\n   * @returns {ExponentialHistogramAccumulation}\n   */\n  clone(): ExponentialHistogramAccumulation {\n    return new ExponentialHistogramAccumulation(\n      this.startTime,\n      this._maxSize,\n      this._recordMinMax,\n      this._sum,\n      this._count,\n      this._zeroCount,\n      this._min,\n      this._max,\n      this.positive.clone(),\n      this.negative.clone(),\n      this._mapping\n    );\n  }\n\n  /**\n   * _updateBuckets maps the incoming value to a bucket index for the current\n   * scale. If the bucket index is outside of the range of the backing array,\n   * it will rescale the backing array and update the mapping for the new scale.\n   */\n  private _updateBuckets(buckets: Buckets, value: number, increment: number) {\n    let index = this._mapping.mapToIndex(value);\n\n    // rescale the mapping if needed\n    let rescalingNeeded = false;\n    let high = 0;\n    let low = 0;\n\n    if (buckets.length === 0) {\n      buckets.indexStart = index;\n      buckets.indexEnd = buckets.indexStart;\n      buckets.indexBase = buckets.indexStart;\n    } else if (\n      index < buckets.indexStart &&\n      buckets.indexEnd - index >= this._maxSize\n    ) {\n      rescalingNeeded = true;\n      low = index;\n      high = buckets.indexEnd;\n    } else if (\n      index > buckets.indexEnd &&\n      index - buckets.indexStart >= this._maxSize\n    ) {\n      rescalingNeeded = true;\n      low = buckets.indexStart;\n      high = index;\n    }\n\n    // rescale and compute index at new scale\n    if (rescalingNeeded) {\n      const change = this._changeScale(high, low);\n      this._downscale(change);\n      index = this._mapping.mapToIndex(value);\n    }\n\n    this._incrementIndexBy(buckets, index, increment);\n  }\n\n  /**\n   * _incrementIndexBy increments the count of the bucket specified by `index`.\n   * If the index is outside of the range [buckets.indexStart, buckets.indexEnd]\n   * the boundaries of the backing array will be adjusted and more buckets will\n   * be added if needed.\n   */\n  private _incrementIndexBy(\n    buckets: Buckets,\n    index: number,\n    increment: number\n  ) {\n    if (increment === 0) {\n      // nothing to do for a zero increment, can happen during a merge operation\n      return;\n    }\n\n    if (index < buckets.indexStart) {\n      const span = buckets.indexEnd - index;\n      if (span >= buckets.backing.length) {\n        this._grow(buckets, span + 1);\n      }\n      buckets.indexStart = index;\n    } else if (index > buckets.indexEnd) {\n      const span = index - buckets.indexStart;\n      if (span >= buckets.backing.length) {\n        this._grow(buckets, span + 1);\n      }\n      buckets.indexEnd = index;\n    }\n\n    let bucketIndex = index - buckets.indexBase;\n    if (bucketIndex < 0) {\n      bucketIndex += buckets.backing.length;\n    }\n    buckets.incrementBucket(bucketIndex, increment);\n  }\n\n  /**\n   * grow resizes the backing array by doubling in size up to maxSize.\n   * This extends the array with a bunch of zeros and copies the\n   * existing counts to the same position.\n   */\n  private _grow(buckets: Buckets, needed: number) {\n    const size = buckets.backing.length;\n    const bias = buckets.indexBase - buckets.indexStart;\n    const oldPositiveLimit = size - bias;\n    let newSize = nextGreaterSquare(needed);\n    if (newSize > this._maxSize) {\n      newSize = this._maxSize;\n    }\n    const newPositiveLimit = newSize - bias;\n    buckets.backing.growTo(newSize, oldPositiveLimit, newPositiveLimit);\n  }\n\n  /**\n   * _changeScale computes how much downscaling is needed by shifting the\n   * high and low values until they are separated by no more than size.\n   */\n  private _changeScale(high: number, low: number): number {\n    let change = 0;\n    while (high - low >= this._maxSize) {\n      high >>= 1;\n      low >>= 1;\n      change++;\n    }\n    return change;\n  }\n\n  /**\n   * _downscale subtracts `change` from the current mapping scale.\n   */\n  private _downscale(change: number) {\n    if (change === 0) {\n      return;\n    }\n    if (change < 0) {\n      // Note: this should be impossible. If we get here it's because\n      // there is a bug in the implementation.\n      throw new Error(`impossible change of scale: ${this.scale}`);\n    }\n    const newScale = this._mapping.scale - change;\n\n    this._positive.downscale(change);\n    this._negative.downscale(change);\n\n    this._mapping = getMapping(newScale);\n  }\n\n  /**\n   * _minScale is used by diff and merge to compute an ideal combined scale\n   */\n  private _minScale(other: ExponentialHistogramAccumulation): number {\n    const minScale = Math.min(this.scale, other.scale);\n\n    const highLowPos = HighLow.combine(\n      this._highLowAtScale(this.positive, this.scale, minScale),\n      this._highLowAtScale(other.positive, other.scale, minScale)\n    );\n\n    const highLowNeg = HighLow.combine(\n      this._highLowAtScale(this.negative, this.scale, minScale),\n      this._highLowAtScale(other.negative, other.scale, minScale)\n    );\n\n    return Math.min(\n      minScale - this._changeScale(highLowPos.high, highLowPos.low),\n      minScale - this._changeScale(highLowNeg.high, highLowNeg.low)\n    );\n  }\n\n  /**\n   * _highLowAtScale is used by diff and merge to compute an ideal combined scale.\n   */\n  private _highLowAtScale(\n    buckets: Buckets,\n    currentScale: number,\n    newScale: number\n  ): HighLow {\n    if (buckets.length === 0) {\n      return new HighLow(0, -1);\n    }\n    const shift = currentScale - newScale;\n    return new HighLow(buckets.indexStart >> shift, buckets.indexEnd >> shift);\n  }\n\n  /**\n   * _mergeBuckets translates index values from another histogram and\n   * adds the values into the corresponding buckets of this histogram.\n   */\n  private _mergeBuckets(\n    ours: Buckets,\n    other: ExponentialHistogramAccumulation,\n    theirs: Buckets,\n    scale: number\n  ) {\n    const theirOffset = theirs.offset;\n    const theirChange = other.scale - scale;\n\n    for (let i = 0; i < theirs.length; i++) {\n      this._incrementIndexBy(\n        ours,\n        (theirOffset + i) >> theirChange,\n        theirs.at(i)\n      );\n    }\n  }\n\n  /**\n   * _diffBuckets translates index values from another histogram and\n   * subtracts the values in the corresponding buckets of this histogram.\n   */\n  private _diffBuckets(\n    ours: Buckets,\n    other: ExponentialHistogramAccumulation,\n    theirs: Buckets,\n    scale: number\n  ) {\n    const theirOffset = theirs.offset;\n    const theirChange = other.scale - scale;\n\n    for (let i = 0; i < theirs.length; i++) {\n      const ourIndex = (theirOffset + i) >> theirChange;\n      let bucketIndex = ourIndex - ours.indexBase;\n      if (bucketIndex < 0) {\n        bucketIndex += ours.backing.length;\n      }\n      ours.decrementBucket(bucketIndex, theirs.at(i));\n    }\n\n    ours.trim();\n  }\n}\n\n/**\n * Aggregator for ExponentialHistogramAccumlations\n */\nexport class ExponentialHistogramAggregator\n  implements Aggregator<ExponentialHistogramAccumulation>\n{\n  public kind: AggregatorKind.EXPONENTIAL_HISTOGRAM =\n    AggregatorKind.EXPONENTIAL_HISTOGRAM;\n\n  /**\n   * @param _maxSize Maximum number of buckets for each of the positive\n   *    and negative ranges, exclusive of the zero-bucket.\n   * @param _recordMinMax If set to true, min and max will be recorded.\n   *    Otherwise, min and max will not be recorded.\n   */\n  constructor(\n    readonly _maxSize: number,\n    private readonly _recordMinMax: boolean\n  ) {}\n\n  createAccumulation(startTime: HrTime) {\n    return new ExponentialHistogramAccumulation(\n      startTime,\n      this._maxSize,\n      this._recordMinMax\n    );\n  }\n\n  /**\n   * Return the result of the merge of two exponential histogram accumulations.\n   */\n  merge(\n    previous: ExponentialHistogramAccumulation,\n    delta: ExponentialHistogramAccumulation\n  ): ExponentialHistogramAccumulation {\n    const result = delta.clone();\n    result.merge(previous);\n\n    return result;\n  }\n\n  /**\n   * Returns a new DELTA aggregation by comparing two cumulative measurements.\n   */\n  diff(\n    previous: ExponentialHistogramAccumulation,\n    current: ExponentialHistogramAccumulation\n  ): ExponentialHistogramAccumulation {\n    const result = current.clone();\n    result.diff(previous);\n\n    return result;\n  }\n\n  toMetricData(\n    descriptor: InstrumentDescriptor,\n    aggregationTemporality: AggregationTemporality,\n    accumulationByAttributes: AccumulationRecord<ExponentialHistogramAccumulation>[],\n    endTime: HrTime\n  ): Maybe<ExponentialHistogramMetricData> {\n    return {\n      descriptor,\n      aggregationTemporality,\n      dataPointType: DataPointType.EXPONENTIAL_HISTOGRAM,\n      dataPoints: accumulationByAttributes.map(([attributes, accumulation]) => {\n        const pointValue = accumulation.toPointValue();\n\n        // determine if instrument allows negative values.\n        const allowsNegativeValues =\n          descriptor.type === InstrumentType.UP_DOWN_COUNTER ||\n          descriptor.type === InstrumentType.OBSERVABLE_GAUGE ||\n          descriptor.type === InstrumentType.OBSERVABLE_UP_DOWN_COUNTER;\n\n        return {\n          attributes,\n          startTime: accumulation.startTime,\n          endTime,\n          value: {\n            min: pointValue.hasMinMax ? pointValue.min : undefined,\n            max: pointValue.hasMinMax ? pointValue.max : undefined,\n            sum: !allowsNegativeValues ? pointValue.sum : undefined,\n            positive: {\n              offset: pointValue.positive.offset,\n              bucketCounts: pointValue.positive.bucketCounts,\n            },\n            negative: {\n              offset: pointValue.negative.offset,\n              bucketCounts: pointValue.negative.bucketCounts,\n            },\n            count: pointValue.count,\n            scale: pointValue.scale,\n            zeroCount: pointValue.zeroCount,\n          },\n        };\n      }),\n    };\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Accumulation,\n  AccumulationRecord,\n  Aggregator,\n  AggregatorKind,\n  LastValue,\n} from './types';\nimport { HrTime } from '@opentelemetry/api';\nimport { millisToHrTime, hrTimeToMicroseconds } from '@opentelemetry/core';\nimport { DataPointType, GaugeMetricData } from '../export/MetricData';\nimport { InstrumentDescriptor } from '../InstrumentDescriptor';\nimport { Maybe } from '../utils';\nimport { AggregationTemporality } from '../export/AggregationTemporality';\n\nexport class LastValueAccumulation implements Accumulation {\n  constructor(\n    public startTime: HrTime,\n    private _current: number = 0,\n    public sampleTime: HrTime = [0, 0]\n  ) {}\n\n  record(value: number): void {\n    this._current = value;\n    this.sampleTime = millisToHrTime(Date.now());\n  }\n\n  setStartTime(startTime: HrTime): void {\n    this.startTime = startTime;\n  }\n\n  toPointValue(): LastValue {\n    return this._current;\n  }\n}\n\n/** Basic aggregator which calculates a LastValue from individual measurements. */\nexport class LastValueAggregator implements Aggregator<LastValueAccumulation> {\n  public kind: AggregatorKind.LAST_VALUE = AggregatorKind.LAST_VALUE;\n\n  createAccumulation(startTime: HrTime) {\n    return new LastValueAccumulation(startTime);\n  }\n\n  /**\n   * Returns the result of the merge of the given accumulations.\n   *\n   * Return the newly captured (delta) accumulation for LastValueAggregator.\n   */\n  merge(\n    previous: LastValueAccumulation,\n    delta: LastValueAccumulation\n  ): LastValueAccumulation {\n    // nanoseconds may lose precisions.\n    const latestAccumulation =\n      hrTimeToMicroseconds(delta.sampleTime) >=\n      hrTimeToMicroseconds(previous.sampleTime)\n        ? delta\n        : previous;\n    return new LastValueAccumulation(\n      previous.startTime,\n      latestAccumulation.toPointValue(),\n      latestAccumulation.sampleTime\n    );\n  }\n\n  /**\n   * Returns a new DELTA aggregation by comparing two cumulative measurements.\n   *\n   * A delta aggregation is not meaningful to LastValueAggregator, just return\n   * the newly captured (delta) accumulation for LastValueAggregator.\n   */\n  diff(\n    previous: LastValueAccumulation,\n    current: LastValueAccumulation\n  ): LastValueAccumulation {\n    // nanoseconds may lose precisions.\n    const latestAccumulation =\n      hrTimeToMicroseconds(current.sampleTime) >=\n      hrTimeToMicroseconds(previous.sampleTime)\n        ? current\n        : previous;\n    return new LastValueAccumulation(\n      current.startTime,\n      latestAccumulation.toPointValue(),\n      latestAccumulation.sampleTime\n    );\n  }\n\n  toMetricData(\n    descriptor: InstrumentDescriptor,\n    aggregationTemporality: AggregationTemporality,\n    accumulationByAttributes: AccumulationRecord<LastValueAccumulation>[],\n    endTime: HrTime\n  ): Maybe<GaugeMetricData> {\n    return {\n      descriptor,\n      aggregationTemporality,\n      dataPointType: DataPointType.GAUGE,\n      dataPoints: accumulationByAttributes.map(([attributes, accumulation]) => {\n        return {\n          attributes,\n          startTime: accumulation.startTime,\n          endTime,\n          value: accumulation.toPointValue(),\n        };\n      }),\n    };\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Sum,\n  AggregatorKind,\n  Aggregator,\n  Accumulation,\n  AccumulationRecord,\n} from './types';\nimport { HrTime } from '@opentelemetry/api';\nimport { DataPointType, SumMetricData } from '../export/MetricData';\nimport { InstrumentDescriptor } from '../InstrumentDescriptor';\nimport { Maybe } from '../utils';\nimport { AggregationTemporality } from '../export/AggregationTemporality';\n\nexport class SumAccumulation implements Accumulation {\n  constructor(\n    public startTime: HrTime,\n    public monotonic: boolean,\n    private _current: number = 0,\n    public reset = false\n  ) {}\n\n  record(value: number): void {\n    if (this.monotonic && value < 0) {\n      return;\n    }\n    this._current += value;\n  }\n\n  setStartTime(startTime: HrTime): void {\n    this.startTime = startTime;\n  }\n\n  toPointValue(): Sum {\n    return this._current;\n  }\n}\n\n/** Basic aggregator which calculates a Sum from individual measurements. */\nexport class SumAggregator implements Aggregator<SumAccumulation> {\n  public kind: AggregatorKind.SUM = AggregatorKind.SUM;\n\n  constructor(public monotonic: boolean) {}\n\n  createAccumulation(startTime: HrTime) {\n    return new SumAccumulation(startTime, this.monotonic);\n  }\n\n  /**\n   * Returns the result of the merge of the given accumulations.\n   */\n  merge(previous: SumAccumulation, delta: SumAccumulation): SumAccumulation {\n    const prevPv = previous.toPointValue();\n    const deltaPv = delta.toPointValue();\n    if (delta.reset) {\n      return new SumAccumulation(\n        delta.startTime,\n        this.monotonic,\n        deltaPv,\n        delta.reset\n      );\n    }\n    return new SumAccumulation(\n      previous.startTime,\n      this.monotonic,\n      prevPv + deltaPv\n    );\n  }\n\n  /**\n   * Returns a new DELTA aggregation by comparing two cumulative measurements.\n   */\n  diff(previous: SumAccumulation, current: SumAccumulation): SumAccumulation {\n    const prevPv = previous.toPointValue();\n    const currPv = current.toPointValue();\n    /**\n     * If the SumAggregator is a monotonic one and the previous point value is\n     * greater than the current one, a reset is deemed to be happened.\n     * Return the current point value to prevent the value from been reset.\n     */\n    if (this.monotonic && prevPv > currPv) {\n      return new SumAccumulation(\n        current.startTime,\n        this.monotonic,\n        currPv,\n        true\n      );\n    }\n    return new SumAccumulation(\n      current.startTime,\n      this.monotonic,\n      currPv - prevPv\n    );\n  }\n\n  toMetricData(\n    descriptor: InstrumentDescriptor,\n    aggregationTemporality: AggregationTemporality,\n    accumulationByAttributes: AccumulationRecord<SumAccumulation>[],\n    endTime: HrTime\n  ): Maybe<SumMetricData> {\n    return {\n      descriptor,\n      aggregationTemporality,\n      dataPointType: DataPointType.SUM,\n      dataPoints: accumulationByAttributes.map(([attributes, accumulation]) => {\n        return {\n          attributes,\n          startTime: accumulation.startTime,\n          endTime,\n          value: accumulation.toPointValue(),\n        };\n      }),\n      isMonotonic: this.monotonic,\n    };\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport * from './Drop';\nexport * from './Histogram';\nexport * from './ExponentialHistogram';\nexport * from './LastValue';\nexport * from './Sum';\nexport { Aggregator } from './types';\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as api from '@opentelemetry/api';\nimport {\n  Aggregator,\n  SumAggregator,\n  DropAggregator,\n  LastValueAggregator,\n  HistogramAggregator,\n  ExponentialHistogramAggregator,\n} from '../aggregator';\nimport { Accumulation } from '../aggregator/types';\nimport { InstrumentDescriptor, InstrumentType } from '../InstrumentDescriptor';\nimport { Maybe } from '../utils';\n\n/**\n * Configures how measurements are combined into metrics for views.\n *\n * Aggregation provides a set of built-in aggregations via static methods.\n */\nexport abstract class Aggregation {\n  abstract createAggregator(\n    instrument: InstrumentDescriptor\n  ): Aggregator<Maybe<Accumulation>>;\n\n  static Drop(): Aggregation {\n    return DROP_AGGREGATION;\n  }\n\n  static Sum(): Aggregation {\n    return SUM_AGGREGATION;\n  }\n\n  static LastValue(): Aggregation {\n    return LAST_VALUE_AGGREGATION;\n  }\n\n  static Histogram(): Aggregation {\n    return HISTOGRAM_AGGREGATION;\n  }\n\n  static ExponentialHistogram(): Aggregation {\n    return EXPONENTIAL_HISTOGRAM_AGGREGATION;\n  }\n\n  static Default(): Aggregation {\n    return DEFAULT_AGGREGATION;\n  }\n}\n\n/**\n * The default drop aggregation.\n */\nexport class DropAggregation extends Aggregation {\n  private static DEFAULT_INSTANCE = new DropAggregator();\n  createAggregator(_instrument: InstrumentDescriptor) {\n    return DropAggregation.DEFAULT_INSTANCE;\n  }\n}\n\n/**\n * The default sum aggregation.\n */\nexport class SumAggregation extends Aggregation {\n  private static MONOTONIC_INSTANCE = new SumAggregator(true);\n  private static NON_MONOTONIC_INSTANCE = new SumAggregator(false);\n  createAggregator(instrument: InstrumentDescriptor) {\n    switch (instrument.type) {\n      case InstrumentType.COUNTER:\n      case InstrumentType.OBSERVABLE_COUNTER:\n      case InstrumentType.HISTOGRAM: {\n        return SumAggregation.MONOTONIC_INSTANCE;\n      }\n      default: {\n        return SumAggregation.NON_MONOTONIC_INSTANCE;\n      }\n    }\n  }\n}\n\n/**\n * The default last value aggregation.\n */\nexport class LastValueAggregation extends Aggregation {\n  private static DEFAULT_INSTANCE = new LastValueAggregator();\n  createAggregator(_instrument: InstrumentDescriptor) {\n    return LastValueAggregation.DEFAULT_INSTANCE;\n  }\n}\n\n/**\n * The default histogram aggregation.\n */\nexport class HistogramAggregation extends Aggregation {\n  private static DEFAULT_INSTANCE = new HistogramAggregator(\n    [0, 5, 10, 25, 50, 75, 100, 250, 500, 750, 1000, 2500, 5000, 7500, 10000],\n    true\n  );\n  createAggregator(_instrument: InstrumentDescriptor) {\n    return HistogramAggregation.DEFAULT_INSTANCE;\n  }\n}\n\n/**\n * The explicit bucket histogram aggregation.\n */\nexport class ExplicitBucketHistogramAggregation extends Aggregation {\n  private _boundaries: number[];\n\n  /**\n   * @param boundaries the bucket boundaries of the histogram aggregation\n   * @param _recordMinMax If set to true, min and max will be recorded. Otherwise, min and max will not be recorded.\n   */\n  constructor(\n    boundaries: number[],\n    private readonly _recordMinMax = true\n  ) {\n    super();\n    if (boundaries === undefined || boundaries.length === 0) {\n      throw new Error('HistogramAggregator should be created with boundaries.');\n    }\n    // Copy the boundaries array for modification.\n    boundaries = boundaries.concat();\n    // We need to an ordered set to be able to correctly compute count for each\n    // boundary since we'll iterate on each in order.\n    boundaries = boundaries.sort((a, b) => a - b);\n    // Remove all Infinity from the boundaries.\n    const minusInfinityIndex = boundaries.lastIndexOf(-Infinity);\n    let infinityIndex: number | undefined = boundaries.indexOf(Infinity);\n    if (infinityIndex === -1) {\n      infinityIndex = undefined;\n    }\n    this._boundaries = boundaries.slice(minusInfinityIndex + 1, infinityIndex);\n  }\n\n  createAggregator(_instrument: InstrumentDescriptor) {\n    return new HistogramAggregator(this._boundaries, this._recordMinMax);\n  }\n}\n\nexport class ExponentialHistogramAggregation extends Aggregation {\n  constructor(\n    private readonly _maxSize: number = 160,\n    private readonly _recordMinMax = true\n  ) {\n    super();\n  }\n  createAggregator(_instrument: InstrumentDescriptor) {\n    return new ExponentialHistogramAggregator(\n      this._maxSize,\n      this._recordMinMax\n    );\n  }\n}\n\n/**\n * The default aggregation.\n */\nexport class DefaultAggregation extends Aggregation {\n  private _resolve(instrument: InstrumentDescriptor): Aggregation {\n    // cast to unknown to disable complaints on the (unreachable) fallback.\n    switch (instrument.type as unknown) {\n      case InstrumentType.COUNTER:\n      case InstrumentType.UP_DOWN_COUNTER:\n      case InstrumentType.OBSERVABLE_COUNTER:\n      case InstrumentType.OBSERVABLE_UP_DOWN_COUNTER: {\n        return SUM_AGGREGATION;\n      }\n      case InstrumentType.OBSERVABLE_GAUGE: {\n        return LAST_VALUE_AGGREGATION;\n      }\n      case InstrumentType.HISTOGRAM: {\n        return HISTOGRAM_AGGREGATION;\n      }\n    }\n    api.diag.warn(`Unable to recognize instrument type: ${instrument.type}`);\n    return DROP_AGGREGATION;\n  }\n\n  createAggregator(\n    instrument: InstrumentDescriptor\n  ): Aggregator<Maybe<Accumulation>> {\n    return this._resolve(instrument).createAggregator(instrument);\n  }\n}\n\nconst DROP_AGGREGATION = new DropAggregation();\nconst SUM_AGGREGATION = new SumAggregation();\nconst LAST_VALUE_AGGREGATION = new LastValueAggregation();\nconst HISTOGRAM_AGGREGATION = new HistogramAggregation();\nconst EXPONENTIAL_HISTOGRAM_AGGREGATION = new ExponentialHistogramAggregation();\nconst DEFAULT_AGGREGATION = new DefaultAggregation();\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { InstrumentType } from '../InstrumentDescriptor';\nimport { Aggregation } from '../view/Aggregation';\nimport { AggregationTemporality } from './AggregationTemporality';\n\n/**\n * Aggregation selector based on metric instrument types.\n */\nexport type AggregationSelector = (\n  instrumentType: InstrumentType\n) => Aggregation;\n\n/**\n * Aggregation temporality selector based on metric instrument types.\n */\nexport type AggregationTemporalitySelector = (\n  instrumentType: InstrumentType\n) => AggregationTemporality;\n\nexport const DEFAULT_AGGREGATION_SELECTOR: AggregationSelector =\n  _instrumentType => Aggregation.Default();\nexport const DEFAULT_AGGREGATION_TEMPORALITY_SELECTOR: AggregationTemporalitySelector =\n  _instrumentType => AggregationTemporality.CUMULATIVE;\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as api from '@opentelemetry/api';\nimport { AggregationTemporality } from './AggregationTemporality';\nimport { MetricProducer } from './MetricProducer';\nimport { CollectionResult } from './MetricData';\nimport { FlatMap, callWithTimeout } from '../utils';\nimport { InstrumentType } from '../InstrumentDescriptor';\nimport {\n  CollectionOptions,\n  ForceFlushOptions,\n  ShutdownOptions,\n} from '../types';\nimport { Aggregation } from '../view/Aggregation';\nimport {\n  AggregationSelector,\n  AggregationTemporalitySelector,\n  DEFAULT_AGGREGATION_SELECTOR,\n  DEFAULT_AGGREGATION_TEMPORALITY_SELECTOR,\n} from './AggregationSelector';\n\nexport interface MetricReaderOptions {\n  /**\n   * Aggregation selector based on metric instrument types. If no views are\n   * configured for a metric instrument, a per-metric-reader aggregation is\n   * selected with this selector.\n   */\n  aggregationSelector?: AggregationSelector;\n  /**\n   * Aggregation temporality selector based on metric instrument types. If\n   * not configured, cumulative is used for all instruments.\n   */\n  aggregationTemporalitySelector?: AggregationTemporalitySelector;\n  /**\n   * **Note, this option is experimental**. Additional MetricProducers to use as a source of\n   * aggregated metric data in addition to the SDK's metric data. The resource returned by\n   * these MetricProducers is ignored; the SDK's resource will be used instead.\n   * @experimental\n   */\n  metricProducers?: MetricProducer[];\n}\n\n/**\n * A registered reader of metrics that, when linked to a {@link MetricProducer}, offers global\n * control over metrics.\n */\nexport abstract class MetricReader {\n  // Tracks the shutdown state.\n  // TODO: use BindOncePromise here once a new version of @opentelemetry/core is available.\n  private _shutdown = false;\n  // Additional MetricProducers which will be combined with the SDK's output\n  private _metricProducers: MetricProducer[];\n  // MetricProducer used by this instance which produces metrics from the SDK\n  private _sdkMetricProducer?: MetricProducer;\n  private readonly _aggregationTemporalitySelector: AggregationTemporalitySelector;\n  private readonly _aggregationSelector: AggregationSelector;\n\n  constructor(options?: MetricReaderOptions) {\n    this._aggregationSelector =\n      options?.aggregationSelector ?? DEFAULT_AGGREGATION_SELECTOR;\n    this._aggregationTemporalitySelector =\n      options?.aggregationTemporalitySelector ??\n      DEFAULT_AGGREGATION_TEMPORALITY_SELECTOR;\n    this._metricProducers = options?.metricProducers ?? [];\n  }\n\n  /**\n   * Set the {@link MetricProducer} used by this instance. **This should only be called by the\n   * SDK and should be considered internal.**\n   *\n   * To add additional {@link MetricProducer}s to a {@link MetricReader}, pass them to the\n   * constructor as {@link MetricReaderOptions.metricProducers}.\n   *\n   * @internal\n   * @param metricProducer\n   */\n  setMetricProducer(metricProducer: MetricProducer) {\n    if (this._sdkMetricProducer) {\n      throw new Error(\n        'MetricReader can not be bound to a MeterProvider again.'\n      );\n    }\n    this._sdkMetricProducer = metricProducer;\n    this.onInitialized();\n  }\n\n  /**\n   * Select the {@link Aggregation} for the given {@link InstrumentType} for this\n   * reader.\n   */\n  selectAggregation(instrumentType: InstrumentType): Aggregation {\n    return this._aggregationSelector(instrumentType);\n  }\n\n  /**\n   * Select the {@link AggregationTemporality} for the given\n   * {@link InstrumentType} for this reader.\n   */\n  selectAggregationTemporality(\n    instrumentType: InstrumentType\n  ): AggregationTemporality {\n    return this._aggregationTemporalitySelector(instrumentType);\n  }\n\n  /**\n   * Handle once the SDK has initialized this {@link MetricReader}\n   * Overriding this method is optional.\n   */\n  protected onInitialized(): void {\n    // Default implementation is empty.\n  }\n\n  /**\n   * Handle a shutdown signal by the SDK.\n   *\n   * <p> For push exporters, this should shut down any intervals and close any open connections.\n   * @protected\n   */\n  protected abstract onShutdown(): Promise<void>;\n\n  /**\n   * Handle a force flush signal by the SDK.\n   *\n   * <p> In all scenarios metrics should be collected via {@link collect()}.\n   * <p> For push exporters, this should collect and report metrics.\n   * @protected\n   */\n  protected abstract onForceFlush(): Promise<void>;\n\n  /**\n   * Collect all metrics from the associated {@link MetricProducer}\n   */\n  async collect(options?: CollectionOptions): Promise<CollectionResult> {\n    if (this._sdkMetricProducer === undefined) {\n      throw new Error('MetricReader is not bound to a MetricProducer');\n    }\n\n    // Subsequent invocations to collect are not allowed. SDKs SHOULD return some failure for these calls.\n    if (this._shutdown) {\n      throw new Error('MetricReader is shutdown');\n    }\n\n    const [sdkCollectionResults, ...additionalCollectionResults] =\n      await Promise.all([\n        this._sdkMetricProducer.collect({\n          timeoutMillis: options?.timeoutMillis,\n        }),\n        ...this._metricProducers.map(producer =>\n          producer.collect({\n            timeoutMillis: options?.timeoutMillis,\n          })\n        ),\n      ]);\n\n    // Merge the results, keeping the SDK's Resource\n    const errors = sdkCollectionResults.errors.concat(\n      FlatMap(additionalCollectionResults, result => result.errors)\n    );\n    const resource = sdkCollectionResults.resourceMetrics.resource;\n    const scopeMetrics =\n      sdkCollectionResults.resourceMetrics.scopeMetrics.concat(\n        FlatMap(\n          additionalCollectionResults,\n          result => result.resourceMetrics.scopeMetrics\n        )\n      );\n    return {\n      resourceMetrics: {\n        resource,\n        scopeMetrics,\n      },\n      errors,\n    };\n  }\n\n  /**\n   * Shuts down the metric reader, the promise will reject after the optional timeout or resolve after completion.\n   *\n   * <p> NOTE: this operation will continue even after the promise rejects due to a timeout.\n   * @param options options with timeout.\n   */\n  async shutdown(options?: ShutdownOptions): Promise<void> {\n    // Do not call shutdown again if it has already been called.\n    if (this._shutdown) {\n      api.diag.error('Cannot call shutdown twice.');\n      return;\n    }\n\n    // No timeout if timeoutMillis is undefined or null.\n    if (options?.timeoutMillis == null) {\n      await this.onShutdown();\n    } else {\n      await callWithTimeout(this.onShutdown(), options.timeoutMillis);\n    }\n\n    this._shutdown = true;\n  }\n\n  /**\n   * Flushes metrics read by this reader, the promise will reject after the optional timeout or resolve after completion.\n   *\n   * <p> NOTE: this operation will continue even after the promise rejects due to a timeout.\n   * @param options options with timeout.\n   */\n  async forceFlush(options?: ForceFlushOptions): Promise<void> {\n    if (this._shutdown) {\n      api.diag.warn('Cannot forceFlush on already shutdown MetricReader.');\n      return;\n    }\n\n    // No timeout if timeoutMillis is undefined or null.\n    if (options?.timeoutMillis == null) {\n      await this.onForceFlush();\n      return;\n    }\n\n    await callWithTimeout(this.onForceFlush(), options.timeoutMillis);\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as api from '@opentelemetry/api';\nimport {\n  internal,\n  ExportResultCode,\n  globalErrorHandler,\n  unrefTimer,\n} from '@opentelemetry/core';\nimport { MetricReader } from './MetricReader';\nimport { PushMetricExporter } from './MetricExporter';\nimport { callWithTimeout, TimeoutError } from '../utils';\nimport { diag } from '@opentelemetry/api';\nimport { MetricProducer } from './MetricProducer';\n\nexport type PeriodicExportingMetricReaderOptions = {\n  /**\n   * The backing exporter for the metric reader.\n   */\n  exporter: PushMetricExporter;\n  /**\n   * An internal milliseconds for the metric reader to initiate metric\n   * collection.\n   */\n  exportIntervalMillis?: number;\n  /**\n   * Milliseconds for the async observable callback to timeout.\n   */\n  exportTimeoutMillis?: number;\n  /**\n   * **Note, this option is experimental**. Additional MetricProducers to use as a source of\n   * aggregated metric data in addition to the SDK's metric data. The resource returned by\n   * these MetricProducers is ignored; the SDK's resource will be used instead.\n   * @experimental\n   */\n  metricProducers?: MetricProducer[];\n};\n\n/**\n * {@link MetricReader} which collects metrics based on a user-configurable time interval, and passes the metrics to\n * the configured {@link PushMetricExporter}\n */\nexport class PeriodicExportingMetricReader extends MetricReader {\n  private _interval?: ReturnType<typeof setInterval>;\n  private _exporter: PushMetricExporter;\n  private readonly _exportInterval: number;\n  private readonly _exportTimeout: number;\n\n  constructor(options: PeriodicExportingMetricReaderOptions) {\n    super({\n      aggregationSelector: options.exporter.selectAggregation?.bind(\n        options.exporter\n      ),\n      aggregationTemporalitySelector:\n        options.exporter.selectAggregationTemporality?.bind(options.exporter),\n      metricProducers: options.metricProducers,\n    });\n\n    if (\n      options.exportIntervalMillis !== undefined &&\n      options.exportIntervalMillis <= 0\n    ) {\n      throw Error('exportIntervalMillis must be greater than 0');\n    }\n\n    if (\n      options.exportTimeoutMillis !== undefined &&\n      options.exportTimeoutMillis <= 0\n    ) {\n      throw Error('exportTimeoutMillis must be greater than 0');\n    }\n\n    if (\n      options.exportTimeoutMillis !== undefined &&\n      options.exportIntervalMillis !== undefined &&\n      options.exportIntervalMillis < options.exportTimeoutMillis\n    ) {\n      throw Error(\n        'exportIntervalMillis must be greater than or equal to exportTimeoutMillis'\n      );\n    }\n\n    this._exportInterval = options.exportIntervalMillis ?? 60000;\n    this._exportTimeout = options.exportTimeoutMillis ?? 30000;\n    this._exporter = options.exporter;\n  }\n\n  private async _runOnce(): Promise<void> {\n    try {\n      await callWithTimeout(this._doRun(), this._exportTimeout);\n    } catch (err) {\n      if (err instanceof TimeoutError) {\n        api.diag.error(\n          'Export took longer than %s milliseconds and timed out.',\n          this._exportTimeout\n        );\n        return;\n      }\n\n      globalErrorHandler(err);\n    }\n  }\n\n  private async _doRun(): Promise<void> {\n    const { resourceMetrics, errors } = await this.collect({\n      timeoutMillis: this._exportTimeout,\n    });\n\n    if (errors.length > 0) {\n      api.diag.error(\n        'PeriodicExportingMetricReader: metrics collection errors',\n        ...errors\n      );\n    }\n\n    const doExport = async () => {\n      const result = await internal._export(this._exporter, resourceMetrics);\n      if (result.code !== ExportResultCode.SUCCESS) {\n        throw new Error(\n          `PeriodicExportingMetricReader: metrics export failed (error ${result.error})`\n        );\n      }\n    };\n\n    // Avoid scheduling a promise to make the behavior more predictable and easier to test\n    if (resourceMetrics.resource.asyncAttributesPending) {\n      resourceMetrics.resource\n        .waitForAsyncAttributes?.()\n        .then(doExport, err =>\n          diag.debug('Error while resolving async portion of resource: ', err)\n        );\n    } else {\n      await doExport();\n    }\n  }\n\n  protected override onInitialized(): void {\n    // start running the interval as soon as this reader is initialized and keep handle for shutdown.\n    this._interval = setInterval(() => {\n      // this._runOnce never rejects. Using void operator to suppress @typescript-eslint/no-floating-promises.\n      void this._runOnce();\n    }, this._exportInterval);\n    unrefTimer(this._interval);\n  }\n\n  protected async onForceFlush(): Promise<void> {\n    await this._runOnce();\n    await this._exporter.forceFlush();\n  }\n\n  protected async onShutdown(): Promise<void> {\n    if (this._interval) {\n      clearInterval(this._interval);\n    }\n\n    await this._exporter.shutdown();\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ExportResultCode } from '@opentelemetry/core';\nimport { ExportResult } from '@opentelemetry/core';\nimport { InstrumentType } from '../InstrumentDescriptor';\nimport { AggregationTemporality } from './AggregationTemporality';\nimport { ResourceMetrics } from './MetricData';\nimport { PushMetricExporter } from './MetricExporter';\n\n/**\n * In-memory Metrics Exporter is a Push Metric Exporter\n * which accumulates metrics data in the local memory and\n * allows to inspect it (useful for e.g. unit tests).\n */\nexport class InMemoryMetricExporter implements PushMetricExporter {\n  protected _shutdown = false;\n  protected _aggregationTemporality: AggregationTemporality;\n  private _metrics: ResourceMetrics[] = [];\n\n  constructor(aggregationTemporality: AggregationTemporality) {\n    this._aggregationTemporality = aggregationTemporality;\n  }\n\n  /**\n   * @inheritedDoc\n   */\n  export(\n    metrics: ResourceMetrics,\n    resultCallback: (result: ExportResult) => void\n  ): void {\n    // Avoid storing metrics when exporter is shutdown\n    if (this._shutdown) {\n      setTimeout(() => resultCallback({ code: ExportResultCode.FAILED }), 0);\n      return;\n    }\n\n    this._metrics.push(metrics);\n    setTimeout(() => resultCallback({ code: ExportResultCode.SUCCESS }), 0);\n  }\n\n  /**\n   * Returns all the collected resource metrics\n   * @returns ResourceMetrics[]\n   */\n  public getMetrics(): ResourceMetrics[] {\n    return this._metrics;\n  }\n\n  forceFlush(): Promise<void> {\n    return Promise.resolve();\n  }\n\n  reset() {\n    this._metrics = [];\n  }\n\n  selectAggregationTemporality(\n    _instrumentType: InstrumentType\n  ): AggregationTemporality {\n    return this._aggregationTemporality;\n  }\n\n  shutdown(): Promise<void> {\n    this._shutdown = true;\n    return Promise.resolve();\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { ExportResult, ExportResultCode } from '@opentelemetry/core';\nimport { InstrumentType } from '../InstrumentDescriptor';\nimport { AggregationTemporality } from './AggregationTemporality';\nimport { ResourceMetrics } from './MetricData';\nimport { PushMetricExporter } from './MetricExporter';\nimport {\n  AggregationTemporalitySelector,\n  DEFAULT_AGGREGATION_TEMPORALITY_SELECTOR,\n} from './AggregationSelector';\n\ninterface ConsoleMetricExporterOptions {\n  temporalitySelector?: AggregationTemporalitySelector;\n}\n\n/* eslint-disable no-console */\nexport class ConsoleMetricExporter implements PushMetricExporter {\n  protected _shutdown = false;\n  protected _temporalitySelector: AggregationTemporalitySelector;\n\n  constructor(options?: ConsoleMetricExporterOptions) {\n    this._temporalitySelector =\n      options?.temporalitySelector ?? DEFAULT_AGGREGATION_TEMPORALITY_SELECTOR;\n  }\n\n  export(\n    metrics: ResourceMetrics,\n    resultCallback: (result: ExportResult) => void\n  ): void {\n    if (this._shutdown) {\n      // If the exporter is shutting down, by spec, we need to return FAILED as export result\n      setImmediate(resultCallback, { code: ExportResultCode.FAILED });\n      return;\n    }\n\n    return ConsoleMetricExporter._sendMetrics(metrics, resultCallback);\n  }\n\n  forceFlush(): Promise<void> {\n    return Promise.resolve();\n  }\n\n  selectAggregationTemporality(\n    _instrumentType: InstrumentType\n  ): AggregationTemporality {\n    return this._temporalitySelector(_instrumentType);\n  }\n\n  shutdown(): Promise<void> {\n    this._shutdown = true;\n    return Promise.resolve();\n  }\n\n  private static _sendMetrics(\n    metrics: ResourceMetrics,\n    done: (result: ExportResult) => void\n  ): void {\n    for (const scopeMetrics of metrics.scopeMetrics) {\n      for (const metric of scopeMetrics.metrics) {\n        console.dir({\n          descriptor: metric.descriptor,\n          dataPointType: metric.dataPointType,\n          dataPoints: metric.dataPoints,\n        });\n      }\n    }\n\n    done({ code: ExportResultCode.SUCCESS });\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport function defaultServiceName(): string {\n  return `unknown_service:${process.argv0}`;\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport const normalizeArch = (nodeArchString: string): string => {\n  // Maps from https://nodejs.org/api/os.html#osarch to arch values in spec:\n  // https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/resource/semantic_conventions/host.md\n  switch (nodeArchString) {\n    case 'arm':\n      return 'arm32';\n    case 'ppc':\n      return 'ppc32';\n    case 'x64':\n      return 'amd64';\n    default:\n      return nodeArchString;\n  }\n};\n\nexport const normalizeType = (nodePlatform: string): string => {\n  // Maps from https://nodejs.org/api/os.html#osplatform to arch values in spec:\n  // https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/resource/semantic_conventions/os.md\n  switch (nodePlatform) {\n    case 'sunos':\n      return 'solaris';\n    case 'win32':\n      return 'windows';\n    default:\n      return nodePlatform;\n  }\n};\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as child_process from 'child_process';\nimport * as util from 'util';\n\nexport const execAsync = util.promisify(child_process.exec);\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { execAsync } from './execAsync';\nimport { diag } from '@opentelemetry/api';\n\nexport async function getMachineId(): Promise<string> {\n  try {\n    const result = await execAsync('ioreg -rd1 -c \"IOPlatformExpertDevice\"');\n\n    const idLine = result.stdout\n      .split('\\n')\n      .find(line => line.includes('IOPlatformUUID'));\n\n    if (!idLine) {\n      return '';\n    }\n\n    const parts = idLine.split('\" = \"');\n    if (parts.length === 2) {\n      return parts[1].slice(0, -1);\n    }\n  } catch (e) {\n    diag.debug(`error reading machine id: ${e}`);\n  }\n\n  return '';\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { promises as fs } from 'fs';\nimport { diag } from '@opentelemetry/api';\n\nexport async function getMachineId(): Promise<string> {\n  const paths = ['/etc/machine-id', '/var/lib/dbus/machine-id'];\n\n  for (const path of paths) {\n    try {\n      const result = await fs.readFile(path, { encoding: 'utf8' });\n      return result.trim();\n    } catch (e) {\n      diag.debug(`error reading machine id: ${e}`);\n    }\n  }\n\n  return '';\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { promises as fs } from 'fs';\nimport { execAsync } from './execAsync';\nimport { diag } from '@opentelemetry/api';\n\nexport async function getMachineId(): Promise<string> {\n  try {\n    const result = await fs.readFile('/etc/hostid', { encoding: 'utf8' });\n    return result.trim();\n  } catch (e) {\n    diag.debug(`error reading machine id: ${e}`);\n  }\n\n  try {\n    const result = await execAsync('kenv -q smbios.system.uuid');\n    return result.stdout.trim();\n  } catch (e) {\n    diag.debug(`error reading machine id: ${e}`);\n  }\n\n  return '';\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as process from 'process';\nimport { execAsync } from './execAsync';\nimport { diag } from '@opentelemetry/api';\n\nexport async function getMachineId(): Promise<string> {\n  const args =\n    'QUERY HKEY_LOCAL_MACHINE\\\\SOFTWARE\\\\Microsoft\\\\Cryptography /v MachineGuid';\n  let command = '%windir%\\\\System32\\\\REG.exe';\n  if (process.arch === 'ia32' && 'PROCESSOR_ARCHITEW6432' in process.env) {\n    command = '%windir%\\\\sysnative\\\\cmd.exe /c ' + command;\n  }\n\n  try {\n    const result = await execAsync(`${command} ${args}`);\n    const parts = result.stdout.split('REG_SZ');\n    if (parts.length === 2) {\n      return parts[1].trim();\n    }\n  } catch (e) {\n    diag.debug(`error reading machine id: ${e}`);\n  }\n\n  return '';\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { diag } from '@opentelemetry/api';\n\nexport async function getMachineId(): Promise<string> {\n  diag.debug('could not read machine-id: unsupported platform');\n  return '';\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport * as process from 'process';\n\nlet getMachineId: () => Promise<string>;\n\nswitch (process.platform) {\n  case 'darwin':\n    ({ getMachineId } = require('./getMachineId-darwin'));\n    break;\n  case 'linux':\n    ({ getMachineId } = require('./getMachineId-linux'));\n    break;\n  case 'freebsd':\n    ({ getMachineId } = require('./getMachineId-bsd'));\n    break;\n  case 'win32':\n    ({ getMachineId } = require('./getMachineId-win'));\n    break;\n  default:\n    ({ getMachineId } = require('./getMachineId-unsupported'));\n}\n\nexport { getMachineId };\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SemanticResourceAttributes } from '@opentelemetry/semantic-conventions';\nimport { Resource } from '../../Resource';\nimport { DetectorSync, ResourceAttributes } from '../../types';\nimport { ResourceDetectionConfig } from '../../config';\nimport { arch, hostname } from 'os';\nimport { normalizeArch } from './utils';\nimport { getMachineId } from './machine-id/getMachineId';\n\n/**\n * HostDetectorSync detects the resources related to the host current process is\n * running on. Currently only non-cloud-based attributes are included.\n */\nclass HostDetectorSync implements DetectorSync {\n  detect(_config?: ResourceDetectionConfig): Resource {\n    const attributes: ResourceAttributes = {\n      [SemanticResourceAttributes.HOST_NAME]: hostname(),\n      [SemanticResourceAttributes.HOST_ARCH]: normalizeArch(arch()),\n    };\n\n    return new Resource(attributes, this._getAsyncAttributes());\n  }\n\n  private _getAsyncAttributes(): Promise<ResourceAttributes> {\n    return getMachineId().then(machineId => {\n      const attributes: ResourceAttributes = {};\n      if (machineId) {\n        attributes[SemanticResourceAttributes.HOST_ID] = machineId;\n      }\n      return attributes;\n    });\n  }\n}\n\nexport const hostDetectorSync = new HostDetectorSync();\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Detector } from '../../types';\nimport { ResourceDetectionConfig } from '../../config';\nimport { IResource } from '../../IResource';\nimport { hostDetectorSync } from './HostDetectorSync';\n\n/**\n * HostDetector detects the resources related to the host current process is\n * running on. Currently only non-cloud-based attributes are included.\n */\nclass HostDetector implements Detector {\n  detect(_config?: ResourceDetectionConfig): Promise<IResource> {\n    return Promise.resolve(hostDetectorSync.detect(_config));\n  }\n}\n\nexport const hostDetector = new HostDetector();\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SemanticResourceAttributes } from '@opentelemetry/semantic-conventions';\nimport { Resource } from '../../Resource';\nimport { DetectorSync, ResourceAttributes } from '../../types';\nimport { ResourceDetectionConfig } from '../../config';\nimport { platform, release } from 'os';\nimport { normalizeType } from './utils';\n\n/**\n * OSDetectorSync detects the resources related to the operating system (OS) on\n * which the process represented by this resource is running.\n */\nclass OSDetectorSync implements DetectorSync {\n  detect(_config?: ResourceDetectionConfig): Resource {\n    const attributes: ResourceAttributes = {\n      [SemanticResourceAttributes.OS_TYPE]: normalizeType(platform()),\n      [SemanticResourceAttributes.OS_VERSION]: release(),\n    };\n    return new Resource(attributes);\n  }\n}\n\nexport const osDetectorSync = new OSDetectorSync();\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Detector } from '../../types';\nimport { ResourceDetectionConfig } from '../../config';\nimport { IResource } from '../../IResource';\nimport { osDetectorSync } from './OSDetectorSync';\n\n/**\n * OSDetector detects the resources related to the operating system (OS) on\n * which the process represented by this resource is running.\n */\nclass OSDetector implements Detector {\n  detect(_config?: ResourceDetectionConfig): Promise<IResource> {\n    return Promise.resolve(osDetectorSync.detect(_config));\n  }\n}\n\nexport const osDetector = new OSDetector();\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { diag } from '@opentelemetry/api';\nimport { SemanticResourceAttributes } from '@opentelemetry/semantic-conventions';\nimport { Resource } from '../../Resource';\nimport { DetectorSync, ResourceAttributes } from '../../types';\nimport { ResourceDetectionConfig } from '../../config';\nimport { IResource } from '../../IResource';\nimport * as os from 'os';\n\n/**\n * ProcessDetectorSync will be used to detect the resources related current process running\n * and being instrumented from the NodeJS Process module.\n */\nclass ProcessDetectorSync implements DetectorSync {\n  detect(_config?: ResourceDetectionConfig): IResource {\n    const attributes: ResourceAttributes = {\n      [SemanticResourceAttributes.PROCESS_PID]: process.pid,\n      [SemanticResourceAttributes.PROCESS_EXECUTABLE_NAME]: process.title,\n      [SemanticResourceAttributes.PROCESS_EXECUTABLE_PATH]: process.execPath,\n      [SemanticResourceAttributes.PROCESS_COMMAND_ARGS]: [\n        process.argv[0],\n        ...process.execArgv,\n        ...process.argv.slice(1),\n      ],\n      [SemanticResourceAttributes.PROCESS_RUNTIME_VERSION]:\n        process.versions.node,\n      [SemanticResourceAttributes.PROCESS_RUNTIME_NAME]: 'nodejs',\n      [SemanticResourceAttributes.PROCESS_RUNTIME_DESCRIPTION]: 'Node.js',\n    };\n\n    if (process.argv.length > 1) {\n      attributes[SemanticResourceAttributes.PROCESS_COMMAND] = process.argv[1];\n    }\n\n    try {\n      const userInfo = os.userInfo();\n      attributes[SemanticResourceAttributes.PROCESS_OWNER] = userInfo.username;\n    } catch (e) {\n      diag.debug(`error obtaining process owner: ${e}`);\n    }\n\n    return new Resource(attributes);\n  }\n}\n\nexport const processDetectorSync = new ProcessDetectorSync();\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Detector } from '../../types';\nimport { ResourceDetectionConfig } from '../../config';\nimport { IResource } from '../../IResource';\nimport { processDetectorSync } from './ProcessDetectorSync';\n\n/**\n * ProcessDetector will be used to detect the resources related current process running\n * and being instrumented from the NodeJS Process module.\n */\nclass ProcessDetector implements Detector {\n  detect(config?: ResourceDetectionConfig): Promise<IResource> {\n    return Promise.resolve(processDetectorSync.detect(config));\n  }\n}\n\nexport const processDetector = new ProcessDetector();\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport * from './default-service-name';\nexport * from './HostDetector';\nexport * from './OSDetector';\nexport * from './HostDetectorSync';\nexport * from './OSDetectorSync';\nexport * from './ProcessDetector';\nexport * from './ProcessDetectorSync';\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport * from './node';\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { diag } from '@opentelemetry/api';\nimport { SemanticResourceAttributes } from '@opentelemetry/semantic-conventions';\nimport { SDK_INFO } from '@opentelemetry/core';\nimport { ResourceAttributes } from './types';\nimport { defaultServiceName } from './platform';\nimport { IResource } from './IResource';\n\n/**\n * A Resource describes the entity for which a signals (metrics or trace) are\n * collected.\n */\nexport class Resource implements IResource {\n  static readonly EMPTY = new Resource({});\n  private _syncAttributes?: ResourceAttributes;\n  private _asyncAttributesPromise?: Promise<ResourceAttributes>;\n  private _attributes?: ResourceAttributes;\n\n  /**\n   * Check if async attributes have resolved. This is useful to avoid awaiting\n   * waitForAsyncAttributes (which will introduce asynchronous behavior) when not necessary.\n   *\n   * @returns true if the resource \"attributes\" property is not yet settled to its final value\n   */\n  public asyncAttributesPending?: boolean;\n\n  /**\n   * Returns an empty Resource\n   */\n  static empty(): IResource {\n    return Resource.EMPTY;\n  }\n\n  /**\n   * Returns a Resource that identifies the SDK in use.\n   */\n  static default(): IResource {\n    return new Resource({\n      [SemanticResourceAttributes.SERVICE_NAME]: defaultServiceName(),\n      [SemanticResourceAttributes.TELEMETRY_SDK_LANGUAGE]:\n        SDK_INFO[SemanticResourceAttributes.TELEMETRY_SDK_LANGUAGE],\n      [SemanticResourceAttributes.TELEMETRY_SDK_NAME]:\n        SDK_INFO[SemanticResourceAttributes.TELEMETRY_SDK_NAME],\n      [SemanticResourceAttributes.TELEMETRY_SDK_VERSION]:\n        SDK_INFO[SemanticResourceAttributes.TELEMETRY_SDK_VERSION],\n    });\n  }\n\n  constructor(\n    /**\n     * A dictionary of attributes with string keys and values that provide\n     * information about the entity as numbers, strings or booleans\n     * TODO: Consider to add check/validation on attributes.\n     */\n    attributes: ResourceAttributes,\n    asyncAttributesPromise?: Promise<ResourceAttributes>\n  ) {\n    this._attributes = attributes;\n    this.asyncAttributesPending = asyncAttributesPromise != null;\n    this._syncAttributes = this._attributes ?? {};\n    this._asyncAttributesPromise = asyncAttributesPromise?.then(\n      asyncAttributes => {\n        this._attributes = Object.assign({}, this._attributes, asyncAttributes);\n        this.asyncAttributesPending = false;\n        return asyncAttributes;\n      },\n      err => {\n        diag.debug(\"a resource's async attributes promise rejected: %s\", err);\n        this.asyncAttributesPending = false;\n        return {};\n      }\n    );\n  }\n\n  get attributes(): ResourceAttributes {\n    if (this.asyncAttributesPending) {\n      diag.error(\n        'Accessing resource attributes before async attributes settled'\n      );\n    }\n\n    return this._attributes ?? {};\n  }\n\n  /**\n   * Returns a promise that will never be rejected. Resolves when all async attributes have finished being added to\n   * this Resource's attributes. This is useful in exporters to block until resource detection\n   * has finished.\n   */\n  async waitForAsyncAttributes?(): Promise<void> {\n    if (this.asyncAttributesPending) {\n      await this._asyncAttributesPromise;\n    }\n  }\n\n  /**\n   * Returns a new, merged {@link Resource} by merging the current Resource\n   * with the other Resource. In case of a collision, other Resource takes\n   * precedence.\n   *\n   * @param other the Resource that will be merged with this.\n   * @returns the newly merged Resource.\n   */\n  merge(other: IResource | null): IResource {\n    if (!other) return this;\n\n    // SpanAttributes from other resource overwrite attributes from this resource.\n    const mergedSyncAttributes = {\n      ...this._syncAttributes,\n      //Support for old resource implementation where _syncAttributes is not defined\n      ...((other as Resource)._syncAttributes ?? other.attributes),\n    };\n\n    if (\n      !this._asyncAttributesPromise &&\n      !(other as Resource)._asyncAttributesPromise\n    ) {\n      return new Resource(mergedSyncAttributes);\n    }\n\n    const mergedAttributesPromise = Promise.all([\n      this._asyncAttributesPromise,\n      (other as Resource)._asyncAttributesPromise,\n    ]).then(([thisAsyncAttributes, otherAsyncAttributes]) => {\n      return {\n        ...this._syncAttributes,\n        ...thisAsyncAttributes,\n        //Support for old resource implementation where _syncAttributes is not defined\n        ...((other as Resource)._syncAttributes ?? other.attributes),\n        ...otherAsyncAttributes,\n      };\n    });\n\n    return new Resource(mergedSyncAttributes, mergedAttributesPromise);\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  browserDetectorSync,\n  Detector,\n  IResource,\n  ResourceDetectionConfig,\n} from '..';\n\n/**\n * BrowserDetector will be used to detect the resources related to browser.\n */\nclass BrowserDetector implements Detector {\n  detect(config?: ResourceDetectionConfig): Promise<IResource> {\n    return Promise.resolve(browserDetectorSync.detect(config));\n  }\n}\n\nexport const browserDetector = new BrowserDetector();\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { diag } from '@opentelemetry/api';\nimport { getEnv } from '@opentelemetry/core';\nimport { SemanticResourceAttributes } from '@opentelemetry/semantic-conventions';\nimport { Resource } from '../Resource';\nimport { DetectorSync, ResourceAttributes } from '../types';\nimport { ResourceDetectionConfig } from '../config';\nimport { IResource } from '../IResource';\n\n/**\n * EnvDetectorSync can be used to detect the presence of and create a Resource\n * from the OTEL_RESOURCE_ATTRIBUTES environment variable.\n */\nclass EnvDetectorSync implements DetectorSync {\n  // Type, attribute keys, and attribute values should not exceed 256 characters.\n  private readonly _MAX_LENGTH = 255;\n\n  // OTEL_RESOURCE_ATTRIBUTES is a comma-separated list of attributes.\n  private readonly _COMMA_SEPARATOR = ',';\n\n  // OTEL_RESOURCE_ATTRIBUTES contains key value pair separated by '='.\n  private readonly _LABEL_KEY_VALUE_SPLITTER = '=';\n\n  private readonly _ERROR_MESSAGE_INVALID_CHARS =\n    'should be a ASCII string with a length greater than 0 and not exceed ' +\n    this._MAX_LENGTH +\n    ' characters.';\n\n  private readonly _ERROR_MESSAGE_INVALID_VALUE =\n    'should be a ASCII string with a length not exceed ' +\n    this._MAX_LENGTH +\n    ' characters.';\n\n  /**\n   * Returns a {@link Resource} populated with attributes from the\n   * OTEL_RESOURCE_ATTRIBUTES environment variable. Note this is an async\n   * function to conform to the Detector interface.\n   *\n   * @param config The resource detection config\n   */\n  detect(_config?: ResourceDetectionConfig): IResource {\n    const attributes: ResourceAttributes = {};\n    const env = getEnv();\n\n    const rawAttributes = env.OTEL_RESOURCE_ATTRIBUTES;\n    const serviceName = env.OTEL_SERVICE_NAME;\n\n    if (rawAttributes) {\n      try {\n        const parsedAttributes = this._parseResourceAttributes(rawAttributes);\n        Object.assign(attributes, parsedAttributes);\n      } catch (e) {\n        diag.debug(`EnvDetector failed: ${e.message}`);\n      }\n    }\n\n    if (serviceName) {\n      attributes[SemanticResourceAttributes.SERVICE_NAME] = serviceName;\n    }\n\n    return new Resource(attributes);\n  }\n\n  /**\n   * Creates an attribute map from the OTEL_RESOURCE_ATTRIBUTES environment\n   * variable.\n   *\n   * OTEL_RESOURCE_ATTRIBUTES: A comma-separated list of attributes describing\n   * the source in more detail, e.g. “key1=val1,key2=val2”. Domain names and\n   * paths are accepted as attribute keys. Values may be quoted or unquoted in\n   * general. If a value contains whitespaces, =, or \" characters, it must\n   * always be quoted.\n   *\n   * @param rawEnvAttributes The resource attributes as a comma-seperated list\n   * of key/value pairs.\n   * @returns The sanitized resource attributes.\n   */\n  private _parseResourceAttributes(\n    rawEnvAttributes?: string\n  ): ResourceAttributes {\n    if (!rawEnvAttributes) return {};\n\n    const attributes: ResourceAttributes = {};\n    const rawAttributes: string[] = rawEnvAttributes.split(\n      this._COMMA_SEPARATOR,\n      -1\n    );\n    for (const rawAttribute of rawAttributes) {\n      const keyValuePair: string[] = rawAttribute.split(\n        this._LABEL_KEY_VALUE_SPLITTER,\n        -1\n      );\n      if (keyValuePair.length !== 2) {\n        continue;\n      }\n      let [key, value] = keyValuePair;\n      // Leading and trailing whitespaces are trimmed.\n      key = key.trim();\n      value = value.trim().split(/^\"|\"$/).join('');\n      if (!this._isValidAndNotEmpty(key)) {\n        throw new Error(`Attribute key ${this._ERROR_MESSAGE_INVALID_CHARS}`);\n      }\n      if (!this._isValid(value)) {\n        throw new Error(`Attribute value ${this._ERROR_MESSAGE_INVALID_VALUE}`);\n      }\n      attributes[key] = decodeURIComponent(value);\n    }\n    return attributes;\n  }\n\n  /**\n   * Determines whether the given String is a valid printable ASCII string with\n   * a length not exceed _MAX_LENGTH characters.\n   *\n   * @param str The String to be validated.\n   * @returns Whether the String is valid.\n   */\n  private _isValid(name: string): boolean {\n    return name.length <= this._MAX_LENGTH && this._isBaggageOctetString(name);\n  }\n\n  // https://www.w3.org/TR/baggage/#definition\n  private _isBaggageOctetString(str: string): boolean {\n    for (let i = 0; i < str.length; i++) {\n      const ch = str.charCodeAt(i);\n      if (ch < 0x21 || ch === 0x2c || ch === 0x3b || ch === 0x5c || ch > 0x7e) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Determines whether the given String is a valid printable ASCII string with\n   * a length greater than 0 and not exceed _MAX_LENGTH characters.\n   *\n   * @param str The String to be validated.\n   * @returns Whether the String is valid and not empty.\n   */\n  private _isValidAndNotEmpty(str: string): boolean {\n    return str.length > 0 && this._isValid(str);\n  }\n}\n\nexport const envDetectorSync = new EnvDetectorSync();\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Detector } from '../types';\nimport { ResourceDetectionConfig } from '../config';\nimport { IResource } from '../IResource';\nimport { envDetectorSync } from './EnvDetectorSync';\n\n/**\n * EnvDetector can be used to detect the presence of and create a Resource\n * from the OTEL_RESOURCE_ATTRIBUTES environment variable.\n */\nclass EnvDetector implements Detector {\n  /**\n   * Returns a {@link Resource} populated with attributes from the\n   * OTEL_RESOURCE_ATTRIBUTES environment variable. Note this is an async\n   * function to conform to the Detector interface.\n   *\n   * @param config The resource detection config\n   */\n  detect(config?: ResourceDetectionConfig): Promise<IResource> {\n    return Promise.resolve(envDetectorSync.detect(config));\n  }\n}\n\nexport const envDetector = new EnvDetector();\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SemanticResourceAttributes } from '@opentelemetry/semantic-conventions';\nimport { DetectorSync, IResource, Resource, ResourceDetectionConfig } from '..';\nimport { ResourceAttributes } from '../types';\nimport { diag } from '@opentelemetry/api';\n\n/**\n * BrowserDetectorSync will be used to detect the resources related to browser.\n */\nclass BrowserDetectorSync implements DetectorSync {\n  detect(config?: ResourceDetectionConfig): IResource {\n    const isBrowser = typeof navigator !== 'undefined';\n    if (!isBrowser) {\n      return Resource.empty();\n    }\n    const browserResource: ResourceAttributes = {\n      [SemanticResourceAttributes.PROCESS_RUNTIME_NAME]: 'browser',\n      [SemanticResourceAttributes.PROCESS_RUNTIME_DESCRIPTION]: 'Web Browser',\n      [SemanticResourceAttributes.PROCESS_RUNTIME_VERSION]: navigator.userAgent,\n    };\n    return this._getResourceAttributes(browserResource, config);\n  }\n  /**\n   * Validates process resource attribute map from process variables\n   *\n   * @param browserResource The un-sanitized resource attributes from process as key/value pairs.\n   * @param config: Config\n   * @returns The sanitized resource attributes.\n   */\n  private _getResourceAttributes(\n    browserResource: ResourceAttributes,\n    _config?: ResourceDetectionConfig\n  ) {\n    if (\n      browserResource[SemanticResourceAttributes.PROCESS_RUNTIME_VERSION] === ''\n    ) {\n      diag.debug(\n        'BrowserDetector failed: Unable to find required browser resources. '\n      );\n      return Resource.empty();\n    } else {\n      return new Resource({\n        ...browserResource,\n      });\n    }\n  }\n}\n\nexport const browserDetectorSync = new BrowserDetectorSync();\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport * from './BrowserDetector';\nexport * from './EnvDetector';\nexport * from './BrowserDetectorSync';\nexport * from './EnvDetectorSync';\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const isPromiseLike = <R>(val: any): val is PromiseLike<R> => {\n  return (\n    val !== null && typeof val === 'object' && typeof val.then === 'function'\n  );\n};\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Resource } from './Resource';\nimport { ResourceDetectionConfig } from './config';\nimport { diag } from '@opentelemetry/api';\nimport { isPromiseLike } from './utils';\nimport { Detector, DetectorSync } from './types';\nimport { IResource } from './IResource';\n\n/**\n * Runs all resource detectors and returns the results merged into a single Resource. Promise\n * does not resolve until all the underlying detectors have resolved, unlike\n * detectResourcesSync.\n *\n * @deprecated use detectResourcesSync() instead.\n * @param config Configuration for resource detection\n */\nexport const detectResources = async (\n  config: ResourceDetectionConfig = {}\n): Promise<IResource> => {\n  const resources: IResource[] = await Promise.all(\n    (config.detectors || []).map(async d => {\n      try {\n        const resource = await d.detect(config);\n        diag.debug(`${d.constructor.name} found resource.`, resource);\n        return resource;\n      } catch (e) {\n        diag.debug(`${d.constructor.name} failed: ${e.message}`);\n        return Resource.empty();\n      }\n    })\n  );\n\n  // Future check if verbose logging is enabled issue #1903\n  logResources(resources);\n\n  return resources.reduce(\n    (acc, resource) => acc.merge(resource),\n    Resource.empty()\n  );\n};\n\n/**\n * Runs all resource detectors synchronously, merging their results. In case of attribute collision later resources will take precedence.\n *\n * @param config Configuration for resource detection\n */\nexport const detectResourcesSync = (\n  config: ResourceDetectionConfig = {}\n): IResource => {\n  const resources: IResource[] = (config.detectors ?? []).map(\n    (d: Detector | DetectorSync) => {\n      try {\n        const resourceOrPromise = d.detect(config);\n        let resource: IResource;\n        if (isPromiseLike<Resource>(resourceOrPromise)) {\n          const createPromise = async () => {\n            const resolvedResource = await resourceOrPromise;\n            return resolvedResource.attributes;\n          };\n          resource = new Resource({}, createPromise());\n        } else {\n          resource = resourceOrPromise as IResource;\n        }\n\n        if (resource.waitForAsyncAttributes) {\n          void resource\n            .waitForAsyncAttributes()\n            .then(() =>\n              diag.debug(`${d.constructor.name} found resource.`, resource)\n            );\n        } else {\n          diag.debug(`${d.constructor.name} found resource.`, resource);\n        }\n\n        return resource;\n      } catch (e) {\n        diag.error(`${d.constructor.name} failed: ${e.message}`);\n        return Resource.empty();\n      }\n    }\n  );\n\n  const mergedResources = resources.reduce(\n    (acc, resource) => acc.merge(resource),\n    Resource.empty()\n  );\n\n  if (mergedResources.waitForAsyncAttributes) {\n    void mergedResources.waitForAsyncAttributes().then(() => {\n      // Future check if verbose logging is enabled issue #1903\n      logResources(resources);\n    });\n  }\n\n  return mergedResources;\n};\n\n/**\n * Writes debug information about the detected resources to the logger defined in the resource detection config, if one is provided.\n *\n * @param resources The array of {@link Resource} that should be logged. Empty entries will be ignored.\n */\nconst logResources = (resources: Array<IResource>) => {\n  resources.forEach(resource => {\n    // Print only populated resources\n    if (Object.keys(resource.attributes).length > 0) {\n      const resourceDebugString = JSON.stringify(resource.attributes, null, 4);\n      diag.verbose(resourceDebugString);\n    }\n  });\n};\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport * from './Resource';\nexport * from './IResource';\nexport * from './platform';\nexport * from './types';\nexport * from './config';\nexport * from './detectors';\nexport * from './detect-resources';\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { InstrumentationScope } from '@opentelemetry/core';\nimport { InstrumentDescriptor } from '../InstrumentDescriptor';\nimport { InstrumentSelector } from './InstrumentSelector';\nimport { MeterSelector } from './MeterSelector';\nimport { View } from './View';\n\nexport class ViewRegistry {\n  private _registeredViews: View[] = [];\n\n  addView(view: View) {\n    this._registeredViews.push(view);\n  }\n\n  findViews(\n    instrument: InstrumentDescriptor,\n    meter: InstrumentationScope\n  ): View[] {\n    const views = this._registeredViews.filter(registeredView => {\n      return (\n        this._matchInstrument(registeredView.instrumentSelector, instrument) &&\n        this._matchMeter(registeredView.meterSelector, meter)\n      );\n    });\n\n    return views;\n  }\n\n  private _matchInstrument(\n    selector: InstrumentSelector,\n    instrument: InstrumentDescriptor\n  ): boolean {\n    return (\n      (selector.getType() === undefined ||\n        instrument.type === selector.getType()) &&\n      selector.getNameFilter().match(instrument.name) &&\n      selector.getUnitFilter().match(instrument.unit)\n    );\n  }\n\n  private _matchMeter(\n    selector: MeterSelector,\n    meter: InstrumentationScope\n  ): boolean {\n    return (\n      selector.getNameFilter().match(meter.name) &&\n      (meter.version === undefined ||\n        selector.getVersionFilter().match(meter.version)) &&\n      (meter.schemaUrl === undefined ||\n        selector.getSchemaUrlFilter().match(meter.schemaUrl))\n    );\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  context as contextApi,\n  diag,\n  Context,\n  MetricAttributes,\n  ValueType,\n  UpDownCounter,\n  Counter,\n  Histogram,\n  Observable,\n  ObservableCallback,\n  ObservableCounter,\n  ObservableGauge,\n  ObservableUpDownCounter,\n} from '@opentelemetry/api';\nimport { millisToHrTime } from '@opentelemetry/core';\nimport { InstrumentDescriptor } from './InstrumentDescriptor';\nimport { ObservableRegistry } from './state/ObservableRegistry';\nimport {\n  AsyncWritableMetricStorage,\n  WritableMetricStorage,\n} from './state/WritableMetricStorage';\n\nexport class SyncInstrument {\n  constructor(\n    private _writableMetricStorage: WritableMetricStorage,\n    protected _descriptor: InstrumentDescriptor\n  ) {}\n\n  protected _record(\n    value: number,\n    attributes: MetricAttributes = {},\n    context: Context = contextApi.active()\n  ) {\n    if (typeof value !== 'number') {\n      diag.warn(\n        `non-number value provided to metric ${this._descriptor.name}: ${value}`\n      );\n      return;\n    }\n    if (\n      this._descriptor.valueType === ValueType.INT &&\n      !Number.isInteger(value)\n    ) {\n      diag.warn(\n        `INT value type cannot accept a floating-point value for ${this._descriptor.name}, ignoring the fractional digits.`\n      );\n      value = Math.trunc(value);\n      // ignore non-finite values.\n      if (!Number.isInteger(value)) {\n        return;\n      }\n    }\n    this._writableMetricStorage.record(\n      value,\n      attributes,\n      context,\n      millisToHrTime(Date.now())\n    );\n  }\n}\n\n/**\n * The class implements {@link UpDownCounter} interface.\n */\nexport class UpDownCounterInstrument\n  extends SyncInstrument\n  implements UpDownCounter\n{\n  /**\n   * Increment value of counter by the input. Inputs may be negative.\n   */\n  add(value: number, attributes?: MetricAttributes, ctx?: Context): void {\n    this._record(value, attributes, ctx);\n  }\n}\n\n/**\n * The class implements {@link Counter} interface.\n */\nexport class CounterInstrument extends SyncInstrument implements Counter {\n  /**\n   * Increment value of counter by the input. Inputs may not be negative.\n   */\n  add(value: number, attributes?: MetricAttributes, ctx?: Context): void {\n    if (value < 0) {\n      diag.warn(\n        `negative value provided to counter ${this._descriptor.name}: ${value}`\n      );\n      return;\n    }\n\n    this._record(value, attributes, ctx);\n  }\n}\n\n/**\n * The class implements {@link Histogram} interface.\n */\nexport class HistogramInstrument extends SyncInstrument implements Histogram {\n  /**\n   * Records a measurement. Value of the measurement must not be negative.\n   */\n  record(value: number, attributes?: MetricAttributes, ctx?: Context): void {\n    if (value < 0) {\n      diag.warn(\n        `negative value provided to histogram ${this._descriptor.name}: ${value}`\n      );\n      return;\n    }\n    this._record(value, attributes, ctx);\n  }\n}\n\nexport class ObservableInstrument implements Observable {\n  /** @internal */\n  _metricStorages: AsyncWritableMetricStorage[];\n  /** @internal */\n  _descriptor: InstrumentDescriptor;\n\n  constructor(\n    descriptor: InstrumentDescriptor,\n    metricStorages: AsyncWritableMetricStorage[],\n    private _observableRegistry: ObservableRegistry\n  ) {\n    this._descriptor = descriptor;\n    this._metricStorages = metricStorages;\n  }\n\n  /**\n   * @see {Observable.addCallback}\n   */\n  addCallback(callback: ObservableCallback) {\n    this._observableRegistry.addCallback(callback, this);\n  }\n\n  /**\n   * @see {Observable.removeCallback}\n   */\n  removeCallback(callback: ObservableCallback) {\n    this._observableRegistry.removeCallback(callback, this);\n  }\n}\n\nexport class ObservableCounterInstrument\n  extends ObservableInstrument\n  implements ObservableCounter {}\nexport class ObservableGaugeInstrument\n  extends ObservableInstrument\n  implements ObservableGauge {}\nexport class ObservableUpDownCounterInstrument\n  extends ObservableInstrument\n  implements ObservableUpDownCounter {}\n\nexport function isObservableInstrument(\n  it: unknown\n): it is ObservableInstrument {\n  return it instanceof ObservableInstrument;\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Meter as IMeter,\n  MetricOptions,\n  Histogram,\n  Counter,\n  UpDownCounter,\n  ObservableGauge,\n  ObservableCounter,\n  ObservableUpDownCounter,\n  BatchObservableCallback,\n  Observable,\n} from '@opentelemetry/api';\nimport {\n  createInstrumentDescriptor,\n  InstrumentType,\n} from './InstrumentDescriptor';\nimport {\n  CounterInstrument,\n  HistogramInstrument,\n  ObservableCounterInstrument,\n  ObservableGaugeInstrument,\n  ObservableUpDownCounterInstrument,\n  UpDownCounterInstrument,\n} from './Instruments';\nimport { MeterSharedState } from './state/MeterSharedState';\n\n/**\n * This class implements the {@link IMeter} interface.\n */\nexport class Meter implements IMeter {\n  constructor(private _meterSharedState: MeterSharedState) {}\n\n  /**\n   * Create a {@link Histogram} instrument.\n   */\n  createHistogram(name: string, options?: MetricOptions): Histogram {\n    const descriptor = createInstrumentDescriptor(\n      name,\n      InstrumentType.HISTOGRAM,\n      options\n    );\n    const storage = this._meterSharedState.registerMetricStorage(descriptor);\n    return new HistogramInstrument(storage, descriptor);\n  }\n\n  /**\n   * Create a {@link Counter} instrument.\n   */\n  createCounter(name: string, options?: MetricOptions): Counter {\n    const descriptor = createInstrumentDescriptor(\n      name,\n      InstrumentType.COUNTER,\n      options\n    );\n    const storage = this._meterSharedState.registerMetricStorage(descriptor);\n    return new CounterInstrument(storage, descriptor);\n  }\n\n  /**\n   * Create a {@link UpDownCounter} instrument.\n   */\n  createUpDownCounter(name: string, options?: MetricOptions): UpDownCounter {\n    const descriptor = createInstrumentDescriptor(\n      name,\n      InstrumentType.UP_DOWN_COUNTER,\n      options\n    );\n    const storage = this._meterSharedState.registerMetricStorage(descriptor);\n    return new UpDownCounterInstrument(storage, descriptor);\n  }\n\n  /**\n   * Create a {@link ObservableGauge} instrument.\n   */\n  createObservableGauge(\n    name: string,\n    options?: MetricOptions\n  ): ObservableGauge {\n    const descriptor = createInstrumentDescriptor(\n      name,\n      InstrumentType.OBSERVABLE_GAUGE,\n      options\n    );\n    const storages =\n      this._meterSharedState.registerAsyncMetricStorage(descriptor);\n    return new ObservableGaugeInstrument(\n      descriptor,\n      storages,\n      this._meterSharedState.observableRegistry\n    );\n  }\n\n  /**\n   * Create a {@link ObservableCounter} instrument.\n   */\n  createObservableCounter(\n    name: string,\n    options?: MetricOptions\n  ): ObservableCounter {\n    const descriptor = createInstrumentDescriptor(\n      name,\n      InstrumentType.OBSERVABLE_COUNTER,\n      options\n    );\n    const storages =\n      this._meterSharedState.registerAsyncMetricStorage(descriptor);\n    return new ObservableCounterInstrument(\n      descriptor,\n      storages,\n      this._meterSharedState.observableRegistry\n    );\n  }\n\n  /**\n   * Create a {@link ObservableUpDownCounter} instrument.\n   */\n  createObservableUpDownCounter(\n    name: string,\n    options?: MetricOptions\n  ): ObservableUpDownCounter {\n    const descriptor = createInstrumentDescriptor(\n      name,\n      InstrumentType.OBSERVABLE_UP_DOWN_COUNTER,\n      options\n    );\n    const storages =\n      this._meterSharedState.registerAsyncMetricStorage(descriptor);\n    return new ObservableUpDownCounterInstrument(\n      descriptor,\n      storages,\n      this._meterSharedState.observableRegistry\n    );\n  }\n\n  /**\n   * @see {@link Meter.addBatchObservableCallback}\n   */\n  addBatchObservableCallback(\n    callback: BatchObservableCallback,\n    observables: Observable[]\n  ) {\n    this._meterSharedState.observableRegistry.addBatchCallback(\n      callback,\n      observables\n    );\n  }\n\n  /**\n   * @see {@link Meter.removeBatchObservableCallback}\n   */\n  removeBatchObservableCallback(\n    callback: BatchObservableCallback,\n    observables: Observable[]\n  ) {\n    this._meterSharedState.observableRegistry.removeBatchCallback(\n      callback,\n      observables\n    );\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { HrTime } from '@opentelemetry/api';\nimport { MetricData } from '../export/MetricData';\nimport { Maybe } from '../utils';\nimport { MetricCollectorHandle } from './MetricCollector';\nimport {\n  createInstrumentDescriptor,\n  InstrumentDescriptor,\n} from '../InstrumentDescriptor';\n\n/**\n * Internal interface.\n *\n * Represents a storage from which we can collect metrics.\n */\nexport abstract class MetricStorage {\n  constructor(protected _instrumentDescriptor: InstrumentDescriptor) {}\n\n  /**\n   * Collects the metrics from this storage.\n   *\n   * Note: This is a stateful operation and may reset any interval-related\n   * state for the MetricCollector.\n   */\n  abstract collect(\n    collector: MetricCollectorHandle,\n    collectors: MetricCollectorHandle[],\n    collectionTime: HrTime\n  ): Maybe<MetricData>;\n\n  getInstrumentDescriptor(): Readonly<InstrumentDescriptor> {\n    return this._instrumentDescriptor;\n  }\n\n  updateDescription(description: string): void {\n    this._instrumentDescriptor = createInstrumentDescriptor(\n      this._instrumentDescriptor.name,\n      this._instrumentDescriptor.type,\n      {\n        description: description,\n        valueType: this._instrumentDescriptor.valueType,\n        unit: this._instrumentDescriptor.unit,\n      }\n    );\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { MetricAttributes } from '@opentelemetry/api';\nimport { hashAttributes } from '../utils';\n\nexport interface Hash<ValueType, HashCodeType> {\n  (value: ValueType): HashCodeType;\n}\n\nexport class HashMap<KeyType, ValueType, HashCodeType> {\n  private _valueMap = new Map<HashCodeType, ValueType>();\n  private _keyMap = new Map<HashCodeType, KeyType>();\n\n  constructor(private _hash: Hash<KeyType, HashCodeType>) {}\n\n  get(key: KeyType, hashCode?: HashCodeType) {\n    hashCode ??= this._hash(key);\n    return this._valueMap.get(hashCode);\n  }\n\n  getOrDefault(key: KeyType, defaultFactory: () => ValueType) {\n    const hash = this._hash(key);\n    if (this._valueMap.has(hash)) {\n      return this._valueMap.get(hash);\n    }\n    const val = defaultFactory();\n    if (!this._keyMap.has(hash)) {\n      this._keyMap.set(hash, key);\n    }\n    this._valueMap.set(hash, val);\n    return val;\n  }\n\n  set(key: KeyType, value: ValueType, hashCode?: HashCodeType) {\n    hashCode ??= this._hash(key);\n    if (!this._keyMap.has(hashCode)) {\n      this._keyMap.set(hashCode, key);\n    }\n    this._valueMap.set(hashCode, value);\n  }\n\n  has(key: KeyType, hashCode?: HashCodeType) {\n    hashCode ??= this._hash(key);\n    return this._valueMap.has(hashCode);\n  }\n\n  *keys(): IterableIterator<[KeyType, HashCodeType]> {\n    const keyIterator = this._keyMap.entries();\n    let next = keyIterator.next();\n    while (next.done !== true) {\n      yield [next.value[1], next.value[0]];\n      next = keyIterator.next();\n    }\n  }\n\n  *entries(): IterableIterator<[KeyType, ValueType, HashCodeType]> {\n    const valueIterator = this._valueMap.entries();\n    let next = valueIterator.next();\n    while (next.done !== true) {\n      // next.value[0] here can not be undefined\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      yield [this._keyMap.get(next.value[0])!, next.value[1], next.value[0]];\n      next = valueIterator.next();\n    }\n  }\n\n  get size() {\n    return this._valueMap.size;\n  }\n}\n\nexport class AttributeHashMap<ValueType> extends HashMap<\n  MetricAttributes,\n  ValueType,\n  string\n> {\n  constructor() {\n    super(hashAttributes);\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Context, HrTime, MetricAttributes } from '@opentelemetry/api';\nimport { Maybe } from '../utils';\nimport { Accumulation, Aggregator } from '../aggregator/types';\nimport { AttributeHashMap } from './HashMap';\n\n/**\n * Internal interface.\n *\n * Allows synchronous collection of metrics. This processor should allow\n * allocation of new aggregation cells for metrics and convert cumulative\n * recording to delta data points.\n */\nexport class DeltaMetricProcessor<T extends Maybe<Accumulation>> {\n  private _activeCollectionStorage = new AttributeHashMap<T>();\n  // TODO: find a reasonable mean to clean the memo;\n  // https://github.com/open-telemetry/opentelemetry-specification/pull/2208\n  private _cumulativeMemoStorage = new AttributeHashMap<T>();\n\n  constructor(private _aggregator: Aggregator<T>) {}\n\n  record(\n    value: number,\n    attributes: MetricAttributes,\n    _context: Context,\n    collectionTime: HrTime\n  ) {\n    const accumulation = this._activeCollectionStorage.getOrDefault(\n      attributes,\n      () => this._aggregator.createAccumulation(collectionTime)\n    );\n    accumulation?.record(value);\n  }\n\n  batchCumulate(\n    measurements: AttributeHashMap<number>,\n    collectionTime: HrTime\n  ) {\n    Array.from(measurements.entries()).forEach(\n      ([attributes, value, hashCode]) => {\n        const accumulation =\n          this._aggregator.createAccumulation(collectionTime);\n        accumulation?.record(value);\n        let delta = accumulation;\n        // Diff with recorded cumulative memo.\n        if (this._cumulativeMemoStorage.has(attributes, hashCode)) {\n          // has() returned true, previous is present.\n          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n          const previous = this._cumulativeMemoStorage.get(\n            attributes,\n            hashCode\n          )!;\n          delta = this._aggregator.diff(previous, accumulation);\n        }\n        // Merge with uncollected active delta.\n        if (this._activeCollectionStorage.has(attributes, hashCode)) {\n          // has() returned true, previous is present.\n          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n          const active = this._activeCollectionStorage.get(\n            attributes,\n            hashCode\n          )!;\n          delta = this._aggregator.merge(active, delta);\n        }\n\n        // Save the current record and the delta record.\n        this._cumulativeMemoStorage.set(attributes, accumulation, hashCode);\n        this._activeCollectionStorage.set(attributes, delta, hashCode);\n      }\n    );\n  }\n\n  /**\n   * Returns a collection of delta metrics. Start time is the when first\n   * time event collected.\n   */\n  collect() {\n    const unreportedDelta = this._activeCollectionStorage;\n    this._activeCollectionStorage = new AttributeHashMap();\n    return unreportedDelta;\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { HrTime } from '@opentelemetry/api';\nimport {\n  Accumulation,\n  AccumulationRecord,\n  Aggregator,\n} from '../aggregator/types';\nimport { MetricData } from '../export/MetricData';\nimport { InstrumentDescriptor } from '../InstrumentDescriptor';\nimport { AggregationTemporality } from '../export/AggregationTemporality';\nimport { Maybe } from '../utils';\nimport { MetricCollectorHandle } from './MetricCollector';\nimport { AttributeHashMap } from './HashMap';\n\n/**\n * Remembers what was presented to a specific exporter.\n */\ninterface LastReportedHistory<T extends Maybe<Accumulation>> {\n  /**\n   * The last accumulation of metric data.\n   */\n  accumulations: AttributeHashMap<T>;\n  /**\n   * The timestamp the data was reported.\n   */\n  collectionTime: HrTime;\n  /**\n   * The AggregationTemporality used to aggregate reports.\n   */\n  aggregationTemporality: AggregationTemporality;\n}\n\n/**\n * Internal interface.\n *\n * Provides unique reporting for each collector. Allows synchronous collection\n * of metrics and reports given temporality values.\n */\nexport class TemporalMetricProcessor<T extends Maybe<Accumulation>> {\n  private _unreportedAccumulations = new Map<\n    MetricCollectorHandle,\n    AttributeHashMap<T>[]\n  >();\n  private _reportHistory = new Map<\n    MetricCollectorHandle,\n    LastReportedHistory<T>\n  >();\n\n  constructor(private _aggregator: Aggregator<T>) {}\n\n  /**\n   * Builds the {@link MetricData} streams to report against a specific MetricCollector.\n   * @param collector The information of the MetricCollector.\n   * @param collectors The registered collectors.\n   * @param instrumentDescriptor The instrumentation descriptor that these metrics generated with.\n   * @param currentAccumulations The current accumulation of metric data from instruments.\n   * @param collectionTime The current collection timestamp.\n   * @returns The {@link MetricData} points or `null`.\n   */\n  buildMetrics(\n    collector: MetricCollectorHandle,\n    collectors: MetricCollectorHandle[],\n    instrumentDescriptor: InstrumentDescriptor,\n    currentAccumulations: AttributeHashMap<T>,\n    collectionTime: HrTime\n  ): Maybe<MetricData> {\n    this._stashAccumulations(collectors, currentAccumulations);\n    const unreportedAccumulations =\n      this._getMergedUnreportedAccumulations(collector);\n\n    let result = unreportedAccumulations;\n    let aggregationTemporality: AggregationTemporality;\n    // Check our last report time.\n    if (this._reportHistory.has(collector)) {\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      const last = this._reportHistory.get(collector)!;\n      const lastCollectionTime = last.collectionTime;\n      aggregationTemporality = last.aggregationTemporality;\n\n      // Use aggregation temporality + instrument to determine if we do a merge or a diff of\n      // previous. We have the following four scenarios:\n      // 1. Cumulative Aggregation (temporality) + Delta recording (sync instrument).\n      //    Here we merge with our last record to get a cumulative aggregation.\n      // 2. Cumulative Aggregation + Cumulative recording (async instrument).\n      //    Cumulative records are converted to delta recording with DeltaMetricProcessor.\n      //    Here we merge with our last record to get a cumulative aggregation.\n      // 3. Delta Aggregation + Delta recording\n      //    Calibrate the startTime of metric streams to be the reader's lastCollectionTime.\n      // 4. Delta Aggregation + Cumulative recording.\n      //    Cumulative records are converted to delta recording with DeltaMetricProcessor.\n      //    Calibrate the startTime of metric streams to be the reader's lastCollectionTime.\n      if (aggregationTemporality === AggregationTemporality.CUMULATIVE) {\n        // We need to make sure the current delta recording gets merged into the previous cumulative\n        // for the next cumulative recording.\n        result = TemporalMetricProcessor.merge(\n          last.accumulations,\n          unreportedAccumulations,\n          this._aggregator\n        );\n      } else {\n        result = TemporalMetricProcessor.calibrateStartTime(\n          last.accumulations,\n          unreportedAccumulations,\n          lastCollectionTime\n        );\n      }\n    } else {\n      // Call into user code to select aggregation temporality for the instrument.\n      aggregationTemporality = collector.selectAggregationTemporality(\n        instrumentDescriptor.type\n      );\n    }\n\n    // Update last reported (cumulative) accumulation.\n    this._reportHistory.set(collector, {\n      accumulations: result,\n      collectionTime,\n      aggregationTemporality,\n    });\n\n    return this._aggregator.toMetricData(\n      instrumentDescriptor,\n      aggregationTemporality,\n      AttributesMapToAccumulationRecords(result),\n      /* endTime */ collectionTime\n    );\n  }\n\n  private _stashAccumulations(\n    collectors: MetricCollectorHandle[],\n    currentAccumulation: AttributeHashMap<T>\n  ) {\n    collectors.forEach(it => {\n      let stash = this._unreportedAccumulations.get(it);\n      if (stash === undefined) {\n        stash = [];\n        this._unreportedAccumulations.set(it, stash);\n      }\n      stash.push(currentAccumulation);\n    });\n  }\n\n  private _getMergedUnreportedAccumulations(collector: MetricCollectorHandle) {\n    let result = new AttributeHashMap<T>();\n    const unreportedList = this._unreportedAccumulations.get(collector);\n    this._unreportedAccumulations.set(collector, []);\n    if (unreportedList === undefined) {\n      return result;\n    }\n    for (const it of unreportedList) {\n      result = TemporalMetricProcessor.merge(result, it, this._aggregator);\n    }\n    return result;\n  }\n\n  static merge<T extends Maybe<Accumulation>>(\n    last: AttributeHashMap<T>,\n    current: AttributeHashMap<T>,\n    aggregator: Aggregator<T>\n  ) {\n    const result = last;\n    const iterator = current.entries();\n    let next = iterator.next();\n    while (next.done !== true) {\n      const [key, record, hash] = next.value;\n      if (last.has(key, hash)) {\n        const lastAccumulation = last.get(key, hash);\n        // last.has() returned true, lastAccumulation is present.\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const accumulation = aggregator.merge(lastAccumulation!, record);\n        result.set(key, accumulation, hash);\n      } else {\n        result.set(key, record, hash);\n      }\n\n      next = iterator.next();\n    }\n    return result;\n  }\n\n  /**\n   * Calibrate the reported metric streams' startTime to lastCollectionTime. Leaves\n   * the new stream to be the initial observation time unchanged.\n   */\n  static calibrateStartTime<T extends Maybe<Accumulation>>(\n    last: AttributeHashMap<T>,\n    current: AttributeHashMap<T>,\n    lastCollectionTime: HrTime\n  ) {\n    for (const [key, hash] of last.keys()) {\n      const currentAccumulation = current.get(key, hash);\n      currentAccumulation?.setStartTime(lastCollectionTime);\n    }\n    return current;\n  }\n}\n\n// TypeScript complains about converting 3 elements tuple to AccumulationRecord<T>.\nfunction AttributesMapToAccumulationRecords<T>(\n  map: AttributeHashMap<T>\n): AccumulationRecord<T>[] {\n  return Array.from(map.entries()) as unknown as AccumulationRecord<T>[];\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { HrTime } from '@opentelemetry/api';\nimport { Accumulation, Aggregator } from '../aggregator/types';\nimport { InstrumentDescriptor } from '../InstrumentDescriptor';\nimport { AttributesProcessor } from '../view/AttributesProcessor';\nimport { MetricStorage } from './MetricStorage';\nimport { MetricData } from '../export/MetricData';\nimport { DeltaMetricProcessor } from './DeltaMetricProcessor';\nimport { TemporalMetricProcessor } from './TemporalMetricProcessor';\nimport { Maybe } from '../utils';\nimport { MetricCollectorHandle } from './MetricCollector';\nimport { AttributeHashMap } from './HashMap';\nimport { AsyncWritableMetricStorage } from './WritableMetricStorage';\n\n/**\n * Internal interface.\n *\n * Stores and aggregates {@link MetricData} for asynchronous instruments.\n */\nexport class AsyncMetricStorage<T extends Maybe<Accumulation>>\n  extends MetricStorage\n  implements AsyncWritableMetricStorage\n{\n  private _deltaMetricStorage: DeltaMetricProcessor<T>;\n  private _temporalMetricStorage: TemporalMetricProcessor<T>;\n\n  constructor(\n    _instrumentDescriptor: InstrumentDescriptor,\n    aggregator: Aggregator<T>,\n    private _attributesProcessor: AttributesProcessor\n  ) {\n    super(_instrumentDescriptor);\n    this._deltaMetricStorage = new DeltaMetricProcessor(aggregator);\n    this._temporalMetricStorage = new TemporalMetricProcessor(aggregator);\n  }\n\n  record(measurements: AttributeHashMap<number>, observationTime: HrTime) {\n    const processed = new AttributeHashMap<number>();\n    Array.from(measurements.entries()).forEach(([attributes, value]) => {\n      processed.set(this._attributesProcessor.process(attributes), value);\n    });\n    this._deltaMetricStorage.batchCumulate(processed, observationTime);\n  }\n\n  /**\n   * Collects the metrics from this storage. The ObservableCallback is invoked\n   * during the collection.\n   *\n   * Note: This is a stateful operation and may reset any interval-related\n   * state for the MetricCollector.\n   */\n  collect(\n    collector: MetricCollectorHandle,\n    collectors: MetricCollectorHandle[],\n    collectionTime: HrTime\n  ): Maybe<MetricData> {\n    const accumulations = this._deltaMetricStorage.collect();\n\n    return this._temporalMetricStorage.buildMetrics(\n      collector,\n      collectors,\n      this._instrumentDescriptor,\n      accumulations,\n      collectionTime\n    );\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { InstrumentSelectorCriteria } from './InstrumentSelector';\nimport { InstrumentDescriptor } from '../InstrumentDescriptor';\n\nexport function getIncompatibilityDetails(\n  existing: InstrumentDescriptor,\n  otherDescriptor: InstrumentDescriptor\n) {\n  let incompatibility = '';\n  if (existing.unit !== otherDescriptor.unit) {\n    incompatibility += `\\t- Unit '${existing.unit}' does not match '${otherDescriptor.unit}'\\n`;\n  }\n  if (existing.type !== otherDescriptor.type) {\n    incompatibility += `\\t- Type '${existing.type}' does not match '${otherDescriptor.type}'\\n`;\n  }\n  if (existing.valueType !== otherDescriptor.valueType) {\n    incompatibility += `\\t- Value Type '${existing.valueType}' does not match '${otherDescriptor.valueType}'\\n`;\n  }\n  if (existing.description !== otherDescriptor.description) {\n    incompatibility += `\\t- Description '${existing.description}' does not match '${otherDescriptor.description}'\\n`;\n  }\n\n  return incompatibility;\n}\n\nexport function getValueTypeConflictResolutionRecipe(\n  existing: InstrumentDescriptor,\n  otherDescriptor: InstrumentDescriptor\n) {\n  return `\\t- use valueType '${existing.valueType}' on instrument creation or use an instrument name other than '${otherDescriptor.name}'`;\n}\n\nexport function getUnitConflictResolutionRecipe(\n  existing: InstrumentDescriptor,\n  otherDescriptor: InstrumentDescriptor\n) {\n  return `\\t- use unit '${existing.unit}' on instrument creation or use an instrument name other than '${otherDescriptor.name}'`;\n}\n\nexport function getTypeConflictResolutionRecipe(\n  existing: InstrumentDescriptor,\n  otherDescriptor: InstrumentDescriptor\n) {\n  const selector: InstrumentSelectorCriteria = {\n    name: otherDescriptor.name,\n    type: otherDescriptor.type,\n    unit: otherDescriptor.unit,\n  };\n\n  const selectorString = JSON.stringify(selector);\n\n  return `\\t- create a new view with a name other than '${existing.name}' and InstrumentSelector '${selectorString}'`;\n}\n\nexport function getDescriptionResolutionRecipe(\n  existing: InstrumentDescriptor,\n  otherDescriptor: InstrumentDescriptor\n): string {\n  const selector: InstrumentSelectorCriteria = {\n    name: otherDescriptor.name,\n    type: otherDescriptor.type,\n    unit: otherDescriptor.unit,\n  };\n\n  const selectorString = JSON.stringify(selector);\n\n  return `\\t- create a new view with a name other than '${existing.name}' and InstrumentSelector '${selectorString}'\n    \\t- OR - create a new view with the name ${existing.name} and description '${existing.description}' and InstrumentSelector ${selectorString}\n    \\t- OR - create a new view with the name ${otherDescriptor.name} and description '${existing.description}' and InstrumentSelector ${selectorString}`;\n}\n\nexport function getConflictResolutionRecipe(\n  existing: InstrumentDescriptor,\n  otherDescriptor: InstrumentDescriptor\n): string {\n  // Conflicts that cannot be solved via views.\n  if (existing.valueType !== otherDescriptor.valueType) {\n    return getValueTypeConflictResolutionRecipe(existing, otherDescriptor);\n  }\n\n  if (existing.unit !== otherDescriptor.unit) {\n    return getUnitConflictResolutionRecipe(existing, otherDescriptor);\n  }\n\n  // Conflicts that can be solved via views.\n  if (existing.type !== otherDescriptor.type) {\n    // this will automatically solve possible description conflicts.\n    return getTypeConflictResolutionRecipe(existing, otherDescriptor);\n  }\n\n  if (existing.description !== otherDescriptor.description) {\n    return getDescriptionResolutionRecipe(existing, otherDescriptor);\n  }\n\n  return '';\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { MetricStorage } from './MetricStorage';\nimport {\n  InstrumentDescriptor,\n  isDescriptorCompatibleWith,\n} from '../InstrumentDescriptor';\nimport * as api from '@opentelemetry/api';\nimport {\n  getConflictResolutionRecipe,\n  getIncompatibilityDetails,\n} from '../view/RegistrationConflicts';\nimport { MetricCollectorHandle } from './MetricCollector';\n\ntype StorageMap = Map<string, MetricStorage[]>;\n\n/**\n * Internal class for storing {@link MetricStorage}\n */\nexport class MetricStorageRegistry {\n  private readonly _sharedRegistry: StorageMap = new Map();\n  private readonly _perCollectorRegistry = new Map<\n    MetricCollectorHandle,\n    StorageMap\n  >();\n\n  static create() {\n    return new MetricStorageRegistry();\n  }\n\n  getStorages(collector: MetricCollectorHandle): MetricStorage[] {\n    let storages: MetricStorage[] = [];\n    for (const metricStorages of this._sharedRegistry.values()) {\n      storages = storages.concat(metricStorages);\n    }\n\n    const perCollectorStorages = this._perCollectorRegistry.get(collector);\n    if (perCollectorStorages != null) {\n      for (const metricStorages of perCollectorStorages.values()) {\n        storages = storages.concat(metricStorages);\n      }\n    }\n\n    return storages;\n  }\n\n  register(storage: MetricStorage) {\n    this._registerStorage(storage, this._sharedRegistry);\n  }\n\n  registerForCollector(\n    collector: MetricCollectorHandle,\n    storage: MetricStorage\n  ) {\n    let storageMap = this._perCollectorRegistry.get(collector);\n    if (storageMap == null) {\n      storageMap = new Map();\n      this._perCollectorRegistry.set(collector, storageMap);\n    }\n    this._registerStorage(storage, storageMap);\n  }\n\n  findOrUpdateCompatibleStorage<T extends MetricStorage>(\n    expectedDescriptor: InstrumentDescriptor\n  ): T | null {\n    const storages = this._sharedRegistry.get(expectedDescriptor.name);\n    if (storages === undefined) {\n      return null;\n    }\n\n    // If the descriptor is compatible, the type of their metric storage\n    // (either SyncMetricStorage or AsyncMetricStorage) must be compatible.\n    return this._findOrUpdateCompatibleStorage<T>(expectedDescriptor, storages);\n  }\n\n  findOrUpdateCompatibleCollectorStorage<T extends MetricStorage>(\n    collector: MetricCollectorHandle,\n    expectedDescriptor: InstrumentDescriptor\n  ): T | null {\n    const storageMap = this._perCollectorRegistry.get(collector);\n    if (storageMap === undefined) {\n      return null;\n    }\n\n    const storages = storageMap.get(expectedDescriptor.name);\n    if (storages === undefined) {\n      return null;\n    }\n\n    // If the descriptor is compatible, the type of their metric storage\n    // (either SyncMetricStorage or AsyncMetricStorage) must be compatible.\n    return this._findOrUpdateCompatibleStorage<T>(expectedDescriptor, storages);\n  }\n\n  private _registerStorage(storage: MetricStorage, storageMap: StorageMap) {\n    const descriptor = storage.getInstrumentDescriptor();\n    const storages = storageMap.get(descriptor.name);\n\n    if (storages === undefined) {\n      storageMap.set(descriptor.name, [storage]);\n      return;\n    }\n\n    storages.push(storage);\n  }\n\n  private _findOrUpdateCompatibleStorage<T extends MetricStorage>(\n    expectedDescriptor: InstrumentDescriptor,\n    existingStorages: MetricStorage[]\n  ): T | null {\n    let compatibleStorage = null;\n\n    for (const existingStorage of existingStorages) {\n      const existingDescriptor = existingStorage.getInstrumentDescriptor();\n\n      if (isDescriptorCompatibleWith(existingDescriptor, expectedDescriptor)) {\n        // Use the longer description if it does not match.\n        if (existingDescriptor.description !== expectedDescriptor.description) {\n          if (\n            expectedDescriptor.description.length >\n            existingDescriptor.description.length\n          ) {\n            existingStorage.updateDescription(expectedDescriptor.description);\n          }\n\n          api.diag.warn(\n            'A view or instrument with the name ',\n            expectedDescriptor.name,\n            ' has already been registered, but has a different description and is incompatible with another registered view.\\n',\n            'Details:\\n',\n            getIncompatibilityDetails(existingDescriptor, expectedDescriptor),\n            'The longer description will be used.\\nTo resolve the conflict:',\n            getConflictResolutionRecipe(existingDescriptor, expectedDescriptor)\n          );\n        }\n        // Storage is fully compatible. There will never be more than one pre-existing fully compatible storage.\n        compatibleStorage = existingStorage as T;\n      } else {\n        // The implementation SHOULD warn about duplicate instrument registration\n        // conflicts after applying View configuration.\n        api.diag.warn(\n          'A view or instrument with the name ',\n          expectedDescriptor.name,\n          ' has already been registered and is incompatible with another registered view.\\n',\n          'Details:\\n',\n          getIncompatibilityDetails(existingDescriptor, expectedDescriptor),\n          'To resolve the conflict:\\n',\n          getConflictResolutionRecipe(existingDescriptor, expectedDescriptor)\n        );\n      }\n    }\n\n    return compatibleStorage;\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Context, HrTime, MetricAttributes } from '@opentelemetry/api';\nimport { WritableMetricStorage } from './WritableMetricStorage';\n\n/**\n * Internal interface.\n */\nexport class MultiMetricStorage implements WritableMetricStorage {\n  constructor(private readonly _backingStorages: WritableMetricStorage[]) {}\n\n  record(\n    value: number,\n    attributes: MetricAttributes,\n    context: Context,\n    recordTime: HrTime\n  ) {\n    this._backingStorages.forEach(it => {\n      it.record(value, attributes, context, recordTime);\n    });\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  diag,\n  ObservableResult,\n  MetricAttributes,\n  ValueType,\n  BatchObservableResult,\n  Observable,\n} from '@opentelemetry/api';\nimport { AttributeHashMap } from './state/HashMap';\nimport { isObservableInstrument, ObservableInstrument } from './Instruments';\nimport { InstrumentDescriptor } from '.';\n\n/**\n * The class implements {@link ObservableResult} interface.\n */\nexport class ObservableResultImpl implements ObservableResult {\n  /**\n   * @internal\n   */\n  _buffer = new AttributeHashMap<number>();\n\n  constructor(private _descriptor: InstrumentDescriptor) {}\n\n  /**\n   * Observe a measurement of the value associated with the given attributes.\n   */\n  observe(value: number, attributes: MetricAttributes = {}): void {\n    if (typeof value !== 'number') {\n      diag.warn(\n        `non-number value provided to metric ${this._descriptor.name}: ${value}`\n      );\n      return;\n    }\n    if (\n      this._descriptor.valueType === ValueType.INT &&\n      !Number.isInteger(value)\n    ) {\n      diag.warn(\n        `INT value type cannot accept a floating-point value for ${this._descriptor.name}, ignoring the fractional digits.`\n      );\n      value = Math.trunc(value);\n      // ignore non-finite values.\n      if (!Number.isInteger(value)) {\n        return;\n      }\n    }\n    this._buffer.set(attributes, value);\n  }\n}\n\n/**\n * The class implements {@link BatchObservableCallback} interface.\n */\nexport class BatchObservableResultImpl implements BatchObservableResult {\n  /**\n   * @internal\n   */\n  _buffer: Map<ObservableInstrument, AttributeHashMap<number>> = new Map();\n\n  /**\n   * Observe a measurement of the value associated with the given attributes.\n   */\n  observe(\n    metric: Observable,\n    value: number,\n    attributes: MetricAttributes = {}\n  ): void {\n    if (!isObservableInstrument(metric)) {\n      return;\n    }\n    let map = this._buffer.get(metric);\n    if (map == null) {\n      map = new AttributeHashMap();\n      this._buffer.set(metric, map);\n    }\n    if (typeof value !== 'number') {\n      diag.warn(\n        `non-number value provided to metric ${metric._descriptor.name}: ${value}`\n      );\n      return;\n    }\n    if (\n      metric._descriptor.valueType === ValueType.INT &&\n      !Number.isInteger(value)\n    ) {\n      diag.warn(\n        `INT value type cannot accept a floating-point value for ${metric._descriptor.name}, ignoring the fractional digits.`\n      );\n      value = Math.trunc(value);\n      // ignore non-finite values.\n      if (!Number.isInteger(value)) {\n        return;\n      }\n    }\n    map.set(attributes, value);\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  diag,\n  HrTime,\n  BatchObservableCallback,\n  Observable,\n  ObservableCallback,\n} from '@opentelemetry/api';\nimport { isObservableInstrument, ObservableInstrument } from '../Instruments';\nimport {\n  BatchObservableResultImpl,\n  ObservableResultImpl,\n} from '../ObservableResult';\nimport {\n  callWithTimeout,\n  PromiseAllSettled,\n  isPromiseAllSettledRejectionResult,\n  setEquals,\n} from '../utils';\n\n/**\n * Records for single instrument observable callback.\n */\ninterface ObservableCallbackRecord {\n  callback: ObservableCallback;\n  instrument: ObservableInstrument;\n}\n\n/**\n * Records for multiple instruments observable callback.\n */\ninterface BatchObservableCallbackRecord {\n  callback: BatchObservableCallback;\n  instruments: Set<ObservableInstrument>;\n}\n\n/**\n * An internal interface for managing ObservableCallbacks.\n *\n * Every registered callback associated with a set of instruments are be evaluated\n * exactly once during collection prior to reading data for that instrument.\n */\nexport class ObservableRegistry {\n  private _callbacks: ObservableCallbackRecord[] = [];\n  private _batchCallbacks: BatchObservableCallbackRecord[] = [];\n\n  addCallback(callback: ObservableCallback, instrument: ObservableInstrument) {\n    const idx = this._findCallback(callback, instrument);\n    if (idx >= 0) {\n      return;\n    }\n    this._callbacks.push({ callback, instrument });\n  }\n\n  removeCallback(\n    callback: ObservableCallback,\n    instrument: ObservableInstrument\n  ) {\n    const idx = this._findCallback(callback, instrument);\n    if (idx < 0) {\n      return;\n    }\n    this._callbacks.splice(idx, 1);\n  }\n\n  addBatchCallback(\n    callback: BatchObservableCallback,\n    instruments: Observable[]\n  ) {\n    // Create a set of unique instruments.\n    const observableInstruments = new Set(\n      instruments.filter(isObservableInstrument)\n    );\n    if (observableInstruments.size === 0) {\n      diag.error(\n        'BatchObservableCallback is not associated with valid instruments',\n        instruments\n      );\n      return;\n    }\n    const idx = this._findBatchCallback(callback, observableInstruments);\n    if (idx >= 0) {\n      return;\n    }\n    this._batchCallbacks.push({ callback, instruments: observableInstruments });\n  }\n\n  removeBatchCallback(\n    callback: BatchObservableCallback,\n    instruments: Observable[]\n  ) {\n    // Create a set of unique instruments.\n    const observableInstruments = new Set(\n      instruments.filter(isObservableInstrument)\n    );\n    const idx = this._findBatchCallback(callback, observableInstruments);\n    if (idx < 0) {\n      return;\n    }\n    this._batchCallbacks.splice(idx, 1);\n  }\n\n  /**\n   * @returns a promise of rejected reasons for invoking callbacks.\n   */\n  async observe(\n    collectionTime: HrTime,\n    timeoutMillis?: number\n  ): Promise<unknown[]> {\n    const callbackFutures = this._observeCallbacks(\n      collectionTime,\n      timeoutMillis\n    );\n    const batchCallbackFutures = this._observeBatchCallbacks(\n      collectionTime,\n      timeoutMillis\n    );\n\n    const results = await PromiseAllSettled([\n      ...callbackFutures,\n      ...batchCallbackFutures,\n    ]);\n\n    const rejections = results\n      .filter(isPromiseAllSettledRejectionResult)\n      .map(it => it.reason);\n    return rejections;\n  }\n\n  private _observeCallbacks(observationTime: HrTime, timeoutMillis?: number) {\n    return this._callbacks.map(async ({ callback, instrument }) => {\n      const observableResult = new ObservableResultImpl(instrument._descriptor);\n      let callPromise: Promise<void> = Promise.resolve(\n        callback(observableResult)\n      );\n      if (timeoutMillis != null) {\n        callPromise = callWithTimeout(callPromise, timeoutMillis);\n      }\n      await callPromise;\n      instrument._metricStorages.forEach(metricStorage => {\n        metricStorage.record(observableResult._buffer, observationTime);\n      });\n    });\n  }\n\n  private _observeBatchCallbacks(\n    observationTime: HrTime,\n    timeoutMillis?: number\n  ) {\n    return this._batchCallbacks.map(async ({ callback, instruments }) => {\n      const observableResult = new BatchObservableResultImpl();\n      let callPromise: Promise<void> = Promise.resolve(\n        callback(observableResult)\n      );\n      if (timeoutMillis != null) {\n        callPromise = callWithTimeout(callPromise, timeoutMillis);\n      }\n      await callPromise;\n      instruments.forEach(instrument => {\n        const buffer = observableResult._buffer.get(instrument);\n        if (buffer == null) {\n          return;\n        }\n        instrument._metricStorages.forEach(metricStorage => {\n          metricStorage.record(buffer, observationTime);\n        });\n      });\n    });\n  }\n\n  private _findCallback(\n    callback: ObservableCallback,\n    instrument: ObservableInstrument\n  ) {\n    return this._callbacks.findIndex(record => {\n      return record.callback === callback && record.instrument === instrument;\n    });\n  }\n\n  private _findBatchCallback(\n    callback: BatchObservableCallback,\n    instruments: Set<ObservableInstrument>\n  ) {\n    return this._batchCallbacks.findIndex(record => {\n      return (\n        record.callback === callback &&\n        setEquals(record.instruments, instruments)\n      );\n    });\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Context, HrTime, MetricAttributes } from '@opentelemetry/api';\nimport { WritableMetricStorage } from './WritableMetricStorage';\nimport { Accumulation, Aggregator } from '../aggregator/types';\nimport { InstrumentDescriptor } from '../InstrumentDescriptor';\nimport { AttributesProcessor } from '../view/AttributesProcessor';\nimport { MetricStorage } from './MetricStorage';\nimport { MetricData } from '../export/MetricData';\nimport { DeltaMetricProcessor } from './DeltaMetricProcessor';\nimport { TemporalMetricProcessor } from './TemporalMetricProcessor';\nimport { Maybe } from '../utils';\nimport { MetricCollectorHandle } from './MetricCollector';\n\n/**\n * Internal interface.\n *\n * Stores and aggregates {@link MetricData} for synchronous instruments.\n */\nexport class SyncMetricStorage<T extends Maybe<Accumulation>>\n  extends MetricStorage\n  implements WritableMetricStorage\n{\n  private _deltaMetricStorage: DeltaMetricProcessor<T>;\n  private _temporalMetricStorage: TemporalMetricProcessor<T>;\n\n  constructor(\n    instrumentDescriptor: InstrumentDescriptor,\n    aggregator: Aggregator<T>,\n    private _attributesProcessor: AttributesProcessor\n  ) {\n    super(instrumentDescriptor);\n    this._deltaMetricStorage = new DeltaMetricProcessor(aggregator);\n    this._temporalMetricStorage = new TemporalMetricProcessor(aggregator);\n  }\n\n  record(\n    value: number,\n    attributes: MetricAttributes,\n    context: Context,\n    recordTime: HrTime\n  ) {\n    attributes = this._attributesProcessor.process(attributes, context);\n    this._deltaMetricStorage.record(value, attributes, context, recordTime);\n  }\n\n  /**\n   * Collects the metrics from this storage.\n   *\n   * Note: This is a stateful operation and may reset any interval-related\n   * state for the MetricCollector.\n   */\n  collect(\n    collector: MetricCollectorHandle,\n    collectors: MetricCollectorHandle[],\n    collectionTime: HrTime\n  ): Maybe<MetricData> {\n    const accumulations = this._deltaMetricStorage.collect();\n\n    return this._temporalMetricStorage.buildMetrics(\n      collector,\n      collectors,\n      this._instrumentDescriptor,\n      accumulations,\n      collectionTime\n    );\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Context, MetricAttributes } from '@opentelemetry/api';\n\n/**\n * The {@link AttributesProcessor} is responsible for customizing which\n * attribute(s) are to be reported as metrics dimension(s) and adding\n * additional dimension(s) from the {@link Context}.\n */\nexport abstract class AttributesProcessor {\n  /**\n   * Process the metric instrument attributes.\n   *\n   * @param incoming The metric instrument attributes.\n   * @param context The active context when the instrument is synchronous.\n   * `undefined` otherwise.\n   */\n  abstract process(\n    incoming: MetricAttributes,\n    context?: Context\n  ): MetricAttributes;\n\n  static Noop() {\n    return NOOP;\n  }\n}\n\nexport class NoopAttributesProcessor extends AttributesProcessor {\n  process(incoming: MetricAttributes, _context?: Context) {\n    return incoming;\n  }\n}\n\n/**\n * {@link AttributesProcessor} that filters by allowed attribute names and drops any names that are not in the\n * allow list.\n */\nexport class FilteringAttributesProcessor extends AttributesProcessor {\n  constructor(private _allowedAttributeNames: string[]) {\n    super();\n  }\n\n  process(incoming: MetricAttributes, _context: Context): MetricAttributes {\n    const filteredAttributes: MetricAttributes = {};\n    Object.keys(incoming)\n      .filter(attributeName =>\n        this._allowedAttributeNames.includes(attributeName)\n      )\n      .forEach(\n        attributeName =>\n          (filteredAttributes[attributeName] = incoming[attributeName])\n      );\n    return filteredAttributes;\n  }\n}\n\nconst NOOP = new NoopAttributesProcessor();\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { HrTime } from '@opentelemetry/api';\nimport { InstrumentationScope } from '@opentelemetry/core';\nimport { MetricCollectOptions } from '../export/MetricProducer';\nimport { ScopeMetrics } from '../export/MetricData';\nimport {\n  createInstrumentDescriptorWithView,\n  InstrumentDescriptor,\n} from '../InstrumentDescriptor';\nimport { Meter } from '../Meter';\nimport { isNotNullish, Maybe } from '../utils';\nimport { AsyncMetricStorage } from './AsyncMetricStorage';\nimport { MeterProviderSharedState } from './MeterProviderSharedState';\nimport { MetricCollectorHandle } from './MetricCollector';\nimport { MetricStorageRegistry } from './MetricStorageRegistry';\nimport { MultiMetricStorage } from './MultiWritableMetricStorage';\nimport { ObservableRegistry } from './ObservableRegistry';\nimport { SyncMetricStorage } from './SyncMetricStorage';\nimport { Accumulation, Aggregator } from '../aggregator/types';\nimport { AttributesProcessor } from '../view/AttributesProcessor';\nimport { MetricStorage } from './MetricStorage';\n\n/**\n * An internal record for shared meter provider states.\n */\nexport class MeterSharedState {\n  metricStorageRegistry = new MetricStorageRegistry();\n  observableRegistry = new ObservableRegistry();\n  meter: Meter;\n\n  constructor(\n    private _meterProviderSharedState: MeterProviderSharedState,\n    private _instrumentationScope: InstrumentationScope\n  ) {\n    this.meter = new Meter(this);\n  }\n\n  registerMetricStorage(descriptor: InstrumentDescriptor) {\n    const storages = this._registerMetricStorage(descriptor, SyncMetricStorage);\n\n    if (storages.length === 1) {\n      return storages[0];\n    }\n    return new MultiMetricStorage(storages);\n  }\n\n  registerAsyncMetricStorage(descriptor: InstrumentDescriptor) {\n    const storages = this._registerMetricStorage(\n      descriptor,\n      AsyncMetricStorage\n    );\n\n    return storages;\n  }\n\n  /**\n   * @param collector opaque handle of {@link MetricCollector} which initiated the collection.\n   * @param collectionTime the HrTime at which the collection was initiated.\n   * @param options options for collection.\n   * @returns the list of metric data collected.\n   */\n  async collect(\n    collector: MetricCollectorHandle,\n    collectionTime: HrTime,\n    options?: MetricCollectOptions\n  ): Promise<ScopeMetricsResult> {\n    /**\n     * 1. Call all observable callbacks first.\n     * 2. Collect metric result for the collector.\n     */\n    const errors = await this.observableRegistry.observe(\n      collectionTime,\n      options?.timeoutMillis\n    );\n    const metricDataList = Array.from(\n      this.metricStorageRegistry.getStorages(collector)\n    )\n      .map(metricStorage => {\n        return metricStorage.collect(\n          collector,\n          this._meterProviderSharedState.metricCollectors,\n          collectionTime\n        );\n      })\n      .filter(isNotNullish);\n\n    return {\n      scopeMetrics: {\n        scope: this._instrumentationScope,\n        metrics: metricDataList.filter(isNotNullish),\n      },\n      errors,\n    };\n  }\n\n  private _registerMetricStorage<\n    MetricStorageType extends MetricStorageConstructor,\n    R extends InstanceType<MetricStorageType>,\n  >(\n    descriptor: InstrumentDescriptor,\n    MetricStorageType: MetricStorageType\n  ): R[] {\n    const views = this._meterProviderSharedState.viewRegistry.findViews(\n      descriptor,\n      this._instrumentationScope\n    );\n    let storages = views.map(view => {\n      const viewDescriptor = createInstrumentDescriptorWithView(\n        view,\n        descriptor\n      );\n      const compatibleStorage =\n        this.metricStorageRegistry.findOrUpdateCompatibleStorage<R>(\n          viewDescriptor\n        );\n      if (compatibleStorage != null) {\n        return compatibleStorage;\n      }\n      const aggregator = view.aggregation.createAggregator(viewDescriptor);\n      const viewStorage = new MetricStorageType(\n        viewDescriptor,\n        aggregator,\n        view.attributesProcessor\n      ) as R;\n      this.metricStorageRegistry.register(viewStorage);\n      return viewStorage;\n    });\n\n    // Fallback to the per-collector aggregations if no view is configured for the instrument.\n    if (storages.length === 0) {\n      const perCollectorAggregations =\n        this._meterProviderSharedState.selectAggregations(descriptor.type);\n      const collectorStorages = perCollectorAggregations.map(\n        ([collector, aggregation]) => {\n          const compatibleStorage =\n            this.metricStorageRegistry.findOrUpdateCompatibleCollectorStorage<R>(\n              collector,\n              descriptor\n            );\n          if (compatibleStorage != null) {\n            return compatibleStorage;\n          }\n          const aggregator = aggregation.createAggregator(descriptor);\n          const storage = new MetricStorageType(\n            descriptor,\n            aggregator,\n            AttributesProcessor.Noop()\n          ) as R;\n          this.metricStorageRegistry.registerForCollector(collector, storage);\n          return storage;\n        }\n      );\n      storages = storages.concat(collectorStorages);\n    }\n\n    return storages;\n  }\n}\n\ninterface ScopeMetricsResult {\n  scopeMetrics: ScopeMetrics;\n  errors: unknown[];\n}\n\ninterface MetricStorageConstructor {\n  new (\n    instrumentDescriptor: InstrumentDescriptor,\n    aggregator: Aggregator<Maybe<Accumulation>>,\n    attributesProcessor: AttributesProcessor\n  ): MetricStorage;\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { InstrumentationScope } from '@opentelemetry/core';\nimport { IResource } from '@opentelemetry/resources';\nimport { Aggregation, InstrumentType } from '..';\nimport { instrumentationScopeId } from '../utils';\nimport { ViewRegistry } from '../view/ViewRegistry';\nimport { MeterSharedState } from './MeterSharedState';\nimport { MetricCollector, MetricCollectorHandle } from './MetricCollector';\n\n/**\n * An internal record for shared meter provider states.\n */\nexport class MeterProviderSharedState {\n  viewRegistry = new ViewRegistry();\n\n  metricCollectors: MetricCollector[] = [];\n\n  meterSharedStates: Map<string, MeterSharedState> = new Map();\n\n  constructor(public resource: IResource) {}\n\n  getMeterSharedState(instrumentationScope: InstrumentationScope) {\n    const id = instrumentationScopeId(instrumentationScope);\n    let meterSharedState = this.meterSharedStates.get(id);\n    if (meterSharedState == null) {\n      meterSharedState = new MeterSharedState(this, instrumentationScope);\n      this.meterSharedStates.set(id, meterSharedState);\n    }\n    return meterSharedState;\n  }\n\n  selectAggregations(instrumentType: InstrumentType) {\n    const result: [MetricCollectorHandle, Aggregation][] = [];\n    for (const collector of this.metricCollectors) {\n      result.push([collector, collector.selectAggregation(instrumentType)]);\n    }\n    return result;\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { millisToHrTime } from '@opentelemetry/core';\nimport { AggregationTemporalitySelector } from '../export/AggregationSelector';\nimport { CollectionResult } from '../export/MetricData';\nimport { MetricProducer, MetricCollectOptions } from '../export/MetricProducer';\nimport { MetricReader } from '../export/MetricReader';\nimport { InstrumentType } from '../InstrumentDescriptor';\nimport { ForceFlushOptions, ShutdownOptions } from '../types';\nimport { FlatMap } from '../utils';\nimport { MeterProviderSharedState } from './MeterProviderSharedState';\n\n/**\n * An internal opaque interface that the MetricReader receives as\n * MetricProducer. It acts as the storage key to the internal metric stream\n * state for each MetricReader.\n */\nexport class MetricCollector implements MetricProducer {\n  constructor(\n    private _sharedState: MeterProviderSharedState,\n    private _metricReader: MetricReader\n  ) {}\n\n  async collect(options?: MetricCollectOptions): Promise<CollectionResult> {\n    const collectionTime = millisToHrTime(Date.now());\n    const meterCollectionPromises = Array.from(\n      this._sharedState.meterSharedStates.values()\n    ).map(meterSharedState =>\n      meterSharedState.collect(this, collectionTime, options)\n    );\n    const result = await Promise.all(meterCollectionPromises);\n\n    return {\n      resourceMetrics: {\n        resource: this._sharedState.resource,\n        scopeMetrics: result.map(it => it.scopeMetrics),\n      },\n      errors: FlatMap(result, it => it.errors),\n    };\n  }\n\n  /**\n   * Delegates for MetricReader.forceFlush.\n   */\n  async forceFlush(options?: ForceFlushOptions): Promise<void> {\n    await this._metricReader.forceFlush(options);\n  }\n\n  /**\n   * Delegates for MetricReader.shutdown.\n   */\n  async shutdown(options?: ShutdownOptions): Promise<void> {\n    await this._metricReader.shutdown(options);\n  }\n\n  selectAggregationTemporality(instrumentType: InstrumentType) {\n    return this._metricReader.selectAggregationTemporality(instrumentType);\n  }\n\n  selectAggregation(instrumentType: InstrumentType) {\n    return this._metricReader.selectAggregation(instrumentType);\n  }\n}\n\n/**\n * An internal interface for MetricCollector. Exposes the necessary\n * information for metric collection.\n */\nexport interface MetricCollectorHandle {\n  selectAggregationTemporality: AggregationTemporalitySelector;\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  diag,\n  MeterProvider as IMeterProvider,\n  Meter as IMeter,\n  MeterOptions,\n  createNoopMeter,\n} from '@opentelemetry/api';\nimport { IResource, Resource } from '@opentelemetry/resources';\nimport { MetricReader } from './export/MetricReader';\nimport { MeterProviderSharedState } from './state/MeterProviderSharedState';\nimport { MetricCollector } from './state/MetricCollector';\nimport { ForceFlushOptions, ShutdownOptions } from './types';\nimport { View } from './view/View';\n\n/**\n * MeterProviderOptions provides an interface for configuring a MeterProvider.\n */\nexport interface MeterProviderOptions {\n  /** Resource associated with metric telemetry  */\n  resource?: IResource;\n  views?: View[];\n}\n\n/**\n * This class implements the {@link MeterProvider} interface.\n */\nexport class MeterProvider implements IMeterProvider {\n  private _sharedState: MeterProviderSharedState;\n  private _shutdown = false;\n\n  constructor(options?: MeterProviderOptions) {\n    const resource = Resource.default().merge(\n      options?.resource ?? Resource.empty()\n    );\n    this._sharedState = new MeterProviderSharedState(resource);\n    if (options?.views != null && options.views.length > 0) {\n      for (const view of options.views) {\n        this._sharedState.viewRegistry.addView(view);\n      }\n    }\n  }\n\n  /**\n   * Get a meter with the configuration of the MeterProvider.\n   */\n  getMeter(name: string, version = '', options: MeterOptions = {}): IMeter {\n    // https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/metrics/sdk.md#meter-creation\n    if (this._shutdown) {\n      diag.warn('A shutdown MeterProvider cannot provide a Meter');\n      return createNoopMeter();\n    }\n\n    return this._sharedState.getMeterSharedState({\n      name,\n      version,\n      schemaUrl: options.schemaUrl,\n    }).meter;\n  }\n\n  /**\n   * Register a {@link MetricReader} to the meter provider. After the\n   * registration, the MetricReader can start metrics collection.\n   *\n   * @param metricReader the metric reader to be registered.\n   */\n  addMetricReader(metricReader: MetricReader) {\n    const collector = new MetricCollector(this._sharedState, metricReader);\n    metricReader.setMetricProducer(collector);\n    this._sharedState.metricCollectors.push(collector);\n  }\n\n  /**\n   * Flush all buffered data and shut down the MeterProvider and all registered\n   * MetricReaders.\n   *\n   * Returns a promise which is resolved when all flushes are complete.\n   */\n  async shutdown(options?: ShutdownOptions): Promise<void> {\n    if (this._shutdown) {\n      diag.warn('shutdown may only be called once per MeterProvider');\n      return;\n    }\n\n    this._shutdown = true;\n\n    await Promise.all(\n      this._sharedState.metricCollectors.map(collector => {\n        return collector.shutdown(options);\n      })\n    );\n  }\n\n  /**\n   * Notifies all registered MetricReaders to flush any buffered data.\n   *\n   * Returns a promise which is resolved when all flushes are complete.\n   */\n  async forceFlush(options?: ForceFlushOptions): Promise<void> {\n    // do not flush after shutdown\n    if (this._shutdown) {\n      diag.warn('invalid attempt to force flush after MeterProvider shutdown');\n      return;\n    }\n\n    await Promise.all(\n      this._sharedState.metricCollectors.map(collector => {\n        return collector.forceFlush(options);\n      })\n    );\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// https://tc39.es/proposal-regex-escaping\n// escape ^ $ \\ .  + ? ( ) [ ] { } |\n// do not need to escape * as we interpret it as wildcard\nconst ESCAPE = /[\\^$\\\\.+?()[\\]{}|]/g;\n\nexport interface Predicate {\n  match(str: string): boolean;\n}\n\n/**\n * Wildcard pattern predicate, supports patterns like `*`, `foo*`, `*bar`.\n */\nexport class PatternPredicate implements Predicate {\n  private _matchAll: boolean;\n  private _regexp: RegExp;\n\n  constructor(pattern: string) {\n    if (pattern === '*') {\n      this._matchAll = true;\n      this._regexp = /.*/;\n    } else {\n      this._matchAll = false;\n      this._regexp = new RegExp(PatternPredicate.escapePattern(pattern));\n    }\n  }\n\n  match(str: string): boolean {\n    if (this._matchAll) {\n      return true;\n    }\n\n    return this._regexp.test(str);\n  }\n\n  static escapePattern(pattern: string): string {\n    return `^${pattern.replace(ESCAPE, '\\\\$&').replace('*', '.*')}$`;\n  }\n\n  static hasWildcard(pattern: string): boolean {\n    return pattern.includes('*');\n  }\n}\n\nexport class ExactPredicate implements Predicate {\n  private _matchAll: boolean;\n  private _pattern?: string;\n\n  constructor(pattern?: string) {\n    this._matchAll = pattern === undefined;\n    this._pattern = pattern;\n  }\n\n  match(str: string): boolean {\n    if (this._matchAll) {\n      return true;\n    }\n    if (str === this._pattern) {\n      return true;\n    }\n    return false;\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { InstrumentType } from '../InstrumentDescriptor';\nimport { ExactPredicate, PatternPredicate, Predicate } from './Predicate';\n\nexport interface InstrumentSelectorCriteria {\n  name?: string;\n  type?: InstrumentType;\n  unit?: string;\n}\n\nexport class InstrumentSelector {\n  private _nameFilter: Predicate;\n  private _type?: InstrumentType;\n  private _unitFilter: Predicate;\n\n  constructor(criteria?: InstrumentSelectorCriteria) {\n    this._nameFilter = new PatternPredicate(criteria?.name ?? '*');\n    this._type = criteria?.type;\n    this._unitFilter = new ExactPredicate(criteria?.unit);\n  }\n\n  getType() {\n    return this._type;\n  }\n\n  getNameFilter() {\n    return this._nameFilter;\n  }\n\n  getUnitFilter() {\n    return this._unitFilter;\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ExactPredicate, Predicate } from './Predicate';\n\nexport interface MeterSelectorCriteria {\n  name?: string;\n  version?: string;\n  schemaUrl?: string;\n}\n\nexport class MeterSelector {\n  private _nameFilter: Predicate;\n  private _versionFilter: Predicate;\n  private _schemaUrlFilter: Predicate;\n\n  constructor(criteria?: MeterSelectorCriteria) {\n    this._nameFilter = new ExactPredicate(criteria?.name);\n    this._versionFilter = new ExactPredicate(criteria?.version);\n    this._schemaUrlFilter = new ExactPredicate(criteria?.schemaUrl);\n  }\n\n  getNameFilter() {\n    return this._nameFilter;\n  }\n\n  /**\n   * TODO: semver filter? no spec yet.\n   */\n  getVersionFilter() {\n    return this._versionFilter;\n  }\n\n  getSchemaUrlFilter() {\n    return this._schemaUrlFilter;\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { PatternPredicate } from './Predicate';\nimport {\n  AttributesProcessor,\n  FilteringAttributesProcessor,\n} from './AttributesProcessor';\nimport { InstrumentSelector } from './InstrumentSelector';\nimport { MeterSelector } from './MeterSelector';\nimport { Aggregation } from './Aggregation';\nimport { InstrumentType } from '../InstrumentDescriptor';\n\nexport type ViewOptions = {\n  /**\n   *  Alters the metric stream:\n   *  This will be used as the name of the metrics stream.\n   *  If not provided, the original Instrument name will be used.\n   */\n  name?: string;\n  /**\n   * Alters the metric stream:\n   * This will be used as the description of the metrics stream.\n   * If not provided, the original Instrument description will be used by default.\n   *\n   * @example <caption>changes the description of all selected instruments to 'sample description'</caption>\n   * description: 'sample description'\n   */\n  description?: string;\n  /**\n   * Alters the metric stream:\n   * If provided, the attributes that are not in the list will be ignored.\n   * If not provided, all attribute keys will be used by default.\n   *\n   * @example <caption>drops all attributes with top-level keys except for 'myAttr' and 'myOtherAttr'</caption>\n   * attributeKeys: ['myAttr', 'myOtherAttr']\n   * @example <caption>drops all attributes</caption>\n   * attributeKeys: []\n   */\n  attributeKeys?: string[];\n  /**\n   * Alters the metric stream:\n   * Alters the {@link Aggregation} of the metric stream.\n   *\n   * @example <caption>changes the aggregation of the selected instrument(s) to ExplicitBucketHistogramAggregation</caption>\n   * aggregation: new ExplicitBucketHistogramAggregation([1, 10, 100])\n   * @example <caption>changes the aggregation of the selected instrument(s) to LastValueAggregation</caption>\n   * aggregation: new LastValueAggregation()\n   */\n  aggregation?: Aggregation;\n  /**\n   * Instrument selection criteria:\n   * The original type of the Instrument(s).\n   *\n   * @example <caption>selects all counters</caption>\n   * instrumentType: InstrumentType.COUNTER\n   * @example <caption>selects all histograms</caption>\n   * instrumentType: InstrumentType.HISTOGRAM\n   */\n  instrumentType?: InstrumentType;\n  /**\n   * Instrument selection criteria:\n   * Original name of the Instrument(s) with wildcard support.\n   *\n   * @example <caption>select all instruments</caption>\n   * instrumentName: '*'\n   * @example <caption>select all instruments starting with 'my.instruments.'</caption>\n   * instrumentName: 'my.instruments.*'\n   * @example <caption>select all instruments named 'my.instrument.requests' exactly</caption>\n   * instrumentName: 'my.instruments.requests'\n   */\n  instrumentName?: string;\n  /**\n   * Instrument selection criteria:\n   * The unit of the Instrument(s).\n   *\n   * @example <caption>select all instruments with unit 'ms'</caption>\n   * instrumentUnit: 'ms'\n   */\n  instrumentUnit?: string;\n  /**\n   * Instrument selection criteria:\n   * The name of the Meter. No wildcard support, name must match the meter exactly.\n   *\n   * @example <caption>select all meters named 'example.component.app' exactly</caption>\n   * meterName: 'example.component.app'\n   */\n  meterName?: string;\n  /**\n   * Instrument selection criteria:\n   * The version of the Meter. No wildcard support, version must match exactly.\n   *\n   * @example\n   * meterVersion: '1.0.1'\n   */\n  meterVersion?: string;\n  /**\n   * Instrument selection criteria:\n   * The schema URL of the Meter. No wildcard support, schema URL must match exactly.\n   *\n   * @example <caption>Select all meters with schema URL 'https://example.com/schema' exactly.</caption>\n   * meterSchemaUrl: 'https://example.com/schema'\n   */\n  meterSchemaUrl?: string;\n};\n\nfunction isSelectorNotProvided(options: ViewOptions): boolean {\n  return (\n    options.instrumentName == null &&\n    options.instrumentType == null &&\n    options.instrumentUnit == null &&\n    options.meterName == null &&\n    options.meterVersion == null &&\n    options.meterSchemaUrl == null\n  );\n}\n\n/**\n * Can be passed to a {@link MeterProvider} to select instruments and alter their metric stream.\n */\nexport class View {\n  readonly name?: string;\n  readonly description?: string;\n  readonly aggregation: Aggregation;\n  readonly attributesProcessor: AttributesProcessor;\n  readonly instrumentSelector: InstrumentSelector;\n  readonly meterSelector: MeterSelector;\n\n  /**\n   * Create a new {@link View} instance.\n   *\n   * Parameters can be categorized as two types:\n   *  Instrument selection criteria: Used to describe the instrument(s) this view will be applied to.\n   *  Will be treated as additive (the Instrument has to meet all the provided criteria to be selected).\n   *\n   *  Metric stream altering: Alter the metric stream of instruments selected by instrument selection criteria.\n   *\n   * @param viewOptions {@link ViewOptions} for altering the metric stream and instrument selection.\n   * @param viewOptions.name\n   * Alters the metric stream:\n   *  This will be used as the name of the metrics stream.\n   *  If not provided, the original Instrument name will be used.\n   * @param viewOptions.description\n   * Alters the metric stream:\n   *  This will be used as the description of the metrics stream.\n   *  If not provided, the original Instrument description will be used by default.\n   * @param viewOptions.attributeKeys\n   * Alters the metric stream:\n   *  If provided, the attributes that are not in the list will be ignored.\n   *  If not provided, all attribute keys will be used by default.\n   * @param viewOptions.aggregation\n   * Alters the metric stream:\n   *  Alters the {@link Aggregation} of the metric stream.\n   * @param viewOptions.instrumentName\n   * Instrument selection criteria:\n   *  Original name of the Instrument(s) with wildcard support.\n   * @param viewOptions.instrumentType\n   * Instrument selection criteria:\n   *  The original type of the Instrument(s).\n   * @param viewOptions.instrumentUnit\n   * Instrument selection criteria:\n   *  The unit of the Instrument(s).\n   * @param viewOptions.meterName\n   * Instrument selection criteria:\n   *  The name of the Meter. No wildcard support, name must match the meter exactly.\n   * @param viewOptions.meterVersion\n   * Instrument selection criteria:\n   *  The version of the Meter. No wildcard support, version must match exactly.\n   * @param viewOptions.meterSchemaUrl\n   * Instrument selection criteria:\n   *  The schema URL of the Meter. No wildcard support, schema URL must match exactly.\n   *\n   * @example\n   * // Create a view that changes the Instrument 'my.instrument' to use to an\n   * // ExplicitBucketHistogramAggregation with the boundaries [20, 30, 40]\n   * new View({\n   *   aggregation: new ExplicitBucketHistogramAggregation([20, 30, 40]),\n   *   instrumentName: 'my.instrument'\n   * })\n   */\n  constructor(viewOptions: ViewOptions) {\n    // If no criteria is provided, the SDK SHOULD treat it as an error.\n    // It is recommended that the SDK implementations fail fast.\n    if (isSelectorNotProvided(viewOptions)) {\n      throw new Error('Cannot create view with no selector arguments supplied');\n    }\n\n    // the SDK SHOULD NOT allow Views with a specified name to be declared with instrument selectors that\n    // may select more than one instrument (e.g. wild card instrument name) in the same Meter.\n    if (\n      viewOptions.name != null &&\n      (viewOptions?.instrumentName == null ||\n        PatternPredicate.hasWildcard(viewOptions.instrumentName))\n    ) {\n      throw new Error(\n        'Views with a specified name must be declared with an instrument selector that selects at most one instrument per meter.'\n      );\n    }\n\n    // Create AttributesProcessor if attributeKeys are defined set.\n    if (viewOptions.attributeKeys != null) {\n      this.attributesProcessor = new FilteringAttributesProcessor(\n        viewOptions.attributeKeys\n      );\n    } else {\n      this.attributesProcessor = AttributesProcessor.Noop();\n    }\n\n    this.name = viewOptions.name;\n    this.description = viewOptions.description;\n    this.aggregation = viewOptions.aggregation ?? Aggregation.Default();\n    this.instrumentSelector = new InstrumentSelector({\n      name: viewOptions.instrumentName,\n      type: viewOptions.instrumentType,\n      unit: viewOptions.instrumentUnit,\n    });\n    this.meterSelector = new MeterSelector({\n      name: viewOptions.meterName,\n      version: viewOptions.meterVersion,\n      schemaUrl: viewOptions.meterSchemaUrl,\n    });\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport {\n  Sum,\n  LastValue,\n  Histogram,\n  ExponentialHistogram,\n} from './aggregator/types';\n\nexport {\n  AggregationSelector,\n  AggregationTemporalitySelector,\n} from './export/AggregationSelector';\n\nexport { AggregationTemporality } from './export/AggregationTemporality';\n\nexport {\n  DataPoint,\n  DataPointType,\n  SumMetricData,\n  GaugeMetricData,\n  HistogramMetricData,\n  ExponentialHistogramMetricData,\n  ResourceMetrics,\n  ScopeMetrics,\n  MetricData,\n  CollectionResult,\n} from './export/MetricData';\n\nexport { PushMetricExporter } from './export/MetricExporter';\n\nexport { MetricReader, MetricReaderOptions } from './export/MetricReader';\n\nexport {\n  PeriodicExportingMetricReader,\n  PeriodicExportingMetricReaderOptions,\n} from './export/PeriodicExportingMetricReader';\n\nexport { InMemoryMetricExporter } from './export/InMemoryMetricExporter';\n\nexport { ConsoleMetricExporter } from './export/ConsoleMetricExporter';\n\nexport { MetricCollectOptions, MetricProducer } from './export/MetricProducer';\n\nexport { InstrumentDescriptor, InstrumentType } from './InstrumentDescriptor';\n\nexport { MeterProvider, MeterProviderOptions } from './MeterProvider';\n\nexport {\n  DefaultAggregation,\n  ExplicitBucketHistogramAggregation,\n  ExponentialHistogramAggregation,\n  DropAggregation,\n  HistogramAggregation,\n  LastValueAggregation,\n  SumAggregation,\n  Aggregation,\n} from './view/Aggregation';\n\nexport { View, ViewOptions } from './view/View';\n\nexport { TimeoutError } from './utils';\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { OTLPExporterConfigBase } from '@opentelemetry/otlp-exporter-base';\nimport { AggregationTemporality } from '@opentelemetry/sdk-metrics';\n\nexport interface OTLPMetricExporterOptions extends OTLPExporterConfigBase {\n  temporalityPreference?:\n    | AggregationTemporalityPreference\n    | AggregationTemporality;\n}\n\nexport enum AggregationTemporalityPreference {\n  DELTA,\n  CUMULATIVE,\n  LOWMEMORY,\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ExportResult, getEnv } from '@opentelemetry/core';\nimport {\n  AggregationTemporality,\n  AggregationTemporalitySelector,\n  InstrumentType,\n  PushMetricExporter,\n  ResourceMetrics,\n} from '@opentelemetry/sdk-metrics';\nimport {\n  AggregationTemporalityPreference,\n  OTLPMetricExporterOptions,\n} from './OTLPMetricExporterOptions';\nimport { OTLPExporterBase } from '@opentelemetry/otlp-exporter-base';\nimport { IExportMetricsServiceRequest } from '@opentelemetry/otlp-transformer';\nimport { diag } from '@opentelemetry/api';\n\nexport const CumulativeTemporalitySelector: AggregationTemporalitySelector =\n  () => AggregationTemporality.CUMULATIVE;\n\nexport const DeltaTemporalitySelector: AggregationTemporalitySelector = (\n  instrumentType: InstrumentType\n) => {\n  switch (instrumentType) {\n    case InstrumentType.COUNTER:\n    case InstrumentType.OBSERVABLE_COUNTER:\n    case InstrumentType.HISTOGRAM:\n    case InstrumentType.OBSERVABLE_GAUGE:\n      return AggregationTemporality.DELTA;\n    case InstrumentType.UP_DOWN_COUNTER:\n    case InstrumentType.OBSERVABLE_UP_DOWN_COUNTER:\n      return AggregationTemporality.CUMULATIVE;\n  }\n};\n\nexport const LowMemoryTemporalitySelector: AggregationTemporalitySelector = (\n  instrumentType: InstrumentType\n) => {\n  switch (instrumentType) {\n    case InstrumentType.COUNTER:\n    case InstrumentType.HISTOGRAM:\n      return AggregationTemporality.DELTA;\n    case InstrumentType.UP_DOWN_COUNTER:\n    case InstrumentType.OBSERVABLE_UP_DOWN_COUNTER:\n    case InstrumentType.OBSERVABLE_COUNTER:\n    case InstrumentType.OBSERVABLE_GAUGE:\n      return AggregationTemporality.CUMULATIVE;\n  }\n};\n\nfunction chooseTemporalitySelectorFromEnvironment() {\n  const env = getEnv();\n  const configuredTemporality =\n    env.OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE.trim().toLowerCase();\n\n  if (configuredTemporality === 'cumulative') {\n    return CumulativeTemporalitySelector;\n  }\n  if (configuredTemporality === 'delta') {\n    return DeltaTemporalitySelector;\n  }\n  if (configuredTemporality === 'lowmemory') {\n    return LowMemoryTemporalitySelector;\n  }\n\n  diag.warn(\n    `OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE is set to '${env.OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE}', but only 'cumulative' and 'delta' are allowed. Using default ('cumulative') instead.`\n  );\n  return CumulativeTemporalitySelector;\n}\n\nfunction chooseTemporalitySelector(\n  temporalityPreference?:\n    | AggregationTemporalityPreference\n    | AggregationTemporality\n): AggregationTemporalitySelector {\n  // Directly passed preference has priority.\n  if (temporalityPreference != null) {\n    if (temporalityPreference === AggregationTemporalityPreference.DELTA) {\n      return DeltaTemporalitySelector;\n    } else if (\n      temporalityPreference === AggregationTemporalityPreference.LOWMEMORY\n    ) {\n      return LowMemoryTemporalitySelector;\n    }\n    return CumulativeTemporalitySelector;\n  }\n\n  return chooseTemporalitySelectorFromEnvironment();\n}\n\nexport class OTLPMetricExporterBase<\n  T extends OTLPExporterBase<\n    OTLPMetricExporterOptions,\n    ResourceMetrics,\n    IExportMetricsServiceRequest\n  >,\n> implements PushMetricExporter\n{\n  public _otlpExporter: T;\n  private _aggregationTemporalitySelector: AggregationTemporalitySelector;\n\n  constructor(exporter: T, config?: OTLPMetricExporterOptions) {\n    this._otlpExporter = exporter;\n    this._aggregationTemporalitySelector = chooseTemporalitySelector(\n      config?.temporalityPreference\n    );\n  }\n\n  export(\n    metrics: ResourceMetrics,\n    resultCallback: (result: ExportResult) => void\n  ): void {\n    this._otlpExporter.export([metrics], resultCallback);\n  }\n\n  async shutdown(): Promise<void> {\n    await this._otlpExporter.shutdown();\n  }\n\n  forceFlush(): Promise<void> {\n    return Promise.resolve();\n  }\n\n  selectAggregationTemporality(\n    instrumentType: InstrumentType\n  ): AggregationTemporality {\n    return this._aggregationTemporalitySelector(instrumentType);\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { diag } from '@opentelemetry/api';\nimport { getEnv } from '@opentelemetry/core';\n\nconst DEFAULT_TRACE_TIMEOUT = 10000;\nexport const DEFAULT_EXPORT_MAX_ATTEMPTS = 5;\nexport const DEFAULT_EXPORT_INITIAL_BACKOFF = 1000;\nexport const DEFAULT_EXPORT_MAX_BACKOFF = 5000;\nexport const DEFAULT_EXPORT_BACKOFF_MULTIPLIER = 1.5;\n\n/**\n * Parses headers from config leaving only those that have defined values\n * @param partialHeaders\n */\nexport function parseHeaders(\n  partialHeaders: Partial<Record<string, unknown>> = {}\n): Record<string, string> {\n  const headers: Record<string, string> = {};\n  Object.entries(partialHeaders).forEach(([key, value]) => {\n    if (typeof value !== 'undefined') {\n      headers[key] = String(value);\n    } else {\n      diag.warn(`Header \"${key}\" has wrong value and will be ignored`);\n    }\n  });\n  return headers;\n}\n\n/**\n * Adds path (version + signal) to a no per-signal endpoint\n * @param url\n * @param path\n * @returns url + path\n */\nexport function appendResourcePathToUrl(url: string, path: string): string {\n  if (!url.endsWith('/')) {\n    url = url + '/';\n  }\n  return url + path;\n}\n\n/**\n * Adds root path to signal specific endpoint when endpoint contains no path part and no root path\n * @param url\n * @returns url\n */\nexport function appendRootPathToUrlIfNeeded(url: string): string {\n  try {\n    const parsedUrl = new URL(url);\n    if (parsedUrl.pathname === '') {\n      parsedUrl.pathname = parsedUrl.pathname + '/';\n    }\n    return parsedUrl.toString();\n  } catch {\n    diag.warn(`Could not parse export URL: '${url}'`);\n    return url;\n  }\n}\n\n/**\n * Configure exporter trace timeout value from passed in value or environment variables\n * @param timeoutMillis\n * @returns timeout value in milliseconds\n */\nexport function configureExporterTimeout(\n  timeoutMillis: number | undefined\n): number {\n  if (typeof timeoutMillis === 'number') {\n    if (timeoutMillis <= 0) {\n      // OTLP exporter configured timeout - using default value of 10000ms\n      return invalidTimeout(timeoutMillis, DEFAULT_TRACE_TIMEOUT);\n    }\n    return timeoutMillis;\n  } else {\n    return getExporterTimeoutFromEnv();\n  }\n}\n\nfunction getExporterTimeoutFromEnv(): number {\n  const definedTimeout = Number(\n    getEnv().OTEL_EXPORTER_OTLP_TRACES_TIMEOUT ??\n      getEnv().OTEL_EXPORTER_OTLP_TIMEOUT\n  );\n\n  if (definedTimeout <= 0) {\n    // OTLP exporter configured timeout - using default value of 10000ms\n    return invalidTimeout(definedTimeout, DEFAULT_TRACE_TIMEOUT);\n  } else {\n    return definedTimeout;\n  }\n}\n\n// OTLP exporter configured timeout - using default value of 10000ms\nexport function invalidTimeout(\n  timeout: number,\n  defaultTimeout: number\n): number {\n  diag.warn('Timeout must be greater than 0', timeout);\n\n  return defaultTimeout;\n}\n\nexport function isExportRetryable(statusCode: number): boolean {\n  const retryCodes = [429, 502, 503, 504];\n\n  return retryCodes.includes(statusCode);\n}\n\nexport function parseRetryAfterToMills(retryAfter?: string | null): number {\n  if (retryAfter == null) {\n    return -1;\n  }\n  const seconds = Number.parseInt(retryAfter, 10);\n  if (Number.isInteger(seconds)) {\n    return seconds > 0 ? seconds * 1000 : -1;\n  }\n  // https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Retry-After#directives\n  const delay = new Date(retryAfter).getTime() - Date.now();\n\n  if (delay >= 0) {\n    return delay;\n  }\n  return 0;\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { diag } from '@opentelemetry/api';\nimport {\n  ExportResult,\n  ExportResultCode,\n  BindOnceFuture,\n} from '@opentelemetry/core';\nimport {\n  OTLPExporterError,\n  OTLPExporterConfigBase,\n  ExportServiceError,\n} from './types';\nimport { configureExporterTimeout } from './util';\n\n/**\n * Collector Exporter abstract base class\n */\nexport abstract class OTLPExporterBase<\n  T extends OTLPExporterConfigBase,\n  ExportItem,\n  ServiceRequest,\n> {\n  public readonly url: string;\n  public readonly hostname: string | undefined;\n  public readonly timeoutMillis: number;\n  protected _concurrencyLimit: number;\n  protected _sendingPromises: Promise<unknown>[] = [];\n  protected _shutdownOnce: BindOnceFuture<void>;\n\n  /**\n   * @param config\n   */\n  constructor(config: T = {} as T) {\n    this.url = this.getDefaultUrl(config);\n    if (typeof config.hostname === 'string') {\n      this.hostname = config.hostname;\n    }\n\n    this.shutdown = this.shutdown.bind(this);\n    this._shutdownOnce = new BindOnceFuture(this._shutdown, this);\n\n    this._concurrencyLimit =\n      typeof config.concurrencyLimit === 'number'\n        ? config.concurrencyLimit\n        : Infinity;\n\n    this.timeoutMillis = configureExporterTimeout(config.timeoutMillis);\n\n    // platform dependent\n    this.onInit(config);\n  }\n\n  /**\n   * Export items.\n   * @param items\n   * @param resultCallback\n   */\n  export(\n    items: ExportItem[],\n    resultCallback: (result: ExportResult) => void\n  ): void {\n    if (this._shutdownOnce.isCalled) {\n      resultCallback({\n        code: ExportResultCode.FAILED,\n        error: new Error('Exporter has been shutdown'),\n      });\n      return;\n    }\n\n    if (this._sendingPromises.length >= this._concurrencyLimit) {\n      resultCallback({\n        code: ExportResultCode.FAILED,\n        error: new Error('Concurrent export limit reached'),\n      });\n      return;\n    }\n\n    this._export(items)\n      .then(() => {\n        resultCallback({ code: ExportResultCode.SUCCESS });\n      })\n      .catch((error: ExportServiceError) => {\n        resultCallback({ code: ExportResultCode.FAILED, error });\n      });\n  }\n\n  private _export(items: ExportItem[]): Promise<unknown> {\n    return new Promise<void>((resolve, reject) => {\n      try {\n        diag.debug('items to be sent', items);\n        this.send(items, resolve, reject);\n      } catch (e) {\n        reject(e);\n      }\n    });\n  }\n\n  /**\n   * Shutdown the exporter.\n   */\n  shutdown(): Promise<void> {\n    return this._shutdownOnce.call();\n  }\n\n  /**\n   * Exports any pending spans in the exporter\n   */\n  forceFlush(): Promise<void> {\n    return Promise.all(this._sendingPromises).then(() => {\n      /** ignore resolved values */\n    });\n  }\n\n  /**\n   * Called by _shutdownOnce with BindOnceFuture\n   */\n  private _shutdown(): Promise<void> {\n    diag.debug('shutdown started');\n    this.onShutdown();\n    return this.forceFlush();\n  }\n\n  abstract onShutdown(): void;\n  abstract onInit(config: T): void;\n  abstract send(\n    items: ExportItem[],\n    onSuccess: () => void,\n    onError: (error: OTLPExporterError) => void\n  ): void;\n  abstract getDefaultUrl(config: T): string;\n  abstract convert(objects: ExportItem[]): ServiceRequest;\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport type * as http from 'http';\nimport type * as https from 'https';\n\nimport { OTLPExporterConfigBase } from '../../types';\n\n/**\n * Collector Exporter node base config\n */\nexport interface OTLPExporterNodeConfigBase extends OTLPExporterConfigBase {\n  keepAlive?: boolean;\n  compression?: CompressionAlgorithm;\n  httpAgentOptions?: http.AgentOptions | https.AgentOptions;\n}\n\nexport enum CompressionAlgorithm {\n  NONE = 'none',\n  GZIP = 'gzip',\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Interface for handling error\n */\nexport class OTLPExporterError extends Error {\n  readonly code?: number;\n  override readonly name: string = 'OTLPExporterError';\n  readonly data?: string;\n\n  constructor(message?: string, code?: number, data?: string) {\n    super(message);\n    this.data = data;\n    this.code = code;\n  }\n}\n\n/**\n * Interface for handling export service errors\n */\nexport interface ExportServiceError {\n  name: string;\n  code: number;\n  details: string;\n  metadata: { [key: string]: unknown };\n  message: string;\n  stack: string;\n}\n\n/**\n * Collector Exporter base config\n */\nexport interface OTLPExporterConfigBase {\n  headers?: Partial<Record<string, unknown>>;\n  hostname?: string;\n  url?: string;\n  concurrencyLimit?: number;\n  /** Maximum time the OTLP exporter will wait for each batch export.\n   * The default value is 10000ms. */\n  timeoutMillis?: number;\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport * as url from 'url';\nimport * as http from 'http';\nimport * as https from 'https';\nimport * as zlib from 'zlib';\nimport { Readable } from 'stream';\nimport { OTLPExporterNodeBase } from './OTLPExporterNodeBase';\nimport { OTLPExporterNodeConfigBase } from '.';\nimport { diag } from '@opentelemetry/api';\nimport { CompressionAlgorithm } from './types';\nimport { getEnv } from '@opentelemetry/core';\nimport { OTLPExporterError } from '../../types';\nimport {\n  DEFAULT_EXPORT_MAX_ATTEMPTS,\n  DEFAULT_EXPORT_INITIAL_BACKOFF,\n  DEFAULT_EXPORT_BACKOFF_MULTIPLIER,\n  DEFAULT_EXPORT_MAX_BACKOFF,\n  isExportRetryable,\n  parseRetryAfterToMills,\n} from '../../util';\n\n/**\n * Sends data using http\n * @param collector\n * @param data\n * @param contentType\n * @param onSuccess\n * @param onError\n */\nexport function sendWithHttp<ExportItem, ServiceRequest>(\n  collector: OTLPExporterNodeBase<ExportItem, ServiceRequest>,\n  data: string | Buffer,\n  contentType: string,\n  onSuccess: () => void,\n  onError: (error: OTLPExporterError) => void\n): void {\n  const exporterTimeout = collector.timeoutMillis;\n  const parsedUrl = new url.URL(collector.url);\n  const nodeVersion = Number(process.versions.node.split('.')[0]);\n  let retryTimer: ReturnType<typeof setTimeout>;\n  let req: http.ClientRequest;\n  let reqIsDestroyed = false;\n\n  const exporterTimer = setTimeout(() => {\n    clearTimeout(retryTimer);\n    reqIsDestroyed = true;\n\n    if (req.destroyed) {\n      const err = new OTLPExporterError('Request Timeout');\n      onError(err);\n    } else {\n      // req.abort() was deprecated since v14\n      nodeVersion >= 14 ? req.destroy() : req.abort();\n    }\n  }, exporterTimeout);\n\n  const options: http.RequestOptions | https.RequestOptions = {\n    hostname: parsedUrl.hostname,\n    port: parsedUrl.port,\n    path: parsedUrl.pathname,\n    method: 'POST',\n    headers: {\n      'Content-Type': contentType,\n      ...collector.headers,\n    },\n    agent: collector.agent,\n  };\n\n  const request = parsedUrl.protocol === 'http:' ? http.request : https.request;\n\n  const sendWithRetry = (\n    retries = DEFAULT_EXPORT_MAX_ATTEMPTS,\n    minDelay = DEFAULT_EXPORT_INITIAL_BACKOFF\n  ) => {\n    req = request(options, (res: http.IncomingMessage) => {\n      let responseData = '';\n      res.on('data', chunk => (responseData += chunk));\n\n      res.on('aborted', () => {\n        if (reqIsDestroyed) {\n          const err = new OTLPExporterError('Request Timeout');\n          onError(err);\n        }\n      });\n\n      res.on('end', () => {\n        if (reqIsDestroyed === false) {\n          if (res.statusCode && res.statusCode < 299) {\n            diag.debug(`statusCode: ${res.statusCode}`, responseData);\n            onSuccess();\n            // clear all timers since request was completed and promise was resolved\n            clearTimeout(exporterTimer);\n            clearTimeout(retryTimer);\n          } else if (\n            res.statusCode &&\n            isExportRetryable(res.statusCode) &&\n            retries > 0\n          ) {\n            let retryTime: number;\n            minDelay = DEFAULT_EXPORT_BACKOFF_MULTIPLIER * minDelay;\n\n            // retry after interval specified in Retry-After header\n            if (res.headers['retry-after']) {\n              retryTime = parseRetryAfterToMills(res.headers['retry-after']!);\n            } else {\n              // exponential backoff with jitter\n              retryTime = Math.round(\n                Math.random() * (DEFAULT_EXPORT_MAX_BACKOFF - minDelay) +\n                  minDelay\n              );\n            }\n\n            retryTimer = setTimeout(() => {\n              sendWithRetry(retries - 1, minDelay);\n            }, retryTime);\n          } else {\n            const error = new OTLPExporterError(\n              res.statusMessage,\n              res.statusCode,\n              responseData\n            );\n            onError(error);\n            // clear all timers since request was completed and promise was resolved\n            clearTimeout(exporterTimer);\n            clearTimeout(retryTimer);\n          }\n        }\n      });\n    });\n\n    req.on('error', (error: Error | any) => {\n      if (reqIsDestroyed) {\n        const err = new OTLPExporterError('Request Timeout', error.code);\n        onError(err);\n      } else {\n        onError(error);\n      }\n      clearTimeout(exporterTimer);\n      clearTimeout(retryTimer);\n    });\n\n    req.on('abort', () => {\n      if (reqIsDestroyed) {\n        const err = new OTLPExporterError('Request Timeout');\n        onError(err);\n      }\n      clearTimeout(exporterTimer);\n      clearTimeout(retryTimer);\n    });\n\n    switch (collector.compression) {\n      case CompressionAlgorithm.GZIP: {\n        req.setHeader('Content-Encoding', 'gzip');\n        const dataStream = readableFromBuffer(data);\n        dataStream\n          .on('error', onError)\n          .pipe(zlib.createGzip())\n          .on('error', onError)\n          .pipe(req);\n\n        break;\n      }\n      default:\n        req.end(data);\n        break;\n    }\n  };\n  sendWithRetry();\n}\n\nfunction readableFromBuffer(buff: string | Buffer): Readable {\n  const readable = new Readable();\n  readable.push(buff);\n  readable.push(null);\n\n  return readable;\n}\n\nexport function createHttpAgent(\n  config: OTLPExporterNodeConfigBase\n): http.Agent | https.Agent | undefined {\n  if (config.httpAgentOptions && config.keepAlive === false) {\n    diag.warn('httpAgentOptions is used only when keepAlive is true');\n    return undefined;\n  }\n\n  if (config.keepAlive === false || !config.url) return undefined;\n\n  try {\n    const parsedUrl = new url.URL(config.url as string);\n    const Agent = parsedUrl.protocol === 'http:' ? http.Agent : https.Agent;\n    return new Agent({ keepAlive: true, ...config.httpAgentOptions });\n  } catch (err) {\n    diag.error(\n      `collector exporter failed to create http agent. err: ${err.message}`\n    );\n    return undefined;\n  }\n}\n\nexport function configureCompression(\n  compression: CompressionAlgorithm | undefined\n): CompressionAlgorithm {\n  if (compression) {\n    return compression;\n  } else {\n    const definedCompression =\n      getEnv().OTEL_EXPORTER_OTLP_TRACES_COMPRESSION ||\n      getEnv().OTEL_EXPORTER_OTLP_COMPRESSION;\n    return definedCompression === CompressionAlgorithm.GZIP\n      ? CompressionAlgorithm.GZIP\n      : CompressionAlgorithm.NONE;\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type * as http from 'http';\nimport type * as https from 'https';\n\nimport { OTLPExporterBase } from '../../OTLPExporterBase';\nimport { OTLPExporterNodeConfigBase, CompressionAlgorithm } from './types';\nimport * as otlpTypes from '../../types';\nimport { parseHeaders } from '../../util';\nimport { createHttpAgent, sendWithHttp, configureCompression } from './util';\nimport { diag } from '@opentelemetry/api';\nimport { getEnv, baggageUtils } from '@opentelemetry/core';\n\n/**\n * Collector Metric Exporter abstract base class\n */\nexport abstract class OTLPExporterNodeBase<\n  ExportItem,\n  ServiceRequest,\n> extends OTLPExporterBase<\n  OTLPExporterNodeConfigBase,\n  ExportItem,\n  ServiceRequest\n> {\n  DEFAULT_HEADERS: Record<string, string> = {};\n  headers: Record<string, string>;\n  agent: http.Agent | https.Agent | undefined;\n  compression: CompressionAlgorithm;\n\n  constructor(config: OTLPExporterNodeConfigBase = {}) {\n    super(config);\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    if ((config as any).metadata) {\n      diag.warn('Metadata cannot be set when using http');\n    }\n    this.headers = Object.assign(\n      this.DEFAULT_HEADERS,\n      parseHeaders(config.headers),\n      baggageUtils.parseKeyPairsIntoRecord(getEnv().OTEL_EXPORTER_OTLP_HEADERS)\n    );\n    this.agent = createHttpAgent(config);\n    this.compression = configureCompression(config.compression);\n  }\n\n  onInit(_config: OTLPExporterNodeConfigBase): void {}\n\n  send(\n    objects: ExportItem[],\n    onSuccess: () => void,\n    onError: (error: otlpTypes.OTLPExporterError) => void\n  ): void {\n    if (this._shutdownOnce.isCalled) {\n      diag.debug('Shutdown already started. Cannot send objects');\n      return;\n    }\n    const serviceRequest = this.convert(objects);\n\n    const promise = new Promise<void>((resolve, reject) => {\n      sendWithHttp(\n        this,\n        JSON.stringify(serviceRequest),\n        'application/json',\n        resolve,\n        reject\n      );\n    }).then(onSuccess, onError);\n\n    this._sendingPromises.push(promise);\n    const popPromise = () => {\n      const index = this._sendingPromises.indexOf(promise);\n      this._sendingPromises.splice(index, 1);\n    };\n    promise.then(popPromise, popPromise);\n  }\n\n  onShutdown(): void {}\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport { OTLPExporterNodeBase } from './OTLPExporterNodeBase';\nexport { sendWithHttp, createHttpAgent, configureCompression } from './util';\nexport { OTLPExporterNodeConfigBase, CompressionAlgorithm } from './types';\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { diag } from '@opentelemetry/api';\nimport { OTLPExporterError } from '../../types';\nimport {\n  DEFAULT_EXPORT_MAX_ATTEMPTS,\n  DEFAULT_EXPORT_INITIAL_BACKOFF,\n  DEFAULT_EXPORT_BACKOFF_MULTIPLIER,\n  DEFAULT_EXPORT_MAX_BACKOFF,\n  isExportRetryable,\n  parseRetryAfterToMills,\n} from '../../util';\n\n/**\n * Send metrics/spans using browser navigator.sendBeacon\n * @param body\n * @param url\n * @param blobPropertyBag\n * @param onSuccess\n * @param onError\n */\nexport function sendWithBeacon(\n  body: string,\n  url: string,\n  blobPropertyBag: BlobPropertyBag,\n  onSuccess: () => void,\n  onError: (error: OTLPExporterError) => void\n): void {\n  if (navigator.sendBeacon(url, new Blob([body], blobPropertyBag))) {\n    diag.debug('sendBeacon - can send', body);\n    onSuccess();\n  } else {\n    const error = new OTLPExporterError(`sendBeacon - cannot send ${body}`);\n    onError(error);\n  }\n}\n\n/**\n * function to send metrics/spans using browser XMLHttpRequest\n *     used when navigator.sendBeacon is not available\n * @param body\n * @param url\n * @param headers\n * @param onSuccess\n * @param onError\n */\nexport function sendWithXhr(\n  body: string | Blob,\n  url: string,\n  headers: Record<string, string>,\n  exporterTimeout: number,\n  onSuccess: () => void,\n  onError: (error: OTLPExporterError) => void\n): void {\n  let retryTimer: ReturnType<typeof setTimeout>;\n  let xhr: XMLHttpRequest;\n  let reqIsDestroyed = false;\n\n  const exporterTimer = setTimeout(() => {\n    clearTimeout(retryTimer);\n    reqIsDestroyed = true;\n\n    if (xhr.readyState === XMLHttpRequest.DONE) {\n      const err = new OTLPExporterError('Request Timeout');\n      onError(err);\n    } else {\n      xhr.abort();\n    }\n  }, exporterTimeout);\n\n  const sendWithRetry = (\n    retries = DEFAULT_EXPORT_MAX_ATTEMPTS,\n    minDelay = DEFAULT_EXPORT_INITIAL_BACKOFF\n  ) => {\n    xhr = new XMLHttpRequest();\n    xhr.open('POST', url);\n\n    const defaultHeaders = {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n    };\n\n    Object.entries({\n      ...defaultHeaders,\n      ...headers,\n    }).forEach(([k, v]) => {\n      xhr.setRequestHeader(k, v);\n    });\n\n    xhr.send(body);\n\n    xhr.onreadystatechange = () => {\n      if (xhr.readyState === XMLHttpRequest.DONE && reqIsDestroyed === false) {\n        if (xhr.status >= 200 && xhr.status <= 299) {\n          diag.debug('xhr success', body);\n          onSuccess();\n          clearTimeout(exporterTimer);\n          clearTimeout(retryTimer);\n        } else if (xhr.status && isExportRetryable(xhr.status) && retries > 0) {\n          let retryTime: number;\n          minDelay = DEFAULT_EXPORT_BACKOFF_MULTIPLIER * minDelay;\n\n          // retry after interval specified in Retry-After header\n          if (xhr.getResponseHeader('Retry-After')) {\n            retryTime = parseRetryAfterToMills(\n              xhr.getResponseHeader('Retry-After')!\n            );\n          } else {\n            // exponential backoff with jitter\n            retryTime = Math.round(\n              Math.random() * (DEFAULT_EXPORT_MAX_BACKOFF - minDelay) + minDelay\n            );\n          }\n\n          retryTimer = setTimeout(() => {\n            sendWithRetry(retries - 1, minDelay);\n          }, retryTime);\n        } else {\n          const error = new OTLPExporterError(\n            `Failed to export with XHR (status: ${xhr.status})`,\n            xhr.status\n          );\n          onError(error);\n          clearTimeout(exporterTimer);\n          clearTimeout(retryTimer);\n        }\n      }\n    };\n\n    xhr.onabort = () => {\n      if (reqIsDestroyed) {\n        const err = new OTLPExporterError('Request Timeout');\n        onError(err);\n      }\n      clearTimeout(exporterTimer);\n      clearTimeout(retryTimer);\n    };\n\n    xhr.onerror = () => {\n      if (reqIsDestroyed) {\n        const err = new OTLPExporterError('Request Timeout');\n        onError(err);\n      }\n      clearTimeout(exporterTimer);\n      clearTimeout(retryTimer);\n    };\n  };\n\n  sendWithRetry();\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { OTLPExporterBase } from '../../OTLPExporterBase';\nimport { OTLPExporterConfigBase } from '../../types';\nimport * as otlpTypes from '../../types';\nimport { parseHeaders } from '../../util';\nimport { sendWithBeacon, sendWithXhr } from './util';\nimport { diag } from '@opentelemetry/api';\nimport { getEnv, baggageUtils } from '@opentelemetry/core';\n\n/**\n * Collector Metric Exporter abstract base class\n */\nexport abstract class OTLPExporterBrowserBase<\n  ExportItem,\n  ServiceRequest,\n> extends OTLPExporterBase<OTLPExporterConfigBase, ExportItem, ServiceRequest> {\n  protected _headers: Record<string, string>;\n  private _useXHR: boolean = false;\n\n  /**\n   * @param config\n   */\n  constructor(config: OTLPExporterConfigBase = {}) {\n    super(config);\n    this._useXHR =\n      !!config.headers || typeof navigator.sendBeacon !== 'function';\n    if (this._useXHR) {\n      this._headers = Object.assign(\n        {},\n        parseHeaders(config.headers),\n        baggageUtils.parseKeyPairsIntoRecord(\n          getEnv().OTEL_EXPORTER_OTLP_HEADERS\n        )\n      );\n    } else {\n      this._headers = {};\n    }\n  }\n\n  onInit(): void {\n    window.addEventListener('unload', this.shutdown);\n  }\n\n  onShutdown(): void {\n    window.removeEventListener('unload', this.shutdown);\n  }\n\n  send(\n    items: ExportItem[],\n    onSuccess: () => void,\n    onError: (error: otlpTypes.OTLPExporterError) => void\n  ): void {\n    if (this._shutdownOnce.isCalled) {\n      diag.debug('Shutdown already started. Cannot send objects');\n      return;\n    }\n    const serviceRequest = this.convert(items);\n    const body = JSON.stringify(serviceRequest);\n\n    const promise = new Promise<void>((resolve, reject) => {\n      if (this._useXHR) {\n        sendWithXhr(\n          body,\n          this.url,\n          this._headers,\n          this.timeoutMillis,\n          resolve,\n          reject\n        );\n      } else {\n        sendWithBeacon(\n          body,\n          this.url,\n          { type: 'application/json' },\n          resolve,\n          reject\n        );\n      }\n    }).then(onSuccess, onError);\n\n    this._sendingPromises.push(promise);\n    const popPromise = () => {\n      const index = this._sendingPromises.indexOf(promise);\n      this._sendingPromises.splice(index, 1);\n    };\n    promise.then(popPromise, popPromise);\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport { OTLPExporterBrowserBase } from './OTLPExporterBrowserBase';\nexport { sendWithXhr } from './util';\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport {\n  OTLPExporterNodeBase,\n  sendWithHttp,\n  createHttpAgent,\n  configureCompression,\n  OTLPExporterNodeConfigBase,\n  CompressionAlgorithm,\n} from './node';\nexport { OTLPExporterBrowserBase, sendWithXhr } from './browser';\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport * from './platform';\nexport { OTLPExporterBase } from './OTLPExporterBase';\nexport {\n  OTLPExporterError,\n  OTLPExporterConfigBase,\n  ExportServiceError,\n} from './types';\nexport {\n  parseHeaders,\n  appendResourcePathToUrl,\n  appendRootPathToUrlIfNeeded,\n  configureExporterTimeout,\n  invalidTimeout,\n} from './util';\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=types.js.map", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { IInstrumentationScope, IKeyValue } from '../common/types';\nimport { IResource } from '../resource/types';\n\n/** Properties of an ExportTraceServiceRequest. */\nexport interface IExportTraceServiceRequest {\n  /** ExportTraceServiceRequest resourceSpans */\n  resourceSpans?: IResourceSpans[];\n}\n\nexport interface IExportTraceServiceResponse {\n  /** ExportTraceServiceResponse partialSuccess */\n  partialSuccess?: IExportTracePartialSuccess;\n}\n\nexport interface IExportTracePartialSuccess {\n  /** ExportLogsServiceResponse rejectedLogRecords */\n  rejectedSpans?: number;\n\n  /** ExportLogsServiceResponse errorMessage */\n  errorMessage?: string;\n}\n\n/** Properties of a ResourceSpans. */\nexport interface IResourceSpans {\n  /** ResourceSpans resource */\n  resource?: IResource;\n\n  /** ResourceSpans scopeSpans */\n  scopeSpans: IScopeSpans[];\n\n  /** ResourceSpans schemaUrl */\n  schemaUrl?: string;\n}\n\n/** Properties of an ScopeSpans. */\nexport interface IScopeSpans {\n  /** IScopeSpans scope */\n  scope?: IInstrumentationScope;\n\n  /** IScopeSpans spans */\n  spans?: ISpan[];\n\n  /** IScopeSpans schemaUrl */\n  schemaUrl?: string | null;\n}\n\n/** Properties of a Span. */\nexport interface ISpan {\n  /** Span traceId */\n  traceId: string;\n\n  /** Span spanId */\n  spanId: string;\n\n  /** Span traceState */\n  traceState?: string | null;\n\n  /** Span parentSpanId */\n  parentSpanId?: string;\n\n  /** Span name */\n  name: string;\n\n  /** Span kind */\n  kind: ESpanKind;\n\n  /** Span startTimeUnixNano */\n  startTimeUnixNano: number;\n\n  /** Span endTimeUnixNano */\n  endTimeUnixNano: number;\n\n  /** Span attributes */\n  attributes: IKeyValue[];\n\n  /** Span droppedAttributesCount */\n  droppedAttributesCount: number;\n\n  /** Span events */\n  events: IEvent[];\n\n  /** Span droppedEventsCount */\n  droppedEventsCount: number;\n\n  /** Span links */\n  links: ILink[];\n\n  /** Span droppedLinksCount */\n  droppedLinksCount: number;\n\n  /** Span status */\n  status: IStatus;\n}\n\n/**\n * SpanKind is the type of span. Can be used to specify additional relationships between spans\n * in addition to a parent/child relationship.\n */\nexport enum ESpanKind {\n  /** Unspecified. Do NOT use as default. Implementations MAY assume SpanKind to be INTERNAL when receiving UNSPECIFIED. */\n  SPAN_KIND_UNSPECIFIED = 0,\n\n  /** Indicates that the span represents an internal operation within an application,\n   * as opposed to an operation happening at the boundaries. Default value.\n   */\n  SPAN_KIND_INTERNAL = 1,\n\n  /** Indicates that the span covers server-side handling of an RPC or other\n   * remote network request.\n   */\n  SPAN_KIND_SERVER = 2,\n\n  /** Indicates that the span describes a request to some remote service.\n   */\n  SPAN_KIND_CLIENT = 3,\n\n  /** Indicates that the span describes a producer sending a message to a broker.\n   * Unlike CLIENT and SERVER, there is often no direct critical path latency relationship\n   * between producer and consumer spans. A PRODUCER span ends when the message was accepted\n   * by the broker while the logical processing of the message might span a much longer time.\n   */\n  SPAN_KIND_PRODUCER = 4,\n\n  /** Indicates that the span describes consumer receiving a message from a broker.\n   * Like the PRODUCER kind, there is often no direct critical path latency relationship\n   * between producer and consumer spans.\n   */\n  SPAN_KIND_CONSUMER = 5,\n}\n\n/** Properties of a Status. */\nexport interface IStatus {\n  /** Status message */\n  message?: string;\n\n  /** Status code */\n  code: EStatusCode;\n}\n\n/** StatusCode enum. */\nexport const enum EStatusCode {\n  /** The default status. */\n  STATUS_CODE_UNSET = 0,\n  /** The Span has been evaluated by an Application developers or Operator to have completed successfully. */\n  STATUS_CODE_OK = 1,\n  /** The Span contains an error. */\n  STATUS_CODE_ERROR = 2,\n}\n\n/** Properties of an Event. */\nexport interface IEvent {\n  /** Event timeUnixNano */\n  timeUnixNano: number;\n\n  /** Event name */\n  name: string;\n\n  /** Event attributes */\n  attributes: IKeyValue[];\n\n  /** Event droppedAttributesCount */\n  droppedAttributesCount: number;\n}\n\n/** Properties of a Link. */\nexport interface ILink {\n  /** Link traceId */\n  traceId: string;\n\n  /** Link spanId */\n  spanId: string;\n\n  /** Link traceState */\n  traceState?: string;\n\n  /** Link attributes */\n  attributes: IKeyValue[];\n\n  /** Link droppedAttributesCount */\n  droppedAttributesCount: number;\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport type { IAnyValue, IKeyValue } from './types';\nimport { Attributes } from '@opentelemetry/api';\n\nexport function toAttributes(attributes: Attributes): IKeyValue[] {\n  return Object.keys(attributes).map(key => toKeyValue(key, attributes[key]));\n}\n\nexport function toKeyValue(key: string, value: unknown): IKeyValue {\n  return {\n    key: key,\n    value: toAnyValue(value),\n  };\n}\n\nexport function toAnyValue(value: unknown): IAnyValue {\n  const t = typeof value;\n  if (t === 'string') return { stringValue: value as string };\n  if (t === 'number') {\n    if (!Number.isInteger(value)) return { doubleValue: value as number };\n    return { intValue: value as number };\n  }\n  if (t === 'boolean') return { boolValue: value as boolean };\n  if (value instanceof Uint8Array) return { bytesValue: value };\n  if (Array.isArray(value))\n    return { arrayValue: { values: value.map(toAnyValue) } };\n  if (t === 'object' && value != null)\n    return {\n      kvlistValue: {\n        values: Object.entries(value as object).map(([k, v]) =>\n          toKeyValue(k, v)\n        ),\n      },\n    };\n\n  return {};\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport type { Link } from '@opentelemetry/api';\nimport { hrTimeToNanoseconds } from '@opentelemetry/core';\nimport type { ReadableSpan, TimedEvent } from '@opentelemetry/sdk-trace-base';\nimport { toAttributes } from '../common/internal';\nimport { EStatusCode, IEvent, ILink, ISpan } from './types';\nimport * as core from '@opentelemetry/core';\n\nexport function sdkSpanToOtlpSpan(span: ReadableSpan, useHex?: boolean): ISpan {\n  const ctx = span.spanContext();\n  const status = span.status;\n  const parentSpanId = useHex\n    ? span.parentSpanId\n    : span.parentSpanId != null\n    ? core.hexToBase64(span.parentSpanId)\n    : undefined;\n  return {\n    traceId: useHex ? ctx.traceId : core.hexToBase64(ctx.traceId),\n    spanId: useHex ? ctx.spanId : core.hexToBase64(ctx.spanId),\n    parentSpanId: parentSpanId,\n    traceState: ctx.traceState?.serialize(),\n    name: span.name,\n    // Span kind is offset by 1 because the API does not define a value for unset\n    kind: span.kind == null ? 0 : span.kind + 1,\n    startTimeUnixNano: hrTimeToNanoseconds(span.startTime),\n    endTimeUnixNano: hrTimeToNanoseconds(span.endTime),\n    attributes: toAttributes(span.attributes),\n    droppedAttributesCount: span.droppedAttributesCount,\n    events: span.events.map(toOtlpSpanEvent),\n    droppedEventsCount: span.droppedEventsCount,\n    status: {\n      // API and proto enums share the same values\n      code: status.code as unknown as EStatusCode,\n      message: status.message,\n    },\n    links: span.links.map(link => toOtlpLink(link, useHex)),\n    droppedLinksCount: span.droppedLinksCount,\n  };\n}\n\nexport function toOtlpLink(link: Link, useHex?: boolean): ILink {\n  return {\n    attributes: link.attributes ? toAttributes(link.attributes) : [],\n    spanId: useHex\n      ? link.context.spanId\n      : core.hexToBase64(link.context.spanId),\n    traceId: useHex\n      ? link.context.traceId\n      : core.hexToBase64(link.context.traceId),\n    traceState: link.context.traceState?.serialize(),\n    droppedAttributesCount: link.droppedAttributesCount || 0,\n  };\n}\n\nexport function toOtlpSpanEvent(timedEvent: TimedEvent): IEvent {\n  return {\n    attributes: timedEvent.attributes\n      ? toAttributes(timedEvent.attributes)\n      : [],\n    name: timedEvent.name,\n    timeUnixNano: hrTimeToNanoseconds(timedEvent.time),\n    droppedAttributesCount: timedEvent.droppedAttributesCount || 0,\n  };\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport type { IResource } from '@opentelemetry/resources';\nimport type { ReadableSpan } from '@opentelemetry/sdk-trace-base';\nimport { toAttributes } from '../common/internal';\nimport { sdkSpanToOtlpSpan } from './internal';\nimport {\n  IExportTraceServiceRequest,\n  IResourceSpans,\n  IScopeSpans,\n} from './types';\n\nexport function createExportTraceServiceRequest(\n  spans: ReadableSpan[],\n  useHex?: boolean\n): IExportTraceServiceRequest {\n  return {\n    resourceSpans: spanRecordsToResourceSpans(spans, useHex),\n  };\n}\n\nfunction createResourceMap(readableSpans: ReadableSpan[]) {\n  const resourceMap: Map<IResource, Map<string, ReadableSpan[]>> = new Map();\n  for (const record of readableSpans) {\n    let ilmMap = resourceMap.get(record.resource);\n\n    if (!ilmMap) {\n      ilmMap = new Map();\n      resourceMap.set(record.resource, ilmMap);\n    }\n\n    // TODO this is duplicated in basic tracer. Consolidate on a common helper in core\n    const instrumentationLibraryKey = `${record.instrumentationLibrary.name}@${\n      record.instrumentationLibrary.version || ''\n    }:${record.instrumentationLibrary.schemaUrl || ''}`;\n    let records = ilmMap.get(instrumentationLibraryKey);\n\n    if (!records) {\n      records = [];\n      ilmMap.set(instrumentationLibraryKey, records);\n    }\n\n    records.push(record);\n  }\n\n  return resourceMap;\n}\n\nfunction spanRecordsToResourceSpans(\n  readableSpans: ReadableSpan[],\n  useHex?: boolean\n): IResourceSpans[] {\n  const resourceMap = createResourceMap(readableSpans);\n  const out: IResourceSpans[] = [];\n\n  const entryIterator = resourceMap.entries();\n  let entry = entryIterator.next();\n  while (!entry.done) {\n    const [resource, ilmMap] = entry.value;\n    const scopeResourceSpans: IScopeSpans[] = [];\n    const ilmIterator = ilmMap.values();\n    let ilmEntry = ilmIterator.next();\n    while (!ilmEntry.done) {\n      const scopeSpans = ilmEntry.value;\n      if (scopeSpans.length > 0) {\n        const { name, version, schemaUrl } =\n          scopeSpans[0].instrumentationLibrary;\n        const spans = scopeSpans.map(readableSpan =>\n          sdkSpanToOtlpSpan(readableSpan, useHex)\n        );\n\n        scopeResourceSpans.push({\n          scope: { name, version },\n          spans: spans,\n          schemaUrl: schemaUrl,\n        });\n      }\n      ilmEntry = ilmIterator.next();\n    }\n    // TODO SDK types don't provide resource schema URL at this time\n    const transformedSpans: IResourceSpans = {\n      resource: {\n        attributes: toAttributes(resource.attributes),\n        droppedAttributesCount: 0,\n      },\n      scopeSpans: scopeResourceSpans,\n      schemaUrl: undefined,\n    };\n\n    out.push(transformedSpans);\n    entry = entryIterator.next();\n  }\n\n  return out;\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { ValueType } from '@opentelemetry/api';\nimport { hrTimeToNanoseconds } from '@opentelemetry/core';\nimport {\n  AggregationTemporality,\n  DataPoint,\n  DataPointType,\n  ExponentialHistogram,\n  Histogram,\n  MetricData,\n  ResourceMetrics,\n  ScopeMetrics,\n} from '@opentelemetry/sdk-metrics';\nimport { toAttributes } from '../common/internal';\nimport {\n  EAggregationTemporality,\n  IExponentialHistogramDataPoint,\n  IHistogramDataPoint,\n  IMetric,\n  INumberDataPoint,\n  IResourceMetrics,\n  IScopeMetrics,\n} from './types';\n\nexport function toResourceMetrics(\n  resourceMetrics: ResourceMetrics\n): IResourceMetrics {\n  return {\n    resource: {\n      attributes: toAttributes(resourceMetrics.resource.attributes),\n      droppedAttributesCount: 0,\n    },\n    schemaUrl: undefined,\n    scopeMetrics: toScopeMetrics(resourceMetrics.scopeMetrics),\n  };\n}\n\nexport function toScopeMetrics(scopeMetrics: ScopeMetrics[]): IScopeMetrics[] {\n  return Array.from(\n    scopeMetrics.map(metrics => ({\n      scope: {\n        name: metrics.scope.name,\n        version: metrics.scope.version,\n      },\n      metrics: metrics.metrics.map(metricData => toMetric(metricData)),\n      schemaUrl: metrics.scope.schemaUrl,\n    }))\n  );\n}\n\nexport function toMetric(metricData: MetricData): IMetric {\n  const out: IMetric = {\n    name: metricData.descriptor.name,\n    description: metricData.descriptor.description,\n    unit: metricData.descriptor.unit,\n  };\n\n  const aggregationTemporality = toAggregationTemporality(\n    metricData.aggregationTemporality\n  );\n\n  switch (metricData.dataPointType) {\n    case DataPointType.SUM:\n      out.sum = {\n        aggregationTemporality,\n        isMonotonic: metricData.isMonotonic,\n        dataPoints: toSingularDataPoints(metricData),\n      };\n      break;\n    case DataPointType.GAUGE:\n      out.gauge = {\n        dataPoints: toSingularDataPoints(metricData),\n      };\n      break;\n    case DataPointType.HISTOGRAM:\n      out.histogram = {\n        aggregationTemporality,\n        dataPoints: toHistogramDataPoints(metricData),\n      };\n      break;\n    case DataPointType.EXPONENTIAL_HISTOGRAM:\n      out.exponentialHistogram = {\n        aggregationTemporality,\n        dataPoints: toExponentialHistogramDataPoints(metricData),\n      };\n      break;\n  }\n\n  return out;\n}\n\nfunction toSingularDataPoint(\n  dataPoint:\n    | DataPoint<number>\n    | DataPoint<Histogram>\n    | DataPoint<ExponentialHistogram>,\n  valueType: ValueType\n) {\n  const out: INumberDataPoint = {\n    attributes: toAttributes(dataPoint.attributes),\n    startTimeUnixNano: hrTimeToNanoseconds(dataPoint.startTime),\n    timeUnixNano: hrTimeToNanoseconds(dataPoint.endTime),\n  };\n\n  switch (valueType) {\n    case ValueType.INT:\n      out.asInt = dataPoint.value as number;\n      break;\n    case ValueType.DOUBLE:\n      out.asDouble = dataPoint.value as number;\n      break;\n  }\n\n  return out;\n}\n\nfunction toSingularDataPoints(metricData: MetricData): INumberDataPoint[] {\n  return metricData.dataPoints.map(dataPoint => {\n    return toSingularDataPoint(dataPoint, metricData.descriptor.valueType);\n  });\n}\n\nfunction toHistogramDataPoints(metricData: MetricData): IHistogramDataPoint[] {\n  return metricData.dataPoints.map(dataPoint => {\n    const histogram = dataPoint.value as Histogram;\n    return {\n      attributes: toAttributes(dataPoint.attributes),\n      bucketCounts: histogram.buckets.counts,\n      explicitBounds: histogram.buckets.boundaries,\n      count: histogram.count,\n      sum: histogram.sum,\n      min: histogram.min,\n      max: histogram.max,\n      startTimeUnixNano: hrTimeToNanoseconds(dataPoint.startTime),\n      timeUnixNano: hrTimeToNanoseconds(dataPoint.endTime),\n    };\n  });\n}\n\nfunction toExponentialHistogramDataPoints(\n  metricData: MetricData\n): IExponentialHistogramDataPoint[] {\n  return metricData.dataPoints.map(dataPoint => {\n    const histogram = dataPoint.value as ExponentialHistogram;\n    return {\n      attributes: toAttributes(dataPoint.attributes),\n      count: histogram.count,\n      min: histogram.min,\n      max: histogram.max,\n      sum: histogram.sum,\n      positive: {\n        offset: histogram.positive.offset,\n        bucketCounts: histogram.positive.bucketCounts,\n      },\n      negative: {\n        offset: histogram.negative.offset,\n        bucketCounts: histogram.negative.bucketCounts,\n      },\n      scale: histogram.scale,\n      zeroCount: histogram.zeroCount,\n      startTimeUnixNano: hrTimeToNanoseconds(dataPoint.startTime),\n      timeUnixNano: hrTimeToNanoseconds(dataPoint.endTime),\n    };\n  });\n}\n\nfunction toAggregationTemporality(\n  temporality: AggregationTemporality\n): EAggregationTemporality {\n  switch (temporality) {\n    case AggregationTemporality.DELTA:\n      return EAggregationTemporality.AGGREGATION_TEMPORALITY_DELTA;\n    case AggregationTemporality.CUMULATIVE:\n      return EAggregationTemporality.AGGREGATION_TEMPORALITY_CUMULATIVE;\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport type { ResourceMetrics } from '@opentelemetry/sdk-metrics';\nimport type { IExportMetricsServiceRequest } from './types';\nimport { toResourceMetrics } from './internal';\n\nexport function createExportMetricsServiceRequest(\n  resourceMetrics: ResourceMetrics[]\n): IExportMetricsServiceRequest {\n  return {\n    resourceMetrics: resourceMetrics.map(metrics => toResourceMetrics(metrics)),\n  };\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { ReadableLogRecord } from '@opentelemetry/sdk-logs';\nimport {\n  ESeverityNumber,\n  IExportLogsServiceRequest,\n  ILogRecord,\n  IResourceLogs,\n} from './types';\nimport { IResource } from '@opentelemetry/resources';\nimport { toAnyValue, toAttributes, toKeyValue } from '../common/internal';\nimport { hexToBase64, hrTimeToNanoseconds } from '@opentelemetry/core';\nimport { SeverityNumber } from '@opentelemetry/api-logs';\nimport { IKeyValue } from '../common/types';\nimport { LogAttributes } from '@opentelemetry/api-logs';\n\nexport function createExportLogsServiceRequest(\n  logRecords: ReadableLogRecord[],\n  useHex?: boolean\n): IExportLogsServiceRequest {\n  return {\n    resourceLogs: logRecordsToResourceLogs(logRecords, useHex),\n  };\n}\n\nfunction createResourceMap(\n  logRecords: ReadableLogRecord[]\n): Map<IResource, Map<string, ReadableLogRecord[]>> {\n  const resourceMap: Map<\n    IResource,\n    Map<string, ReadableLogRecord[]>\n  > = new Map();\n\n  for (const record of logRecords) {\n    const {\n      resource,\n      instrumentationScope: { name, version = '', schemaUrl = '' },\n    } = record;\n\n    let ismMap = resourceMap.get(resource);\n    if (!ismMap) {\n      ismMap = new Map();\n      resourceMap.set(resource, ismMap);\n    }\n\n    const ismKey = `${name}@${version}:${schemaUrl}`;\n    let records = ismMap.get(ismKey);\n    if (!records) {\n      records = [];\n      ismMap.set(ismKey, records);\n    }\n    records.push(record);\n  }\n  return resourceMap;\n}\n\nfunction logRecordsToResourceLogs(\n  logRecords: ReadableLogRecord[],\n  useHex?: boolean\n): IResourceLogs[] {\n  const resourceMap = createResourceMap(logRecords);\n  return Array.from(resourceMap, ([resource, ismMap]) => ({\n    resource: {\n      attributes: toAttributes(resource.attributes),\n      droppedAttributesCount: 0,\n    },\n    scopeLogs: Array.from(ismMap, ([, scopeLogs]) => {\n      const {\n        instrumentationScope: { name, version, schemaUrl },\n      } = scopeLogs[0];\n      return {\n        scope: { name, version },\n        logRecords: scopeLogs.map(log => toLogRecord(log, useHex)),\n        schemaUrl,\n      };\n    }),\n    schemaUrl: undefined,\n  }));\n}\n\nfunction toLogRecord(log: ReadableLogRecord, useHex?: boolean): ILogRecord {\n  return {\n    timeUnixNano: hrTimeToNanoseconds(log.hrTime),\n    observedTimeUnixNano: hrTimeToNanoseconds(log.hrTimeObserved),\n    severityNumber: toSeverityNumber(log.severityNumber),\n    severityText: log.severityText,\n    body: toAnyValue(log.body),\n    attributes: toLogAttributes(log.attributes),\n    droppedAttributesCount: 0,\n    flags: log.spanContext?.traceFlags,\n    traceId: useHex\n      ? log.spanContext?.traceId\n      : optionalHexToBase64(log.spanContext?.traceId),\n    spanId: useHex\n      ? log.spanContext?.spanId\n      : optionalHexToBase64(log.spanContext?.spanId),\n  };\n}\n\nfunction toSeverityNumber(\n  severityNumber: SeverityNumber | undefined\n): ESeverityNumber | undefined {\n  return severityNumber as number | undefined as ESeverityNumber | undefined;\n}\n\nfunction optionalHexToBase64(str: string | undefined): string | undefined {\n  if (str === undefined) return undefined;\n  return hexToBase64(str);\n}\n\nexport function toLogAttributes(attributes: LogAttributes): IKeyValue[] {\n  return Object.keys(attributes).map(key => toKeyValue(key, attributes[key]));\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport * from './common/types';\nexport * from './metrics/types';\nexport * from './resource/types';\nexport * from './trace/types';\nexport * from './logs/types';\n\nexport { createExportTraceServiceRequest } from './trace';\nexport { createExportMetricsServiceRequest } from './metrics';\nexport { createExportLogsServiceRequest } from './logs';\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// this is autogenerated file, see scripts/version-update.js\nexport const VERSION = '0.43.0';\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ResourceMetrics } from '@opentelemetry/sdk-metrics';\nimport { getEnv, baggageUtils } from '@opentelemetry/core';\nimport { OTLPMetricExporterOptions } from '../../OTLPMetricExporterOptions';\nimport { OTLPMetricExporterBase } from '../../OTLPMetricExporterBase';\nimport {\n  OTLPExporterNodeBase,\n  OTLPExporterNodeConfigBase,\n  appendResourcePathToUrl,\n  appendRootPathToUrlIfNeeded,\n} from '@opentelemetry/otlp-exporter-base';\nimport {\n  createExportMetricsServiceRequest,\n  IExportMetricsServiceRequest,\n} from '@opentelemetry/otlp-transformer';\nimport { VERSION } from '../../version';\n\nconst DEFAULT_COLLECTOR_RESOURCE_PATH = 'v1/metrics';\nconst DEFAULT_COLLECTOR_URL = `http://localhost:4318/${DEFAULT_COLLECTOR_RESOURCE_PATH}`;\nconst USER_AGENT = {\n  'User-Agent': `OTel-OTLP-Exporter-JavaScript/${VERSION}`,\n};\n\nclass OTLPExporterNodeProxy extends OTLPExporterNodeBase<\n  ResourceMetrics,\n  IExportMetricsServiceRequest\n> {\n  constructor(config?: OTLPExporterNodeConfigBase & OTLPMetricExporterOptions) {\n    super(config);\n    this.headers = {\n      ...this.headers,\n      ...USER_AGENT,\n      ...baggageUtils.parseKeyPairsIntoRecord(\n        getEnv().OTEL_EXPORTER_OTLP_METRICS_HEADERS\n      ),\n    };\n  }\n\n  convert(metrics: ResourceMetrics[]): IExportMetricsServiceRequest {\n    return createExportMetricsServiceRequest(metrics);\n  }\n\n  getDefaultUrl(config: OTLPExporterNodeConfigBase): string {\n    return typeof config.url === 'string'\n      ? config.url\n      : getEnv().OTEL_EXPORTER_OTLP_METRICS_ENDPOINT.length > 0\n      ? appendRootPathToUrlIfNeeded(\n          getEnv().OTEL_EXPORTER_OTLP_METRICS_ENDPOINT\n        )\n      : getEnv().OTEL_EXPORTER_OTLP_ENDPOINT.length > 0\n      ? appendResourcePathToUrl(\n          getEnv().OTEL_EXPORTER_OTLP_ENDPOINT,\n          DEFAULT_COLLECTOR_RESOURCE_PATH\n        )\n      : DEFAULT_COLLECTOR_URL;\n  }\n}\n\n/**\n * Collector Metric Exporter for Node\n */\nexport class OTLPMetricExporter extends OTLPMetricExporterBase<OTLPExporterNodeProxy> {\n  constructor(config?: OTLPExporterNodeConfigBase & OTLPMetricExporterOptions) {\n    super(new OTLPExporterNodeProxy(config), config);\n  }\n}\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport * from './OTLPMetricExporter';\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport * from './node';\n", "/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport * from './platform';\nexport * from './OTLPMetricExporterOptions';\nexport * from './OTLPMetricExporterBase';\n", "import {HookReturnPerTunnelPlugin} from './plugins/tunnel.js'\nimport {MonorailEventPublic, MonorailEventSensitive} from './monorail.js'\nimport {getArrayContainsDuplicates, getArrayRejectingUndefined} from '../common/array.js'\nimport {PickByPrefix} from '../common/ts/pick-by-prefix.js'\nimport {JsonMap} from '../../private/common/json.js'\nimport {Config, Interfaces} from '@oclif/core'\n\n/**\n * Convenience function to trigger a hook, and gather any successful responses. Failures are ignored.\n *\n * Responses are organised into a dictionary, keyed by plug-in name.\n * Only plug-ins that have hooks registered for the given event, and the hooks were run successfully, are included.\n *\n * @param config - The oclif config object.\n * @param event - The name of the hook to trigger.\n * @param options - The options to pass to the hook.\n * @param timeout - The timeout to use for the hook.\n * @returns A dictionary of plug-in names to the response from the hook.\n */\nexport async function fanoutHooks<TPluginMap extends HookReturnsPerPlugin, TEvent extends string & keyof TPluginMap>(\n  config: Interfaces.Config,\n  event: TEvent,\n  options: TPluginMap[typeof event]['options'],\n  timeout?: number,\n): Promise<Partial<TPluginMap[typeof event]['pluginReturns']>> {\n  const res = await config.runHook(event, options, timeout)\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return Object.fromEntries(res.successes.map(({result, plugin}) => [plugin.name, result])) as any\n}\n\ntype AppSpecificMonorailFields = PickByPrefix<MonorailEventPublic, 'app_', 'project_type' | 'api_key' | 'partner_id'> &\n  PickByPrefix<MonorailEventPublic, 'cmd_extensions_'> &\n  PickByPrefix<MonorailEventPublic, 'cmd_scaffold_'>\n\ntype AppSpecificSensitiveMonorailFields = PickByPrefix<MonorailEventSensitive, 'app_'>\n\nexport interface HookReturnsPerPlugin extends HookReturnPerTunnelPlugin {\n  public_command_metadata: {\n    options: {[key: string]: never}\n    pluginReturns: {\n      '@shopify/app': Partial<AppSpecificMonorailFields>\n      [pluginName: string]: JsonMap\n    }\n  }\n  sensitive_command_metadata: {\n    options: {[key: string]: never}\n    pluginReturns: {\n      '@shopify/app': Partial<AppSpecificSensitiveMonorailFields>\n      [pluginName: string]: JsonMap\n    }\n  }\n  [hookName: string]: {\n    options: {[key: string]: unknown}\n    pluginReturns: {[key: string]: unknown}\n  }\n}\n\nexport type PluginReturnsForHook<\n  TEvent extends keyof TPluginMap,\n  TPluginName extends keyof TPluginMap[TEvent]['pluginReturns'],\n  TPluginMap extends HookReturnsPerPlugin = HookReturnsPerPlugin,\n> = TPluginMap[TEvent]['pluginReturns'][TPluginName]\n\nexport type FanoutHookFunction<\n  TEvent extends keyof TPluginMap = string,\n  TPluginName extends keyof TPluginMap[TEvent]['pluginReturns'] = string,\n  TPluginMap extends HookReturnsPerPlugin = HookReturnsPerPlugin,\n> = (\n  this: Interfaces.Hook.Context,\n  options: TPluginMap[TEvent]['options'] & {config: Interfaces.Config},\n) => Promise<PluginReturnsForHook<TEvent, TPluginName, TPluginMap>>\n\n/**\n * Execute the 'tunnel_provider' hook, and return the list of available tunnel providers.\n * Fail if there are multiple plugins for the same provider.\n *\n * @param config - Oclif config used to execute hooks.\n * @returns List of available tunnel plugins.\n */\nexport async function getListOfTunnelPlugins(config: Config): Promise<{plugins: string[]; error?: string}> {\n  const hooks = await fanoutHooks(config, 'tunnel_provider', {})\n  const names = getArrayRejectingUndefined(Object.values(hooks).map((key) => key?.name))\n  if (getArrayContainsDuplicates(names)) return {plugins: names, error: 'multiple-plugins-for-provider'}\n  return {plugins: names}\n}\n\nexport interface TunnelPluginError {\n  provider: string\n  type: 'multiple-providers' | 'handled-error' | 'unknown' | 'no-provider'\n  message?: string\n}\n", "import {alwaysLogAnalytics, alwaysLogMetrics, analyticsDisabled, isShopify} from './context/local.js'\nimport * as metadata from './metadata.js'\nimport {publishMonorailEvent, MONORAIL_COMMAND_TOPIC} from './monorail.js'\nimport {fanoutHooks} from './plugins.js'\n\nimport {outputContent, outputDebug, outputToken} from '../../public/node/output.js'\nimport {getEnvironmentData, getSensitiveEnvironmentData} from '../../private/node/analytics.js'\nimport {CLI_KIT_VERSION} from '../common/version.js'\nimport {recordMetrics} from '../../private/node/otel-metrics.js'\nimport {runWithRateLimit} from '../../private/node/conf-store.js'\nimport {reportingRateLimit} from '../../private/node/constants.js'\nimport {getLastSeenUserIdAfterAuth} from '../../private/node/session.js'\nimport {Interfaces} from '@oclif/core'\n\nexport type CommandExitMode =\n  // The command completed successfully\n  | 'ok'\n  // The command exited for some unexpected reason -- i.e. a bug\n  | 'unexpected_error'\n  // The command exited with an error, but its one we expect and doesn't point to a bug -- i.e. malformed config files\n  | 'expected_error'\n\ninterface ReportAnalyticsEventOptions {\n  config: Interfaces.Config\n  errorMessage?: string\n  exitMode: CommandExitMode\n}\n\n/**\n * Report an analytics event, sending it off to Monorail -- Shopify's internal analytics service.\n *\n * The payload for an event includes both generic data, and data gathered from installed plug-ins.\n *\n */\nexport async function reportAnalyticsEvent(options: ReportAnalyticsEventOptions): Promise<void> {\n  try {\n    const payload = await buildPayload(options)\n    if (payload === undefined) {\n      // Nothing to log\n      return\n    }\n\n    let withinRateLimit = false\n    await runWithRateLimit({\n      key: 'report-analytics-event',\n      ...reportingRateLimit,\n      task: async () => {\n        withinRateLimit = true\n      },\n    })\n    if (!withinRateLimit) {\n      outputDebug(outputContent`Skipping command analytics due to rate limiting, payload: ${outputToken.json(payload)}`)\n      return\n    }\n\n    const skipMonorailAnalytics = !alwaysLogAnalytics() && analyticsDisabled()\n    const skipMetricAnalytics = !alwaysLogMetrics() && analyticsDisabled()\n    if (skipMonorailAnalytics || skipMetricAnalytics) {\n      outputDebug(outputContent`Skipping command analytics, payload: ${outputToken.json(payload)}`)\n    }\n\n    const doMonorail = async () => {\n      if (skipMonorailAnalytics) {\n        return\n      }\n      const response = await publishMonorailEvent(MONORAIL_COMMAND_TOPIC, payload.public, payload.sensitive)\n      if (response.type === 'error') {\n        outputDebug(response.message)\n      }\n    }\n    const doOpenTelemetry = async () => {\n      const active = payload.public.cmd_all_timing_active_ms || 0\n      const network = payload.public.cmd_all_timing_network_ms || 0\n      const prompt = payload.public.cmd_all_timing_prompts_ms || 0\n\n      return recordMetrics(\n        {\n          skipMetricAnalytics,\n          cliVersion: payload.public.cli_version,\n          owningPlugin: payload.public.cmd_all_plugin || '@shopify/cli',\n          command: payload.public.command,\n          exitMode: options.exitMode,\n        },\n        {\n          active,\n          network,\n          prompt,\n        },\n      )\n    }\n    await Promise.all([doMonorail(), doOpenTelemetry()])\n\n    // eslint-disable-next-line no-catch-all/no-catch-all\n  } catch (error) {\n    let message = 'Failed to report usage analytics'\n    if (error instanceof Error) {\n      message = message.concat(`: ${error.message}`)\n    }\n    outputDebug(message)\n  }\n}\n\nasync function buildPayload({config, errorMessage, exitMode}: ReportAnalyticsEventOptions) {\n  const {commandStartOptions, environmentFlags, ...sensitiveMetadata} = metadata.getAllSensitiveMetadata()\n  if (commandStartOptions === undefined) {\n    outputDebug('Unable to log analytics event - no information on executed command')\n    return\n  }\n  const {startCommand, startArgs, startTime} = commandStartOptions\n  const currentTime = new Date().getTime()\n\n  // All bundled plugins appear as `@shopify/cli` in the payload\n  const {'@shopify/cli': internalPluginsPublic, ...externalPluginsPublic} = await fanoutHooks(\n    config,\n    'public_command_metadata',\n    {},\n  )\n  const {'@shopify/cli': internalPluginsSensitive, ...externalPluginsSensitive} = await fanoutHooks(\n    config,\n    'sensitive_command_metadata',\n    {},\n  )\n\n  const environmentData = await getEnvironmentData(config)\n  const sensitiveEnvironmentData = await getSensitiveEnvironmentData(config)\n  const publicMetadata = metadata.getAllPublicMetadata()\n\n  // Automatically calculate the total time spent in the command, excluding time spent in subtimers.\n  const subTimers = ['cmd_all_timing_network_ms', 'cmd_all_timing_prompts_ms'] as const\n  const totalTimeFromSubtimers = subTimers.reduce((total, timer) => {\n    const value = publicMetadata[timer]\n    if (value !== undefined) {\n      return total + value\n    }\n    return total\n  }, 0)\n  const wallClockElapsed = currentTime - startTime\n  const totalTimeWithoutSubtimers = wallClockElapsed - totalTimeFromSubtimers\n\n  let payload = {\n    public: {\n      command: startCommand,\n      time_start: startTime,\n      time_end: currentTime,\n      total_time: wallClockElapsed,\n      success: exitMode === 'ok' && errorMessage === undefined,\n      cli_version: CLI_KIT_VERSION,\n      ruby_version: '',\n      node_version: process.version.replace('v', ''),\n      is_employee: await isShopify(),\n      ...environmentData,\n      ...internalPluginsPublic,\n      ...publicMetadata,\n      cmd_all_timing_active_ms: totalTimeWithoutSubtimers,\n      cmd_all_exit: exitMode,\n      user_id: await getLastSeenUserIdAfterAuth(),\n    },\n    sensitive: {\n      args: startArgs.join(' '),\n      cmd_all_environment_flags: environmentFlags,\n      error_message: errorMessage,\n      ...internalPluginsSensitive,\n      ...sensitiveEnvironmentData,\n      metadata: JSON.stringify({\n        ...sensitiveMetadata,\n        extraPublic: {\n          ...externalPluginsPublic,\n        },\n        extraSensitive: {...externalPluginsSensitive},\n      }),\n    },\n  }\n\n  // round down timing metrics\n  const timingMetrics = ['cmd_all_timing_active_ms', 'cmd_all_timing_network_ms', 'cmd_all_timing_prompts_ms'] as const\n  timingMetrics.forEach((metric) => {\n    const current = payload.public[metric]\n    if (current !== undefined) {\n      payload.public[metric] = Math.floor(current)\n    }\n  })\n\n  // strip undefined fields -- they make up the majority of payloads due to wide metadata structure.\n  payload = JSON.parse(JSON.stringify(payload))\n\n  return sanitizePayload(payload)\n}\n\nfunction sanitizePayload<T>(payload: T): T {\n  const payloadString = JSON.stringify(payload)\n  // Remove Theme Access passwords from the payload\n  const sanitizedPayloadString = payloadString.replace(/shptka_\\w*/g, '*****')\n  return JSON.parse(sanitizedPayloadString)\n}\n", "import {fetch} from './http.js'\nimport {JsonMap} from '../../private/common/json.js'\nimport {outputDebug, outputContent, outputToken} from '../../public/node/output.js'\nimport {DeepRequired} from '../common/ts/deep-required.js'\n\nexport {DeepRequired}\n\nconst url = 'https://monorail-edge.shopifysvc.com/v1/produce'\n\ntype Optional<T> = T | null\n\n// This is the topic name of the main event we log to Monorail, the command tracker\nexport const MONORAIL_COMMAND_TOPIC = 'app_cli3_command/1.15'\n\nexport interface Schemas {\n  [MONORAIL_COMMAND_TOPIC]: {\n    sensitive: {\n      args: string\n      error_message?: Optional<string>\n      app_name?: Optional<string>\n      metadata?: Optional<string>\n      store_fqdn?: Optional<string>\n      cmd_all_environment_flags?: Optional<string>\n\n      // Dev related commands\n      cmd_dev_tunnel_custom?: Optional<string>\n\n      // Environment\n      env_plugin_installed_all?: Optional<string>\n    }\n    public: {\n      partner_id?: Optional<number>\n      command: string\n      project_type?: Optional<string>\n      time_start: number\n      time_end: number\n      total_time: number\n      success: boolean\n      api_key?: Optional<string>\n      cli_version: string\n      uname: string\n      ruby_version: string\n      node_version: string\n      is_employee: boolean\n      store_fqdn_hash?: Optional<string>\n      user_id: string\n\n      // Any and all commands\n      cmd_all_alias_used?: Optional<string>\n      cmd_all_launcher?: Optional<string>\n      cmd_all_path_override?: Optional<boolean>\n      cmd_all_path_override_hash?: Optional<string>\n      cmd_all_plugin?: Optional<string>\n      cmd_all_topic?: Optional<string>\n      cmd_all_verbose?: Optional<boolean>\n      cmd_all_exit?: Optional<string>\n      cmd_all_force?: Optional<boolean>\n      cmd_all_last_graphql_request_id?: Optional<string>\n\n      cmd_all_timing_network_ms?: Optional<number>\n      cmd_all_timing_prompts_ms?: Optional<number>\n      cmd_all_timing_active_ms?: Optional<number>\n\n      // Any extension related command\n      cmd_extensions_binary_from_source?: Optional<boolean>\n\n      // Scaffolding related commands\n      cmd_scaffold_required_auth?: Optional<boolean>\n      cmd_scaffold_template_custom?: Optional<boolean>\n      cmd_scaffold_template_flavor?: Optional<string>\n      cmd_scaffold_type?: Optional<string>\n      cmd_scaffold_type_category?: Optional<string>\n      cmd_scaffold_type_gated?: Optional<boolean>\n      cmd_scaffold_type_owner?: Optional<string>\n      cmd_scaffold_used_prompts_for_type?: Optional<boolean>\n\n      // Used in several but not all commands\n      cmd_app_dependency_installation_skipped?: Optional<boolean>\n      cmd_app_reset_used?: Optional<boolean>\n      cmd_app_linked_config_used?: Optional<boolean>\n      cmd_app_linked_config_name?: Optional<string>\n      cmd_app_linked_config_git_tracked?: Optional<boolean>\n      cmd_app_all_configs_any?: Optional<boolean>\n      cmd_app_all_configs_clients?: Optional<string>\n      cmd_app_linked_config_source?: Optional<string>\n      cmd_app_linked_config_uses_cli_managed_urls?: Optional<boolean>\n      cmd_app_warning_api_key_deprecation_displayed?: Optional<boolean>\n      cmd_app_deployment_mode?: Optional<string>\n\n      // Dev related commands\n      cmd_dev_tunnel_type?: Optional<string>\n      cmd_dev_tunnel_custom_hash?: Optional<string>\n      cmd_dev_urls_updated?: Optional<boolean>\n      cmd_dev_preview_url_opened?: Optional<boolean>\n      cmd_dev_graphiql_opened?: Optional<boolean>\n      cmd_dev_dev_preview_toggle_used?: Optional<boolean>\n\n      // Create-app related commands\n      cmd_create_app_template?: Optional<string>\n      cmd_create_app_template_url?: Optional<string>\n\n      // Deploy related commands\n      cmd_deploy_flag_message_used?: Optional<boolean>\n      cmd_deploy_flag_version_used?: Optional<boolean>\n      cmd_deploy_flag_source_url_used?: Optional<boolean>\n      cmd_deploy_confirm_new_registrations?: Optional<number>\n      cmd_deploy_confirm_updated_registrations?: Optional<number>\n      cmd_deploy_confirm_removed_registrations?: Optional<number>\n      cmd_deploy_confirm_cancelled?: Optional<boolean>\n      cmd_deploy_confirm_time_to_complete_ms?: Optional<number>\n      cmd_deploy_prompt_upgrade_to_unified_displayed?: Optional<boolean>\n      cmd_deploy_prompt_upgrade_to_unified_response?: Optional<string>\n      cmd_deploy_confirm_include_config_used?: Optional<boolean>\n      cmd_deploy_include_config_used?: Optional<boolean>\n      cmd_deploy_config_modules_breakdown?: Optional<string>\n      cmd_deploy_config_modules_updated?: Optional<string>\n      cmd_deploy_config_modules_added?: Optional<string>\n      cmd_deploy_config_modules_deleted?: Optional<string>\n\n      // Release related commands\n      cmd_release_confirm_cancelled?: Optional<boolean>\n\n      // App setup\n      app_extensions_any?: Optional<boolean>\n      app_extensions_breakdown?: Optional<string>\n      app_extensions_count?: Optional<number>\n      app_extensions_custom_layout?: Optional<boolean>\n      app_extensions_function_any?: Optional<boolean>\n      app_extensions_function_count?: Optional<number>\n      app_extensions_function_custom_layout?: Optional<boolean>\n      app_extensions_theme_any?: Optional<boolean>\n      app_extensions_theme_count?: Optional<number>\n      app_extensions_theme_custom_layout?: Optional<boolean>\n      app_extensions_ui_any?: Optional<boolean>\n      app_extensions_ui_count?: Optional<number>\n      app_extensions_ui_custom_layout?: Optional<boolean>\n      app_name_hash?: Optional<string>\n      app_path_hash?: Optional<string>\n      app_scopes?: Optional<string>\n      app_web_backend_any?: Optional<boolean>\n      app_web_backend_count?: Optional<number>\n      app_web_custom_layout?: Optional<boolean>\n      app_web_framework?: Optional<string>\n      app_web_frontend_any?: Optional<boolean>\n      app_web_frontend_count?: Optional<number>\n\n      // Environment\n      env_ci?: Optional<boolean>\n      env_ci_platform?: Optional<string>\n      env_device_id?: Optional<string>\n      env_package_manager?: Optional<string>\n      env_package_manager_workspaces?: Optional<boolean>\n      env_plugin_installed_any_custom?: Optional<boolean>\n      env_plugin_installed_shopify?: Optional<string>\n      env_shell?: Optional<string>\n      env_web_ide?: Optional<string>\n      env_cloud?: Optional<string>\n      env_is_global?: Optional<boolean>\n      env_auth_method?: Optional<string>\n    }\n  }\n  [schemaId: string]: {sensitive: JsonMap; public: JsonMap}\n}\n\n// In reality, we're normally most interested in just this from Schemas, so export it for ease of use.\n// The monorail schema itself has lots of optional values as it must be backwards-compatible. For our schema we want mandatory values instead.\nexport type MonorailEventPublic = DeepRequired<Schemas[typeof MONORAIL_COMMAND_TOPIC]['public']>\nexport type MonorailEventSensitive = Schemas[typeof MONORAIL_COMMAND_TOPIC]['sensitive']\n\ntype MonorailResult = {type: 'ok'} | {type: 'error'; message: string}\n\nconst publishedCommandNames = new Set<string>()\n\n/**\n * Publishes an event to Monorail.\n *\n * @param schemaId - The schema ID of the event to publish.\n * @param publicData - The public data to publish.\n * @param sensitiveData - The sensitive data to publish.\n * @returns A result indicating whether the event was successfully published.\n */\nexport async function publishMonorailEvent<TSchemaId extends keyof Schemas, TPayload extends Schemas[TSchemaId]>(\n  schemaId: TSchemaId,\n  publicData: TPayload['public'],\n  sensitiveData: TPayload['sensitive'],\n): Promise<MonorailResult> {\n  // If a command has already been logged, never re-log it. This is to prevent duplication caused by unexpected errors.\n  const commandName = publicData.command\n  if (commandName && typeof commandName === 'string') {\n    if (publishedCommandNames.has(commandName)) {\n      return {type: 'ok'}\n    }\n    publishedCommandNames.add(commandName)\n  }\n\n  try {\n    const currentTime = new Date().getTime()\n    const payload = {...publicData, ...sensitiveData}\n    const body = JSON.stringify({schema_id: schemaId, payload})\n    const headers = buildHeaders(currentTime)\n\n    const response = await fetch(url, {method: 'POST', body, headers})\n\n    if (response.status === 200) {\n      outputDebug(outputContent`Analytics event sent: ${outputToken.json(sanitizePayload(payload))}`)\n      return {type: 'ok'}\n    } else {\n      outputDebug(`Failed to report usage analytics: ${response.statusText}`)\n      return {type: 'error', message: response.statusText}\n    }\n    // eslint-disable-next-line no-catch-all/no-catch-all\n  } catch (error) {\n    let message = 'Failed to report usage analytics'\n    if (error instanceof Error) {\n      message = message.concat(`: ${error.message}`)\n    }\n    outputDebug(message)\n    return {type: 'error', message}\n  }\n}\n\n/**\n * Sanitizies the api_key from the payload and returns a new hash.\n *\n * @param payload - The public and sensitive data.\n * @returns A copy of the payload with the api_key sanitized.\n */\nfunction sanitizePayload<T extends object>(payload: T): T {\n  const result = {...payload}\n  if ('api_key' in result) {\n    result.api_key = '****'\n  }\n\n  return result\n}\n\nconst buildHeaders = (currentTime: number) => {\n  return {\n    'Content-Type': 'application/json; charset=utf-8',\n    'X-Monorail-Edge-Event-Created-At-Ms': currentTime.toString(),\n    'X-Monorail-Edge-Event-Sent-At-Ms': currentTime.toString(),\n  }\n}\n", "import {MetricInstrumentType, OtelService} from '../../public/node/vendor/otel-js/service/types.js'\nimport {outputContent, outputDebug, outputToken} from '../../public/node/output.js'\nimport {\n  DefaultOtelService,\n  DefaultOtelServiceOptions,\n} from '../../public/node/vendor/otel-js/service/DefaultOtelService/DefaultOtelService.js'\nimport {isUnitTest, opentelemetryDomain} from '../../public/node/context/local.js'\nimport {isSpinEnvironment} from '../../public/node/context/spin.js'\nimport {ValueType} from '@opentelemetry/api'\n\ntype MetricRecorder =\n  | 'console'\n  | {\n      type: 'otel'\n      otel: Pick<OtelService, 'record'>\n    }\n\n// this should be type, not interface\n// eslint-disable-next-line @typescript-eslint/consistent-type-definitions\ntype Labels = {\n  exit: string\n  job: string\n  cli_version: string\n}\n\ninterface Timing {\n  active: number\n  network: number\n  prompt: number\n}\n\nenum Name {\n  Counter = 'cli_commands_total',\n  Duration = 'cli_commands_duration_ms',\n  Elapsed = 'cli_commands_wall_clock_elapsed_ms',\n}\n\ninterface CreateMetricRecorderOptions {\n  skipMetricAnalytics: boolean\n  otelOptions: Omit<DefaultOtelServiceOptions, 'env' | 'otelEndpoint'>\n}\n\ninterface RecordMetricsOptions {\n  /** If true, don't log anything */\n  skipMetricAnalytics: boolean\n  /** The CLI version running the command */\n  cliVersion: string\n  /** The plug-in that owns the command */\n  owningPlugin: string\n  /** The command name, e.g. `app dev` */\n  command: string\n  /** The exit mode for the command */\n  exitMode: string\n}\n\n/**\n * Record reliability metrics.\n */\nexport async function recordMetrics(\n  options: RecordMetricsOptions,\n  timing: Timing,\n  recorderFactory: (options: CreateMetricRecorderOptions) => MetricRecorder = createMetricRecorder,\n) {\n  const recorder = recorderFactory({\n    skipMetricAnalytics: options.skipMetricAnalytics,\n    otelOptions: defaultOtelOptions(),\n  })\n\n  let regularisedCliVersion = options.cliVersion\n\n  if (options.cliVersion.includes('nightly')) {\n    regularisedCliVersion = 'nightly'\n  } else if (options.cliVersion.includes('pre')) {\n    regularisedCliVersion = 'pre'\n  }\n  const labels = {\n    exit: options.exitMode,\n    job: `${options.owningPlugin}::${options.command}`,\n    cli_version: regularisedCliVersion,\n  }\n\n  recordCommandCounter(recorder, labels)\n  recordCommandTiming(recorder, labels, timing)\n}\n\n/**\n * Get the default options for the OTEL service. These are the same across environments.\n */\nfunction defaultOtelOptions(): Omit<DefaultOtelServiceOptions, 'env' | 'otelEndpoint'> {\n  return {\n    serviceName: 'shopify-cli',\n    throttleLimit: 1000,\n    prefixMetric: false,\n    metrics: {\n      [Name.Counter]: {\n        type: MetricInstrumentType.Counter,\n        description: 'Total number of CLI commands executed',\n        valueType: ValueType.INT,\n      },\n      [Name.Duration]: {\n        type: MetricInstrumentType.Histogram,\n        description:\n          'Total time spent in execution of CLI commands. Does not include time spent waiting for network, prompts, etc.',\n        valueType: ValueType.INT,\n        boundaries: [0, 100, 250, 500, 1000, 2000, 5000, 10_000, 20_000, 50_000],\n      },\n      [Name.Elapsed]: {\n        type: MetricInstrumentType.Histogram,\n        description:\n          'Total time elapsed from start to finish of CLI commands. Includes time spent waiting for network, prompts, etc.',\n        valueType: ValueType.INT,\n        boundaries: [0, 100, 250, 500, 1000, 2000, 5000, 10_000, 20_000, 50_000],\n      },\n    },\n  }\n}\n\n/**\n * Create the metric recorder for this command.\n *\n * If metric logging is disabled, or we are running in a unit test or Spin, we record to the console.\n *\n */\nfunction createMetricRecorder(options: CreateMetricRecorderOptions): MetricRecorder {\n  let recorder: MetricRecorder = 'console'\n  if (!(options.skipMetricAnalytics || isUnitTest() || isSpinEnvironment())) {\n    recorder = {\n      type: 'otel',\n      otel: globalOtelService(options),\n    }\n  }\n  return recorder\n}\n\nlet _otelService: OtelService | undefined\n\n/**\n * OTEL service singleton.\n *\n * The service is a singleton as it uses a global diagnostic logger that assumes its the only one in the process.\n */\nfunction globalOtelService(options: CreateMetricRecorderOptions): OtelService {\n  if (!_otelService) {\n    _otelService = new DefaultOtelService({\n      ...options.otelOptions,\n      env: undefined,\n      otelEndpoint: `${opentelemetryDomain()}/v1/metrics`,\n    })\n  }\n  return _otelService\n}\n\n/**\n * Log command counter metrics.\n */\nfunction recordCommandCounter(recorder: MetricRecorder, labels: Labels) {\n  if (recorder === 'console') {\n    outputDebug(outputContent`[OTEL] record ${Name.Counter} counter ${outputToken.json({labels})}`)\n    return\n  }\n  recorder.otel.record(Name.Counter, 1, labels)\n}\n\n/**\n * Log command timing metrics.\n */\nfunction recordCommandTiming(recorder: MetricRecorder, labels: Labels, timing: Timing) {\n  if (recorder === 'console') {\n    outputDebug(\n      outputContent`[OTEL] record ${Name.Duration} histogram ${timing.active.toString()}ms ${outputToken.json({\n        labels,\n      })}`,\n    )\n    outputDebug(outputContent`[OTEL] record ${Name.Elapsed} histogram stage=\"active\" ${timing.active.toString()}ms`)\n    outputDebug(outputContent`[OTEL] record ${Name.Elapsed} histogram stage=\"network\" ${timing.network.toString()}ms`)\n    outputDebug(outputContent`[OTEL] record ${Name.Elapsed} histogram stage=\"prompt\" ${timing.prompt.toString()}ms`)\n    return\n  }\n\n  if (timing.active > 0) {\n    recorder.otel.record(Name.Duration, timing.active, labels)\n    recorder.otel.record(Name.Elapsed, timing.active, {...labels, stage: 'active'})\n  }\n  if (timing.network > 0) {\n    recorder.otel.record(Name.Elapsed, timing.network, {...labels, stage: 'network'})\n  }\n  if (timing.prompt > 0) {\n    recorder.otel.record(Name.Elapsed, timing.prompt, {...labels, stage: 'prompt'})\n  }\n}\n", "import type {\n  Counter,\n  Histogram,\n  MeterProvider,\n  MetricAttributes,\n  MetricOptions,\n  UpDownCounter,\n} from '@opentelemetry/api'\nimport type {ViewOptions} from '@opentelemetry/sdk-metrics'\n\nexport type CustomMetricLabels<\n  TLabels extends {[key in TKeys]: MetricAttributes},\n  TKeys extends string = keyof TLabels & string,\n> = {\n  [P in TKeys]: TLabels[P] extends MetricAttributes ? TLabels[P] : never\n}\n\nexport type MetricRecording<TAttributes extends MetricAttributes = any> = [value: number, labels?: TAttributes]\n\nexport type RecordMetricFunction<TAttributes extends MetricAttributes = any> = (\n  ...args: MetricRecording<TAttributes>\n) => void\n\nexport type OnRecordCallback<TAttributes extends MetricAttributes = any> = (\n  metricName: string,\n  ...args: MetricRecording<TAttributes>\n) => MetricRecording<TAttributes> | void\n\nexport type MetricInstrument = Histogram | Counter | UpDownCounter\n\nexport enum MetricInstrumentType {\n  Histogram = 'Histogram',\n  Counter = 'Counter',\n  UpDownCounter = 'UpDownCounter',\n}\n\nexport type MetricDescriptor = MetricOptions &\n  (\n    | {\n        type: MetricInstrumentType.Histogram\n        /**\n         * Boundaries are required for Histograms.\n         */\n        boundaries: number[]\n      }\n    | {\n        type: MetricInstrumentType.Counter | MetricInstrumentType.UpDownCounter\n      }\n  )\n\nexport interface MetricsConfig {\n  [key: string]: MetricDescriptor\n}\n\nexport interface OtelService {\n  readonly serviceName: string\n\n  getMeterProvider(): MeterProvider\n\n  addView(viewOptions: ViewOptions): void\n\n  record<TAttributes extends MetricAttributes = any>(...args: Parameters<OnRecordCallback<TAttributes>>): void\n\n  /**\n   * `onRecord` callback is called when a metric is recorded.\n   * Returns a function to unsubscribe.\n   */\n  addOnRecord(onRecord: OnRecordCallback): () => void\n\n  removeOnRecord(onRecord: OnRecordCallback): void\n\n  registerMetric(metricName: string, options: MetricDescriptor): void\n\n  register(metrics: MetricsConfig): void\n\n  shutdown(): Promise<void>\n}\n", "import {DefaultMeterProvider} from './DefaultMeterProvider.js'\nimport {BaseOtelService} from '../BaseOtelService/BaseOtelService.js'\nimport {diag, DiagConsoleLogger, DiagLogLevel} from '@opentelemetry/api'\n\nimport type {BaseOtelServiceOptions} from '../BaseOtelService/BaseOtelService.js'\n\nexport interface DefaultOtelServiceOptions extends BaseOtelServiceOptions {\n  /**\n   * What environment is being deployed (production, staging)\n   */\n  env?: string\n  /**\n   * How much the export should be throttled in milliseconds.\n   */\n  throttleLimit?: number\n  /**\n   * Determines whether to send metrics via XHR or beacon. Defaults to false.\n   */\n  useXhr?: boolean\n\n  // CLI addition\n  otelEndpoint: string\n}\n\nexport class DefaultOtelService extends BaseOtelService {\n  /**\n   * Bootstraps an Otel exporter which can send Otel metrics to a dedicated Shopify supported collector endpoint.\n   */\n  constructor({\n    throttleLimit = 5000,\n    env = 'local',\n    serviceName,\n    prefixMetric = false,\n    metrics = {},\n    onRecord,\n    meterProvider,\n    useXhr = false,\n    // CLI addition\n    otelEndpoint,\n  }: DefaultOtelServiceOptions) {\n    diag.setLogger(\n      new DiagConsoleLogger(),\n      ['production', 'staging'].includes(env) ? DiagLogLevel.ERROR : DiagLogLevel.INFO,\n    )\n\n    super({\n      serviceName,\n      meterProvider:\n        meterProvider ??\n        new DefaultMeterProvider({\n          serviceName,\n          env,\n          throttleLimit,\n          useXhr,\n          // CLI addition\n          otelEndpoint,\n        }),\n      prefixMetric,\n      metrics,\n      onRecord,\n    })\n  }\n\n  override shutdown(): Promise<void> {\n    diag.disable()\n    return super.shutdown()\n  }\n}\n", "import {InstantaneousMetricReader} from '../../export/InstantaneousMetricReader.js'\nimport {OTLPMetricExporter, OTLPMetricExporterOptions} from '@opentelemetry/exporter-metrics-otlp-http'\nimport {Resource} from '@opentelemetry/resources'\nimport {AggregationTemporality, ConsoleMetricExporter, MeterProvider} from '@opentelemetry/sdk-metrics'\nimport {SemanticResourceAttributes} from '@opentelemetry/semantic-conventions'\n\nexport type Environment = 'production' | 'staging' | 'local'\n\ninterface DefaultMeterProviderOptions {\n  serviceName: string\n  env: string\n  throttleLimit: number\n  useXhr: boolean\n  // CLI addition\n  otelEndpoint: string\n}\n\nexport class DefaultMeterProvider extends MeterProvider {\n  constructor({serviceName, env, throttleLimit, useXhr, otelEndpoint}: DefaultMeterProviderOptions) {\n    super({\n      resource: new Resource({\n        [SemanticResourceAttributes.SERVICE_NAME]: serviceName,\n      }),\n    })\n\n    const opts: OTLPMetricExporterOptions = {\n      // url: OTEL_ENDPOINTS[env as Environment] || OTEL_ENDPOINTS.local,\n      // CLI addition\n      url: otelEndpoint,\n      temporalityPreference: AggregationTemporality.DELTA,\n    }\n\n    if (useXhr) {\n      opts.headers = {}\n    }\n\n    const exporter = new OTLPMetricExporter(opts)\n\n    this.addMetricReader(\n      new InstantaneousMetricReader({\n        exporter,\n        throttleLimit,\n      }),\n    )\n\n    // Add a console exporter to see what we are sending in dev environments\n    if (env === 'dev') {\n      this.addMetricReader(\n        new InstantaneousMetricReader({\n          exporter: new ConsoleMetricExporter(),\n          throttleLimit,\n        }),\n      )\n    }\n  }\n}\n", "import type {PushMetricExporter} from '@opentelemetry/sdk-metrics'\nimport {MetricReader} from '@opentelemetry/sdk-metrics'\nimport {ExportResultCode} from '@opentelemetry/core'\nimport {diag} from '@opentelemetry/api'\n\nimport {throttle} from '../utils/throttle.js'\n\nexport interface InstantaneousMetricReaderOptions {\n  /**\n   * The backing exporter for the metric reader.\n   */\n  exporter: PushMetricExporter\n\n  /**\n   * How much the export should be throttled in milliseconds.\n   */\n  throttleLimit: number\n}\n\nexport class InstantaneousMetricReader extends MetricReader {\n  private readonly _exporter: PushMetricExporter\n\n  constructor({exporter, throttleLimit}: InstantaneousMetricReaderOptions) {\n    super({\n      aggregationSelector: exporter.selectAggregation?.bind(exporter),\n      aggregationTemporalitySelector: exporter.selectAggregationTemporality?.bind(exporter),\n    })\n    this._exporter = exporter\n\n    this.onForceFlush = throttle(\n      // eslint-disable-next-line @typescript-eslint/unbound-method\n      this.onForceFlush,\n      throttleLimit,\n    )\n  }\n\n  protected async onForceFlush(): Promise<void> {\n    const {resourceMetrics, errors} = await this.collect({})\n\n    if (errors.length > 0) {\n      diag.error('PeriodicExportingMetricReader: metrics collection errors', ...errors)\n    }\n\n    return new Promise((resolve, reject) => {\n      this._exporter.export(resourceMetrics, (result) => {\n        if (result.code === ExportResultCode.SUCCESS) {\n          resolve()\n        } else {\n          reject(result.error ?? new Error(`InstantaneousMetricReader: metrics export failed (error ${result.error})`))\n        }\n      })\n    })\n  }\n\n  protected async onShutdown(): Promise<void> {\n    await this._exporter.shutdown()\n  }\n}\n", "type ThrottledFunction<T extends (...args: any) => any> = (...args: Parameters<T>) => ReturnType<T>\n\ninterface ThrottleOptions {\n  leading?: boolean\n  trailing?: boolean\n}\n\nexport function throttle<T extends (...args: any) => any>(\n  func: T,\n  wait: number,\n  {leading = true, trailing = true}: ThrottleOptions = {},\n): ThrottledFunction<T> {\n  let lastArgs: Parameters<T> | null\n  let result: ReturnType<T>\n  let context: any\n  let timeout: ReturnType<typeof setTimeout> | null = null\n  let previous = 0\n\n  function later() {\n    previous = leading === false ? 0 : Date.now()\n    timeout = null\n    if (lastArgs) {\n      result = func.apply(context, lastArgs)\n    }\n    context = null\n    lastArgs = null\n  }\n\n  return function (this: any, ...args: Parameters<T>): ReturnType<T> {\n    const now = Date.now()\n    if (!previous && leading === false) previous = now\n\n    const remaining = wait - (now - previous)\n    // eslint-disable-next-line @typescript-eslint/no-this-alias, consistent-this\n    context = this\n    lastArgs = args\n    if (remaining <= 0 || remaining > wait) {\n      if (timeout) {\n        clearTimeout(timeout)\n        timeout = null\n      }\n      previous = now\n      if (lastArgs) {\n        result = func.apply(context, lastArgs)\n      }\n      context = null\n      lastArgs = null\n    } else if (!timeout && trailing !== false) {\n      timeout = setTimeout(later, remaining)\n    }\n    return result\n  }\n}\n", "import type {MetricAttributes} from '@opentelemetry/api'\nimport type {MeterProvider, ViewOptions} from '@opentelemetry/sdk-metrics'\nimport {ExplicitBucketHistogramAggregation, View} from '@opentelemetry/sdk-metrics'\n\nimport type {\n  MetricDescriptor,\n  MetricRecording,\n  MetricsConfig,\n  OnRecordCallback,\n  OtelService,\n  RecordMetricFunction,\n} from '../types.js'\nimport {MetricInstrumentType} from '../types.js'\nimport {isValidMetricName} from '../../utils/validators.js'\n\nconst instrumentationScope = 'opentelemetry-js-shopify-web'\n\nexport interface BaseOtelServiceOptions {\n  /**\n   * Service name is a unique name for an application/service.\n   */\n  serviceName: string\n\n  /**\n   * If this is set to true then the service name is prefixed to every metric.\n   */\n  prefixMetric?: boolean\n\n  /**\n   * Metrics to register on startup.\n   */\n  metrics?: MetricsConfig\n\n  /**\n   * Called when a metric is recorded. `addOnRecord` can also be used to add\n   * listeners anytime.\n   */\n  onRecord?: OnRecordCallback\n\n  /**\n   * Override the default meter provider.\n   */\n  meterProvider?: MeterProvider\n}\n\nexport class BaseOtelService implements OtelService {\n  readonly serviceName: string\n  readonly prefixMetric: boolean\n\n  protected readonly meterProvider: MeterProvider\n  protected readonly metrics: Map<string, RecordMetricFunction> = new Map()\n  protected readonly recordListeners = new Set<OnRecordCallback>()\n\n  /**\n   * Bootstraps an Otel exporter which can send Otel metrics to a dedicated Shopify supported collector endpoint.\n   */\n  constructor({serviceName, prefixMetric = false, metrics = {}, onRecord, meterProvider}: BaseOtelServiceOptions) {\n    if (!serviceName) {\n      throw new Error('Service name is required.')\n    }\n    this.serviceName = serviceName\n\n    this.prefixMetric = prefixMetric\n    if (onRecord) this.addOnRecord(onRecord)\n\n    if (!meterProvider) {\n      throw new Error('MeterProvider is required.')\n    }\n    this.meterProvider = meterProvider\n\n    this.register(metrics)\n  }\n\n  getMeterProvider(): MeterProvider {\n    return this.meterProvider\n  }\n\n  addView(viewOptions: ViewOptions) {\n    // The API to register view is not yet exposed. We need to use the private\n    // property to register a new view after the initial instantiation.\n    ;(this.meterProvider as any)._sharedState?.viewRegistry?.addView?.(new View(viewOptions))\n  }\n\n  record(metricName: string, value: number, labels?: MetricAttributes): void {\n    const recordMetric = this.metrics.get(metricName)\n    if (!recordMetric) {\n      throw new Error(\n        `Service ${this.serviceName} has no metrics registered for name: ${metricName}. Can't record value for unknown metric.`,\n      )\n    }\n    recordMetric(value, labels)\n  }\n\n  registerMetric(metricName: string, {type, ...options}: MetricDescriptor): void {\n    if (this.metrics.has(metricName)) {\n      return\n    }\n    const meter = this.meterProvider.getMeter(instrumentationScope)\n    const name = this.prefixMetric ? `${this.serviceName}_${metricName}` : metricName\n\n    if (!isValidMetricName(name)) {\n      return\n    }\n\n    const createInstrument = () => {\n      switch (type) {\n        case MetricInstrumentType.Counter:\n          return meter.createCounter(name, options)\n        case MetricInstrumentType.UpDownCounter:\n          return meter.createUpDownCounter(name, options)\n        case MetricInstrumentType.Histogram: {\n          if ('boundaries' in options) {\n            this.addView({\n              instrumentName: name,\n              aggregation: new ExplicitBucketHistogramAggregation(options.boundaries, true),\n            })\n          }\n          return meter.createHistogram(name, options)\n        }\n      }\n    }\n\n    // Lazy instantiate the instrument so we don't create it if we don't need to\n    this.metrics.set(metricName, (firstValue: number, firstLabels?: MetricAttributes) => {\n      const instrument = createInstrument()\n      const record = (value: number, labels?: MetricAttributes) => {\n        const [finalValue, finalLabels] = this.notifyRecordListeners(\n          metricName,\n          value,\n          // ensures an new object is created so we don't mutate the original\n          {...labels},\n        )\n        if ('record' in instrument) {\n          instrument.record(finalValue, finalLabels)\n        } else {\n          instrument.add(finalValue, finalLabels)\n        }\n        // We flush metrics after every record - we do not await as we fire & forget.\n        this.meterProvider.forceFlush({})\n      }\n      record(firstValue, firstLabels)\n      this.metrics.set(metricName, record)\n    })\n  }\n\n  register(metrics: MetricsConfig) {\n    Object.entries(metrics).forEach(([metricName, options]) => {\n      this.registerMetric(metricName, options)\n    })\n  }\n\n  addOnRecord(onRecord: OnRecordCallback): () => void {\n    this.recordListeners.add(onRecord)\n    return () => {\n      this.recordListeners.delete(onRecord)\n    }\n  }\n\n  removeOnRecord(onRecord: OnRecordCallback): void {\n    this.recordListeners.delete(onRecord)\n  }\n\n  shutdown(): Promise<void> {\n    this.metrics.clear()\n    this.recordListeners.clear()\n    return this.meterProvider.shutdown()\n  }\n\n  protected notifyRecordListeners(metricName: string, initialValue: number, initialLabels: MetricAttributes) {\n    return Array.from(this.recordListeners).reduce<MetricRecording>(\n      (recordArgs, listener) => {\n        return listener(metricName, ...recordArgs) || recordArgs\n      },\n      [initialValue, initialLabels],\n    )\n  }\n}\n", "import {diag} from '@opentelemetry/api'\n\nconst validMetricRegex = new RegExp('[^a-zA-Z_][^a-zA-Z0-9_]*')\n\nexport function isValidMetricName(value: string): boolean {\n  if (validMetricRegex.test(value)) {\n    diag.warn(\n      `Metric name ${value} contains invalid characters and will be dropped.\n    Service Names and metric names must conform to the following regex %c[a-zA-Z_][a-zA-Z0-9_]*`,\n      'color:red',\n    )\n    return false\n  }\n\n  return true\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmBA,QAAYA;AAAZ,KAAA,SAAYA,yBAAsB;AAChC,MAAAA,wBAAAA,wBAAA,QAAA,CAAA,IAAA,SACAA,wBAAAA,wBAAA,aAAA,CAAA,IAAA;IACF,GAHYA,0BAAA,QAAA,2BAAA,QAAA,yBAAsB,CAAA,EAAA;;;;;;;;;;;ACsFlC,QAAY;AAAZ,KAAA,SAAYC,gBAAa;AAMvB,MAAAA,eAAAA,eAAA,YAAA,CAAA,IAAA,aAOAA,eAAAA,eAAA,wBAAA,CAAA,IAAA,yBAIAA,eAAAA,eAAA,QAAA,CAAA,IAAA,SAKAA,eAAAA,eAAA,MAAA,CAAA,IAAA;IACF,GAvBY,gBAAA,QAAA,kBAAA,QAAA,gBAAa,CAAA,EAAA;;;;;;;;;;;ACvFZ,YAAA,cAAc,OAAO,cAAe,WAAW,aAAa;;;;;;;;;;;;;;;;;;;;ACFzE,iBAAA,sBAAA,OAAA;;;;;;;;;;;;;;;;;;;;ACAA,iBAAA,gBAAA,OAAA;;;;;;;;;;;ACCa,YAAA,UAAU;;;;;;;;;;;ACDvB,QAAA,YAAA,mBAEM,KAAK;AAkBX,aAAgB,wBACd,YAAkB;AAElB,UAAM,mBAAmB,oBAAI,IAAY,CAAC,UAAU,CAAC,GAC/C,mBAAmB,oBAAI,IAAG,GAE1B,iBAAiB,WAAW,MAAM,EAAE;AAC1C,UAAI,CAAC;AAEH,eAAO,MAAM;AAGf,UAAM,mBAAmB;QACvB,OAAO,CAAC,eAAe,CAAC;QACxB,OAAO,CAAC,eAAe,CAAC;QACxB,OAAO,CAAC,eAAe,CAAC;QACxB,YAAY,eAAe,CAAC;;AAI9B,UAAI,iBAAiB,cAAc;AACjC,eAAO,SAAsB,eAAqB;AAChD,iBAAO,kBAAkB;QAC3B;AAGF,eAAS,QAAQ,GAAS;AACxB,gCAAiB,IAAI,CAAC,GACf;MACT;AAEA,eAAS,QAAQ,GAAS;AACxB,gCAAiB,IAAI,CAAC,GACf;MACT;AAEA,aAAO,SAAsB,eAAqB;AAChD,YAAI,iBAAiB,IAAI,aAAa;AACpC,iBAAO;AAGT,YAAI,iBAAiB,IAAI,aAAa;AACpC,iBAAO;AAGT,YAAM,qBAAqB,cAAc,MAAM,EAAE;AACjD,YAAI,CAAC;AAGH,iBAAO,QAAQ,aAAa;AAG9B,YAAM,sBAAsB;UAC1B,OAAO,CAAC,mBAAmB,CAAC;UAC5B,OAAO,CAAC,mBAAmB,CAAC;UAC5B,OAAO,CAAC,mBAAmB,CAAC;UAC5B,YAAY,mBAAmB,CAAC;;AASlC,eALI,oBAAoB,cAAc,QAKlC,iBAAiB,UAAU,oBAAoB,QAC1C,QAAQ,aAAa,IAG1B,iBAAiB,UAAU,IAE3B,iBAAiB,UAAU,oBAAoB,SAC/C,iBAAiB,SAAS,oBAAoB,QAEvC,QAAQ,aAAa,IAGvB,QAAQ,aAAa,IAG1B,iBAAiB,SAAS,oBAAoB,QACzC,QAAQ,aAAa,IAGvB,QAAQ,aAAa;MAC9B;IACF;AAtFA,YAAA,0BAAA;AAuGa,YAAA,eAAe,wBAAwB,UAAA,OAAO;;;;;;;;;;;ACxH3D,QAAA,aAAA,oBAGA,YAAA,mBACA,WAAA,kBAEM,QAAQ,UAAA,QAAQ,MAAM,GAAG,EAAE,CAAC,GAC5B,+BAA+B,OAAO,IAC1C,wBAAwB,KAAK,EAAE,GAG3B,UAAU,WAAA;AAEhB,aAAgB,eACd,MACA,UACAC,OACA,gBAAgB,IAAK;;AAErB,UAAM,MAAO,QAAQ,4BAA4B,KAAI,KAAA,QACnD,4BAA4B,OAC7B,QAAA,OAAA,SAAA,KAAI;QACH,SAAS,UAAA;;AAGX,UAAI,CAAC,iBAAiB,IAAI,IAAI,GAAG;AAE/B,YAAM,MAAM,IAAI,MACd,gEAAgE,IAAI,EAAE;AAExE,eAAAA,MAAK,MAAM,IAAI,SAAS,IAAI,OAAO,GAC5B;;AAGT,UAAI,IAAI,YAAY,UAAA,SAAS;AAE3B,YAAM,MAAM,IAAI,MACd,gDAAgD,IAAI,OAAO,QAAQ,IAAI,8CAA8C,UAAA,OAAO,EAAE;AAEhI,eAAAA,MAAK,MAAM,IAAI,SAAS,IAAI,OAAO,GAC5B;;AAGT,iBAAI,IAAI,IAAI,UACZA,MAAK,MACH,+CAA+C,IAAI,KAAK,UAAA,OAAO,GAAG,GAG7D;IACT;AApCA,YAAA,iBAAA;AAsCA,aAAgB,UACd,MAAU;;AAEV,UAAM,iBAAgB,KAAA,QAAQ,4BAA4B,OAAC,QAAA,OAAA,SAAA,SAAA,GAAE;AAC7D,UAAI,GAAC,iBAAiB,KAAC,SAAA,cAAa,aAAa;AAGjD,gBAAO,KAAA,QAAQ,4BAA4B,OAAC,QAAA,OAAA,SAAA,SAAA,GAAG,IAAI;IACrD;AARA,YAAA,YAAA;AAUA,aAAgB,iBAAiB,MAA2BA,OAAgB;AAC1E,MAAAA,MAAK,MACH,kDAAkD,IAAI,KAAK,UAAA,OAAO,GAAG;AAEvE,UAAM,MAAM,QAAQ,4BAA4B;AAEhD,MAAI,OACF,OAAO,IAAI,IAAI;IAEnB;AATA,YAAA,mBAAA;;;;;;;;;;;AChEA,QAAA,iBAAA,wBAYa,sBAAb,MAAgC;MAG9B,YAAY,OAA6B;AACvC,aAAK,aAAa,MAAM,aAAa;MACvC;MAEO,SAAS,MAAW;AACzB,eAAO,SAAS,SAAS,KAAK,YAAY,IAAI;MAChD;MAEO,SAAS,MAAW;AACzB,eAAO,SAAS,SAAS,KAAK,YAAY,IAAI;MAChD;MAEO,QAAQ,MAAW;AACxB,eAAO,SAAS,QAAQ,KAAK,YAAY,IAAI;MAC/C;MAEO,QAAQ,MAAW;AACxB,eAAO,SAAS,QAAQ,KAAK,YAAY,IAAI;MAC/C;MAEO,WAAW,MAAW;AAC3B,eAAO,SAAS,WAAW,KAAK,YAAY,IAAI;MAClD;;AAzBF,YAAA,sBAAA;AA4BA,aAAS,SACP,UACA,WACA,MAAS;AAET,UAAM,aAAS,eAAA,WAAU,MAAM;AAE/B,UAAK;AAIL,oBAAK,QAAQ,SAAS,GACf,OAAO,QAAQ,EAAE,GAAI,IAAoC;IAClE;;;;;;;;;;;ACHA,QAAYC;AAAZ,KAAA,SAAYA,eAAY;AAEtB,MAAAA,cAAAA,cAAA,OAAA,CAAA,IAAA,QAGAA,cAAAA,cAAA,QAAA,EAAA,IAAA,SAGAA,cAAAA,cAAA,OAAA,EAAA,IAAA,QAGAA,cAAAA,cAAA,OAAA,EAAA,IAAA,QAGAA,cAAAA,cAAA,QAAA,EAAA,IAAA,SAMAA,cAAAA,cAAA,UAAA,EAAA,IAAA,WAGAA,cAAAA,cAAA,MAAA,IAAA,IAAA;IACF,GAxBYA,gBAAA,QAAA,iBAAA,QAAA,eAAY,CAAA,EAAA;;;;;;;;;;;AClDxB,QAAA,UAAA;AAEA,aAAgB,yBACd,UACA,QAAkB;AAElB,MAAI,WAAW,QAAA,aAAa,OAC1B,WAAW,QAAA,aAAa,OACf,WAAW,QAAA,aAAa,QACjC,WAAW,QAAA,aAAa,MAI1B,SAAS,UAAU,CAAA;AAEnB,eAAS,YACP,UACA,UAAsB;AAEtB,YAAM,UAAU,OAAO,QAAQ;AAE/B,eAAI,OAAO,WAAY,cAAc,YAAY,WACxC,QAAQ,KAAK,MAAM,IAErB,WAAA;QAAa;MACtB;AAEA,aAAO;QACL,OAAO,YAAY,SAAS,QAAA,aAAa,KAAK;QAC9C,MAAM,YAAY,QAAQ,QAAA,aAAa,IAAI;QAC3C,MAAM,YAAY,QAAQ,QAAA,aAAa,IAAI;QAC3C,OAAO,YAAY,SAAS,QAAA,aAAa,KAAK;QAC9C,SAAS,YAAY,WAAW,QAAA,aAAa,OAAO;;IAExD;AAhCA,YAAA,2BAAA;;;;;;;;;;;ACFA,QAAA,oBAAA,2BACA,mBAAA,0BACA,UAAA,iBAOA,iBAAA,wBAMM,WAAW,QAMJ,UAAb,MAAa,SAAO;;;;;MAgBlB,cAAA;AACE,iBAAS,UAAU,UAA0B;AAC3C,iBAAO,YAAa,MAAI;AACtB,gBAAM,aAAS,eAAA,WAAU,MAAM;AAE/B,gBAAK;AACL,qBAAO,OAAO,QAAQ,EAAE,GAAG,IAAI;UACjC;QACF;AAGA,YAAMC,QAAO,MAIP,YAAwC,CAC5C,QACA,oBAAoB,EAAE,UAAU,QAAA,aAAa,KAAI,MAC/C;;AACF,cAAI,WAAWA,OAAM;AAInB,gBAAM,MAAM,IAAI,MACd,oIAAoI;AAEtI,mBAAAA,MAAK,OAAM,KAAA,IAAI,WAAK,QAAA,OAAA,SAAA,KAAI,IAAI,OAAO,GAC5B;;AAGT,UAAI,OAAO,qBAAsB,aAC/B,oBAAoB;YAClB,UAAU;;AAId,cAAM,gBAAY,eAAA,WAAU,MAAM,GAC5B,gBAAY,iBAAA,2BAChB,KAAA,kBAAkB,cAAQ,QAAA,OAAA,SAAA,KAAI,QAAA,aAAa,MAC3C,MAAM;AAGR,cAAI,aAAa,CAAC,kBAAkB,yBAAyB;AAC3D,gBAAM,SAAQ,KAAA,IAAI,MAAK,EAAG,WAAK,QAAA,OAAA,SAAA,KAAI;AACnC,sBAAU,KAAK,2CAA2C,KAAK,EAAE,GACjE,UAAU,KACR,6DAA6D,KAAK,EAAE;;AAIxE,qBAAO,eAAA,gBAAe,QAAQ,WAAWA,OAAM,EAAI;QACrD;AAEA,QAAAA,MAAK,YAAY,WAEjBA,MAAK,UAAU,MAAK;AAClB,cAAA,eAAA,kBAAiB,UAAUA,KAAI;QACjC,GAEAA,MAAK,wBAAwB,CAAC,YACrB,IAAI,kBAAA,oBAAoB,OAAO,GAGxCA,MAAK,UAAU,UAAU,SAAS,GAClCA,MAAK,QAAQ,UAAU,OAAO,GAC9BA,MAAK,OAAO,UAAU,MAAM,GAC5BA,MAAK,OAAO,UAAU,MAAM,GAC5BA,MAAK,QAAQ,UAAU,OAAO;MAChC;;MAhFO,OAAO,WAAQ;AACpB,eAAK,KAAK,cACR,KAAK,YAAY,IAAI,SAAO,IAGvB,KAAK;MACd;;AAVF,YAAA,UAAA;;;;;;;;;;;ACnBA,QAAa,cAAb,MAAa,aAAW;MAGtB,YAAY,SAAmC;AAC7C,aAAK,WAAW,UAAU,IAAI,IAAI,OAAO,IAAI,oBAAI,IAAG;MACtD;MAEA,SAAS,KAAW;AAClB,YAAM,QAAQ,KAAK,SAAS,IAAI,GAAG;AACnC,YAAK;AAIL,iBAAO,OAAO,OAAO,CAAA,GAAI,KAAK;MAChC;MAEA,gBAAa;AACX,eAAO,MAAM,KAAK,KAAK,SAAS,QAAO,CAAE,EAAE,IAAI,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;MACnE;MAEA,SAAS,KAAa,OAAmB;AACvC,YAAM,aAAa,IAAI,aAAY,KAAK,QAAQ;AAChD,0BAAW,SAAS,IAAI,KAAK,KAAK,GAC3B;MACT;MAEA,YAAY,KAAW;AACrB,YAAM,aAAa,IAAI,aAAY,KAAK,QAAQ;AAChD,0BAAW,SAAS,OAAO,GAAG,GACvB;MACT;MAEA,iBAAiB,MAAc;AAC7B,YAAM,aAAa,IAAI,aAAY,KAAK,QAAQ;AAChD,iBAAW,OAAO;AAChB,qBAAW,SAAS,OAAO,GAAG;AAEhC,eAAO;MACT;MAEA,QAAK;AACH,eAAO,IAAI,aAAW;MACxB;;AA1CF,YAAA,cAAA;;;;;;;;;;;ACCa,YAAA,6BAA6B,OAAO,sBAAsB;;;;;;;;;;;ACHvE,QAAA,SAAA,gBACA,iBAAA,wBACA,WAAA,kBAGMC,QAAO,OAAA,QAAQ,SAAQ;AAO7B,aAAgB,cACd,UAAwC,CAAA,GAAE;AAE1C,aAAO,IAAI,eAAA,YAAY,IAAI,IAAI,OAAO,QAAQ,OAAO,CAAC,CAAC;IACzD;AAJA,YAAA,gBAAA;AAYA,aAAgB,+BACd,KAAW;AAEX,aAAI,OAAO,OAAQ,aACjBA,MAAK,MACH,qDAAqD,OAAO,GAAG,EAAE,GAEnE,MAAM,KAGD;QACL,UAAU,SAAA;QACV,WAAQ;AACN,iBAAO;QACT;;IAEJ;AAhBA,YAAA,iCAAA;;;;;;;;;;;ACrBA,aAAgB,iBAAiB,aAAmB;AAOlD,aAAO,OAAO,IAAI,WAAW;IAC/B;AARA,YAAA,mBAAA;AAUA,QAAM,cAAN,MAAM,aAAW;;;;;;MAQf,YAAY,eAAoC;AAE9C,YAAMC,QAAO;AAEb,QAAAA,MAAK,kBAAkB,gBAAgB,IAAI,IAAI,aAAa,IAAI,oBAAI,IAAG,GAEvEA,MAAK,WAAW,CAAC,QAAgBA,MAAK,gBAAgB,IAAI,GAAG,GAE7DA,MAAK,WAAW,CAAC,KAAa,UAA2B;AACvD,cAAM,UAAU,IAAI,aAAYA,MAAK,eAAe;AACpD,yBAAQ,gBAAgB,IAAI,KAAK,KAAK,GAC/B;QACT,GAEAA,MAAK,cAAc,CAAC,QAAwB;AAC1C,cAAM,UAAU,IAAI,aAAYA,MAAK,eAAe;AACpD,yBAAQ,gBAAgB,OAAO,GAAG,GAC3B;QACT;MACF;;AA4BW,YAAA,eAAwB,IAAI,YAAW;;;;;;;;;;;ACjEpD,QAAM,aAA2D;MAC/D,EAAE,GAAG,SAAS,GAAG,QAAO;MACxB,EAAE,GAAG,QAAQ,GAAG,OAAM;MACtB,EAAE,GAAG,QAAQ,GAAG,OAAM;MACtB,EAAE,GAAG,SAAS,GAAG,QAAO;MACxB,EAAE,GAAG,WAAW,GAAG,QAAO;OAQfC,qBAAb,MAA8B;MAC5B,cAAA;AACE,iBAAS,aAAa,UAAwB;AAC5C,iBAAO,YAAa,MAAI;AACtB,gBAAI,SAAS;AAGX,kBAAI,UAAU,QAAQ,QAAQ;AAQ9B,kBAPI,OAAO,WAAY,eAGrB,UAAU,QAAQ,MAIhB,OAAO,WAAY;AACrB,uBAAO,QAAQ,MAAM,SAAS,IAAI;;UAGxC;QACF;AAEA,iBAAS,IAAI,GAAG,IAAI,WAAW,QAAQ;AACrC,eAAK,WAAW,CAAC,EAAE,CAAC,IAAI,aAAa,WAAW,CAAC,EAAE,CAAC;MAExD;;AAzBF,YAAA,oBAAAA;;;;;;;;;;;ACGA,QAAa,YAAb,MAAsB;MACpB,cAAA;MAAe;;;;MAKf,gBAAgB,OAAe,UAAwB;AACrD,eAAO,QAAA;MACT;;;;MAKA,cAAc,OAAe,UAAwB;AACnD,eAAO,QAAA;MACT;;;;MAKA,oBAAoB,OAAe,UAAwB;AACzD,eAAO,QAAA;MACT;;;;MAKA,sBACE,OACA,UAAwB;AAExB,eAAO,QAAA;MACT;;;;MAKA,wBACE,OACA,UAAwB;AAExB,eAAO,QAAA;MACT;;;;MAKA,8BACE,OACA,UAAwB;AAExB,eAAO,QAAA;MACT;;;;MAKA,2BACE,WACA,cAA0B;MACnB;;;;MAKT,8BAA8B,WAAkC;MAAS;;AAjE3E,YAAA,YAAA;AAoEA,QAAa,aAAb,MAAuB;;AAAvB,YAAA,aAAA;AAEA,QAAa,oBAAb,cAAuC,WAAU;MAC/C,IAAI,QAAgB,aAA6B;MAAS;;AAD5D,YAAA,oBAAA;AAIA,QAAa,0BAAb,cACU,WAAU;MAGlB,IAAI,QAAgB,aAA6B;MAAS;;AAJ5D,YAAA,0BAAA;AAOA,QAAa,sBAAb,cAAyC,WAAU;MACjD,OAAO,QAAgB,aAA6B;MAAS;;AAD/D,YAAA,sBAAA;AAIA,QAAa,uBAAb,MAAiC;MAC/B,YAAY,WAA6B;MAAG;MAE5C,eAAe,WAA6B;MAAG;;AAHjD,YAAA,uBAAA;AAMA,QAAa,8BAAb,cACU,qBAAoB;;AAD9B,YAAA,8BAAA;AAIA,QAAa,4BAAb,cACU,qBAAoB;;AAD9B,YAAA,4BAAA;AAIA,QAAa,oCAAb,cACU,qBAAoB;;AAD9B,YAAA,oCAAA;AAIa,YAAA,aAAa,IAAI,UAAS;AAG1B,YAAA,sBAAsB,IAAI,kBAAiB;AAC3C,YAAA,wBAAwB,IAAI,oBAAmB;AAC/C,YAAA,8BAA8B,IAAI,wBAAuB;AAGzD,YAAA,iCAAiC,IAAI,4BAA2B;AAChE,YAAA,+BAA+B,IAAI,0BAAyB;AAC5D,YAAA,yCACX,IAAI,kCAAiC;AAKvC,aAAgB,kBAAe;AAC7B,aAAO,QAAA;IACT;AAFA,YAAA,kBAAA;;;;;;;;;;;AC9GA,QAAYC;AAAZ,KAAA,SAAYA,YAAS;AACnB,MAAAA,WAAAA,WAAA,MAAA,CAAA,IAAA,OACAA,WAAAA,WAAA,SAAA,CAAA,IAAA;IACF,GAHYA,aAAA,QAAA,cAAA,QAAA,YAAS,CAAA,EAAA;;;;;;;;;;;ACoER,YAAA,uBAAsC;MACjD,IAAI,SAAS,KAAG;AACd,YAAI,WAAW;AAGf,iBAAO,QAAQ,GAAG;MACpB;MAEA,KAAK,SAAO;AACV,eAAI,WAAW,OACN,CAAA,IAEF,OAAO,KAAK,OAAO;MAC5B;;AAGW,YAAA,uBAAsC;MACjD,IAAI,SAAS,KAAK,OAAK;AACrB,QAAI,WAAW,SAIf,QAAQ,GAAG,IAAI;MACjB;;;;;;;;;;;;ACvHF,QAAA,YAAA,mBAGa,qBAAb,MAA+B;MAC7B,SAAM;AACJ,eAAO,UAAA;MACT;MAEA,KACE,UACA,IACA,YACG,MAAO;AAEV,eAAO,GAAG,KAAK,SAAS,GAAG,IAAI;MACjC;MAEA,KAAQ,UAAyB,QAAS;AACxC,eAAO;MACT;MAEA,SAAM;AACJ,eAAO;MACT;MAEA,UAAO;AACL,eAAO;MACT;;AAxBF,YAAA,qBAAA;;;;;;;;;;;ACHA,QAAA,uBAAA,8BAEA,iBAAA,wBAKA,SAAA,gBAEM,WAAW,WACX,uBAAuB,IAAI,qBAAA,mBAAkB,GAKtC,aAAb,MAAa,YAAU;;MAIrB,cAAA;MAAuB;;MAGhB,OAAO,cAAW;AACvB,eAAK,KAAK,cACR,KAAK,YAAY,IAAI,YAAU,IAG1B,KAAK;MACd;;;;;;MAOO,wBAAwB,gBAA8B;AAC3D,mBAAO,eAAA,gBAAe,UAAU,gBAAgB,OAAA,QAAQ,SAAQ,CAAE;MACpE;;;;MAKO,SAAM;AACX,eAAO,KAAK,mBAAkB,EAAG,OAAM;MACzC;;;;;;;;;MAUO,KACL,SACA,IACA,YACG,MAAO;AAEV,eAAO,KAAK,mBAAkB,EAAG,KAAK,SAAS,IAAI,SAAS,GAAG,IAAI;MACrE;;;;;;;MAQO,KAAQ,SAAkB,QAAS;AACxC,eAAO,KAAK,mBAAkB,EAAG,KAAK,SAAS,MAAM;MACvD;MAEQ,qBAAkB;AACxB,mBAAO,eAAA,WAAU,QAAQ,KAAK;MAChC;;MAGO,UAAO;AACZ,aAAK,mBAAkB,EAAG,QAAO,OACjC,eAAA,kBAAiB,UAAU,OAAA,QAAQ,SAAQ,CAAE;MAC/C;;AAlEF,YAAA,aAAA;;;;;;;;;;;AChBA,QAAY;AAAZ,KAAA,SAAYC,aAAU;AAEpB,MAAAA,YAAAA,YAAA,OAAA,CAAA,IAAA,QAEAA,YAAAA,YAAA,UAAA,CAAA,IAAA;IACF,GALY,aAAA,QAAA,eAAA,QAAA,aAAU,CAAA,EAAA;;;;;;;;;;;ACEtB,QAAA,gBAAA;AAEa,YAAA,iBAAiB;AACjB,YAAA,kBAAkB;AAClB,YAAA,uBAAoC;MAC/C,SAAS,QAAA;MACT,QAAQ,QAAA;MACR,YAAY,cAAA,WAAW;;;;;;;;;;;;ACLzB,QAAA,2BAAA,kCAUa,mBAAb,MAA6B;MAC3B,YACmB,eAA4B,yBAAA,sBAAoB;AAAhD,aAAA,eAAA;MAChB;;MAGH,cAAW;AACT,eAAO,KAAK;MACd;;MAGA,aAAa,MAAc,QAAe;AACxC,eAAO;MACT;;MAGA,cAAc,aAA2B;AACvC,eAAO;MACT;;MAGA,SAAS,OAAe,aAA4B;AAClD,eAAO;MACT;;MAGA,UAAU,SAAmB;AAC3B,eAAO;MACT;;MAGA,WAAW,OAAa;AACtB,eAAO;MACT;;MAGA,IAAI,UAAoB;MAAS;;MAGjC,cAAW;AACT,eAAO;MACT;;MAGA,gBAAgB,YAAuB,OAAiB;MAAS;;AA5CnE,YAAA,mBAAA;;;;;;;;;;;ACbA,QAAA,YAAA,mBAIA,qBAAA,4BACA,YAAA,oBAKM,eAAW,UAAA,kBAAiB,gCAAgC;AAOlE,aAAgB,QAAQ,SAAgB;AACtC,aAAQ,QAAQ,SAAS,QAAQ,KAAc;IACjD;AAFA,YAAA,UAAA;AAOA,aAAgB,gBAAa;AAC3B,aAAO,QAAQ,UAAA,WAAW,YAAW,EAAG,OAAM,CAAE;IAClD;AAFA,YAAA,gBAAA;AAUA,aAAgB,QAAQ,SAAkB,MAAU;AAClD,aAAO,QAAQ,SAAS,UAAU,IAAI;IACxC;AAFA,YAAA,UAAA;AASA,aAAgB,WAAW,SAAgB;AACzC,aAAO,QAAQ,YAAY,QAAQ;IACrC;AAFA,YAAA,aAAA;AAWA,aAAgB,eACd,SACA,aAAwB;AAExB,aAAO,QAAQ,SAAS,IAAI,mBAAA,iBAAiB,WAAW,CAAC;IAC3D;AALA,YAAA,iBAAA;AAYA,aAAgB,eAAe,SAAgB;;AAC7C,cAAO,KAAA,QAAQ,OAAO,OAAC,QAAA,OAAA,SAAA,SAAA,GAAE,YAAW;IACtC;AAFA,YAAA,iBAAA;;;;;;;;;;;ACnEA,QAAA,2BAAA,kCACA,qBAAA,4BAIM,sBAAsB,qBACtB,qBAAqB;AAE3B,aAAgB,eAAe,SAAe;AAC5C,aAAO,oBAAoB,KAAK,OAAO,KAAK,YAAY,yBAAA;IAC1D;AAFA,YAAA,iBAAA;AAIA,aAAgB,cAAc,QAAc;AAC1C,aAAO,mBAAmB,KAAK,MAAM,KAAK,WAAW,yBAAA;IACvD;AAFA,YAAA,gBAAA;AAQA,aAAgB,mBAAmB,aAAwB;AACzD,aACE,eAAe,YAAY,OAAO,KAAK,cAAc,YAAY,MAAM;IAE3E;AAJA,YAAA,qBAAA;AAYA,aAAgB,gBAAgB,aAAwB;AACtD,aAAO,IAAI,mBAAA,iBAAiB,WAAW;IACzC;AAFA,YAAA,kBAAA;;;;;;;;;;;AC/BA,QAAA,YAAA,oBAEA,kBAAA,yBACA,qBAAA,4BAEA,sBAAA,6BAKM,aAAa,UAAA,WAAW,YAAW,GAK5B,aAAb,MAAuB;;MAErB,UACE,MACA,SACA,UAAU,WAAW,OAAM,GAAE;AAG7B,YADa,EAAQ,SAAS;AAE5B,iBAAO,IAAI,mBAAA,iBAAgB;AAG7B,YAAM,oBAAoB,eAAW,gBAAA,gBAAe,OAAO;AAE3D,eACE,cAAc,iBAAiB,SAC/B,oBAAA,oBAAmB,iBAAiB,IAE7B,IAAI,mBAAA,iBAAiB,iBAAiB,IAEtC,IAAI,mBAAA,iBAAgB;MAE/B;MAiBA,gBACE,MACA,MACA,MACA,MAAQ;AAER,YAAI,MACA,KACA;AAEJ,YAAI,UAAU,SAAS;AACrB;AACK,QAAI,UAAU,WAAW,IAC9B,KAAK,OACI,UAAU,WAAW,KAC9B,OAAO,MACP,KAAK,SAEL,OAAO,MACP,MAAM,MACN,KAAK;AAGP,YAAM,gBAAgB,OAAO,WAAW,OAAM,GACxC,OAAO,KAAK,UAAU,MAAM,MAAM,aAAa,GAC/C,yBAAqB,gBAAA,SAAQ,eAAe,IAAI;AAEtD,eAAO,WAAW,KAAK,oBAAoB,IAAI,QAAW,IAAI;MAChE;;AAnEF,YAAA,aAAA;AAsEA,aAAS,cAAc,aAAgB;AACrC,aACE,OAAO,eAAgB,YACvB,OAAO,YAAY,UAAc,YACjC,OAAO,YAAY,WAAe,YAClC,OAAO,YAAY,cAAkB;IAEzC;;;;;;;;;;;AC3FA,QAAA,eAAA,sBAMM,cAAc,IAAI,aAAA,WAAU,GAKrB,cAAb,MAAwB;MAItB,YACU,WACQ,MACA,SACA,SAAuB;AAH/B,aAAA,YAAA,WACQ,KAAA,OAAA,MACA,KAAA,UAAA,SACA,KAAA,UAAA;MACf;MAEH,UAAU,MAAc,SAAuB,SAAiB;AAC9D,eAAO,KAAK,WAAU,EAAG,UAAU,MAAM,SAAS,OAAO;MAC3D;MAEA,gBACE,OACA,UACA,UACA,KAAO;AAEP,YAAM,SAAS,KAAK,WAAU;AAC9B,eAAO,QAAQ,MAAM,OAAO,iBAAiB,QAAQ,SAAS;MAChE;;;;;MAMQ,aAAU;AAChB,YAAI,KAAK;AACP,iBAAO,KAAK;AAGd,YAAM,SAAS,KAAK,UAAU,kBAC5B,KAAK,MACL,KAAK,SACL,KAAK,OAAO;AAGd,eAAK,UAIL,KAAK,YAAY,QACV,KAAK,aAJH;MAKX;;AA9CF,YAAA,cAAA;;;;;;;;;;;ACZA,QAAA,eAAA,sBAWa,qBAAb,MAA+B;MAC7B,UACE,OACA,UACA,UAAwB;AAExB,eAAO,IAAI,aAAA,WAAU;MACvB;;AAPF,YAAA,qBAAA;;;;;;;;;;;ACTA,QAAA,gBAAA,uBACA,uBAAA,8BAGM,uBAAuB,IAAI,qBAAA,mBAAkB,GAUtC,sBAAb,MAAgC;;;;MAM9B,UAAU,MAAc,SAAkB,SAAuB;;AAC/D,gBACE,KAAA,KAAK,kBAAkB,MAAM,SAAS,OAAO,OAAC,QAAA,OAAA,SAAA,KAC9C,IAAI,cAAA,YAAY,MAAM,MAAM,SAAS,OAAO;MAEhD;MAEA,cAAW;;AACT,gBAAO,KAAA,KAAK,eAAS,QAAA,OAAA,SAAA,KAAI;MAC3B;;;;MAKA,YAAY,UAAwB;AAClC,aAAK,YAAY;MACnB;MAEA,kBACE,MACA,SACA,SAAuB;;AAEvB,gBAAO,KAAA,KAAK,eAAS,QAAA,OAAA,SAAA,SAAA,GAAE,UAAU,MAAM,SAAS,OAAO;MACzD;;AA9BF,YAAA,sBAAA;;;;;;;;;;;ACRA,QAAY;AAAZ,KAAA,SAAYC,mBAAgB;AAK1B,MAAAA,kBAAAA,kBAAA,aAAA,CAAA,IAAA,cAKAA,kBAAAA,kBAAA,SAAA,CAAA,IAAA,UAKAA,kBAAAA,kBAAA,qBAAA,CAAA,IAAA;IACF,GAhBY,mBAAA,QAAA,qBAAA,QAAA,mBAAgB,CAAA,EAAA;;;;;;;;;;;ACT5B,QAAY;AAAZ,KAAA,SAAYC,WAAQ;AAElB,MAAAA,UAAAA,UAAA,WAAA,CAAA,IAAA,YAMAA,UAAAA,UAAA,SAAA,CAAA,IAAA,UAMAA,UAAAA,UAAA,SAAA,CAAA,IAAA,UAOAA,UAAAA,UAAA,WAAA,CAAA,IAAA,YAOAA,UAAAA,UAAA,WAAA,CAAA,IAAA;IACF,GA7BY,WAAA,QAAA,aAAA,QAAA,WAAQ,CAAA,EAAA;;;;;;;;;;;ACUpB,QAAY;AAAZ,KAAA,SAAYC,iBAAc;AAIxB,MAAAA,gBAAAA,gBAAA,QAAA,CAAA,IAAA,SAKAA,gBAAAA,gBAAA,KAAA,CAAA,IAAA,MAIAA,gBAAAA,gBAAA,QAAA,CAAA,IAAA;IACF,GAdY,iBAAA,QAAA,mBAAA,QAAA,iBAAc,CAAA,EAAA;;;;;;;;;;;ACT1B,QAAM,uBAAuB,gBACvB,YAAY,QAAQ,oBAAoB,WACxC,mBAAmB,WAAW,oBAAoB,gBAAgB,oBAAoB,UACtF,kBAAkB,IAAI,OAAO,OAAO,SAAS,IAAI,gBAAgB,IAAI,GACrE,yBAAyB,uBACzB,kCAAkC;AAUxC,aAAgB,YAAY,KAAW;AACrC,aAAO,gBAAgB,KAAK,GAAG;IACjC;AAFA,YAAA,cAAA;AAQA,aAAgB,cAAc,OAAa;AACzC,aACE,uBAAuB,KAAK,KAAK,KACjC,CAAC,gCAAgC,KAAK,KAAK;IAE/C;AALA,YAAA,gBAAA;;;;;;;;;;;ACtBA,QAAA,0BAAA,iCAEM,wBAAwB,IACxB,sBAAsB,KACtB,yBAAyB,KACzB,iCAAiC,KAW1B,iBAAb,MAAa,gBAAc;MAGzB,YAAY,eAAsB;AAF1B,aAAA,iBAAsC,oBAAI,IAAG,GAG/C,iBAAe,KAAK,OAAO,aAAa;MAC9C;MAEA,IAAI,KAAa,OAAa;AAG5B,YAAM,aAAa,KAAK,OAAM;AAC9B,eAAI,WAAW,eAAe,IAAI,GAAG,KACnC,WAAW,eAAe,OAAO,GAAG,GAEtC,WAAW,eAAe,IAAI,KAAK,KAAK,GACjC;MACT;MAEA,MAAM,KAAW;AACf,YAAM,aAAa,KAAK,OAAM;AAC9B,0BAAW,eAAe,OAAO,GAAG,GAC7B;MACT;MAEA,IAAI,KAAW;AACb,eAAO,KAAK,eAAe,IAAI,GAAG;MACpC;MAEA,YAAS;AACP,eAAO,KAAK,MAAK,EACd,OAAO,CAAC,KAAe,SACtB,IAAI,KAAK,MAAM,iCAAiC,KAAK,IAAI,GAAG,CAAC,GACtD,MACN,CAAA,CAAE,EACJ,KAAK,sBAAsB;MAChC;MAEQ,OAAO,eAAqB;AAClC,QAAI,cAAc,SAAS,wBAC3B,KAAK,iBAAiB,cACnB,MAAM,sBAAsB,EAC5B,QAAO,EACP,OAAO,CAAC,KAA0B,SAAgB;AACjD,cAAM,aAAa,KAAK,KAAI,GACtB,IAAI,WAAW,QAAQ,8BAA8B;AAC3D,cAAI,MAAM,IAAI;AACZ,gBAAM,MAAM,WAAW,MAAM,GAAG,CAAC,GAC3B,QAAQ,WAAW,MAAM,IAAI,GAAG,KAAK,MAAM;AACjD,gBAAI,wBAAA,aAAY,GAAG,SAAK,wBAAA,eAAc,KAAK,KACzC,IAAI,IAAI,KAAK,KAAK;;AAKtB,iBAAO;QACT,GAAG,oBAAI,IAAG,CAAE,GAGV,KAAK,eAAe,OAAO,0BAC7B,KAAK,iBAAiB,IAAI,IACxB,MAAM,KAAK,KAAK,eAAe,QAAO,CAAE,EACrC,QAAO,EACP,MAAM,GAAG,qBAAqB,CAAC;MAGxC;MAEQ,QAAK;AACX,eAAO,MAAM,KAAK,KAAK,eAAe,KAAI,CAAE,EAAE,QAAO;MACvD;MAEQ,SAAM;AACZ,YAAM,aAAa,IAAI,gBAAc;AACrC,0BAAW,iBAAiB,IAAI,IAAI,KAAK,cAAc,GAChD;MACT;;AA3EF,YAAA,iBAAA;;;;;;;;;;;AChBA,QAAA,oBAAA;AAEA,aAAgB,iBAAiB,eAAsB;AACrD,aAAO,IAAI,kBAAA,eAAe,aAAa;IACzC;AAFA,YAAA,mBAAA;;;;;;;;;;;ACDA,QAAA,YAAA;AAEa,YAAA,UAAU,UAAA,WAAW,YAAW;;;;;;;;;;;ACF7C,QAAA,SAAA;AAOa,YAAA,OAAO,OAAA,QAAQ,SAAQ;;;;;;;;;;;ACPpC,QAAA,cAAA,qBAMa,oBAAb,MAA8B;MAC5B,SAAS,OAAe,UAAmB,UAAuB;AAChE,eAAO,YAAA;MACT;;AAHF,YAAA,oBAAA;AAMa,YAAA,sBAAsB,IAAI,kBAAiB;;;;;;;;;;;ACZxD,QAAA,sBAAA,6BACA,iBAAA,wBAKA,SAAA,gBAEM,WAAW,WAKJ,aAAb,MAAa,YAAU;;MAIrB,cAAA;MAAuB;;MAGhB,OAAO,cAAW;AACvB,eAAK,KAAK,cACR,KAAK,YAAY,IAAI,YAAU,IAG1B,KAAK;MACd;;;;;MAMO,uBAAuB,UAAuB;AACnD,mBAAO,eAAA,gBAAe,UAAU,UAAU,OAAA,QAAQ,SAAQ,CAAE;MAC9D;;;;MAKO,mBAAgB;AACrB,mBAAO,eAAA,WAAU,QAAQ,KAAK,oBAAA;MAChC;;;;MAKO,SACL,MACA,SACA,SAAsB;AAEtB,eAAO,KAAK,iBAAgB,EAAG,SAAS,MAAM,SAAS,OAAO;MAChE;;MAGO,UAAO;AACZ,YAAA,eAAA,kBAAiB,UAAU,OAAA,QAAQ,SAAQ,CAAE;MAC/C;;AA5CF,YAAA,aAAA;;;;;;;;;;;ACbA,QAAA,YAAA;AAEa,YAAA,UAAU,UAAA,WAAW,YAAW;;;;;;;;;;;ACE7C,QAAa,wBAAb,MAAkC;;MAEhC,OAAO,UAAmB,UAAiB;MAAS;;MAEpD,QAAQ,SAAkB,UAAiB;AACzC,eAAO;MACT;MACA,SAAM;AACJ,eAAO,CAAA;MACT;;AATF,YAAA,wBAAA;;;;;;;;;;;ACNA,QAAA,YAAA,oBACA,YAAA,mBAOM,kBAAc,UAAA,kBAAiB,2BAA2B;AAQhE,aAAgB,WAAW,SAAgB;AACzC,aAAQ,QAAQ,SAAS,WAAW,KAAiB;IACvD;AAFA,YAAA,aAAA;AASA,aAAgB,mBAAgB;AAC9B,aAAO,WAAW,UAAA,WAAW,YAAW,EAAG,OAAM,CAAE;IACrD;AAFA,YAAA,mBAAA;AAUA,aAAgB,WAAW,SAAkB,SAAgB;AAC3D,aAAO,QAAQ,SAAS,aAAa,OAAO;IAC9C;AAFA,YAAA,aAAA;AASA,aAAgB,cAAc,SAAgB;AAC5C,aAAO,QAAQ,YAAY,WAAW;IACxC;AAFA,YAAA,gBAAA;;;;;;;;;;;AC3CA,QAAA,iBAAA,wBAKA,0BAAA,iCACA,sBAAA,6BAOA,oBAAA,2BAMA,UAAA,iBACA,SAAA,gBAEM,WAAW,eACX,2BAA2B,IAAI,wBAAA,sBAAqB,GAK7C,iBAAb,MAAa,gBAAc;;MAIzB,cAAA;AA8DO,aAAA,gBAAgB,QAAA,eAEhB,KAAA,aAAa,kBAAA,YAEb,KAAA,mBAAmB,kBAAA,kBAEnB,KAAA,aAAa,kBAAA,YAEb,KAAA,gBAAgB,kBAAA;MAtEA;;MAGhB,OAAO,cAAW;AACvB,eAAK,KAAK,cACR,KAAK,YAAY,IAAI,gBAAc,IAG9B,KAAK;MACd;;;;;;MAOO,oBAAoB,YAA6B;AACtD,mBAAO,eAAA,gBAAe,UAAU,YAAY,OAAA,QAAQ,SAAQ,CAAE;MAChE;;;;;;;;MASO,OACL,SACA,SACA,SAAiC,oBAAA,sBAAoB;AAErD,eAAO,KAAK,qBAAoB,EAAG,OAAO,SAAS,SAAS,MAAM;MACpE;;;;;;;;MASO,QACL,SACA,SACA,SAAiC,oBAAA,sBAAoB;AAErD,eAAO,KAAK,qBAAoB,EAAG,QAAQ,SAAS,SAAS,MAAM;MACrE;;;;MAKO,SAAM;AACX,eAAO,KAAK,qBAAoB,EAAG,OAAM;MAC3C;;MAGO,UAAO;AACZ,YAAA,eAAA,kBAAiB,UAAU,OAAA,QAAQ,SAAQ,CAAE;MAC/C;MAYQ,uBAAoB;AAC1B,mBAAO,eAAA,WAAU,QAAQ,KAAK;MAChC;;AA9EF,YAAA,iBAAA;;;;;;;;;;;AC3BA,QAAA,gBAAA;AAEa,YAAA,cAAc,cAAA,eAAe,YAAW;;;;;;;;;;;ACJrD,QAAA,iBAAA,wBAKA,wBAAA,+BACA,sBAAA,6BAMA,kBAAA,yBAQA,SAAA,gBAEM,WAAW,SAKJ,WAAb,MAAa,UAAQ;;MAMnB,cAAA;AAHQ,aAAA,uBAAuB,IAAI,sBAAA,oBAAmB,GAmD/C,KAAA,kBAAkB,oBAAA,iBAElB,KAAA,qBAAqB,oBAAA,oBAErB,KAAA,aAAa,gBAAA,YAEb,KAAA,UAAU,gBAAA,SAEV,KAAA,gBAAgB,gBAAA,eAEhB,KAAA,iBAAiB,gBAAA,gBAEjB,KAAA,UAAU,gBAAA,SAEV,KAAA,iBAAiB,gBAAA;MA9DD;;MAGhB,OAAO,cAAW;AACvB,eAAK,KAAK,cACR,KAAK,YAAY,IAAI,UAAQ,IAGxB,KAAK;MACd;;;;;;MAOO,wBAAwB,UAAwB;AACrD,YAAM,cAAU,eAAA,gBACd,UACA,KAAK,sBACL,OAAA,QAAQ,SAAQ,CAAE;AAEpB,eAAI,WACF,KAAK,qBAAqB,YAAY,QAAQ,GAEzC;MACT;;;;MAKO,oBAAiB;AACtB,mBAAO,eAAA,WAAU,QAAQ,KAAK,KAAK;MACrC;;;;MAKO,UAAU,MAAc,SAAgB;AAC7C,eAAO,KAAK,kBAAiB,EAAG,UAAU,MAAM,OAAO;MACzD;;MAGO,UAAO;AACZ,YAAA,eAAA,kBAAiB,UAAU,OAAA,QAAQ,SAAQ,CAAE,GAC7C,KAAK,uBAAuB,IAAI,sBAAA,oBAAmB;MACrD;;AApDF,YAAA,WAAA;;;;;;;;;;;ACzBA,QAAA,UAAA;AAEa,YAAA,QAAQ,QAAA,SAAS,YAAW;;;;;;;;;;;ACHzC,QAAA,UAAA;AAAS,WAAA,eAAA,SAAA,kCAAA,EAAA,YAAA,IAAA,KAAA,WAAA;AAAA,aAAA,QAAA;IAA8B,EAAA,CAAA;AAMvC,QAAA,YAAA;AAAS,WAAA,eAAA,SAAA,oBAAA,EAAA,YAAA,IAAA,KAAA,WAAA;AAAA,aAAA,UAAA;IAAgB,EAAA,CAAA;AAAE,WAAA,eAAA,SAAA,gBAAA,EAAA,YAAA,IAAA,KAAA,WAAA;AAAA,aAAA,UAAA;IAAY,EAAA,CAAA;AAKvC,QAAA,kBAAA;AAAS,WAAA,eAAA,SAAA,qBAAA,EAAA,YAAA,IAAA,KAAA,WAAA;AAAA,aAAA,gBAAA;IAAiB,EAAA,CAAA;AAC1B,QAAA,UAAA;AAGE,WAAA,eAAA,SAAA,gBAAA,EAAA,YAAA,IAAA,KAAA,WAAA;AAAA,aAAA,QAAA;IAAY,EAAA,CAAA;AAOd,QAAA,cAAA;AAAS,WAAA,eAAA,SAAA,mBAAA,EAAA,YAAA,IAAA,KAAA,WAAA;AAAA,aAAA,YAAA;IAAe,EAAA,CAAA;AAGxB,QAAA,WAAA;AACE,WAAA,eAAA,SAAA,aAAA,EAAA,YAAA,IAAA,KAAA,WAAA;AAAA,aAAA,SAAA;IAAS,EAAA,CAAA;AAqBX,QAAA,sBAAA;AAIE,WAAA,eAAA,SAAA,wBAAA,EAAA,YAAA,IAAA,KAAA,WAAA;AAAA,aAAA,oBAAA;IAAoB,EAAA,CAAA;AACpB,WAAA,eAAA,SAAA,wBAAA,EAAA,YAAA,IAAA,KAAA,WAAA;AAAA,aAAA,oBAAA;IAAoB,EAAA,CAAA;AAOtB,QAAA,gBAAA;AAAS,WAAA,eAAA,SAAA,eAAA,EAAA,YAAA,IAAA,KAAA,WAAA;AAAA,aAAA,cAAA;IAAW,EAAA,CAAA;AACpB,QAAA,wBAAA;AAAS,WAAA,eAAA,SAAA,uBAAA,EAAA,YAAA,IAAA,KAAA,WAAA;AAAA,aAAA,sBAAA;IAAmB,EAAA,CAAA;AAE5B,QAAA,mBAAA;AAAS,WAAA,eAAA,SAAA,oBAAA,EAAA,YAAA,IAAA,KAAA,WAAA;AAAA,aAAA,iBAAA;IAAgB,EAAA,CAAA;AAEzB,QAAA,cAAA;AAAS,WAAA,eAAA,SAAA,YAAA,EAAA,YAAA,IAAA,KAAA,WAAA;AAAA,aAAA,YAAA;IAAQ,EAAA,CAAA;AAGjB,QAAA,WAAA;AAAqB,WAAA,eAAA,SAAA,kBAAA,EAAA,YAAA,IAAA,KAAA,WAAA;AAAA,aAAA,SAAA;IAAc,EAAA,CAAA;AACnC,QAAA,gBAAA;AAAS,WAAA,eAAA,SAAA,cAAA,EAAA,YAAA,IAAA,KAAA,WAAA;AAAA,aAAA,cAAA;IAAU,EAAA,CAAA;AAEnB,QAAA,UAAA;AAAS,WAAA,eAAA,SAAA,oBAAA,EAAA,YAAA,IAAA,KAAA,WAAA;AAAA,aAAA,QAAA;IAAgB,EAAA,CAAA;AAIzB,QAAA,sBAAA;AACE,WAAA,eAAA,SAAA,sBAAA,EAAA,YAAA,IAAA,KAAA,WAAA;AAAA,aAAA,oBAAA;IAAkB,EAAA,CAAA;AAClB,WAAA,eAAA,SAAA,kBAAA,EAAA,YAAA,IAAA,KAAA,WAAA;AAAA,aAAA,oBAAA;IAAc,EAAA,CAAA;AACd,WAAA,eAAA,SAAA,iBAAA,EAAA,YAAA,IAAA,KAAA,WAAA;AAAA,aAAA,oBAAA;IAAa,EAAA,CAAA;AAEf,QAAA,2BAAA;AACE,WAAA,eAAA,SAAA,kBAAA,EAAA,YAAA,IAAA,KAAA,WAAA;AAAA,aAAA,yBAAA;IAAc,EAAA,CAAA;AACd,WAAA,eAAA,SAAA,mBAAA,EAAA,YAAA,IAAA,KAAA,WAAA;AAAA,aAAA,yBAAA;IAAe,EAAA,CAAA;AACf,WAAA,eAAA,SAAA,wBAAA,EAAA,YAAA,IAAA,KAAA,WAAA;AAAA,aAAA,yBAAA;IAAoB,EAAA,CAAA;AAMtB,QAAA,gBAAA;AAOS,WAAA,eAAA,SAAA,WAAA,EAAA,YAAA,IAAA,KAAA,WAAA;AAAA,aAPA,cAAA;IAAO,EAAA,CAAA;AAChB,QAAA,aAAA;AAMkB,WAAA,eAAA,SAAA,QAAA,EAAA,YAAA,IAAA,KAAA,WAAA;AAAA,aANT,WAAA;IAAI,EAAA,CAAA;AACb,QAAA,gBAAA;AAKwB,WAAA,eAAA,SAAA,WAAA,EAAA,YAAA,IAAA,KAAA,WAAA;AAAA,aALf,cAAA;IAAO,EAAA,CAAA;AAChB,QAAA,oBAAA;AAIiC,WAAA,eAAA,SAAA,eAAA,EAAA,YAAA,IAAA,KAAA,WAAA;AAAA,aAJxB,kBAAA;IAAW,EAAA,CAAA;AACpB,QAAA,cAAA;AAG8C,WAAA,eAAA,SAAA,SAAA,EAAA,YAAA,IAAA,KAAA,WAAA;AAAA,aAHrC,YAAA;IAAK,EAAA,CAAA;AAKd,YAAA,UAAe;MACb,SAAA,cAAA;MACA,MAAA,WAAA;MACA,SAAA,cAAA;MACA,aAAA,kBAAA;MACA,OAAA,YAAA;;;;;;;;;;;;AClGF,aAAgB,aAAgB,MAAc;AAC5C,aAA6B,QAAS;IACxC;AAFA,YAAA,eAAA;AAQA,aAAgB,eAAe,YAA4B;AACzD,UAAI,OAAO,OAAO,KAAK,UAAU;AACjC,aAAI,KAAK,WAAW,IAAU,MAG9B,OAAO,KAAK,KAAI,GACT,KAAK,UAAU,KAAK,IAAI,SAAO,CAAC,KAAK,WAAW,GAAG,CAAC,CAAC,CAAC;IAC/D;AAPA,YAAA,iBAAA;AAaA,aAAgB,uBACdC,uBAA0C;;AAE1C,aAAO,GAAGA,sBAAqB,IAAI,KAAI,KAAAA,sBAAqB,aAAO,QAAA,OAAA,SAAA,KAAI,EAAE,KACvE,KAAAA,sBAAqB,eAAS,QAAA,OAAA,SAAA,KAAI,EACpC;IACF;AANA,YAAA,yBAAA;AAWA,QAAa,eAAb,MAAa,sBAAqB,MAAK;MACrC,YAAY,SAAgB;AAC1B,cAAM,OAAO,GAIb,OAAO,eAAe,MAAM,cAAa,SAAS;MACpD;;AAPF,YAAA,eAAA;AAmBA,aAAgB,gBACd,SACA,SAAe;AAEf,UAAI,eAEE,iBAAiB,IAAI,QAAe,SACxC,UACA,QAAM;AAEN,wBAAgB,WAAW,WAAuB;AAChD,iBAAO,IAAI,aAAa,sBAAsB,CAAC;QACjD,GAAG,OAAO;MACZ,CAAC;AAED,aAAO,QAAQ,KAAK,CAAC,SAAS,cAAc,CAAC,EAAE,KAC7C,aACE,aAAa,aAAa,GACnB,SAET,YAAS;AACP,2BAAa,aAAa,GACpB;MACR,CAAC;IAEL;AAzBA,YAAA,kBAAA;AA4CO,mBAAe,kBACpB,UAAsB;AAEtB,aAAO,QAAQ,IACb,SAAS,IAAyC,OAAM,MAAI;AAC1D,YAAI;AAEF,iBAAO;YACL,QAAQ;YACR,OAHU,MAAM;;iBAKX,GAAG;AACV,iBAAO;YACL,QAAQ;YACR,QAAQ;;;MAGd,CAAC,CAAC;IAEN;AAnBA,YAAA,oBAAA;AAqBA,aAAgB,mCACd,IAAoC;AAEpC,aAAO,GAAG,WAAW;IACvB;AAJA,YAAA,qCAAA;AASA,aAAgB,QAAc,KAAU,IAAkB;AACxD,UAAM,SAAc,CAAA;AACpB,iBAAI,QAAQ,QAAK;AACf,eAAO,KAAK,GAAG,GAAG,EAAE,CAAC;MACvB,CAAC,GACM;IACT;AANA,YAAA,UAAA;AAQA,aAAgB,UAAU,KAAmB,KAAiB;AAC5D,UAAI,IAAI,SAAS,IAAI;AACnB,eAAO;AAET,eAAW,QAAQ;AACjB,YAAI,CAAC,IAAI,IAAI,IAAI;AACf,iBAAO;AAGX,aAAO;IACT;AAVA,YAAA,YAAA;AAkBA,aAAgB,eAAe,KAAe,OAAa;AACzD,UAAI,KAAK,GACL,KAAK,IAAI,SAAS;AAEtB,aAAO,KAAK,KAAK,KAAG;AAClB,YAAM,MAAM,KAAK,OAAO,KAAK,MAAM,CAAC;AACpC,QAAI,IAAI,GAAG,KAAK,QACd,KAAK,MAEL,KAAK,MAAM;;AAIf,aAAI,IAAI,EAAE,KAAK,QACN,KACE,IAAI,EAAE,KAAK,QACb,KAEF;IACT;AAnBA,YAAA,iBAAA;AAqBA,aAAgB,sBAAsB,KAAa,KAAW;AAC5D,aAAO,IAAI,YAAW,MAAO,IAAI,YAAW;IAC9C;AAFA,YAAA,wBAAA;;;;;;;;;;;AC1KA,QAAY;AAAZ,KAAA,SAAYC,iBAAc;AACxB,MAAAA,gBAAAA,gBAAA,OAAA,CAAA,IAAA,QACAA,gBAAAA,gBAAA,MAAA,CAAA,IAAA,OACAA,gBAAAA,gBAAA,aAAA,CAAA,IAAA,cACAA,gBAAAA,gBAAA,YAAA,CAAA,IAAA,aACAA,gBAAAA,gBAAA,wBAAA,CAAA,IAAA;IACF,GANY,iBAAA,QAAA,mBAAA,QAAA,iBAAc,CAAA,EAAA;;;;;;;;;;;ACF1B,QAAA,UAAA,kBAGa,iBAAb,MAA2B;MAA3B,cAAA;AACE,aAAA,OAA4B,QAAA,eAAe;MAsB7C;MApBE,qBAAkB;MAElB;MAEA,MAAM,WAAsB,QAAiB;MAE7C;MAEA,KAAK,WAAsB,UAAmB;MAE9C;MAEA,aACE,aACA,yBACA,2BACA,UAAgB;MAGlB;;AAtBF,YAAA,iBAAA;;;;;;;;;;;ACRA,QAAA,QAAA,eAEA,UAAA,kBAKY;AAAZ,KAAA,SAAYC,iBAAc;AACxB,MAAAA,gBAAA,UAAA,WACAA,gBAAA,YAAA,aACAA,gBAAA,kBAAA,mBACAA,gBAAA,qBAAA,sBACAA,gBAAA,mBAAA,oBACAA,gBAAA,6BAAA;IACF,GAPY,iBAAA,QAAA,mBAAA,QAAA,iBAAc,CAAA,EAAA;AAoB1B,aAAgB,2BACd,MACA,MACA,SAAuB;;AAEvB,aAAK,YAAY,IAAI,KACnB,MAAA,KAAK,KACH,yBAAyB,IAAI,2FAA2F,GAGrH;QACL;QACA;QACA,cAAa,KAAA,SAAS,iBAAW,QAAA,OAAA,SAAA,KAAI;QACrC,OAAM,KAAA,SAAS,UAAI,QAAA,OAAA,SAAA,KAAI;QACvB,YAAW,KAAA,SAAS,eAAS,QAAA,OAAA,SAAA,KAAI,MAAA,UAAU;;IAE/C;AAjBA,YAAA,6BAAA;AAmBA,aAAgB,mCACd,MACA,YAAgC;;AAEhC,aAAO;QACL,OAAM,KAAA,KAAK,UAAI,QAAA,OAAA,SAAA,KAAI,WAAW;QAC9B,cAAa,KAAA,KAAK,iBAAW,QAAA,OAAA,SAAA,KAAI,WAAW;QAC5C,MAAM,WAAW;QACjB,MAAM,WAAW;QACjB,WAAW,WAAW;;IAE1B;AAXA,YAAA,qCAAA;AAaA,aAAgB,2BACd,YACA,iBAAqC;AAGrC,iBACE,QAAA,uBAAsB,WAAW,MAAM,gBAAgB,IAAI,KAC3D,WAAW,SAAS,gBAAgB,QACpC,WAAW,SAAS,gBAAgB,QACpC,WAAW,cAAc,gBAAgB;IAE7C;AAXA,YAAA,6BAAA;AAeA,QAAM,cAAc;AACpB,aAAgB,YAAY,MAAY;AACtC,aAAO,KAAK,MAAM,WAAW,KAAK;IACpC;AAFA,YAAA,cAAA;;;;;;;;;;;AC3EA,QAAA,UAAA,kBAMA,eAAA,sBAEA,yBAAA,gCACA,UAAA;AAoBA,aAAS,yBAAyB,YAAoB;AACpD,UAAM,SAAS,WAAW,IAAI,MAAM,CAAC;AACrC,oBAAO,KAAK,CAAC,GACN;QACL,SAAS;UACP;UACA;;QAEF,KAAK;QACL,OAAO;QACP,WAAW;QACX,KAAK;QACL,KAAK;;IAET;AAEA,QAAa,wBAAb,MAAkC;MAChC,YACS,WACU,aACT,gBAAgB,IAChB,WAA8B,yBAAyB,WAAW,GAAC;AAHpE,aAAA,YAAA,WACU,KAAA,cAAA,aACT,KAAA,gBAAA,eACA,KAAA,WAAA;MACP;MAEH,OAAO,OAAa;AAClB,aAAK,SAAS,SAAS,GACvB,KAAK,SAAS,OAAO,OAEjB,KAAK,kBACP,KAAK,SAAS,MAAM,KAAK,IAAI,OAAO,KAAK,SAAS,GAAG,GACrD,KAAK,SAAS,MAAM,KAAK,IAAI,OAAO,KAAK,SAAS,GAAG,GACrD,KAAK,SAAS,YAAY;AAG5B,YAAM,UAAM,QAAA,gBAAe,KAAK,aAAa,KAAK;AAClD,aAAK,SAAS,QAAQ,OAAO,MAAM,CAAC,KAAK;MAC3C;MAEA,aAAa,WAAiB;AAC5B,aAAK,YAAY;MACnB;MAEA,eAAY;AACV,eAAO,KAAK;MACd;;AA5BF,YAAA,wBAAA;AAmCA,QAAa,sBAAb,MAAgC;;;;;MAO9B,YACmB,aACA,eAAsB;AADtB,aAAA,cAAA,aACA,KAAA,gBAAA,eARZ,KAAA,OAAiC,QAAA,eAAe;MASpD;MAEH,mBAAmB,WAAiB;AAClC,eAAO,IAAI,sBACT,WACA,KAAK,aACL,KAAK,aAAa;MAEtB;;;;;;MAOA,MACE,UACA,OAA4B;AAE5B,YAAM,gBAAgB,SAAS,aAAY,GACrC,aAAa,MAAM,aAAY,GAE/B,iBAAiB,cAAc,QAAQ,QACvC,cAAc,WAAW,QAAQ,QAEjC,eAAe,IAAI,MAAM,eAAe,MAAM;AACpD,iBAAS,MAAM,GAAG,MAAM,eAAe,QAAQ;AAC7C,uBAAa,GAAG,IAAI,eAAe,GAAG,IAAI,YAAY,GAAG;AAG3D,YAAI,MAAM,OACN,MAAM;AAEV,eAAI,KAAK,kBACH,cAAc,aAAa,WAAW,aACxC,MAAM,KAAK,IAAI,cAAc,KAAK,WAAW,GAAG,GAChD,MAAM,KAAK,IAAI,cAAc,KAAK,WAAW,GAAG,KACvC,cAAc,aACvB,MAAM,cAAc,KACpB,MAAM,cAAc,OACX,WAAW,cACpB,MAAM,WAAW,KACjB,MAAM,WAAW,OAId,IAAI,sBACT,SAAS,WACT,cAAc,QAAQ,YACtB,KAAK,eACL;UACE,SAAS;YACP,YAAY,cAAc,QAAQ;YAClC,QAAQ;;UAEV,OAAO,cAAc,QAAQ,WAAW;UACxC,KAAK,cAAc,MAAM,WAAW;UACpC,WACE,KAAK,kBACJ,cAAc,aAAa,WAAW;UACzC;UACA;SACD;MAEL;;;;MAKA,KACE,UACA,SAA8B;AAE9B,YAAM,gBAAgB,SAAS,aAAY,GACrC,eAAe,QAAQ,aAAY,GAEnC,iBAAiB,cAAc,QAAQ,QACvC,gBAAgB,aAAa,QAAQ,QAErC,eAAe,IAAI,MAAM,eAAe,MAAM;AACpD,iBAAS,MAAM,GAAG,MAAM,eAAe,QAAQ;AAC7C,uBAAa,GAAG,IAAI,cAAc,GAAG,IAAI,eAAe,GAAG;AAG7D,eAAO,IAAI,sBACT,QAAQ,WACR,cAAc,QAAQ,YACtB,KAAK,eACL;UACE,SAAS;YACP,YAAY,cAAc,QAAQ;YAClC,QAAQ;;UAEV,OAAO,aAAa,QAAQ,cAAc;UAC1C,KAAK,aAAa,MAAM,cAAc;UACtC,WAAW;UACX,KAAK;UACL,KAAK;SACN;MAEL;MAEA,aACE,YACA,wBACA,0BACA,SAAe;AAEf,eAAO;UACL;UACA;UACA,eAAe,aAAA,cAAc;UAC7B,YAAY,yBAAyB,IAAI,CAAC,CAAC,YAAY,YAAY,MAAK;AACtE,gBAAM,aAAa,aAAa,aAAY,GAGtC,uBACJ,WAAW,SAAS,uBAAA,eAAe,mBACnC,WAAW,SAAS,uBAAA,eAAe,oBACnC,WAAW,SAAS,uBAAA,eAAe;AAErC,mBAAO;cACL;cACA,WAAW,aAAa;cACxB;cACA,OAAO;gBACL,KAAK,WAAW,YAAY,WAAW,MAAM;gBAC7C,KAAK,WAAW,YAAY,WAAW,MAAM;gBAC7C,KAAM,uBAAwC,SAAjB,WAAW;gBACxC,SAAS,WAAW;gBACpB,OAAO,WAAW;;;UAGxB,CAAC;;MAEL;;AAjJF,YAAA,sBAAA;;;;;;;;;;;ACjFA,QAAa,UAAb,MAAa,SAAO;;;;;;;;;;;;;;;;;;MAkBlB,YACS,UAAU,IAAI,eAAc,GAC5B,YAAY,GACZ,aAAa,GACb,WAAW,GAAC;AAHZ,aAAA,UAAA,SACA,KAAA,YAAA,WACA,KAAA,aAAA,YACA,KAAA,WAAA;MACN;;;;;MAMH,IAAI,SAAM;AACR,eAAO,KAAK;MACd;;;;;MAMA,IAAI,SAAM;AAKR,eAJI,KAAK,QAAQ,WAAW,KAIxB,KAAK,aAAa,KAAK,cAAc,KAAK,GAAG,CAAC,MAAM,IAC/C,IAGF,KAAK,WAAW,KAAK,aAAa;MAC3C;;;;;;;;MASA,SAAM;AACJ,eAAO,MAAM,KAAK,EAAE,QAAQ,KAAK,OAAM,GAAI,CAAC,GAAG,MAAM,KAAK,GAAG,CAAC,CAAC;MACjE;;;;;;;MAQA,GAAG,UAAgB;AACjB,YAAM,OAAO,KAAK,YAAY,KAAK;AACnC,eAAI,WAAW,SACb,YAAY,KAAK,QAAQ,SAG3B,YAAY,MACL,KAAK,QAAQ,QAAQ,QAAQ;MACtC;;;;;;MAOA,gBAAgB,aAAqB,WAAiB;AACpD,aAAK,QAAQ,UAAU,aAAa,SAAS;MAC/C;;;;;;;MAQA,gBAAgB,aAAqB,WAAiB;AACpD,aAAK,QAAQ,UAAU,aAAa,SAAS;MAC/C;;;;;;MAOA,OAAI;AACF,iBAAS,IAAI,GAAG,IAAI,KAAK,QAAQ;AAC/B,cAAI,KAAK,GAAG,CAAC,MAAM,GAAG;AACpB,iBAAK,cAAc;AACnB;qBACS,MAAM,KAAK,SAAS,GAAG;AAEhC,iBAAK,aAAa,KAAK,WAAW,KAAK,YAAY;AACnD;;AAIJ,iBAAS,IAAI,KAAK,SAAS,GAAG,KAAK,GAAG;AACpC,cAAI,KAAK,GAAG,CAAC,MAAM,GAAG;AACpB,iBAAK,YAAY,KAAK,SAAS,IAAI;AACnC;;AAIJ,aAAK,QAAO;MACd;;;;;MAMA,UAAU,IAAU;AAClB,aAAK,QAAO;AAEZ,YAAM,OAAO,IAAI,KAAK,WAAW,KAAK,YAChC,OAAO,KAAK,IACd,QAAQ,GACR,SAAS;AAEb,iBAAS,MAAM,KAAK,YAAY,OAAO,KAAK,YAAY;AACtD,cAAI,MAAM,MAAM;AAChB,UAAI,MAAM,MACR,OAAO;AAET,mBAAS,IAAI,KAAK,IAAI,QAAQ,QAAQ,MAAM;AAC1C,iBAAK,gBAAgB,QAAQ,KAAK,GAClC,SACA;AAEF;;AAGF,aAAK,eAAe,IACpB,KAAK,aAAa,IAClB,KAAK,YAAY,KAAK;MACxB;;;;;MAMA,QAAK;AACH,eAAO,IAAI,SACT,KAAK,QAAQ,MAAK,GAClB,KAAK,WACL,KAAK,YACL,KAAK,QAAQ;MAEjB;;;;;MAMQ,UAAO;AACb,YAAM,OAAO,KAAK,YAAY,KAAK;AAEnC,QAAI,SAAS,MAEF,OAAO,KAChB,KAAK,QAAQ,QAAQ,GAAG,KAAK,QAAQ,MAAM,GAC3C,KAAK,QAAQ,QAAQ,GAAG,IAAI,GAC5B,KAAK,QAAQ,QAAQ,MAAM,KAAK,QAAQ,MAAM,MAG9C,KAAK,QAAQ,QAAQ,GAAG,KAAK,QAAQ,MAAM,GAC3C,KAAK,QAAQ,QAAQ,GAAG,KAAK,QAAQ,SAAS,IAAI,IAEpD,KAAK,YAAY,KAAK;MACxB;;;;;MAMQ,gBAAgB,MAAc,KAAW;AAC/C,QAAI,SAAS,OAGb,KAAK,gBAAgB,MAAM,KAAK,QAAQ,YAAY,GAAG,CAAC;MAC1D;;AAnMF,YAAA,UAAA;AA0MA,QAAM,iBAAN,MAAM,gBAAc;MAClB,YAAoB,UAAU,CAAC,CAAC,GAAC;AAAb,aAAA,UAAA;MAAgB;;;;;MAMpC,IAAI,SAAM;AACR,eAAO,KAAK,QAAQ;MACtB;;;;MAKA,QAAQ,KAAW;AACjB,eAAO,KAAK,QAAQ,GAAG;MACzB;;;;;MAMA,OAAO,SAAiB,kBAA0B,kBAAwB;AACxE,YAAM,MAAM,IAAI,MAAc,OAAO,EAAE,KAAK,CAAC;AAC7C,YAAI,OACF,kBACA,KAAK,QAAQ,SAAS,kBACtB,GAAG,KAAK,QAAQ,MAAM,gBAAgB,CAAC,GAEzC,IAAI,OAAO,GAAG,kBAAkB,GAAG,KAAK,QAAQ,MAAM,GAAG,gBAAgB,CAAC,GAC1E,KAAK,UAAU;MACjB;;;;MAKA,QAAQ,MAAc,OAAa;AACjC,YAAM,MAAM,KAAK,OAAO,OAAO,SAAS,CAAC,IAAI;AAC7C,iBAAS,IAAI,GAAG,IAAI,KAAK,KAAK;AAC5B,cAAM,MAAM,KAAK,QAAQ,OAAO,CAAC;AACjC,eAAK,QAAQ,OAAO,CAAC,IAAI,KAAK,QAAQ,QAAQ,IAAI,CAAC,GACnD,KAAK,QAAQ,QAAQ,IAAI,CAAC,IAAI;;MAElC;;;;;MAMA,YAAY,KAAW;AACrB,YAAM,MAAM,KAAK,QAAQ,GAAG;AAC5B,oBAAK,QAAQ,GAAG,IAAI,GACb;MACT;;;;MAKA,UAAU,aAAqB,WAAiB;AAC9C,aAAK,QAAQ,WAAW,KAAK;MAC/B;;;;MAKA,UAAU,aAAqB,WAAiB;AAC9C,QAAI,KAAK,QAAQ,WAAW,KAAK,YAC/B,KAAK,QAAQ,WAAW,KAAK,YAI7B,KAAK,QAAQ,WAAW,IAAI;MAEhC;;;;MAKA,QAAK;AACH,eAAO,IAAI,gBAAe,CAAC,GAAG,KAAK,OAAO,CAAC;MAC7C;;;;;;;;;;;;AC/QW,YAAA,oBAAoB;AAMjC,QAAM,gBAAgB,YAMhB,mBAAmB,SAMnB,gBAAgB;AAMT,YAAA,sBAAsB,CAAC,gBAAgB;AAMvC,YAAA,sBAAsB;AAKtB,YAAA,YAAY,KAAK,IAAI,GAAG,KAAK;AAW1C,aAAgB,eAAe,OAAa;AAC1C,UAAM,KAAK,IAAI,SAAS,IAAI,YAAY,CAAC,CAAC;AAC1C,gBAAG,WAAW,GAAG,KAAK,KAEP,GAAG,UAAU,CAAC,IACH,kBAAkB,MAC3B;IACnB;AAPA,YAAA,iBAAA;AAcA,aAAgB,eAAe,OAAa;AAC1C,UAAM,KAAK,IAAI,SAAS,IAAI,YAAY,CAAC,CAAC;AAC1C,SAAG,WAAW,GAAG,KAAK;AAEtB,UAAM,SAAS,GAAG,UAAU,CAAC,GACvB,SAAS,GAAG,UAAU,CAAC;AAK7B,cAF2B,SAAS,oBAAoB,KAAK,IAAI,GAAG,EAAE,IAE3C;IAC7B;AAXA,YAAA,iBAAA;;;;;;;;;;;ACzDA,aAAgB,MAAM,MAAc,KAAW;AAC7C,aACE,SAAS,KACT,SAAS,OAAO,qBAChB,SAAS,OAAO,qBAChB,OAAO,MAAM,IAAI,IAEV,OAEF,OAAO,KAAK,IAAI,GAAG,GAAG;IAC/B;AAVA,YAAA,QAAA;AAmBA,aAAgB,kBAAkB,GAAS;AAIzC,kBACA,KAAK,KAAK,GACV,KAAK,KAAK,GACV,KAAK,KAAK,GACV,KAAK,KAAK,GACV,KAAK,KAAK,IACV,KACO;IACT;AAZA,YAAA,oBAAA;;;;;;;;;;;ACjCA,QAAa,eAAb,cAAkC,MAAK;;AAAvC,YAAA,eAAA;;;;;;;;;;;ACAA,QAAA,UAAA,mBACA,OAAA,gBACA,UAAA,kBAMa,kBAAb,MAA4B;MAG1B,YAAY,OAAa;AACvB,aAAK,SAAS,CAAC;MACjB;;;;;;MAOA,WAAW,OAAa;AACtB,YAAI,QAAQ,QAAQ;AAClB,iBAAO,KAAK,6BAA4B;AAG1C,YAAM,MAAM,QAAQ,eAAe,KAAK,GAMlC,aAAa,KAAK,YACtB,QAAQ,eAAe,KAAK,IAAI,GAChC,QAAQ,iBAAiB;AAG3B,eAAQ,MAAM,cAAe,KAAK;MACpC;;;;;;;MAQA,cAAc,OAAa;AACzB,YAAM,WAAW,KAAK,6BAA4B;AAClD,YAAI,QAAQ;AACV,gBAAM,IAAI,QAAA,aACR,cAAc,KAAK,iCAAiC,QAAQ,EAAE;AAGlE,YAAM,WAAW,KAAK,6BAA4B;AAClD,YAAI,QAAQ;AACV,gBAAM,IAAI,QAAA,aACR,aAAa,KAAK,iCAAiC,QAAQ,EAAE;AAIjE,eAAO,KAAK,MAAM,GAAG,SAAS,KAAK,MAAM;MAC3C;;;;;MAMA,IAAI,QAAK;AACP,eAAI,KAAK,WAAW,IACX,IAEF,CAAC,KAAK;MACf;MAEQ,+BAA4B;AAClC,YAAI,QAAQ,QAAQ,uBAAuB,KAAK;AAChD,eAAI,KAAK,SAAS,KAChB,SAGK;MACT;MAEQ,+BAA4B;AAClC,eAAO,QAAQ,uBAAuB,KAAK;MAC7C;MAEQ,YAAY,OAAe,OAAa;AAC9C,eAAO,KAAK,MAAM,QAAQ,KAAK,IAAI,GAAG,CAAC,KAAK,CAAC;MAC/C;;AAhFF,YAAA,kBAAA;;;;;;;;;;;ACRA,QAAA,UAAA,mBACA,OAAA,gBACA,UAAA,kBAMa,mBAAb,MAA6B;MAK3B,YAAY,OAAa;AACvB,aAAK,SAAS,OACd,KAAK,eAAe,KAAK,MAAM,KAAK,OAAO,KAAK,GAChD,KAAK,iBAAiB,KAAK,MAAM,KAAK,KAAK,CAAC,KAAK;MACnD;;;;;;MAOA,WAAW,OAAa;AACtB,YAAI,SAAS,QAAQ;AACnB,iBAAO,KAAK,6BAA4B,IAAK;AAI/C,YAAI,QAAQ,eAAe,KAAK,MAAM;AAEpC,kBADY,QAAQ,eAAe,KAAK,KACzB,KAAK,UAAU;AAIhC,YAAM,QAAQ,KAAK,MAAM,KAAK,IAAI,KAAK,IAAI,KAAK,YAAY,GACtD,WAAW,KAAK,6BAA4B;AAClD,eAAI,SAAS,WACJ,WAGF;MACT;;;;;;;MAQA,cAAc,OAAa;AACzB,YAAM,WAAW,KAAK,6BAA4B;AAClD,YAAI,SAAS,UAAU;AACrB,cAAI,UAAU;AACZ,mBAAO,IAAI,KAAK,KAAK,SAAS,KAAK,KAAK,WAAW,KAAK,YAAY;AAEtE,gBAAM,IAAI,QAAA,aACR,aAAa,KAAK,iCAAiC,QAAQ,EAAE;;AAIjE,YAAM,WAAW,KAAK,6BAA4B;AAClD,YAAI,SAAS,UAAU;AACrB,cAAI,UAAU;AACZ,mBAAO,QAAQ;AACV,cAAI,UAAU,WAAW;AAC9B,mBAAO,KAAK,KAAK,SAAS,KAAK,KAAK,WAAW,KAAK,YAAY,IAAI;AAEtE,gBAAM,IAAI,QAAA,aACR,aAAa,KAAK,iCAAiC,QAAQ,EAAE;;AAIjE,eAAO,KAAK,IAAI,QAAQ,KAAK,cAAc;MAC7C;;;;;MAMA,IAAI,QAAK;AACP,eAAO,KAAK;MACd;MAEQ,+BAA4B;AAClC,eAAO,QAAQ,uBAAuB,KAAK;MAC7C;MAEQ,+BAA4B;AAClC,gBAAS,QAAQ,sBAAsB,KAAM,KAAK,UAAU;MAC9D;;AAnFF,YAAA,mBAAA;;;;;;;;;;;ACRA,QAAA,oBAAA,2BACA,qBAAA,4BACA,UAAA,kBAEM,YAAY,KACZ,YAAY,IACZ,oBAAoB,MAAM,KAAK,EAAE,QAAQ,GAAE,GAAI,CAAC,GAAG,MACnD,IAAI,KACC,IAAI,mBAAA,iBAAiB,IAAI,EAAE,IAE7B,IAAI,kBAAA,gBAAgB,IAAI,EAAE,CAClC;AASD,aAAgB,WAAW,OAAa;AACtC,UAAI,QAAQ,aAAa,QAAQ;AAC/B,cAAM,IAAI,QAAA,aACR,qBAAqB,SAAS,UAAU,SAAS,UAAU,KAAK,EAAE;AAItE,aAAO,kBAAkB,QAAQ,EAAE;IACrC;AARA,YAAA,aAAA;;;;;;;;;;;ACnBA,QAAA,UAAA,kBAOA,eAAA,sBAIA,QAAA,eACA,yBAAA,gCAGA,YAAA,mBACA,eAAA,sBAEA,SAAA,gBAgBM,UAAN,MAAM,SAAO;MAIX,YACS,KACA,MAAY;AADZ,aAAA,MAAA,KACA,KAAA,OAAA;MACN;MANH,OAAO,QAAQ,IAAa,IAAW;AACrC,eAAO,IAAI,SAAQ,KAAK,IAAI,GAAG,KAAK,GAAG,GAAG,GAAG,KAAK,IAAI,GAAG,MAAM,GAAG,IAAI,CAAC;MACzE;OAOI,YAAY,IACZ,mBAAmB,KACnB,eAAe,GAER,mCAAb,MAAa,kCAAgC;MAC3C,YACS,YAAoB,WACnB,WAAW,kBACX,gBAAgB,IAChB,OAAO,GACP,SAAS,GACT,aAAa,GACb,OAAO,OAAO,mBACd,OAAO,OAAO,mBACd,YAAY,IAAI,UAAA,QAAO,GACvB,YAAY,IAAI,UAAA,QAAO,GACvB,eAAoB,aAAA,YAAW,SAAS,GAAC;AAV1C,aAAA,YAAA,WACC,KAAA,WAAA,UACA,KAAA,gBAAA,eACA,KAAA,OAAA,MACA,KAAA,SAAA,QACA,KAAA,aAAA,YACA,KAAA,OAAA,MACA,KAAA,OAAA,MACA,KAAA,YAAA,WACA,KAAA,YAAA,WACA,KAAA,WAAA,UAEJ,KAAK,WAAW,iBAClB,MAAA,KAAK,KAAK,yCAAyC,KAAK,QAAQ,sDACnB,YAAY,EAAE,GAC3D,KAAK,WAAW;MAEpB;;;;;MAMA,OAAO,OAAa;AAClB,aAAK,kBAAkB,OAAO,CAAC;MACjC;;;;;MAMA,aAAa,WAAiB;AAC5B,aAAK,YAAY;MACnB;;;;;MAMA,eAAY;AACV,eAAO;UACL,WAAW,KAAK;UAChB,KAAK,KAAK;UACV,KAAK,KAAK;UACV,KAAK,KAAK;UACV,UAAU;YACR,QAAQ,KAAK,SAAS;YACtB,cAAc,KAAK,SAAS,OAAM;;UAEpC,UAAU;YACR,QAAQ,KAAK,SAAS;YACtB,cAAc,KAAK,SAAS,OAAM;;UAEpC,OAAO,KAAK;UACZ,OAAO,KAAK;UACZ,WAAW,KAAK;;MAEpB;;;;MAKA,IAAI,MAAG;AACL,eAAO,KAAK;MACd;;;;MAKA,IAAI,MAAG;AACL,eAAO,KAAK;MACd;;;;MAKA,IAAI,MAAG;AACL,eAAO,KAAK;MACd;;;;MAKA,IAAI,QAAK;AACP,eAAO,KAAK;MACd;;;;MAKA,IAAI,YAAS;AACX,eAAO,KAAK;MACd;;;;MAKA,IAAI,QAAK;AACP,eAAI,KAAK,WAAW,KAAK,aAEhB,IAEF,KAAK,SAAS;MACvB;;;;;MAMA,IAAI,WAAQ;AACV,eAAO,KAAK;MACd;;;;;MAMA,IAAI,WAAQ;AACV,eAAO,KAAK;MACd;;;;;;;MAQA,kBAAkB,OAAe,WAAiB;AAUhD,YATI,QAAQ,KAAK,SACf,KAAK,OAAO,QAEV,QAAQ,KAAK,SACf,KAAK,OAAO,QAGd,KAAK,UAAU,WAEX,UAAU,GAAG;AACf,eAAK,cAAc;AACnB;;AAGF,aAAK,QAAQ,QAAQ,WAEjB,QAAQ,IACV,KAAK,eAAe,KAAK,WAAW,OAAO,SAAS,IAEpD,KAAK,eAAe,KAAK,WAAW,CAAC,OAAO,SAAS;MAEzD;;;;;MAMA,MAAM,UAA0C;AAC9C,QAAI,KAAK,WAAW,KAClB,KAAK,OAAO,SAAS,KACrB,KAAK,OAAO,SAAS,OACZ,SAAS,UAAU,MACxB,SAAS,MAAM,KAAK,QACtB,KAAK,OAAO,SAAS,MAEnB,SAAS,MAAM,KAAK,QACtB,KAAK,OAAO,SAAS,OAIzB,KAAK,YAAY,SAAS,WAC1B,KAAK,QAAQ,SAAS,KACtB,KAAK,UAAU,SAAS,OACxB,KAAK,cAAc,SAAS;AAE5B,YAAM,WAAW,KAAK,UAAU,QAAQ;AAExC,aAAK,WAAW,KAAK,QAAQ,QAAQ,GAErC,KAAK,cAAc,KAAK,UAAU,UAAU,SAAS,UAAU,QAAQ,GACvE,KAAK,cAAc,KAAK,UAAU,UAAU,SAAS,UAAU,QAAQ;MACzE;;;;;MAMA,KAAK,OAAuC;AAC1C,aAAK,OAAO,OACZ,KAAK,OAAO,QACZ,KAAK,QAAQ,MAAM,KACnB,KAAK,UAAU,MAAM,OACrB,KAAK,cAAc,MAAM;AAEzB,YAAM,WAAW,KAAK,UAAU,KAAK;AAErC,aAAK,WAAW,KAAK,QAAQ,QAAQ,GAErC,KAAK,aAAa,KAAK,UAAU,OAAO,MAAM,UAAU,QAAQ,GAChE,KAAK,aAAa,KAAK,UAAU,OAAO,MAAM,UAAU,QAAQ;MAClE;;;;;MAMA,QAAK;AACH,eAAO,IAAI,kCACT,KAAK,WACL,KAAK,UACL,KAAK,eACL,KAAK,MACL,KAAK,QACL,KAAK,YACL,KAAK,MACL,KAAK,MACL,KAAK,SAAS,MAAK,GACnB,KAAK,SAAS,MAAK,GACnB,KAAK,QAAQ;MAEjB;;;;;;MAOQ,eAAe,SAAkB,OAAe,WAAiB;AACvE,YAAI,QAAQ,KAAK,SAAS,WAAW,KAAK,GAGtC,kBAAkB,IAClB,OAAO,GACP,MAAM;AAuBV,YArBI,QAAQ,WAAW,KACrB,QAAQ,aAAa,OACrB,QAAQ,WAAW,QAAQ,YAC3B,QAAQ,YAAY,QAAQ,cAE5B,QAAQ,QAAQ,cAChB,QAAQ,WAAW,SAAS,KAAK,YAEjC,kBAAkB,IAClB,MAAM,OACN,OAAO,QAAQ,YAEf,QAAQ,QAAQ,YAChB,QAAQ,QAAQ,cAAc,KAAK,aAEnC,kBAAkB,IAClB,MAAM,QAAQ,YACd,OAAO,QAIL,iBAAiB;AACnB,cAAM,SAAS,KAAK,aAAa,MAAM,GAAG;AAC1C,eAAK,WAAW,MAAM,GACtB,QAAQ,KAAK,SAAS,WAAW,KAAK;;AAGxC,aAAK,kBAAkB,SAAS,OAAO,SAAS;MAClD;;;;;;;MAQQ,kBACN,SACA,OACA,WAAiB;AAEjB,YAAI,cAAc;AAEhB;AAGF,YAAI,QAAQ,QAAQ,YAAY;AAC9B,cAAM,OAAO,QAAQ,WAAW;AAChC,UAAI,QAAQ,QAAQ,QAAQ,UAC1B,KAAK,MAAM,SAAS,OAAO,CAAC,GAE9B,QAAQ,aAAa;mBACZ,QAAQ,QAAQ,UAAU;AACnC,cAAM,OAAO,QAAQ,QAAQ;AAC7B,UAAI,QAAQ,QAAQ,QAAQ,UAC1B,KAAK,MAAM,SAAS,OAAO,CAAC,GAE9B,QAAQ,WAAW;;AAGrB,YAAI,cAAc,QAAQ,QAAQ;AAClC,QAAI,cAAc,MAChB,eAAe,QAAQ,QAAQ,SAEjC,QAAQ,gBAAgB,aAAa,SAAS;MAChD;;;;;;MAOQ,MAAM,SAAkB,QAAc;AAC5C,YAAM,OAAO,QAAQ,QAAQ,QACvB,OAAO,QAAQ,YAAY,QAAQ,YACnC,mBAAmB,OAAO,MAC5B,cAAU,OAAA,mBAAkB,MAAM;AACtC,QAAI,UAAU,KAAK,aACjB,UAAU,KAAK;AAEjB,YAAM,mBAAmB,UAAU;AACnC,gBAAQ,QAAQ,OAAO,SAAS,kBAAkB,gBAAgB;MACpE;;;;;MAMQ,aAAa,MAAc,KAAW;AAC5C,YAAI,SAAS;AACb,eAAO,OAAO,OAAO,KAAK;AACxB,mBAAS,GACT,QAAQ,GACR;AAEF,eAAO;MACT;;;;MAKQ,WAAW,QAAc;AAC/B,YAAI,WAAW;AACb;AAEF,YAAI,SAAS;AAGX,gBAAM,IAAI,MAAM,+BAA+B,KAAK,KAAK,EAAE;AAE7D,YAAM,WAAW,KAAK,SAAS,QAAQ;AAEvC,aAAK,UAAU,UAAU,MAAM,GAC/B,KAAK,UAAU,UAAU,MAAM,GAE/B,KAAK,eAAW,aAAA,YAAW,QAAQ;MACrC;;;;MAKQ,UAAU,OAAuC;AACvD,YAAM,WAAW,KAAK,IAAI,KAAK,OAAO,MAAM,KAAK,GAE3C,aAAa,QAAQ,QACzB,KAAK,gBAAgB,KAAK,UAAU,KAAK,OAAO,QAAQ,GACxD,KAAK,gBAAgB,MAAM,UAAU,MAAM,OAAO,QAAQ,CAAC,GAGvD,aAAa,QAAQ,QACzB,KAAK,gBAAgB,KAAK,UAAU,KAAK,OAAO,QAAQ,GACxD,KAAK,gBAAgB,MAAM,UAAU,MAAM,OAAO,QAAQ,CAAC;AAG7D,eAAO,KAAK,IACV,WAAW,KAAK,aAAa,WAAW,MAAM,WAAW,GAAG,GAC5D,WAAW,KAAK,aAAa,WAAW,MAAM,WAAW,GAAG,CAAC;MAEjE;;;;MAKQ,gBACN,SACA,cACA,UAAgB;AAEhB,YAAI,QAAQ,WAAW;AACrB,iBAAO,IAAI,QAAQ,GAAG,EAAE;AAE1B,YAAM,QAAQ,eAAe;AAC7B,eAAO,IAAI,QAAQ,QAAQ,cAAc,OAAO,QAAQ,YAAY,KAAK;MAC3E;;;;;MAMQ,cACN,MACA,OACA,QACA,OAAa;AAEb,YAAM,cAAc,OAAO,QACrB,cAAc,MAAM,QAAQ;AAElC,iBAAS,IAAI,GAAG,IAAI,OAAO,QAAQ;AACjC,eAAK,kBACH,MACC,cAAc,KAAM,aACrB,OAAO,GAAG,CAAC,CAAC;MAGlB;;;;;MAMQ,aACN,MACA,OACA,QACA,OAAa;AAEb,YAAM,cAAc,OAAO,QACrB,cAAc,MAAM,QAAQ;AAElC,iBAAS,IAAI,GAAG,IAAI,OAAO,QAAQ,KAAK;AAEtC,cAAI,eADc,cAAc,KAAM,eACT,KAAK;AAClC,UAAI,cAAc,MAChB,eAAe,KAAK,QAAQ,SAE9B,KAAK,gBAAgB,aAAa,OAAO,GAAG,CAAC,CAAC;;AAGhD,aAAK,KAAI;MACX;;AAnbF,YAAA,mCAAA;AAybA,QAAa,iCAAb,MAA2C;;;;;;;MAYzC,YACW,UACQ,eAAsB;AAD9B,aAAA,WAAA,UACQ,KAAA,gBAAA,eAXZ,KAAA,OACL,QAAA,eAAe;MAWd;MAEH,mBAAmB,WAAiB;AAClC,eAAO,IAAI,iCACT,WACA,KAAK,UACL,KAAK,aAAa;MAEtB;;;;MAKA,MACE,UACA,OAAuC;AAEvC,YAAM,SAAS,MAAM,MAAK;AAC1B,sBAAO,MAAM,QAAQ,GAEd;MACT;;;;MAKA,KACE,UACA,SAAyC;AAEzC,YAAM,SAAS,QAAQ,MAAK;AAC5B,sBAAO,KAAK,QAAQ,GAEb;MACT;MAEA,aACE,YACA,wBACA,0BACA,SAAe;AAEf,eAAO;UACL;UACA;UACA,eAAe,aAAA,cAAc;UAC7B,YAAY,yBAAyB,IAAI,CAAC,CAAC,YAAY,YAAY,MAAK;AACtE,gBAAM,aAAa,aAAa,aAAY,GAGtC,uBACJ,WAAW,SAAS,uBAAA,eAAe,mBACnC,WAAW,SAAS,uBAAA,eAAe,oBACnC,WAAW,SAAS,uBAAA,eAAe;AAErC,mBAAO;cACL;cACA,WAAW,aAAa;cACxB;cACA,OAAO;gBACL,KAAK,WAAW,YAAY,WAAW,MAAM;gBAC7C,KAAK,WAAW,YAAY,WAAW,MAAM;gBAC7C,KAAM,uBAAwC,SAAjB,WAAW;gBACxC,UAAU;kBACR,QAAQ,WAAW,SAAS;kBAC5B,cAAc,WAAW,SAAS;;gBAEpC,UAAU;kBACR,QAAQ,WAAW,SAAS;kBAC5B,cAAc,WAAW,SAAS;;gBAEpC,OAAO,WAAW;gBAClB,OAAO,WAAW;gBAClB,WAAW,WAAW;;;UAG5B,CAAC;;MAEL;;AA7FF,YAAA,iCAAA;;;;;;;;;;;ACzeA,QAAA,QAAA,eAEM,2BAAuB,MAAA,kBAC3B,gDAAgD;AAGlD,aAAgB,gBAAgB,SAAgB;AAC9C,aAAO,QAAQ,SAAS,sBAAsB,EAAI;IACpD;AAFA,YAAA,kBAAA;AAIA,aAAgB,kBAAkB,SAAgB;AAChD,aAAO,QAAQ,YAAY,oBAAoB;IACjD;AAFA,YAAA,oBAAA;AAIA,aAAgB,oBAAoB,SAAgB;AAClD,aAAO,QAAQ,SAAS,oBAAoB,MAAM;IACpD;AAFA,YAAA,sBAAA;;;;;;;;;;;ACda,YAAA,6BAA6B;AAC7B,YAAA,+BAA+B;AAC/B,YAAA,0BAA0B;AAG1B,YAAA,iBAAiB;AAEjB,YAAA,+BAA+B;AAE/B,YAAA,mCAAmC;AAEnC,YAAA,2BAA2B;;;;;;;;;;;ACZxC,QAAA,QAAA,eAKA,cAAA;AAaA,aAAgB,kBAAkB,UAAkB;AAClD,aAAO,SAAS,OAAO,CAAC,QAAgB,YAAmB;AACzD,YAAM,QAAQ,GAAG,MAAM,GACrB,WAAW,KAAK,YAAA,0BAA0B,EAC5C,GAAG,OAAO;AACV,eAAO,MAAM,SAAS,YAAA,2BAA2B,SAAS;MAC5D,GAAG,EAAE;IACP;AAPA,YAAA,oBAAA;AASA,aAAgB,YAAY,SAAgB;AAC1C,aAAO,QAAQ,cAAa,EAAG,IAAI,CAAC,CAAC,KAAK,KAAK,MAAK;AAClD,YAAI,QAAQ,GAAG,mBAAmB,GAAG,CAAC,IAAI,mBAAmB,MAAM,KAAK,CAAC;AAIzE,eAAI,MAAM,aAAa,WACrB,SAAS,YAAA,+BAA+B,MAAM,SAAS,SAAQ,IAG1D;MACT,CAAC;IACH;AAZA,YAAA,cAAA;AAcA,aAAgB,kBACd,OAAa;AAEb,UAAM,aAAa,MAAM,MAAM,YAAA,4BAA4B;AAC3D,UAAI,WAAW,UAAU;AAAG;AAC5B,UAAM,cAAc,WAAW,MAAK;AACpC,UAAI,CAAC;AAAa;AAClB,UAAM,iBAAiB,YAAY,QAAQ,YAAA,0BAA0B;AACrE,UAAI,kBAAkB;AAAG;AACzB,UAAM,MAAM,mBACV,YAAY,UAAU,GAAG,cAAc,EAAE,KAAI,CAAE,GAE3C,QAAQ,mBACZ,YAAY,UAAU,iBAAiB,CAAC,EAAE,KAAI,CAAE,GAE9C;AACJ,aAAI,WAAW,SAAS,MACtB,eAAW,MAAA,gCACT,WAAW,KAAK,YAAA,4BAA4B,CAAC,IAG1C,EAAE,KAAK,OAAO,SAAQ;IAC/B;AAtBA,YAAA,oBAAA;AA4BA,aAAgB,wBACd,OAAc;AAEd,aAAI,OAAO,SAAU,YAAY,MAAM,WAAW,IAAU,CAAA,IACrD,MACJ,MAAM,YAAA,uBAAuB,EAC7B,IAAI,WACI,kBAAkB,KAAK,CAC/B,EACA,OAAO,aAAW,YAAY,UAAa,QAAQ,MAAM,SAAS,CAAC,EACnE,OAA+B,CAAC,SAAS,aAExC,QAAQ,QAAS,GAAG,IAAI,QAAS,OAC1B,UACN,CAAA,CAAE;IACT;AAfA,YAAA,0BAAA;;;;;;;;;;;ACpEA,QAAA,QAAA,eASA,qBAAA,4BACA,cAAA,qBAMA,UAAA,kBAQa,uBAAb,MAAiC;MAC/B,OAAO,SAAkB,SAAkB,QAAqB;AAC9D,YAAM,UAAU,MAAA,YAAY,WAAW,OAAO;AAC9C,YAAI,CAAC,eAAW,mBAAA,qBAAoB,OAAO;AAAG;AAC9C,YAAM,eAAW,QAAA,aAAY,OAAO,EACjC,OAAO,CAAC,SACA,KAAK,UAAU,YAAA,gCACvB,EACA,MAAM,GAAG,YAAA,4BAA4B,GAClC,kBAAc,QAAA,mBAAkB,QAAQ;AAC9C,QAAI,YAAY,SAAS,KACvB,OAAO,IAAI,SAAS,YAAA,gBAAgB,WAAW;MAEnD;MAEA,QAAQ,SAAkB,SAAkB,QAAqB;AAC/D,YAAM,cAAc,OAAO,IAAI,SAAS,YAAA,cAAc,GAChD,gBAAgB,MAAM,QAAQ,WAAW,IAC3C,YAAY,KAAK,YAAA,uBAAuB,IACxC;AACJ,YAAI,CAAC;AAAe,iBAAO;AAC3B,YAAM,UAAwC,CAAA;AAe9C,eAdI,cAAc,WAAW,MAGf,cAAc,MAAM,YAAA,uBAAuB,EACnD,QAAQ,WAAQ;AACpB,cAAM,cAAU,QAAA,mBAAkB,KAAK;AACvC,cAAI,SAAS;AACX,gBAAM,eAA6B,EAAE,OAAO,QAAQ,MAAK;AACzD,YAAI,QAAQ,aACV,aAAa,WAAW,QAAQ,WAElC,QAAQ,QAAQ,GAAG,IAAI;;QAE3B,CAAC,GACG,OAAO,QAAQ,OAAO,EAAE,WAAW,KAC9B,UAEF,MAAA,YAAY,WAAW,SAAS,MAAA,YAAY,cAAc,OAAO,CAAC;MAC3E;MAEA,SAAM;AACJ,eAAO,CAAC,YAAA,cAAc;MACxB;;AA5CF,YAAA,uBAAA;;;;;;;;;;;ACAA,QAAa,gBAAb,MAA0B;;;;;;;MAWxB,YAAmB,aAAoB,gBAAqB;AAC1D,aAAK,kBAAkB,gBACvB,KAAK,eAAe,YAAY,IAAG,GACnC,KAAK,qBAAqB,eAAe,IAAG;MAC9C;;;;;MAMO,MAAG;AACR,YAAM,QAAQ,KAAK,gBAAgB,IAAG,IAAK,KAAK;AAChD,eAAO,KAAK,eAAe;MAC7B;;AAxBF,YAAA,gBAAA;;;;;;;;;;;ACxBA,QAAA,QAAA;AAEA,aAAgB,mBAAmB,YAAmB;AACpD,UAAM,MAAsB,CAAA;AAE5B,UAAI,OAAO,cAAe,YAAY,cAAc;AAClD,eAAO;AAGT,eAAW,CAAC,KAAK,GAAG,KAAK,OAAO,QAAQ,UAAU,GAAG;AACnD,YAAI,CAAC,eAAe,GAAG,GAAG;AACxB,gBAAA,KAAK,KAAK,0BAA0B,GAAG,EAAE;AACzC;;AAEF,YAAI,CAAC,iBAAiB,GAAG,GAAG;AAC1B,gBAAA,KAAK,KAAK,wCAAwC,GAAG,EAAE;AACvD;;AAEF,QAAI,MAAM,QAAQ,GAAG,IACnB,IAAI,GAAG,IAAI,IAAI,MAAK,IAEpB,IAAI,GAAG,IAAI;;AAIf,aAAO;IACT;AAxBA,YAAA,qBAAA;AA0BA,aAAgB,eAAe,KAAY;AACzC,aAAO,OAAO,OAAQ,YAAY,IAAI,SAAS;IACjD;AAFA,YAAA,iBAAA;AAIA,aAAgB,iBAAiB,KAAY;AAC3C,aAAI,OAAO,OACF,KAGL,MAAM,QAAQ,GAAG,IACZ,iCAAiC,GAAG,IAGtC,+BAA+B,GAAG;IAC3C;AAVA,YAAA,mBAAA;AAYA,aAAS,iCAAiC,KAAc;AACtD,UAAI;AAEJ,eAAW,WAAW;AAEpB,YAAI,WAAW,MAEf;cAAI,CAAC,MAAM;AACT,gBAAI,+BAA+B,OAAO,GAAG;AAC3C,qBAAO,OAAO;AACd;;AAGF,mBAAO;;AAGT,cAAI,OAAO,YAAY;AAIvB,mBAAO;;AAGT,aAAO;IACT;AAEA,aAAS,+BAA+B,KAAY;AAClD,cAAQ,OAAO,KAAK;QAClB,KAAK;QACL,KAAK;QACL,KAAK;AACH,iBAAO;;AAGX,aAAO;IACT;;;;;;;;;;;AC/EA,QAAA,QAAA;AAOA,aAAgB,sBAAmB;AACjC,aAAO,CAAC,OAAiB;AACvB,cAAA,KAAK,MAAM,mBAAmB,EAAE,CAAC;MACnC;IACF;AAJA,YAAA,sBAAA;AAUA,aAAS,mBAAmB,IAAsB;AAChD,aAAI,OAAO,MAAO,WACT,KAEA,KAAK,UAAU,iBAAiB,EAAE,CAAC;IAE9C;AAOA,aAAS,iBAAiB,IAAa;AACrC,UAAM,SAAS,CAAA,GACX,UAAU;AAEd,aAAO,YAAY;AACjB,eAAO,oBAAoB,OAAO,EAAE,QAAQ,kBAAe;AACzD,cAAI,OAAO,YAAY;AAAG;AAC1B,cAAM,QAAQ,QAAQ,YAAoC;AAC1D,UAAI,UACF,OAAO,YAAY,IAAI,OAAO,KAAK;QAEvC,CAAC,GACD,UAAU,OAAO,eAAe,OAAO;AAGzC,aAAO;IACT;;;;;;;;;;;AC7CA,QAAA,0BAAA,iCAII,sBAAkB,wBAAA,qBAAmB;AAMzC,aAAgB,sBAAsB,SAAqB;AACzD,wBAAkB;IACpB;AAFA,YAAA,wBAAA;AAQA,aAAgB,mBAAmB,IAAa;AAC9C,UAAI;AACF,wBAAgB,EAAE;cACZ;MAAA;IACV;AAJA,YAAA,qBAAA;;;;;;;;;;;ACnBA,QAAY;AAAZ,KAAA,SAAYC,sBAAmB;AAC7B,MAAAA,qBAAA,YAAA,cACAA,qBAAA,WAAA,aACAA,qBAAA,uBAAA,0BACAA,qBAAA,sBAAA,yBACAA,qBAAA,0BAAA,4BACAA,qBAAA,eAAA;IACF,GAPY,sBAAA,QAAA,wBAAA,QAAA,sBAAmB,CAAA,EAAA;;;;;;;;;;;ACYlB,YAAA,cACX,OAAO,cAAe,WAClB,aACA,OAAO,QAAS,WAChB,OACA,OAAO,UAAW,WAClB,SACA,OAAO,UAAW,WAClB,SACC,CAAA;;;;;;;;;;;ACrBP,QAAA,QAAA,eACA,aAAA,oBACA,eAAA,uBAEM,yBAAyB,KAMzB,2BAA2B,CAAC,mBAAmB;AAMrD,aAAS,iBAAiB,KAAY;AACpC,aACE,yBAAyB,QAAQ,GAAiC,IAAI;IAE1E;AAEA,QAAM,2BAA2B;MAC/B;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;;AAOF,aAAS,gBAAgB,KAAY;AACnC,aACE,yBAAyB,QAAQ,GAAgC,IAAI;IAEzE;AAEA,QAAM,yBAAyB;MAC7B;MACA;;AAOF,aAAS,cAAc,KAAY;AACjC,aAAO,uBAAuB,QAAQ,GAA8B,IAAI;IAC1E;AA8Da,YAAA,uCAAuC;AAEvC,YAAA,gCAAgC;AAEhC,YAAA,+CAA+C;AAC/C,YAAA,8CAA8C;AAK9C,YAAA,sBAA6C;MACxD,mBAAmB;MACnB,gBAAgB;MAChB,+BAA+B;MAC/B,4BAA4B;MAC5B,UAAU;MACV,yBAAyB;MACzB,WAAW;MACX,yBAAyB;MACzB,gCAAgC;MAChC,yBAAyB;MACzB,yBAAyB;MACzB,0BAA0B;MAC1B,iCAAiC;MACjC,0BAA0B;MAC1B,0BAA0B;MAC1B,iCAAiC;MACjC,iCAAiC;MACjC,+BAA+B;MAC/B,+BAA+B;MAC/B,2BAA2B;MAC3B,6BAA6B;MAC7B,oCAAoC;MACpC,qCAAqC;MACrC,kCAAkC;MAClC,4BAA4B;MAC5B,mCAAmC;MACnC,oCAAoC;MACpC,iCAAiC;MACjC,4BAA4B;MAC5B,mCAAmC;MACnC,oCAAoC;MACpC,iCAAiC;MACjC,+BAA+B;MAC/B,gBAAgB,MAAA,aAAa;MAC7B,uBAAuB,CAAA;MACvB,kBAAkB,CAAC,gBAAgB,SAAS;MAC5C,0BAA0B;MAC1B,mBAAmB;MACnB,mCAAmC,QAAA;MACnC,4BAA4B,QAAA;MAC5B,wCAAwC,QAAA;MACxC,iCAAiC,QAAA;MACjC,6CACE,QAAA;MACF,sCAAsC,QAAA;MACtC,6BAA6B;MAC7B,4BAA4B;MAC5B,2CACE,QAAA;MACF,0CACE,QAAA;MACF,sBAAsB;MACtB,qBAAqB,WAAA,oBAAoB;MACzC,yBAAyB;MACzB,oBAAoB;MACpB,6BAA6B;MAC7B,oCAAoC;MACpC,qCAAqC;MACrC,kCAAkC;MAClC,gCAAgC;MAChC,uCAAuC;MACvC,wCAAwC;MACxC,qCAAqC;MACrC,gCAAgC;MAChC,uCAAuC;MACvC,wCAAwC;MACxC,qCAAqC;MACrC,+BAA+B;MAC/B,sCAAsC;MACtC,uCAAuC;MACvC,oCAAoC;MACpC,uCAAuC;MACvC,8CAA8C;MAC9C,+CAA+C;MAC/C,4CAA4C;MAC5C,6BAA6B;MAC7B,oCAAoC;MACpC,qCAAqC;MACrC,kCAAkC;MAClC,mDAAmD;;AAQrD,aAAS,aACP,KACA,aACA,QAAuB;AAEvB,UAAI,OAAO,OAAO,GAAG,IAAM;AACzB;AAGF,UAAM,QAAQ,OAAO,OAAO,GAAG,CAAC;AAEhC,kBAAY,GAAG,IAAI,MAAM,YAAW,MAAO;IAC7C;AAUA,aAAS,YACP,MACA,aACA,QACA,MAAM,QACN,MAAM,OAAQ;AAEd,UAAI,OAAO,OAAO,IAAI,IAAM,KAAa;AACvC,YAAM,QAAQ,OAAO,OAAO,IAAI,CAAW;AAC3C,QAAK,MAAM,KAAK,MACV,QAAQ,MACV,YAAY,IAAI,IAAI,MACX,QAAQ,MACjB,YAAY,IAAI,IAAI,MAEpB,YAAY,IAAI,IAAI;;IAI5B;AASA,aAAS,gBACP,MACA,QACA,OACA,YAAY,wBAAsB;AAElC,UAAM,aAAa,MAAM,IAAI;AAC7B,MAAI,OAAO,cAAe,aACxB,OAAO,IAAI,IAAI,WAAW,MAAM,SAAS,EAAE,IAAI,OAAK,EAAE,KAAI,CAAE;IAEhE;AAGA,QAAM,cAA+C;MACnD,KAAK,MAAA,aAAa;MAClB,SAAS,MAAA,aAAa;MACtB,OAAO,MAAA,aAAa;MACpB,MAAM,MAAA,aAAa;MACnB,MAAM,MAAA,aAAa;MACnB,OAAO,MAAA,aAAa;MACpB,MAAM,MAAA,aAAa;;AASrB,aAAS,mBACP,KACA,aACA,QAAuB;AAEvB,UAAM,QAAQ,OAAO,GAAG;AACxB,UAAI,OAAO,SAAU,UAAU;AAC7B,YAAM,WAAW,YAAY,MAAM,YAAW,CAAE;AAChD,QAAI,YAAY,SACd,YAAY,GAAG,IAAI;;IAGzB;AAMA,aAAgB,iBAAiB,QAAuB;AACtD,UAAM,cAA2B,CAAA;AAEjC,eAAW,OAAO,QAAA,qBAAqB;AACrC,YAAM,MAAM;AAEZ,gBAAQ,KAAK;UACX,KAAK;AACH,+BAAmB,KAAK,aAAa,MAAM;AAC3C;UAEF;AACE,gBAAI,iBAAiB,GAAG;AACtB,2BAAa,KAAK,aAAa,MAAM;qBAC5B,gBAAgB,GAAG;AAC5B,0BAAY,KAAK,aAAa,MAAM;qBAC3B,cAAc,GAAG;AAC1B,8BAAgB,KAAK,aAAa,MAAM;iBACnC;AACL,kBAAM,QAAQ,OAAO,GAAG;AACxB,cAAI,OAAO,QAAU,OAAe,UAAU,SAC5C,YAAY,GAAG,IAAI,OAAO,KAAK;;;;AAMzC,aAAO;IACT;AA5BA,YAAA,mBAAA;AAkCA,aAAgB,wBAAqB;AACnC,aAAO,OAAO,UAAY,OAAe,WAAW,QAAQ,MACxD,iBAAiB,QAAQ,GAAsB,IAC/C,iBAAiB,aAAA,WAAkD;IACzE;AAJA,YAAA,wBAAA;;;;;;;;;;;ACxWA,QAAA,KAAA,UAAA,IAAA,GACA,gBAAA;AAUA,aAAgB,SAAM;AACpB,UAAM,iBAAa,cAAA,kBAAiB,QAAQ,GAAsB;AAClE,aAAO,OAAO,OACZ;QACE,UAAU,GAAG,SAAQ;SAEvB,cAAA,qBACA,UAAU;IAEd;AATA,YAAA,SAAA;;;;;;;;;;;ACTa,YAAA,cAAc,OAAO,cAAe,WAAW,aAAa;;;;;;;;;;;ACHzE,aAAS,SAAS,UAAgB;AAEhC,aAAI,YAAY,MAAM,YAAY,KACzB,WAAW,KAIhB,YAAY,MAAM,YAAY,MACzB,WAAW,KAIb,WAAW;IACpB;AAEA,QAAM,OAAO,OAAO,MAAM,CAAC,GACrB,QAAQ,OAAO,MAAM,EAAE;AAE7B,aAAgB,YAAY,QAAc;AACxC,UAAI;AACJ,MAAI,OAAO,WAAW,KACpB,MAAM,OACG,OAAO,WAAW,KAC3B,MAAM,QAEN,MAAM,OAAO,MAAM,OAAO,SAAS,CAAC;AAEtC,UAAI,SAAS;AAEb,eAAS,IAAI,GAAG,IAAI,OAAO,QAAQ,KAAK,GAAG;AACzC,YAAM,KAAK,SAAS,OAAO,WAAW,CAAC,CAAC,GAClC,KAAK,SAAS,OAAO,WAAW,IAAI,CAAC,CAAC;AAC5C,YAAI,WAAY,MAAM,IAAK,IAAI,QAAQ;;AAGzC,aAAO,IAAI,SAAS,QAAQ;IAC9B;AAlBA,YAAA,cAAA;;;;;;;;;;;AChBA,QAAM,gBAAgB,GAChB,iBAAiB,IAKV,oBAAb,MAA8B;MAA9B,cAAA;AAKE,aAAA,kBAAkB,eAAe,cAAc,GAM/C,KAAA,iBAAiB,eAAe,aAAa;MAC/C;;AAZA,YAAA,oBAAA;AAcA,QAAM,gBAAgB,OAAO,YAAY,cAAc;AACvD,aAAS,eAAe,OAAa;AACnC,aAAO,WAAmB;AACxB,iBAAS,IAAI,GAAG,IAAI,QAAQ,GAAG;AAG7B,wBAAc,cAAe,KAAK,OAAM,IAAK,KAAK,OAAQ,GAAG,IAAI,CAAC;AAIpE,iBAAS,IAAI,GAAG,IAAI,SACd,gBAAc,CAAC,IAAI,IADE;AAGlB,UAAI,MAAM,QAAQ,MACvB,cAAc,QAAQ,CAAC,IAAI;AAI/B,eAAO,cAAc,SAAS,OAAO,GAAG,KAAK;MAC/C;IACF;;;;;;;;;;;ACzCA,QAAA,eAAA,UAAA,YAAA;AAEa,YAAA,gBAAgB,aAAA;;;;;;;;;;;ACDhB,YAAA,UAAU;;;;;;;;;;;ACAV,YAAA,qBAAqB;;;;;;MAMhC,wBAAwB;;;;MAKxB,WAAW;;;;MAKX,sBAAsB;;;;MAKtB,SAAS;;;;MAKT,0BAA0B;;;;;;MAO1B,SAAS;;;;;;MAOT,cAAc;;;;;;MAOd,cAAc;;;;;;MAOd,wBAAwB;;;;MAKxB,uBAAuB;;;;MAKvB,wBAAwB;;;;MAKxB,gCAAgC;;;;;;MAOhC,oBAAoB;;;;MAKpB,0BAA0B;;;;MAK1B,0CACE;;;;MAKF,6BAA6B;;;;MAK7B,6BAA6B;;;;MAK7B,oBAAoB;;;;MAKpB,yBAAyB;;;;MAKzB,uBAAuB;;;;;;MAOvB,cAAc;;;;MAKd,gBAAgB;;;;MAKhB,mBAAmB;;;;MAKnB,sBAAsB;;;;;;;;;;;;;;;;;;;;;MAsBtB,mBAAmB;;;;MAKnB,cAAc;;;;MAKd,gBAAgB;;;;MAKhB,0BAA0B;;;;MAK1B,yBAAyB;;;;MAKzB,oBAAoB;;;;MAKpB,oBAAoB;;;;MAKpB,WAAW;;;;MAKX,WAAW;;;;MAKX,gBAAgB;;;;;;MAOhB,mBAAmB;;;;;;MAOnB,uBAAuB;;;;;;MAOvB,qBAAqB;;;;MAKrB,eAAe;;;;MAKf,aAAa;;;;MAKb,eAAe;;;;MAKf,eAAe;;;;MAKf,aAAa;;;;MAKb,eAAe;;;;MAKf,eAAe;;;;MAKf,0BAA0B;;;;MAK1B,6BAA6B;;;;MAK7B,uBAAuB;;;;MAKvB,sBAAsB;;;;MAKtB,sBAAsB;;;;MAKtB,sBAAsB;;;;MAKtB,cAAc;;;;MAKd,YAAY;;;;MAKZ,cAAc;;;;MAKd,eAAe;;;;MAKf,WAAW;;;;MAKX,aAAa;;;;MAKb,eAAe;;;;MAKf,gBAAgB;;;;MAKhB,eAAe;;;;MAKf,aAAa;;;;MAKb,aAAa;;;;;;MAOb,UAAU;;;;MAKV,aAAa;;;;;;MAOb,WAAW;;;;MAKX,aAAa;;;;MAKb,kBAAkB;;;;;;MAOlB,aAAa;;;;MAKb,iBAAiB;;;;MAKjB,6BAA6B;;;;MAK7B,0CACE;;;;MAKF,8BAA8B;;;;MAK9B,2CACE;;;;;;MAOF,kBAAkB;;;;MAKlB,YAAY;;;;;;;;;;;;;;;;MAiBZ,gBAAgB;;;;MAKhB,0BAA0B;;;;MAK1B,gCAAgC;;;;MAKhC,sCAAsC;;;;MAKtC,wCACE;;;;MAKF,yCACE;;;;MAKF,8BAA8B;;;;MAK9B,yBAAyB;;;;MAKzB,oBAAoB;;;;MAKpB,gCAAgC;;;;MAKhC,yBAAyB;;;;MAKzB,qBAAqB;;;;MAKrB,uCACE;;;;MAKF,sCAAsC;;;;MAKtC,oCAAoC;;;;MAKpC,0BAA0B;;;;MAK1B,2BAA2B;;;;MAK3B,sBAAsB;;;;MAKtB,6BAA6B;;;;MAK7B,oBAAoB;;;;MAKpB,4BAA4B;;;;MAK5B,oCAAoC;;;;MAKpC,6CACE;;;;MAKF,kBAAkB;;;;MAKlB,uBAAuB;;;;MAKvB,4BAA4B;;;;MAK5B,4BAA4B;;;;MAK5B,oBAAoB;;;;MAKpB,4BAA4B;;;;MAK5B,eAAe;;;;MAKf,sBAAsB;;;;MAKtB,2BAA2B;;;;MAK3B,sCAAsC;;;;MAKtC,iDACE;;;;MAKF,qBAAqB;;;;MAKrB,uBAAuB;;;;MAKvB,gCAAgC;;;;;;MAOhC,6BAA6B;;;;MAK7B,gCAAgC;;;;MAKhC,2BAA2B;;;;MAK3B,2BAA2B;;;;MAK3B,2BAA2B;;;;MAK3B,YAAY;;;;;;MAOZ,aAAa;;;;;;MAOb,YAAY;;;;MAKZ,sBAAsB;;;;MAKtB,qBAAqB;;;;MAKrB,wBAAwB;;;;MAKxB,wBAAwB;;;;MAKxB,2BAA2B;;;;MAK3B,cAAc;;;;;;MAOd,YAAY;;;;MAKZ,yBAAyB;;;;MAKzB,2BAA2B;;AAGhB,YAAA,iBAAiB;;MAE5B,WAAW;;MAEX,OAAO;;MAEP,OAAO;;MAEP,QAAQ;;MAER,KAAK;;MAEL,YAAY;;MAEZ,UAAU;;MAEV,MAAM;;MAEN,YAAY;;MAEZ,QAAQ;;MAER,UAAU;;MAEV,OAAO;;MAEP,QAAQ;;MAER,QAAQ;;MAER,UAAU;;MAEV,KAAK;;MAEL,OAAO;;MAEP,QAAQ;;MAER,UAAU;;MAEV,OAAO;;MAEP,WAAW;;MAEX,UAAU;;MAEV,WAAW;;MAEX,WAAW;;MAEX,SAAS;;MAET,SAAS;;MAET,WAAW;;MAEX,WAAW;;MAEX,QAAQ;;MAER,QAAQ;;MAER,UAAU;;MAEV,SAAS;;MAET,IAAI;;MAEJ,YAAY;;MAEZ,WAAW;;MAEX,OAAO;;MAEP,SAAS;;MAET,OAAO;;MAEP,WAAW;;MAEX,SAAS;;MAET,UAAU;;MAEV,UAAU;;MAEV,OAAO;;MAEP,OAAO;;MAEP,eAAe;;MAEf,WAAW;;MAEX,aAAa;;AAKF,YAAA,oCAAoC;;MAE/C,KAAK;;MAEL,aAAa;;MAEb,QAAQ;;MAER,cAAc;;MAEd,KAAK;;MAEL,KAAK;;MAEL,OAAO;;MAEP,WAAW;;MAEX,KAAK;;MAEL,QAAQ;;MAER,cAAc;;AAKH,YAAA,oBAAoB;;MAE/B,YAAY;;MAEZ,MAAM;;MAEN,QAAQ;;MAER,OAAO;;MAEP,OAAO;;AAKI,YAAA,8BAA8B;;MAEzC,QAAQ;;MAER,MAAM;;MAEN,QAAQ;;AAKG,YAAA,4BAA4B;;MAEvC,eAAe;;MAEf,KAAK;;MAEL,OAAO;;MAEP,KAAK;;AAKM,YAAA,qBAAqB;;MAEhC,QAAQ;;MAER,QAAQ;;MAER,IAAI;;MAEJ,MAAM;;MAEN,MAAM;;MAEN,QAAQ;;MAER,OAAO;;AAKI,YAAA,8BAA8B;;MAEzC,MAAM;;MAEN,OAAO;;MAEP,MAAM;;MAEN,aAAa;;MAEb,SAAS;;AAKE,YAAA,iCAAiC;;MAE5C,MAAM;;MAEN,MAAM;;MAEN,MAAM;;MAEN,MAAM;;MAEN,QAAQ;;MAER,QAAQ;;MAER,gBAAgB;;MAEhB,OAAO;;MAEP,OAAO;;MAEP,MAAM;;MAEN,MAAM;;MAEN,QAAQ;;MAER,KAAK;;MAEL,OAAO;;MAEP,OAAO;;MAEP,KAAK;;MAEL,UAAU;;MAEV,OAAO;;MAEP,IAAI;;MAEJ,OAAO;;MAEP,QAAQ;;AAKG,YAAA,mBAAmB;;MAE9B,UAAU;;MAEV,UAAU;;MAEV,UAAU;;MAEV,MAAM;;MAEN,MAAM;;AAKK,YAAA,iCAAiC;;MAE5C,OAAO;;MAEP,OAAO;;AAKI,YAAA,2BAA2B;;MAEtC,SAAS;;MAET,SAAS;;AAKE,YAAA,0BAA0B;;MAErC,IAAI;;MAEJ,WAAW;;MAEX,SAAS;;MAET,kBAAkB;;MAElB,mBAAmB;;MAEnB,WAAW;;MAEX,gBAAgB;;MAEhB,mBAAmB;;MAEnB,oBAAoB;;MAEpB,qBAAqB;;MAErB,SAAS;;MAET,cAAc;;MAEd,eAAe;;MAEf,UAAU;;MAEV,aAAa;;MAEb,WAAW;;MAEX,iBAAiB;;AAKN,YAAA,oBAAoB;;MAE/B,MAAM;;MAEN,UAAU;;;;;;;;;;;;;;;;;;;;;AC/gCZ,iBAAA,8BAAA,OAAA;;;;;;;;;;;ACEa,YAAA,6BAA6B;;;;MAIxC,gBAAgB;;;;MAKhB,kBAAkB;;;;MAKlB,cAAc;;;;;;MAOd,yBAAyB;;;;;;MAOzB,gBAAgB;;;;MAKhB,uBAAuB;;;;MAKvB,qBAAqB;;;;MAKrB,oBAAoB;;;;MAKpB,kBAAkB;;;;MAKlB,qBAAqB;;;;MAKrB,uBAAuB;;;;MAKvB,qBAAqB;;;;;;MAOrB,qBAAqB;;;;;;MAOrB,oBAAoB;;;;MAKpB,sBAAsB;;;;;;MAOtB,qBAAqB;;;;MAKrB,gBAAgB;;;;MAKhB,cAAc;;;;MAKd,mBAAmB;;;;MAKnB,sBAAsB;;;;MAKtB,qBAAqB;;;;MAKrB,wBAAwB;;;;;;MAOxB,WAAW;;;;;;MAOX,yBAAyB;;;;;;MAOzB,mBAAmB;;;;;;MAOnB,WAAW;;;;;;;;;;;;;;;;;;;MAoBX,SAAS;;;;;;;;;;;;;;MAeT,cAAc;;;;;;MAOd,eAAe;;;;;;MAOf,iBAAiB;;;;MAKjB,SAAS;;;;MAKT,WAAW;;;;MAKX,WAAW;;;;MAKX,WAAW;;;;MAKX,iBAAiB;;;;MAKjB,eAAe;;;;MAKf,oBAAoB;;;;MAKpB,kBAAkB;;;;MAKlB,eAAe;;;;MAKf,cAAc;;;;MAKd,oBAAoB;;;;MAKpB,aAAa;;;;MAKb,cAAc;;;;MAKd,oBAAoB;;;;MAKpB,oBAAoB;;;;MAKpB,qBAAqB;;;;MAKrB,oBAAoB;;;;MAKpB,qBAAqB;;;;MAKrB,qBAAqB;;;;MAKrB,sBAAsB;;;;MAKtB,mBAAmB;;;;MAKnB,oBAAoB;;;;MAKpB,aAAa;;;;MAKb,cAAc;;;;MAKd,iBAAiB;;;;MAKjB,kBAAkB;;;;MAKlB,SAAS;;;;MAKT,gBAAgB;;;;MAKhB,SAAS;;;;MAKT,YAAY;;;;MAKZ,aAAa;;;;MAKb,yBAAyB;;;;MAKzB,yBAAyB;;;;MAKzB,iBAAiB;;;;MAKjB,sBAAsB;;;;MAKtB,sBAAsB;;;;MAKtB,eAAe;;;;MAKf,sBAAsB;;;;MAKtB,yBAAyB;;;;MAKzB,6BAA6B;;;;;;MAO7B,cAAc;;;;;;MAOd,mBAAmB;;;;;;MAOnB,qBAAqB;;;;MAKrB,iBAAiB;;;;MAKjB,oBAAoB;;;;MAKpB,wBAAwB;;;;MAKxB,uBAAuB;;;;MAKvB,wBAAwB;;;;MAKxB,gBAAgB;;;;MAKhB,mBAAmB;;;;MAKnB,uBAAuB;;AAGZ,YAAA,sBAAsB;;MAEjC,eAAe;;MAEf,KAAK;;MAEL,OAAO;;MAEP,KAAK;;AAKM,YAAA,sBAAsB;;MAEjC,mBAAmB;;MAEnB,kBAAkB;;MAElB,SAAS;;MAET,SAAS;;MAET,SAAS;;MAET,YAAY;;MAEZ,uBAAuB;;MAEvB,UAAU;;MAEV,2BAA2B;;MAE3B,WAAW;;MAEX,iBAAiB;;MAEjB,mBAAmB;;MAEnB,oBAAoB;;MAEpB,eAAe;;MAEf,uBAAuB;;MAEvB,qBAAqB;;MAErB,gBAAgB;;AAKL,YAAA,yBAAyB;;MAEpC,KAAK;;MAEL,SAAS;;AAKE,YAAA,iBAAiB;;MAE5B,OAAO;;MAEP,OAAO;;MAEP,OAAO;;MAEP,MAAM;;MAEN,OAAO;;MAEP,OAAO;;MAEP,KAAK;;AAKM,YAAA,eAAe;;MAE1B,SAAS;;MAET,OAAO;;MAEP,QAAQ;;MAER,SAAS;;MAET,QAAQ;;MAER,SAAS;;MAET,cAAc;;MAEd,MAAM;;MAEN,KAAK;;MAEL,SAAS;;MAET,MAAM;;AAIK,YAAA,6BAA6B;;MAExC,KAAK;;MAEL,QAAQ;;MAER,QAAQ;;MAER,IAAI;;MAEJ,MAAM;;MAEN,QAAQ;;MAER,KAAK;;MAEL,QAAQ;;MAER,MAAM;;MAEN,OAAO;;;;;;;;;;;;;;;;;;;;;AC5kBT,iBAAA,sCAAA,OAAA;;;;;;;;;;;;;;;;;;;;ACCA,iBAAA,kBAAA,OAAA;AACA,iBAAA,oBAAA,OAAA;;;;;;;;;;;ACDA,QAAA,YAAA,oBACA,yBAAA;AAMa,YAAA,WAAW;MACtB,CAAC,uBAAA,2BAA2B,kBAAkB,GAAG;MACjD,CAAC,uBAAA,2BAA2B,oBAAoB,GAAG;MACnD,CAAC,uBAAA,2BAA2B,sBAAsB,GAChD,uBAAA,2BAA2B;MAC7B,CAAC,uBAAA,2BAA2B,qBAAqB,GAAG,UAAA;;;;;;;;;;;;ACbtD,aAAgB,WAAW,OAAmB;AAC5C,YAAM,MAAK;IACb;AAFA,YAAA,aAAA;;;;;;;;;;;;;;;;;;;;ACCA,iBAAA,wBAAA,OAAA;AACA,iBAAA,uBAAA,OAAA;AACA,iBAAA,yBAAA,OAAA;AACA,iBAAA,6BAAA,OAAA;AACA,iBAAA,uBAAA,OAAA;AACA,iBAAA,oBAAA,OAAA;AACA,iBAAA,sBAAA,OAAA;;;;;;;;;;;;;;;;;;;;ACPA,iBAAA,iBAAA,OAAA;;;;;;;;;;;ACEA,QAAA,aAAA,qBAGM,oBAAoB,GACpB,8BAA8B,GAC9B,8BAA8B,KAAK,IAAI,IAAI,2BAA2B,GACtE,wBAAwB,KAAK,IAAI,IAAI,iBAAiB;AAM5D,aAAgB,eAAe,aAAmB;AAChD,UAAM,eAAe,cAAc,KAE7B,UAAU,KAAK,MAAM,YAAY,GAEjC,QAAQ,KAAK,MAAO,cAAc,MAAQ,2BAA2B;AAC3E,aAAO,CAAC,SAAS,KAAK;IACxB;AAPA,YAAA,iBAAA;AASA,aAAgB,gBAAa;AAC3B,UAAI,aAAa,WAAA,cAAY;AAC7B,UAAI,OAAO,cAAe,UAAU;AAClC,YAAM,OAAyB,WAAA;AAC/B,qBAAa,KAAK,UAAU,KAAK,OAAO;;AAE1C,aAAO;IACT;AAPA,YAAA,gBAAA;AAaA,aAAgB,OAAO,gBAAuB;AAC5C,UAAM,aAAa,eAAe,cAAa,CAAE,GAC3C,MAAM,eACV,OAAO,kBAAmB,WAAW,iBAAiB,WAAA,cAAY,IAAG,CAAE;AAGzE,aAAO,WAAW,YAAY,GAAG;IACnC;AAPA,YAAA,SAAA;AAcA,aAAgB,kBAAkB,MAAmB;AAEnD,UAAI,kBAAkB,IAAI;AACxB,eAAO;AACF,UAAI,OAAO,QAAS;AAEzB,eAAI,OAAO,cAAa,IACf,OAAO,IAAI,IAGX,eAAe,IAAI;AAEvB,UAAI,gBAAgB;AACzB,eAAO,eAAe,KAAK,QAAO,CAAE;AAEpC,YAAM,UAAU,oBAAoB;IAExC;AAjBA,YAAA,oBAAA;AAwBA,aAAgB,eACd,WACA,SAAmB;AAEnB,UAAI,UAAU,QAAQ,CAAC,IAAI,UAAU,CAAC,GAClC,QAAQ,QAAQ,CAAC,IAAI,UAAU,CAAC;AAGpC,aAAI,QAAQ,MACV,WAAW,GAEX,SAAS,wBAGJ,CAAC,SAAS,KAAK;IACxB;AAfA,YAAA,iBAAA;AAqBA,aAAgB,kBAAkB,MAAgB;AAChD,UAAM,YAAY,mBACZ,MAAM,GAAG,IAAI,OAAO,SAAS,CAAC,GAAG,KAAK,CAAC,CAAC,KACxC,aAAa,IAAI,OAAO,IAAI,SAAS,YAAY,CAAC;AAExD,aADa,IAAI,KAAK,KAAK,CAAC,IAAI,GAAI,EAAE,YAAW,EACrC,QAAQ,QAAQ,UAAU;IACxC;AANA,YAAA,oBAAA;AAYA,aAAgB,oBAAoB,MAAgB;AAClD,aAAO,KAAK,CAAC,IAAI,wBAAwB,KAAK,CAAC;IACjD;AAFA,YAAA,sBAAA;AAQA,aAAgB,qBAAqB,MAAgB;AACnD,aAAO,KAAK,CAAC,IAAI,MAAM,KAAK,CAAC,IAAI;IACnC;AAFA,YAAA,uBAAA;AAQA,aAAgB,qBAAqB,MAAgB;AACnD,aAAO,KAAK,CAAC,IAAI,MAAM,KAAK,CAAC,IAAI;IACnC;AAFA,YAAA,uBAAA;AAQA,aAAgB,kBAAkB,OAAc;AAC9C,aACE,MAAM,QAAQ,KAAK,KACnB,MAAM,WAAW,KACjB,OAAO,MAAM,CAAC,KAAM,YACpB,OAAO,MAAM,CAAC,KAAM;IAExB;AAPA,YAAA,oBAAA;AAaA,aAAgB,YACd,OAAc;AAEd,aACE,kBAAkB,KAAK,KACvB,OAAO,SAAU,YACjB,iBAAiB;IAErB;AARA,YAAA,cAAA;AAaA,aAAgB,WAAW,OAAmB,OAAiB;AAC7D,UAAM,MAAM,CAAC,MAAM,CAAC,IAAI,MAAM,CAAC,GAAG,MAAM,CAAC,IAAI,MAAM,CAAC,CAAC;AAGrD,aAAI,IAAI,CAAC,KAAK,0BACZ,IAAI,CAAC,KAAK,uBACV,IAAI,CAAC,KAAK,IAGL;IACT;AAVA,YAAA,aAAA;;;;;;;;;;;;;;;;;;;;ACvJA,QAAYC;AAAZ,KAAA,SAAYA,mBAAgB;AAC1B,MAAAA,kBAAAA,kBAAA,UAAA,CAAA,IAAA,WACAA,kBAAAA,kBAAA,SAAA,CAAA,IAAA;IACF,GAHYA,oBAAA,QAAA,qBAAA,QAAA,mBAAgB,CAAA,EAAA;;;;;;;;;;;ACL5B,QAAA,QAAA,eAmBa,sBAAb,MAAgC;;;;;;MAS9B,YAAY,SAAoC,CAAA,GAAE;;AAChD,aAAK,gBAAe,KAAA,OAAO,iBAAW,QAAA,OAAA,SAAA,KAAI,CAAA,GAE1C,KAAK,UAAU,MAAM,KACnB,IAAI,IACF,KAAK,aAEF,IAAI,OAAM,OAAO,EAAE,UAAW,aAAa,EAAE,OAAM,IAAK,CAAA,CAAG,EAC3D,OAAO,CAAC,GAAG,MAAM,EAAE,OAAO,CAAC,GAAG,CAAA,CAAE,CAAC,CACrC;MAEL;;;;;;;;;;MAWA,OAAO,SAAkB,SAAkB,QAAqB;AAC9D,iBAAW,cAAc,KAAK;AAC5B,cAAI;AACF,uBAAW,OAAO,SAAS,SAAS,MAAM;mBACnC,KAAK;AACZ,kBAAA,KAAK,KACH,yBAAyB,WAAW,YAAY,IAAI,UAAU,IAAI,OAAO,EAAE;;MAInF;;;;;;;;;;MAWA,QAAQ,SAAkB,SAAkB,QAAqB;AAC/D,eAAO,KAAK,aAAa,OAAO,CAAC,KAAK,eAAc;AAClD,cAAI;AACF,mBAAO,WAAW,QAAQ,KAAK,SAAS,MAAM;mBACvC,KAAK;AACZ,kBAAA,KAAK,KACH,yBAAyB,WAAW,YAAY,IAAI,UAAU,IAAI,OAAO,EAAE;;AAG/E,iBAAO;QACT,GAAG,OAAO;MACZ;MAEA,SAAM;AAEJ,eAAO,KAAK,QAAQ,MAAK;MAC3B;;AApEF,YAAA,sBAAA;;;;;;;;;;;ACnBA,QAAM,uBAAuB,gBACvB,YAAY,QAAQ,oBAAoB,WACxC,mBAAmB,WAAW,oBAAoB,gBAAgB,oBAAoB,UACtF,kBAAkB,IAAI,OAAO,OAAO,SAAS,IAAI,gBAAgB,IAAI,GACrE,yBAAyB,uBACzB,kCAAkC;AAUxC,aAAgB,YAAY,KAAW;AACrC,aAAO,gBAAgB,KAAK,GAAG;IACjC;AAFA,YAAA,cAAA;AAQA,aAAgB,cAAc,OAAa;AACzC,aACE,uBAAuB,KAAK,KAAK,KACjC,CAAC,gCAAgC,KAAK,KAAK;IAE/C;AALA,YAAA,gBAAA;;;;;;;;;;;ACtBA,QAAA,eAAA,sBAEM,wBAAwB,IACxB,sBAAsB,KACtB,yBAAyB,KACzB,iCAAiC,KAW1B,aAAb,MAAa,YAAU;MAGrB,YAAY,eAAsB;AAF1B,aAAA,iBAAsC,oBAAI,IAAG,GAG/C,iBAAe,KAAK,OAAO,aAAa;MAC9C;MAEA,IAAI,KAAa,OAAa;AAG5B,YAAM,aAAa,KAAK,OAAM;AAC9B,eAAI,WAAW,eAAe,IAAI,GAAG,KACnC,WAAW,eAAe,OAAO,GAAG,GAEtC,WAAW,eAAe,IAAI,KAAK,KAAK,GACjC;MACT;MAEA,MAAM,KAAW;AACf,YAAM,aAAa,KAAK,OAAM;AAC9B,0BAAW,eAAe,OAAO,GAAG,GAC7B;MACT;MAEA,IAAI,KAAW;AACb,eAAO,KAAK,eAAe,IAAI,GAAG;MACpC;MAEA,YAAS;AACP,eAAO,KAAK,MAAK,EACd,OAAO,CAAC,KAAe,SACtB,IAAI,KAAK,MAAM,iCAAiC,KAAK,IAAI,GAAG,CAAC,GACtD,MACN,CAAA,CAAE,EACJ,KAAK,sBAAsB;MAChC;MAEQ,OAAO,eAAqB;AAClC,QAAI,cAAc,SAAS,wBAC3B,KAAK,iBAAiB,cACnB,MAAM,sBAAsB,EAC5B,QAAO,EACP,OAAO,CAAC,KAA0B,SAAgB;AACjD,cAAM,aAAa,KAAK,KAAI,GACtB,IAAI,WAAW,QAAQ,8BAA8B;AAC3D,cAAI,MAAM,IAAI;AACZ,gBAAM,MAAM,WAAW,MAAM,GAAG,CAAC,GAC3B,QAAQ,WAAW,MAAM,IAAI,GAAG,KAAK,MAAM;AACjD,gBAAI,aAAA,aAAY,GAAG,SAAK,aAAA,eAAc,KAAK,KACzC,IAAI,IAAI,KAAK,KAAK;;AAKtB,iBAAO;QACT,GAAG,oBAAI,IAAG,CAAE,GAGV,KAAK,eAAe,OAAO,0BAC7B,KAAK,iBAAiB,IAAI,IACxB,MAAM,KAAK,KAAK,eAAe,QAAO,CAAE,EACrC,QAAO,EACP,MAAM,GAAG,qBAAqB,CAAC;MAGxC;MAEQ,QAAK;AACX,eAAO,MAAM,KAAK,KAAK,eAAe,KAAI,CAAE,EAAE,QAAO;MACvD;MAEQ,SAAM;AACZ,YAAM,aAAa,IAAI,YAAU;AACjC,0BAAW,iBAAiB,IAAI,IAAI,KAAK,cAAc,GAChD;MACT;;AA3EF,YAAA,aAAA;;;;;;;;;;;ACjBA,QAAA,QAAA,eAUA,qBAAA,4BACA,eAAA;AAEa,YAAA,sBAAsB;AACtB,YAAA,qBAAqB;AAElC,QAAM,UAAU,MACV,eAAe,qBACf,gBAAgB,2BAChB,iBAAiB,2BACjB,aAAa,eACb,qBAAqB,IAAI,OAC7B,SAAS,YAAY,MAAM,aAAa,MAAM,cAAc,MAAM,UAAU,cAAc;AAa5F,aAAgB,iBAAiB,aAAmB;AAClD,UAAM,QAAQ,mBAAmB,KAAK,WAAW;AAMjD,aALI,CAAC,SAKD,MAAM,CAAC,MAAM,QAAQ,MAAM,CAAC,IAAU,OAEnC;QACL,SAAS,MAAM,CAAC;QAChB,QAAQ,MAAM,CAAC;QACf,YAAY,SAAS,MAAM,CAAC,GAAG,EAAE;;IAErC;AAdA,YAAA,mBAAA;AAsBA,QAAa,4BAAb,MAAsC;MACpC,OAAO,SAAkB,SAAkB,QAAqB;AAC9D,YAAM,cAAc,MAAA,MAAM,eAAe,OAAO;AAChD,YACE,CAAC,mBACD,mBAAA,qBAAoB,OAAO,KAC3B,KAAC,MAAA,oBAAmB,WAAW;AAE/B;AAEF,YAAM,cAAc,GAAG,OAAO,IAAI,YAAY,OAAO,IACnD,YAAY,MACd,KAAK,OAAO,YAAY,cAAc,MAAA,WAAW,IAAI,EAAE,SAAS,EAAE,CAAC;AAEnE,eAAO,IAAI,SAAS,QAAA,qBAAqB,WAAW,GAChD,YAAY,cACd,OAAO,IACL,SACA,QAAA,oBACA,YAAY,WAAW,UAAS,CAAE;MAGxC;MAEA,QAAQ,SAAkB,SAAkB,QAAqB;AAC/D,YAAM,oBAAoB,OAAO,IAAI,SAAS,QAAA,mBAAmB;AACjE,YAAI,CAAC;AAAmB,iBAAO;AAC/B,YAAM,cAAc,MAAM,QAAQ,iBAAiB,IAC/C,kBAAkB,CAAC,IACnB;AACJ,YAAI,OAAO,eAAgB;AAAU,iBAAO;AAC5C,YAAM,cAAc,iBAAiB,WAAW;AAChD,YAAI,CAAC;AAAa,iBAAO;AAEzB,oBAAY,WAAW;AAEvB,YAAM,mBAAmB,OAAO,IAAI,SAAS,QAAA,kBAAkB;AAC/D,YAAI,kBAAkB;AAGpB,cAAM,QAAQ,MAAM,QAAQ,gBAAgB,IACxC,iBAAiB,KAAK,GAAG,IACzB;AACJ,sBAAY,aAAa,IAAI,aAAA,WAC3B,OAAO,SAAU,WAAW,QAAQ,MAAS;;AAGjD,eAAO,MAAA,MAAM,eAAe,SAAS,WAAW;MAClD;MAEA,SAAM;AACJ,eAAO,CAAC,QAAA,qBAAqB,QAAA,kBAAkB;MACjD;;AApDF,YAAA,4BAAA;;;;;;;;;;;;;;;;;;;;ACzDA,QAAA,QAAA,eAEM,uBAAmB,MAAA,kBACvB,4CAA4C,GAGlC;AAAZ,KAAA,SAAYC,UAAO;AACjB,MAAAA,SAAA,OAAA;IACF,GAFY,UAAA,QAAA,YAAA,QAAA,UAAO,CAAA,EAAA;AAenB,aAAgB,eAAe,SAAkB,MAAiB;AAChE,aAAO,QAAQ,SAAS,kBAAkB,IAAI;IAChD;AAFA,YAAA,iBAAA;AAIA,aAAgB,kBAAkB,SAAgB;AAChD,aAAO,QAAQ,YAAY,gBAAgB;IAC7C;AAFA,YAAA,oBAAA;AAIA,aAAgB,eAAe,SAAgB;AAC7C,aAAO,QAAQ,SAAS,gBAAgB;IAC1C;AAFA,YAAA,iBAAA;;;;;;;;;;;AC7BA,QAAA,QAAA,eAMa,mBAAb,MAA6B;MAC3B,eAAY;AACV,eAAO;UACL,UAAU,MAAA,iBAAiB;;MAE/B;MAEA,WAAQ;AACN,eAAO;MACT;;AATF,YAAA,mBAAA;;;;;;;;;;;ACNA,QAAA,QAAA,eAMa,kBAAb,MAA4B;MAC1B,eAAY;AACV,eAAO;UACL,UAAU,MAAA,iBAAiB;;MAE/B;MAEA,WAAQ;AACN,eAAO;MACT;;AATF,YAAA,kBAAA;;;;;;;;;;;ACNA,QAAA,QAAA,eAWA,yBAAA,gCACA,qBAAA,4BACA,oBAAA,2BAOa,qBAAb,MAA+B;MAO7B,YAAY,QAAgC;;AAC1C,aAAK,QAAQ,OAAO,MAEf,KAAK,cACR,uBAAA,oBACE,IAAI,MAAM,wDAAwD,CAAC,GAErE,KAAK,QAAQ,IAAI,kBAAA,gBAAe,IAGlC,KAAK,wBACH,KAAA,OAAO,yBAAmB,QAAA,OAAA,SAAA,KAAI,IAAI,kBAAA,gBAAe,GACnD,KAAK,2BACH,KAAA,OAAO,4BAAsB,QAAA,OAAA,SAAA,KAAI,IAAI,mBAAA,iBAAgB,GACvD,KAAK,uBACH,KAAA,OAAO,wBAAkB,QAAA,OAAA,SAAA,KAAI,IAAI,kBAAA,gBAAe,GAClD,KAAK,0BACH,KAAA,OAAO,2BAAqB,QAAA,OAAA,SAAA,KAAI,IAAI,mBAAA,iBAAgB;MACxD;MAEA,aACE,SACA,SACA,UACA,UACA,YACA,OAAa;AAEb,YAAM,gBAAgB,MAAA,MAAM,eAAe,OAAO;AAElD,eAAI,CAAC,iBAAiB,KAAC,MAAA,oBAAmB,aAAa,IAC9C,KAAK,MAAM,aAChB,SACA,SACA,UACA,UACA,YACA,KAAK,IAIL,cAAc,WACZ,cAAc,aAAa,MAAA,WAAW,UACjC,KAAK,qBAAqB,aAC/B,SACA,SACA,UACA,UACA,YACA,KAAK,IAGF,KAAK,wBAAwB,aAClC,SACA,SACA,UACA,UACA,YACA,KAAK,IAIL,cAAc,aAAa,MAAA,WAAW,UACjC,KAAK,oBAAoB,aAC9B,SACA,SACA,UACA,UACA,YACA,KAAK,IAIF,KAAK,uBAAuB,aACjC,SACA,SACA,UACA,UACA,YACA,KAAK;MAET;MAEA,WAAQ;AACN,eAAO,oBAAoB,KAAK,MAAM,SAAQ,CAAE,yBAAyB,KAAK,qBAAqB,SAAQ,CAAE,4BAA4B,KAAK,wBAAwB,SAAQ,CAAE,wBAAwB,KAAK,oBAAoB,SAAQ,CAAE,2BAA2B,KAAK,uBAAuB,SAAQ,CAAE;MAC9S;;AA5FF,YAAA,qBAAA;;;;;;;;;;;ACpBA,QAAA,QAAA,eAWa,2BAAb,MAAqC;MAGnC,YAA6B,SAAiB,GAAC;AAAlB,aAAA,SAAA,QAC3B,KAAK,SAAS,KAAK,WAAW,MAAM,GACpC,KAAK,cAAc,KAAK,MAAM,KAAK,SAAS,UAAU;MACxD;MAEA,aAAa,SAAkB,SAAe;AAC5C,eAAO;UACL,cACE,MAAA,gBAAe,OAAO,KAAK,KAAK,YAAY,OAAO,IAAI,KAAK,cACxD,MAAA,iBAAiB,qBACjB,MAAA,iBAAiB;;MAE3B;MAEA,WAAQ;AACN,eAAO,qBAAqB,KAAK,MAAM;MACzC;MAEQ,WAAW,OAAa;AAC9B,eAAI,OAAO,SAAU,YAAY,MAAM,KAAK,IAAU,IAC/C,SAAS,IAAI,IAAI,SAAS,IAAI,IAAI;MAC3C;MAEQ,YAAY,SAAe;AACjC,YAAI,eAAe;AACnB,iBAAS,IAAI,GAAG,IAAI,QAAQ,SAAS,GAAG,KAAK;AAC3C,cAAM,MAAM,IAAI,GACV,OAAO,SAAS,QAAQ,MAAM,KAAK,MAAM,CAAC,GAAG,EAAE;AACrD,0BAAgB,eAAe,UAAU;;AAE3C,eAAO;MACT;;AAlCF,YAAA,2BAAA;;;;;;;;;;;ACJA,QAAM,YAAY,mBACZ,UAAU,iBACV,eAAe,sBACf,YAAY,SAAS,WACrB,eAAe,UAAU,UACzB,mBAAmB,aAAa,KAAK,MAAM,GAC3C,eAAe,QAAQ,OAAO,gBAAgB,MAAM,GACpD,cAAc,OAAO,WACrB,iBAAiB,YAAY,gBAC7B,iBAAiB,SAAS,OAAO,cAAc,QAC/C,uBAAuB,YAAY;AAUzC,aAAS,QAAQ,MAAgB,WAAc;AAC7C,aAAO,SAAU,KAAQ;AACvB,eAAO,KAAK,UAAU,GAAG,CAAC;MAC5B;IACF;AA8BA,aAAgB,cAAc,OAAU;AACtC,UAAI,CAAC,aAAa,KAAK,KAAK,WAAW,KAAK,MAAM;AAChD,eAAO;AAET,UAAM,QAAQ,aAAa,KAAK;AAChC,UAAI,UAAU;AACZ,eAAO;AAET,UAAM,OAAO,eAAe,KAAK,OAAO,aAAa,KAAK,MAAM;AAChE,aACE,OAAO,QAAQ,cACf,gBAAgB,QAChB,aAAa,KAAK,IAAI,MAAM;IAEhC;AAdA,YAAA,gBAAA;AAwCA,aAAS,aAAa,OAAU;AAC9B,aAAO,SAAS,QAAQ,OAAO,SAAS;IAC1C;AASA,aAAS,WAAW,OAAU;AAC5B,aAAI,SAAS,OACJ,UAAU,SAAY,eAAe,UAEvC,kBAAkB,kBAAkB,OAAO,KAAK,IACnD,UAAU,KAAK,IACf,eAAe,KAAK;IAC1B;AASA,aAAS,UAAU,OAAU;AAC3B,UAAM,QAAQ,eAAe,KAAK,OAAO,cAAqB,GAC5D,MAAM,MAAM,cAAqB,GAC/B,WAAW;AAEf,UAAI;AACF,cAAM,cAAqB,IAAI,QAC/B,WAAW;cACD;;AAIZ,UAAM,SAAS,qBAAqB,KAAK,KAAK;AAC9C,aAAI,aACE,QACF,MAAM,cAAqB,IAAI,MAE/B,OAAO,MAAM,cAAqB,IAG/B;IACT;AASA,aAAS,eAAe,OAAU;AAChC,aAAO,qBAAqB,KAAK,KAAK;IACxC;;;;;;;;;;;AC9JA,QAAA,iBAAA,wBAEM,YAAY;AAWlB,aAAgB,SAAS,MAAW;AAClC,UAAI,SAAc,KAAK,MAAK,GACtB,UAAkD,oBAAI,QAAO;AAInE,aAAO,KAAK,SAAS;AACnB,iBAAS,gBAAgB,QAAQ,KAAK,MAAK,GAAI,GAAG,OAAO;AAG3D,aAAO;IACT;AAXA,YAAA,QAAA;AAaA,aAAS,UAAU,OAAU;AAC3B,aAAI,QAAQ,KAAK,IACR,MAAM,MAAK,IAEb;IACT;AAUA,aAAS,gBACP,KACA,KACA,QAAQ,GACR,SAAmC;AAEnC,UAAI;AACJ,UAAI,UAAQ,YAIZ;YADA,SACI,YAAY,GAAG,KAAK,YAAY,GAAG,KAAK,WAAW,GAAG;AACxD,mBAAS,UAAU,GAAG;iBACb,QAAQ,GAAG;AAEpB,cADA,SAAS,IAAI,MAAK,GACd,QAAQ,GAAG;AACb,qBAAS,IAAI,GAAG,IAAI,IAAI,QAAQ,IAAI,GAAG;AACrC,qBAAO,KAAK,UAAU,IAAI,CAAC,CAAC,CAAC;mBAEtB,SAAS,GAAG,GAAG;AACxB,gBAAM,OAAO,OAAO,KAAK,GAAG;AAC5B,qBAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,IAAI,GAAG,KAAK;AAC3C,kBAAM,MAAM,KAAK,CAAC;AAClB,qBAAO,GAAG,IAAI,UAAU,IAAI,GAAG,CAAC;;;mBAG3B,SAAS,GAAG;AACrB,cAAI,SAAS,GAAG,GAAG;AACjB,gBAAI,CAAC,YAAY,KAAK,GAAG;AACvB,qBAAO;AAET,qBAAS,OAAO,OAAO,CAAA,GAAI,GAAG;AAC9B,gBAAM,OAAO,OAAO,KAAK,GAAG;AAE5B,qBAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,IAAI,GAAG,KAAK;AAC3C,kBAAM,MAAM,KAAK,CAAC,GACZ,WAAW,IAAI,GAAG;AAExB,kBAAI,YAAY,QAAQ;AACtB,gBAAI,OAAO,WAAa,MACtB,OAAO,OAAO,GAAG,IAGjB,OAAO,GAAG,IAAI;mBAEX;AACL,oBAAM,OAAO,OAAO,GAAG,GACjB,OAAO;AAEb,oBACE,oBAAoB,KAAK,KAAK,OAAO,KACrC,oBAAoB,KAAK,KAAK,OAAO;AAErC,yBAAO,OAAO,GAAG;qBACZ;AACL,sBAAI,SAAS,IAAI,KAAK,SAAS,IAAI,GAAG;AACpC,wBAAM,OAAO,QAAQ,IAAI,IAAI,KAAK,CAAA,GAC5B,OAAO,QAAQ,IAAI,IAAI,KAAK,CAAA;AAClC,yBAAK,KAAK,EAAE,KAAK,KAAK,IAAG,CAAE,GAC3B,KAAK,KAAK,EAAE,KAAK,KAAK,IAAG,CAAE,GAC3B,QAAQ,IAAI,MAAM,IAAI,GACtB,QAAQ,IAAI,MAAM,IAAI;;AAGxB,yBAAO,GAAG,IAAI,gBACZ,OAAO,GAAG,GACV,UACA,OACA,OAAO;;;;;AAMf,qBAAS;AAIb,eAAO;;IACT;AAQA,aAAS,oBACP,KACA,KACA,SAAmC;AAEnC,UAAM,MAAM,QAAQ,IAAI,IAAI,GAAG,CAAC,KAAK,CAAA;AACrC,eAAS,IAAI,GAAG,IAAI,IAAI,QAAQ,IAAI,GAAG,KAAK;AAC1C,YAAM,OAAO,IAAI,CAAC;AAClB,YAAI,KAAK,QAAQ,OAAO,KAAK,QAAQ;AACnC,iBAAO;;AAGX,aAAO;IACT;AAEA,aAAS,QAAQ,OAAU;AACzB,aAAO,MAAM,QAAQ,KAAK;IAC5B;AAEA,aAAS,WAAW,OAAU;AAC5B,aAAO,OAAO,SAAU;IAC1B;AAEA,aAAS,SAAS,OAAU;AAC1B,aACE,CAAC,YAAY,KAAK,KAClB,CAAC,QAAQ,KAAK,KACd,CAAC,WAAW,KAAK,KACjB,OAAO,SAAU;IAErB;AAEA,aAAS,YAAY,OAAU;AAC7B,aACE,OAAO,SAAU,YACjB,OAAO,SAAU,YACjB,OAAO,SAAU,aACjB,OAAO,QAAU,OACjB,iBAAiB,QACjB,iBAAiB,UACjB,UAAU;IAEd;AAEA,aAAS,YAAY,KAAU,KAAQ;AACrC,aAAI,OAAC,eAAA,eAAc,GAAG,KAAK,KAAC,eAAA,eAAc,GAAG;IAK/C;;;;;;;;;;;ACjLA,QAAa,eAAb,MAAa,sBAAqB,MAAK;MACrC,YAAY,SAAgB;AAC1B,cAAM,OAAO,GAIb,OAAO,eAAe,MAAM,cAAa,SAAS;MACpD;;AAPF,YAAA,eAAA;AAmBA,aAAgB,gBACd,SACA,SAAe;AAEf,UAAI,eAEE,iBAAiB,IAAI,QAAe,SACxC,UACA,QAAM;AAEN,wBAAgB,WAAW,WAAuB;AAChD,iBAAO,IAAI,aAAa,sBAAsB,CAAC;QACjD,GAAG,OAAO;MACZ,CAAC;AAED,aAAO,QAAQ,KAAK,CAAC,SAAS,cAAc,CAAC,EAAE,KAC7C,aACE,aAAa,aAAa,GACnB,SAET,YAAS;AACP,2BAAa,aAAa,GACpB;MACR,CAAC;IAEL;AAzBA,YAAA,kBAAA;;;;;;;;;;;ACvBA,aAAgB,WAAWC,MAAa,YAA2B;AACjE,aAAI,OAAO,cAAe,WACjBA,SAAQ,aAER,CAAC,CAACA,KAAI,MAAM,UAAU;IAEjC;AANA,YAAA,aAAA;AAYA,aAAgB,aACdA,MACA,aAAoC;AAEpC,UAAI,CAAC;AACH,eAAO;AAGT,eAAW,aAAa;AACtB,YAAI,WAAWA,MAAK,SAAS;AAC3B,iBAAO;AAGX,aAAO;IACT;AAdA,YAAA,eAAA;;;;;;;;;;;ACLA,aAAgB,UAAU,MAAa;AACrC,aACE,OAAO,QAAS,cAChB,OAAQ,KAAqB,cAAe,cAC5C,OAAQ,KAAqB,YAAa,cACzC,KAAqB,cAAc;IAExC;AAPA,YAAA,YAAA;;;;;;;;;;;ACNA,QAAa,WAAb,MAAqB;MAInB,cAAA;AACE,aAAK,WAAW,IAAI,QAAQ,CAAC,SAAS,WAAU;AAC9C,eAAK,WAAW,SAChB,KAAK,UAAU;QACjB,CAAC;MACH;MAEA,IAAI,UAAO;AACT,eAAO,KAAK;MACd;MAEA,QAAQ,KAAM;AACZ,aAAK,SAAS,GAAG;MACnB;MAEA,OAAO,KAAY;AACjB,aAAK,QAAQ,GAAG;MAClB;;AArBF,YAAA,WAAA;;;;;;;;;;;ACAA,QAAA,YAAA,mBAKa,iBAAb,MAA2B;MAOzB,YACU,WACA,OAAW;AADX,aAAA,YAAA,WACA,KAAA,QAAA,OAJF,KAAA,YAAY,IACZ,KAAA,YAAY,IAAI,UAAA,SAAQ;MAI7B;MAEH,IAAI,WAAQ;AACV,eAAO,KAAK;MACd;MAEA,IAAI,UAAO;AACT,eAAO,KAAK,UAAU;MACxB;MAEA,QAAQ,MAAmB;AACzB,YAAI,CAAC,KAAK,WAAW;AACnB,eAAK,YAAY;AACjB,cAAI;AACF,oBAAQ,QAAQ,KAAK,UAAU,KAAK,KAAK,OAAO,GAAG,IAAI,CAAC,EAAE,KACxD,SAAO,KAAK,UAAU,QAAQ,GAAG,GACjC,SAAO,KAAK,UAAU,OAAO,GAAG,CAAC;mBAE5B,KAAK;AACZ,iBAAK,UAAU,OAAO,GAAG;;;AAG7B,eAAO,KAAK,UAAU;MACxB;;AAjCF,YAAA,iBAAA;;;;;;;;;;;ACLA,QAAA,QAAA,eAEA,qBAAA;AAUA,aAAgB,QACd,UACA,KAAM;AAEN,aAAO,IAAI,QAAQ,aAAU;AAE3B,cAAA,QAAQ,SAAK,mBAAA,iBAAgB,MAAA,QAAQ,OAAM,CAAE,GAAG,MAAK;AACnD,mBAAS,OAAO,KAAK,CAAC,WAAwB;AAC5C,oBAAQ,MAAM;UAChB,CAAC;QACH,CAAC;MACH,CAAC;IACH;AAZA,YAAA,UAAA;;;;;;;;;;;;;;;;;;;;;ACZA,iBAAA,gCAAA,OAAA;AACA,iBAAA,0BAAA,OAAA;AACA,iBAAA,sBAAA,OAAA;AACA,iBAAA,gCAAA,OAAA;AACA,iBAAA,iCAAA,OAAA;AACA,iBAAA,gBAAA,OAAA;AACA,iBAAA,kBAAA,OAAA;AACA,iBAAA,wBAAA,OAAA;AACA,iBAAA,oBAAA,OAAA;AACA,YAAA,eAAA;AACA,iBAAA,qBAAA,OAAA;AACA,iBAAA,qBAAA,OAAA;AACA,iBAAA,qCAAA,OAAA;AACA,iBAAA,uBAAA,OAAA;AACA,iBAAA,wBAAA,OAAA;AACA,iBAAA,4BAAA,OAAA;AACA,iBAAA,2BAAA,OAAA;AACA,iBAAA,8BAAA,OAAA;AACA,iBAAA,oCAAA,OAAA;AACA,iBAAA,4BAAA,OAAA;AACA,iBAAA,sBAAA,OAAA;AACA,iBAAA,uBAAA,OAAA;AACA,iBAAA,iBAAA,OAAA;AACA,iBAAA,oBAAA,OAAA;AACA,iBAAA,mBAAA,OAAA;AACA,iBAAA,eAAA,OAAA;AACA,iBAAA,gBAAA,OAAA;AACA,iBAAA,oBAAA,OAAA;AACA,iBAAA,oBAAA,OAAA;AACA,QAAA,aAAA;AACa,YAAA,WAAW;MACtB,SAAA,WAAA;;;;;;;;;;;;AC/BF,QAAA,UAAA,kBAQA,SAAA,gBACA,eAAA,sBAKa,wBAAb,MAAkC;MAChC,YACS,WACC,WAAmB,GACpB,aAAqB,CAAC,GAAG,CAAC,GAAC;AAF3B,aAAA,YAAA,WACC,KAAA,WAAA,UACD,KAAA,aAAA;MACN;MAEH,OAAO,OAAa;AAClB,aAAK,WAAW,OAChB,KAAK,iBAAa,OAAA,gBAAe,KAAK,IAAG,CAAE;MAC7C;MAEA,aAAa,WAAiB;AAC5B,aAAK,YAAY;MACnB;MAEA,eAAY;AACV,eAAO,KAAK;MACd;;AAlBF,YAAA,wBAAA;AAsBA,QAAa,sBAAb,MAAgC;MAAhC,cAAA;AACS,aAAA,OAAkC,QAAA,eAAe;MAuE1D;MArEE,mBAAmB,WAAiB;AAClC,eAAO,IAAI,sBAAsB,SAAS;MAC5C;;;;;;MAOA,MACE,UACA,OAA4B;AAG5B,YAAM,yBACJ,OAAA,sBAAqB,MAAM,UAAU,SACrC,OAAA,sBAAqB,SAAS,UAAU,IACpC,QACA;AACN,eAAO,IAAI,sBACT,SAAS,WACT,mBAAmB,aAAY,GAC/B,mBAAmB,UAAU;MAEjC;;;;;;;MAQA,KACE,UACA,SAA8B;AAG9B,YAAM,yBACJ,OAAA,sBAAqB,QAAQ,UAAU,SACvC,OAAA,sBAAqB,SAAS,UAAU,IACpC,UACA;AACN,eAAO,IAAI,sBACT,QAAQ,WACR,mBAAmB,aAAY,GAC/B,mBAAmB,UAAU;MAEjC;MAEA,aACE,YACA,wBACA,0BACA,SAAe;AAEf,eAAO;UACL;UACA;UACA,eAAe,aAAA,cAAc;UAC7B,YAAY,yBAAyB,IAAI,CAAC,CAAC,YAAY,YAAY,OAC1D;YACL;YACA,WAAW,aAAa;YACxB;YACA,OAAO,aAAa,aAAY;YAEnC;;MAEL;;AAvEF,YAAA,sBAAA;;;;;;;;;;;ACpCA,QAAA,UAAA,kBAQA,eAAA,sBAKa,kBAAb,MAA4B;MAC1B,YACS,WACA,WACC,WAAmB,GACpB,QAAQ,IAAK;AAHb,aAAA,YAAA,WACA,KAAA,YAAA,WACC,KAAA,WAAA,UACD,KAAA,QAAA;MACN;MAEH,OAAO,OAAa;AAClB,QAAI,KAAK,aAAa,QAAQ,MAG9B,KAAK,YAAY;MACnB;MAEA,aAAa,WAAiB;AAC5B,aAAK,YAAY;MACnB;MAEA,eAAY;AACV,eAAO,KAAK;MACd;;AArBF,YAAA,kBAAA;AAyBA,QAAa,gBAAb,MAA0B;MAGxB,YAAmB,WAAkB;AAAlB,aAAA,YAAA,WAFZ,KAAA,OAA2B,QAAA,eAAe;MAET;MAExC,mBAAmB,WAAiB;AAClC,eAAO,IAAI,gBAAgB,WAAW,KAAK,SAAS;MACtD;;;;MAKA,MAAM,UAA2B,OAAsB;AACrD,YAAM,SAAS,SAAS,aAAY,GAC9B,UAAU,MAAM,aAAY;AAClC,eAAI,MAAM,QACD,IAAI,gBACT,MAAM,WACN,KAAK,WACL,SACA,MAAM,KAAK,IAGR,IAAI,gBACT,SAAS,WACT,KAAK,WACL,SAAS,OAAO;MAEpB;;;;MAKA,KAAK,UAA2B,SAAwB;AACtD,YAAM,SAAS,SAAS,aAAY,GAC9B,SAAS,QAAQ,aAAY;AAMnC,eAAI,KAAK,aAAa,SAAS,SACtB,IAAI,gBACT,QAAQ,WACR,KAAK,WACL,QACA,EAAI,IAGD,IAAI,gBACT,QAAQ,WACR,KAAK,WACL,SAAS,MAAM;MAEnB;MAEA,aACE,YACA,wBACA,0BACA,SAAe;AAEf,eAAO;UACL;UACA;UACA,eAAe,aAAA,cAAc;UAC7B,YAAY,yBAAyB,IAAI,CAAC,CAAC,YAAY,YAAY,OAC1D;YACL;YACA,WAAW,aAAa;YACxB;YACA,OAAO,aAAa,aAAY;YAEnC;UACD,aAAa,KAAK;;MAEtB;;AA5EF,YAAA,gBAAA;;;;;;;;;;;;;;;;;;;;ACtCA,iBAAA,gBAAA,OAAA;AACA,iBAAA,qBAAA,OAAA;AACA,iBAAA,gCAAA,OAAA;AACA,iBAAA,qBAAA,OAAA;AACA,iBAAA,eAAA,OAAA;;;;;;;;;;;ACJA,QAAA,MAAA,eACA,eAAA,sBASA,yBAAA,gCAQsB,cAAtB,MAAiC;MAK/B,OAAO,OAAI;AACT,eAAO;MACT;MAEA,OAAO,MAAG;AACR,eAAO;MACT;MAEA,OAAO,YAAS;AACd,eAAO;MACT;MAEA,OAAO,YAAS;AACd,eAAO;MACT;MAEA,OAAO,uBAAoB;AACzB,eAAO;MACT;MAEA,OAAO,UAAO;AACZ,eAAO;MACT;;AA3BF,YAAA,cAAA;AAiCA,QAAa,kBAAb,MAAa,yBAAwB,YAAW;MAE9C,iBAAiB,aAAiC;AAChD,eAAO,iBAAgB;MACzB;;AAJF,YAAA,kBAAA;AACiB,oBAAA,mBAAmB,IAAI,aAAA,eAAc;AAStD,QAAa,iBAAb,MAAa,wBAAuB,YAAW;MAG7C,iBAAiB,YAAgC;AAC/C,gBAAQ,WAAW,MAAM;UACvB,KAAK,uBAAA,eAAe;UACpB,KAAK,uBAAA,eAAe;UACpB,KAAK,uBAAA,eAAe;AAClB,mBAAO,gBAAe;UAExB;AACE,mBAAO,gBAAe;;MAG5B;;AAdF,YAAA,iBAAA;AACiB,mBAAA,qBAAqB,IAAI,aAAA,cAAc,EAAI;AAC3C,mBAAA,yBAAyB,IAAI,aAAA,cAAc,EAAK;AAkBjE,QAAa,uBAAb,MAAa,8BAA6B,YAAW;MAEnD,iBAAiB,aAAiC;AAChD,eAAO,sBAAqB;MAC9B;;AAJF,YAAA,uBAAA;AACiB,yBAAA,mBAAmB,IAAI,aAAA,oBAAmB;AAS3D,QAAa,uBAAb,MAAa,8BAA6B,YAAW;MAKnD,iBAAiB,aAAiC;AAChD,eAAO,sBAAqB;MAC9B;;AAPF,YAAA,uBAAA;AACiB,yBAAA,mBAAmB,IAAI,aAAA,oBACpC,CAAC,GAAG,GAAG,IAAI,IAAI,IAAI,IAAI,KAAK,KAAK,KAAK,KAAK,KAAM,MAAM,KAAM,MAAM,GAAK,GACxE,EAAI;AAUR,QAAaC,sCAAb,cAAwD,YAAW;;;;;MAOjE,YACE,YACiB,gBAAgB,IAAI;AAGrC,YADA,MAAK,GAFY,KAAA,gBAAA,eAGb,eAAe,UAAa,WAAW,WAAW;AACpD,gBAAM,IAAI,MAAM,wDAAwD;AAG1E,qBAAa,WAAW,OAAM,GAG9B,aAAa,WAAW,KAAK,CAAC,GAAG,MAAM,IAAI,CAAC;AAE5C,YAAM,qBAAqB,WAAW,YAAY,MAAS,GACvD,gBAAoC,WAAW,QAAQ,KAAQ;AACnE,QAAI,kBAAkB,OACpB,gBAAgB,SAElB,KAAK,cAAc,WAAW,MAAM,qBAAqB,GAAG,aAAa;MAC3E;MAEA,iBAAiB,aAAiC;AAChD,eAAO,IAAI,aAAA,oBAAoB,KAAK,aAAa,KAAK,aAAa;MACrE;;AA/BF,YAAA,qCAAAA;AAkCA,QAAa,kCAAb,cAAqD,YAAW;MAC9D,YACmB,WAAmB,KACnB,gBAAgB,IAAI;AAErC,cAAK,GAHY,KAAA,WAAA,UACA,KAAA,gBAAA;MAGnB;MACA,iBAAiB,aAAiC;AAChD,eAAO,IAAI,aAAA,+BACT,KAAK,UACL,KAAK,aAAa;MAEtB;;AAZF,YAAA,kCAAA;AAkBA,QAAa,qBAAb,cAAwC,YAAW;MACzC,SAAS,YAAgC;AAE/C,gBAAQ,WAAW,MAAiB;UAClC,KAAK,uBAAA,eAAe;UACpB,KAAK,uBAAA,eAAe;UACpB,KAAK,uBAAA,eAAe;UACpB,KAAK,uBAAA,eAAe;AAClB,mBAAO;UAET,KAAK,uBAAA,eAAe;AAClB,mBAAO;UAET,KAAK,uBAAA,eAAe;AAClB,mBAAO;;AAGX,mBAAI,KAAK,KAAK,wCAAwC,WAAW,IAAI,EAAE,GAChE;MACT;MAEA,iBACE,YAAgC;AAEhC,eAAO,KAAK,SAAS,UAAU,EAAE,iBAAiB,UAAU;MAC9D;;AAzBF,YAAA,qBAAA;AA4BA,QAAM,mBAAmB,IAAI,gBAAe,GACtC,kBAAkB,IAAI,eAAc,GACpC,yBAAyB,IAAI,qBAAoB,GACjD,wBAAwB,IAAI,qBAAoB,GAChD,oCAAoC,IAAI,gCAA+B,GACvE,sBAAsB,IAAI,mBAAkB;;;;;;;;;;;AC5LlD,QAAA,gBAAA,uBACA,2BAAA,kCAgBa,+BACX,qBAAmB,cAAA,YAAY,QAAO;AAD3B,YAAA,+BAA4B;AAElC,QAAM,2CACX,qBAAmB,yBAAA,uBAAuB;AAD/B,YAAA,2CAAwC;;;;;;;;;;;ACpBrD,QAAA,MAAA,eAIA,UAAA,kBAQA,wBAAA,+BAgCsBC,gBAAtB,MAAkC;MAWhC,YAAY,SAA6B;;AARjC,aAAA,YAAY,IASlB,KAAK,wBACH,KAAA,SAAS,yBAAmB,QAAA,OAAA,SAAA,KAAI,sBAAA,8BAClC,KAAK,mCACH,KAAA,SAAS,oCAA8B,QAAA,OAAA,SAAA,KACvC,sBAAA,0CACF,KAAK,oBAAmB,KAAA,SAAS,qBAAe,QAAA,OAAA,SAAA,KAAI,CAAA;MACtD;;;;;;;;;;;MAYA,kBAAkB,gBAA8B;AAC9C,YAAI,KAAK;AACP,gBAAM,IAAI,MACR,yDAAyD;AAG7D,aAAK,qBAAqB,gBAC1B,KAAK,cAAa;MACpB;;;;;MAMA,kBAAkB,gBAA8B;AAC9C,eAAO,KAAK,qBAAqB,cAAc;MACjD;;;;;MAMA,6BACE,gBAA8B;AAE9B,eAAO,KAAK,gCAAgC,cAAc;MAC5D;;;;;MAMU,gBAAa;MAEvB;;;;MAsBA,MAAM,QAAQ,SAA2B;AACvC,YAAI,KAAK,uBAAuB;AAC9B,gBAAM,IAAI,MAAM,+CAA+C;AAIjE,YAAI,KAAK;AACP,gBAAM,IAAI,MAAM,0BAA0B;AAG5C,YAAM,CAAC,sBAAsB,GAAG,2BAA2B,IACzD,MAAM,QAAQ,IAAI;UAChB,KAAK,mBAAmB,QAAQ;YAC9B,eAAe,SAAS;WACzB;UACD,GAAG,KAAK,iBAAiB,IAAI,cAC3B,SAAS,QAAQ;YACf,eAAe,SAAS;WACzB,CAAC;SAEL,GAGG,SAAS,qBAAqB,OAAO,WACzC,QAAA,SAAQ,6BAA6B,YAAU,OAAO,MAAM,CAAC,GAEzD,WAAW,qBAAqB,gBAAgB,UAChD,eACJ,qBAAqB,gBAAgB,aAAa,WAChD,QAAA,SACE,6BACA,YAAU,OAAO,gBAAgB,YAAY,CAC9C;AAEL,eAAO;UACL,iBAAiB;YACf;YACA;;UAEF;;MAEJ;;;;;;;MAQA,MAAM,SAAS,SAAyB;AAEtC,YAAI,KAAK,WAAW;AAClB,cAAI,KAAK,MAAM,6BAA6B;AAC5C;;AAIF,QAAI,SAAS,iBAAiB,OAC5B,MAAM,KAAK,WAAU,IAErB,UAAM,QAAA,iBAAgB,KAAK,WAAU,GAAI,QAAQ,aAAa,GAGhE,KAAK,YAAY;MACnB;;;;;;;MAQA,MAAM,WAAW,SAA2B;AAC1C,YAAI,KAAK,WAAW;AAClB,cAAI,KAAK,KAAK,qDAAqD;AACnE;;AAIF,YAAI,SAAS,iBAAiB,MAAM;AAClC,gBAAM,KAAK,aAAY;AACvB;;AAGF,kBAAM,QAAA,iBAAgB,KAAK,aAAY,GAAI,QAAQ,aAAa;MAClE;;AA3KF,YAAA,eAAAA;;;;;;;;;;;AC5CA,QAAA,MAAA,eACA,SAAA,gBAMA,iBAAA,wBAEA,UAAA,kBACA,QAAA,eA8Ba,gCAAb,cAAmD,eAAA,aAAY;MAM7D,YAAY,SAA6C;;AAUvD,YATA,MAAM;UACJ,sBAAqB,KAAA,QAAQ,SAAS,uBAAiB,QAAA,OAAA,SAAA,SAAA,GAAE,KACvD,QAAQ,QAAQ;UAElB,iCACE,KAAA,QAAQ,SAAS,kCAA4B,QAAA,OAAA,SAAA,SAAA,GAAE,KAAK,QAAQ,QAAQ;UACtE,iBAAiB,QAAQ;SAC1B,GAGC,QAAQ,yBAAyB,UACjC,QAAQ,wBAAwB;AAEhC,gBAAM,MAAM,6CAA6C;AAG3D,YACE,QAAQ,wBAAwB,UAChC,QAAQ,uBAAuB;AAE/B,gBAAM,MAAM,4CAA4C;AAG1D,YACE,QAAQ,wBAAwB,UAChC,QAAQ,yBAAyB,UACjC,QAAQ,uBAAuB,QAAQ;AAEvC,gBAAM,MACJ,2EAA2E;AAI/E,aAAK,mBAAkB,KAAA,QAAQ,0BAAoB,QAAA,OAAA,SAAA,KAAI,KACvD,KAAK,kBAAiB,KAAA,QAAQ,yBAAmB,QAAA,OAAA,SAAA,KAAI,KACrD,KAAK,YAAY,QAAQ;MAC3B;MAEQ,MAAM,WAAQ;AACpB,YAAI;AACF,oBAAM,QAAA,iBAAgB,KAAK,OAAM,GAAI,KAAK,cAAc;iBACjD,KAAK;AACZ,cAAI,eAAe,QAAA,cAAc;AAC/B,gBAAI,KAAK,MACP,0DACA,KAAK,cAAc;AAErB;;AAGF,cAAA,OAAA,oBAAmB,GAAG;;MAE1B;MAEQ,MAAM,SAAM;;AAClB,YAAM,EAAE,iBAAiB,OAAM,IAAK,MAAM,KAAK,QAAQ;UACrD,eAAe,KAAK;SACrB;AAED,QAAI,OAAO,SAAS,KAClB,IAAI,KAAK,MACP,4DACA,GAAG,MAAM;AAIb,YAAM,WAAW,YAAW;AAC1B,cAAM,SAAS,MAAM,OAAA,SAAS,QAAQ,KAAK,WAAW,eAAe;AACrE,cAAI,OAAO,SAAS,OAAA,iBAAiB;AACnC,kBAAM,IAAI,MACR,+DAA+D,OAAO,KAAK,GAAG;QAGpF;AAGA,QAAI,gBAAgB,SAAS,0BAC3B,MAAA,KAAA,gBAAgB,UACb,4BAAsB,QAAA,OAAA,UAAA,GAAA,KAAA,EAAA,EACtB,KAAK,UAAU,SACd,MAAA,KAAK,MAAM,qDAAqD,GAAG,CAAC,IAGxE,MAAM,SAAQ;MAElB;MAEmB,gBAAa;AAE9B,aAAK,YAAY,YAAY,MAAK;AAEhC,UAAK,KAAK,SAAQ;QACpB,GAAG,KAAK,eAAe,OACvB,OAAA,YAAW,KAAK,SAAS;MAC3B;MAEU,MAAM,eAAY;AAC1B,cAAM,KAAK,SAAQ,GACnB,MAAM,KAAK,UAAU,WAAU;MACjC;MAEU,MAAM,aAAU;AACxB,QAAI,KAAK,aACP,cAAc,KAAK,SAAS,GAG9B,MAAM,KAAK,UAAU,SAAQ;MAC/B;;AAlHF,YAAA,gCAAA;;;;;;;;;;;ACxCA,QAAA,SAAA,gBAYa,yBAAb,MAAmC;MAKjC,YAAY,wBAA8C;AAJhD,aAAA,YAAY,IAEd,KAAA,WAA8B,CAAA,GAGpC,KAAK,0BAA0B;MACjC;;;;MAKA,OACE,SACA,gBAA8C;AAG9C,YAAI,KAAK,WAAW;AAClB,qBAAW,MAAM,eAAe,EAAE,MAAM,OAAA,iBAAiB,OAAM,CAAE,GAAG,CAAC;AACrE;;AAGF,aAAK,SAAS,KAAK,OAAO,GAC1B,WAAW,MAAM,eAAe,EAAE,MAAM,OAAA,iBAAiB,QAAO,CAAE,GAAG,CAAC;MACxE;;;;;MAMO,aAAU;AACf,eAAO,KAAK;MACd;MAEA,aAAU;AACR,eAAO,QAAQ,QAAO;MACxB;MAEA,QAAK;AACH,aAAK,WAAW,CAAA;MAClB;MAEA,6BACE,iBAA+B;AAE/B,eAAO,KAAK;MACd;MAEA,WAAQ;AACN,oBAAK,YAAY,IACV,QAAQ,QAAO;MACxB;;AAnDF,YAAA,yBAAA;;;;;;;;;;;ACbA,QAAA,SAAA,gBAKA,wBAAA,+BAUaC,yBAAb,MAAa,uBAAqB;MAIhC,YAAY,SAAsC;;AAHxC,aAAA,YAAY,IAIpB,KAAK,wBACH,KAAA,SAAS,yBAAmB,QAAA,OAAA,SAAA,KAAI,sBAAA;MACpC;MAEA,OACE,SACA,gBAA8C;AAE9C,YAAI,KAAK,WAAW;AAElB,uBAAa,gBAAgB,EAAE,MAAM,OAAA,iBAAiB,OAAM,CAAE;AAC9D;;AAGF,eAAO,uBAAsB,aAAa,SAAS,cAAc;MACnE;MAEA,aAAU;AACR,eAAO,QAAQ,QAAO;MACxB;MAEA,6BACE,iBAA+B;AAE/B,eAAO,KAAK,qBAAqB,eAAe;MAClD;MAEA,WAAQ;AACN,oBAAK,YAAY,IACV,QAAQ,QAAO;MACxB;MAEQ,OAAO,aACb,SACA,MAAoC;AAEpC,iBAAW,gBAAgB,QAAQ;AACjC,mBAAW,UAAU,aAAa;AAChC,oBAAQ,IAAI;cACV,YAAY,OAAO;cACnB,eAAe,OAAO;cACtB,YAAY,OAAO;aACpB;AAIL,aAAK,EAAE,MAAM,OAAA,iBAAiB,QAAO,CAAE;MACzC;;AApDF,YAAA,wBAAAA;;;;;;;;;;;ACdA,aAAgB,qBAAkB;AAChC,aAAO,mBAAmB,QAAQ,KAAK;IACzC;AAFA,YAAA,qBAAA;;;;;;;;;;;ACDO,QAAM,gBAAgB,CAAC,mBAAkC;AAG9D,cAAQ,gBAAgB;QACtB,KAAK;AACH,iBAAO;QACT,KAAK;AACH,iBAAO;QACT,KAAK;AACH,iBAAO;QACT;AACE,iBAAO;;IAEb;AAba,YAAA,gBAAa;AAenB,QAAM,gBAAgB,CAAC,iBAAgC;AAG5D,cAAQ,cAAc;QACpB,KAAK;AACH,iBAAO;QACT,KAAK;AACH,iBAAO;QACT;AACE,iBAAO;;IAEb;AAXa,YAAA,gBAAa;;;;;;;;;;;ACd1B,QAAA,gBAAA,UAAA,eAAA,GACA,OAAA,UAAA,MAAA;AAEa,YAAA,YAAY,KAAK,UAAU,cAAc,IAAI;;;;;;;;;;;ACH1D,QAAA,cAAA,qBACA,QAAA;AAEO,mBAAe,eAAY;AAChC,UAAI;AAGF,YAAM,UAFS,UAAM,YAAA,WAAU,wCAAwC,GAEjD,OACnB,MAAM;CAAI,EACV,KAAK,UAAQ,KAAK,SAAS,gBAAgB,CAAC;AAE/C,YAAI,CAAC;AACH,iBAAO;AAGT,YAAM,QAAQ,OAAO,MAAM,OAAO;AAClC,YAAI,MAAM,WAAW;AACnB,iBAAO,MAAM,CAAC,EAAE,MAAM,GAAG,EAAE;eAEtB,GAAG;AACV,cAAA,KAAK,MAAM,6BAA6B,CAAC,EAAE;;AAG7C,aAAO;IACT;AArBA,YAAA,eAAA;;;;;;;;;;;ACJA,QAAA,OAAA,UAAA,IAAA,GACA,QAAA;AAEO,mBAAe,eAAY;AAChC,UAAM,QAAQ,CAAC,mBAAmB,0BAA0B;AAE5D,eAAW,QAAQ;AACjB,YAAI;AAEF,kBADe,MAAM,KAAA,SAAG,SAAS,MAAM,EAAE,UAAU,OAAM,CAAE,GAC7C,KAAI;iBACX,GAAG;AACV,gBAAA,KAAK,MAAM,6BAA6B,CAAC,EAAE;;AAI/C,aAAO;IACT;AAbA,YAAA,eAAA;;;;;;;;;;;ACFA,QAAA,OAAA,UAAA,IAAA,GACA,cAAA,qBACA,QAAA;AAEO,mBAAe,eAAY;AAChC,UAAI;AAEF,gBADe,MAAM,KAAA,SAAG,SAAS,eAAe,EAAE,UAAU,OAAM,CAAE,GACtD,KAAI;eACX,GAAG;AACV,cAAA,KAAK,MAAM,6BAA6B,CAAC,EAAE;;AAG7C,UAAI;AAEF,gBADe,UAAM,YAAA,WAAU,4BAA4B,GAC7C,OAAO,KAAI;eAClB,GAAG;AACV,cAAA,KAAK,MAAM,6BAA6B,CAAC,EAAE;;AAG7C,aAAO;IACT;AAhBA,YAAA,eAAA;;;;;;;;;;;ACJA,QAAAC,WAAA,UAAA,SAAA,GACA,cAAA,qBACA,QAAA;AAEO,mBAAe,eAAY;AAChC,UAAM,OACJ,8EACE,UAAU;AACd,MAAIA,SAAQ,SAAS,UAAU,4BAA4BA,SAAQ,QACjE,UAAU,qCAAqC;AAGjD,UAAI;AAEF,YAAM,SADS,UAAM,YAAA,WAAU,GAAG,OAAO,IAAI,IAAI,EAAE,GAC9B,OAAO,MAAM,QAAQ;AAC1C,YAAI,MAAM,WAAW;AACnB,iBAAO,MAAM,CAAC,EAAE,KAAI;eAEf,GAAG;AACV,cAAA,KAAK,MAAM,6BAA6B,CAAC,EAAE;;AAG7C,aAAO;IACT;AAnBA,YAAA,eAAA;;;;;;;;;;;ACJA,QAAA,QAAA;AAEO,mBAAe,eAAY;AAChC,mBAAA,KAAK,MAAM,iDAAiD,GACrD;IACT;AAHA,YAAA,eAAA;;;;;;;;;;;ACHA,QAAAC,WAAA,UAAA,SAAA,GAEI;AAmBK,YAAA,eAAA;AAjBT,YAAQA,SAAQ,UAAU;MACxB,KAAK;AACH,QAAG,QAAA,eAAA,eAAiB,8BAAgC;AACpD;MACF,KAAK;AACH,QAAG,QAAA,eAAA,eAAiB,6BAA+B;AACnD;MACF,KAAK;AACH,QAAG,QAAA,eAAA,eAAiB,2BAA6B;AACjD;MACF,KAAK;AACH,QAAG,QAAA,eAAA,eAAiB,2BAA6B;AACjD;MACF;AACE,QAAG,QAAA,eAAA,eAAiB,mCAAqC;;;;;;;;;;;;ACjB7D,QAAA,yBAAA,gBACA,aAAA,oBAGA,OAAA,UAAA,IAAA,GACA,UAAA,kBACA,iBAAA,wBAMM,mBAAN,MAAsB;MACpB,OAAO,SAAiC;AACtC,YAAM,aAAiC;UACrC,CAAC,uBAAA,2BAA2B,SAAS,OAAG,KAAA,UAAQ;UAChD,CAAC,uBAAA,2BAA2B,SAAS,OAAG,QAAA,mBAAc,KAAA,MAAI,CAAE;;AAG9D,eAAO,IAAI,WAAA,SAAS,YAAY,KAAK,oBAAmB,CAAE;MAC5D;MAEQ,sBAAmB;AACzB,mBAAO,eAAA,cAAY,EAAG,KAAK,eAAY;AACrC,cAAM,aAAiC,CAAA;AACvC,iBAAI,cACF,WAAW,uBAAA,2BAA2B,OAAO,IAAI,YAE5C;QACT,CAAC;MACH;;AAGW,YAAA,mBAAmB,IAAI,iBAAgB;;;;;;;;;;;AC9BpD,QAAA,qBAAA,4BAMM,eAAN,MAAkB;MAChB,OAAO,SAAiC;AACtC,eAAO,QAAQ,QAAQ,mBAAA,iBAAiB,OAAO,OAAO,CAAC;MACzD;;AAGW,YAAA,eAAe,IAAI,aAAY;;;;;;;;;;;ACf5C,QAAA,yBAAA,gBACA,aAAA,oBAGA,OAAA,UAAA,IAAA,GACA,UAAA,kBAMM,iBAAN,MAAoB;MAClB,OAAO,SAAiC;AACtC,YAAM,aAAiC;UACrC,CAAC,uBAAA,2BAA2B,OAAO,OAAG,QAAA,mBAAc,KAAA,UAAQ,CAAE;UAC9D,CAAC,uBAAA,2BAA2B,UAAU,OAAG,KAAA,SAAO;;AAElD,eAAO,IAAI,WAAA,SAAS,UAAU;MAChC;;AAGW,YAAA,iBAAiB,IAAI,eAAc;;;;;;;;;;;AClBhD,QAAA,mBAAA,0BAMM,aAAN,MAAgB;MACd,OAAO,SAAiC;AACtC,eAAO,QAAQ,QAAQ,iBAAA,eAAe,OAAO,OAAO,CAAC;MACvD;;AAGW,YAAA,aAAa,IAAI,WAAU;;;;;;;;;;;ACfxC,QAAA,QAAA,eACA,yBAAA,gBACA,aAAA,oBAIA,KAAA,UAAA,IAAA,GAMM,sBAAN,MAAyB;MACvB,OAAO,SAAiC;AACtC,YAAM,aAAiC;UACrC,CAAC,uBAAA,2BAA2B,WAAW,GAAG,QAAQ;UAClD,CAAC,uBAAA,2BAA2B,uBAAuB,GAAG,QAAQ;UAC9D,CAAC,uBAAA,2BAA2B,uBAAuB,GAAG,QAAQ;UAC9D,CAAC,uBAAA,2BAA2B,oBAAoB,GAAG;YACjD,QAAQ,KAAK,CAAC;YACd,GAAG,QAAQ;YACX,GAAG,QAAQ,KAAK,MAAM,CAAC;;UAEzB,CAAC,uBAAA,2BAA2B,uBAAuB,GACjD,QAAQ,SAAS;UACnB,CAAC,uBAAA,2BAA2B,oBAAoB,GAAG;UACnD,CAAC,uBAAA,2BAA2B,2BAA2B,GAAG;;AAG5D,QAAI,QAAQ,KAAK,SAAS,MACxB,WAAW,uBAAA,2BAA2B,eAAe,IAAI,QAAQ,KAAK,CAAC;AAGzE,YAAI;AACF,cAAM,WAAW,GAAG,SAAQ;AAC5B,qBAAW,uBAAA,2BAA2B,aAAa,IAAI,SAAS;iBACzD,GAAG;AACV,gBAAA,KAAK,MAAM,kCAAkC,CAAC,EAAE;;AAGlD,eAAO,IAAI,WAAA,SAAS,UAAU;MAChC;;AAGW,YAAA,sBAAsB,IAAI,oBAAmB;;;;;;;;;;;ACzC1D,QAAA,wBAAA,+BAMM,kBAAN,MAAqB;MACnB,OAAO,QAAgC;AACrC,eAAO,QAAQ,QAAQ,sBAAA,oBAAoB,OAAO,MAAM,CAAC;MAC3D;;AAGW,YAAA,kBAAkB,IAAI,gBAAe;;;;;;;;;;;;;;;;;;;;ACflD,iBAAA,gCAAA,OAAA;AACA,iBAAA,wBAAA,OAAA;AACA,iBAAA,sBAAA,OAAA;AACA,iBAAA,4BAAA,OAAA;AACA,iBAAA,0BAAA,OAAA;AACA,iBAAA,2BAAA,OAAA;AACA,iBAAA,+BAAA,OAAA;;;;;;;;;;;;;;;;;;;;ACNA,iBAAA,iBAAA,OAAA;;;;;;;;;;;ACAA,QAAA,QAAA,eACA,yBAAA,gBACA,SAAA,gBAEA,aAAA,qBAOaC,YAAb,MAAa,UAAQ;MAoCnB,YAME,YACA,wBAAoD;;AAEpD,aAAK,cAAc,YACnB,KAAK,yBAAyB,0BAA0B,MACxD,KAAK,mBAAkB,KAAA,KAAK,iBAAW,QAAA,OAAA,SAAA,KAAI,CAAA,GAC3C,KAAK,0BAA0B,wBAAwB,KACrD,sBACE,KAAK,cAAc,OAAO,OAAO,CAAA,GAAI,KAAK,aAAa,eAAe,GACtE,KAAK,yBAAyB,IACvB,kBAET,UACE,MAAA,KAAK,MAAM,sDAAsD,GAAG,GACpE,KAAK,yBAAyB,IACvB,CAAA,EACR;MAEL;;;;MA3CA,OAAO,QAAK;AACV,eAAO,UAAS;MAClB;;;;MAKA,OAAO,UAAO;AACZ,eAAO,IAAI,UAAS;UAClB,CAAC,uBAAA,2BAA2B,YAAY,OAAG,WAAA,oBAAkB;UAC7D,CAAC,uBAAA,2BAA2B,sBAAsB,GAChD,OAAA,SAAS,uBAAA,2BAA2B,sBAAsB;UAC5D,CAAC,uBAAA,2BAA2B,kBAAkB,GAC5C,OAAA,SAAS,uBAAA,2BAA2B,kBAAkB;UACxD,CAAC,uBAAA,2BAA2B,qBAAqB,GAC/C,OAAA,SAAS,uBAAA,2BAA2B,qBAAqB;SAC5D;MACH;MA4BA,IAAI,aAAU;;AACZ,eAAI,KAAK,0BACP,MAAA,KAAK,MACH,+DAA+D,IAI5D,KAAA,KAAK,iBAAW,QAAA,OAAA,SAAA,KAAI,CAAA;MAC7B;;;;;;MAOA,MAAM,yBAAsB;AAC1B,QAAI,KAAK,0BACP,MAAM,KAAK;MAEf;;;;;;;;;MAUA,MAAM,OAAuB;;AAC3B,YAAI,CAAC;AAAO,iBAAO;AAGnB,YAAM,uBAAoB,OAAA,OAAA,OAAA,OAAA,CAAA,GACrB,KAAK,eAAe,IAEnB,KAAC,MAAmB,qBAAe,QAAA,OAAA,SAAA,KAAI,MAAM,UAAW;AAG9D,YACE,CAAC,KAAK,2BACN,CAAE,MAAmB;AAErB,iBAAO,IAAI,UAAS,oBAAoB;AAG1C,YAAM,0BAA0B,QAAQ,IAAI;UAC1C,KAAK;UACJ,MAAmB;SACrB,EAAE,KAAK,CAAC,CAAC,qBAAqB,oBAAoB,MAAK;;AACtD,iBAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,CAAA,GACK,KAAK,eAAe,GACpB,mBAAmB,IAElBC,MAAC,MAAmB,qBAAe,QAAAA,QAAA,SAAAA,MAAI,MAAM,UAAW,GACzD,oBAAoB;QAE3B,CAAC;AAED,eAAO,IAAI,UAAS,sBAAsB,uBAAuB;MACnE;;AA1HF,YAAA,WAAAD;AACkB,IAAAA,UAAA,QAAQ,IAAIA,UAAS,CAAA,CAAE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACZzC,QAAA,MAAA,gBAUM,kBAAN,MAAqB;MACnB,OAAO,QAAgC;AACrC,eAAO,QAAQ,QAAQ,IAAA,oBAAoB,OAAO,MAAM,CAAC;MAC3D;;AAGW,YAAA,kBAAkB,IAAI,gBAAe;;;;;;;;;;;AChBlD,QAAA,QAAA,eACA,SAAA,gBACA,yBAAA,gBACA,aAAA,oBASM,kBAAN,MAAqB;MAArB,cAAA;AAEmB,aAAA,cAAc,KAGd,KAAA,mBAAmB,KAGnB,KAAA,4BAA4B,KAE5B,KAAA,+BACf,0EACA,KAAK,cACL,gBAEe,KAAA,+BACf,uDACA,KAAK,cACL;MA+GJ;;;;;;;;MAtGE,OAAO,SAAiC;AACtC,YAAM,aAAiC,CAAA,GACjC,UAAM,OAAA,QAAM,GAEZ,gBAAgB,IAAI,0BACpB,cAAc,IAAI;AAExB,YAAI;AACF,cAAI;AACF,gBAAM,mBAAmB,KAAK,yBAAyB,aAAa;AACpE,mBAAO,OAAO,YAAY,gBAAgB;mBACnC,GAAG;AACV,kBAAA,KAAK,MAAM,uBAAuB,EAAE,OAAO,EAAE;;AAIjD,eAAI,gBACF,WAAW,uBAAA,2BAA2B,YAAY,IAAI,cAGjD,IAAI,WAAA,SAAS,UAAU;MAChC;;;;;;;;;;;;;;;MAgBQ,yBACN,kBAAyB;AAEzB,YAAI,CAAC;AAAkB,iBAAO,CAAA;AAE9B,YAAM,aAAiC,CAAA,GACjC,gBAA0B,iBAAiB,MAC/C,KAAK,kBACL,EAAE;AAEJ,iBAAW,gBAAgB,eAAe;AACxC,cAAM,eAAyB,aAAa,MAC1C,KAAK,2BACL,EAAE;AAEJ,cAAI,aAAa,WAAW;AAC1B;AAEF,cAAI,CAAC,KAAK,KAAK,IAAI;AAInB,cAFA,MAAM,IAAI,KAAI,GACd,QAAQ,MAAM,KAAI,EAAG,MAAM,OAAO,EAAE,KAAK,EAAE,GACvC,CAAC,KAAK,oBAAoB,GAAG;AAC/B,kBAAM,IAAI,MAAM,iBAAiB,KAAK,4BAA4B,EAAE;AAEtE,cAAI,CAAC,KAAK,SAAS,KAAK;AACtB,kBAAM,IAAI,MAAM,mBAAmB,KAAK,4BAA4B,EAAE;AAExE,qBAAW,GAAG,IAAI,mBAAmB,KAAK;;AAE5C,eAAO;MACT;;;;;;;;MASQ,SAAS,MAAY;AAC3B,eAAO,KAAK,UAAU,KAAK,eAAe,KAAK,sBAAsB,IAAI;MAC3E;;MAGQ,sBAAsB,KAAW;AACvC,iBAAS,IAAI,GAAG,IAAI,IAAI,QAAQ,KAAK;AACnC,cAAM,KAAK,IAAI,WAAW,CAAC;AAC3B,cAAI,KAAK,MAAQ,OAAO,MAAQ,OAAO,MAAQ,OAAO,MAAQ,KAAK;AACjE,mBAAO;;AAGX,eAAO;MACT;;;;;;;;MASQ,oBAAoB,KAAW;AACrC,eAAO,IAAI,SAAS,KAAK,KAAK,SAAS,GAAG;MAC5C;;AAGW,YAAA,kBAAkB,IAAI,gBAAe;;;;;;;;;;;AC5IlD,QAAA,oBAAA,2BAMM,cAAN,MAAiB;;;;;;;;MAQf,OAAO,QAAgC;AACrC,eAAO,QAAQ,QAAQ,kBAAA,gBAAgB,OAAO,MAAM,CAAC;MACvD;;AAGW,YAAA,cAAc,IAAI,YAAW;;;;;;;;;;;ACtB1C,QAAA,yBAAA,gBACA,MAAA,gBAEA,QAAA,eAKM,sBAAN,MAAyB;MACvB,OAAO,QAAgC;AAErC,YAAI,EADc,OAAO,YAAc;AAErC,iBAAO,IAAA,SAAS,MAAK;AAEvB,YAAM,kBAAsC;UAC1C,CAAC,uBAAA,2BAA2B,oBAAoB,GAAG;UACnD,CAAC,uBAAA,2BAA2B,2BAA2B,GAAG;UAC1D,CAAC,uBAAA,2BAA2B,uBAAuB,GAAG,UAAU;;AAElE,eAAO,KAAK,uBAAuB,iBAAiB,MAAM;MAC5D;;;;;;;;MAQQ,uBACN,iBACA,SAAiC;AAEjC,eACE,gBAAgB,uBAAA,2BAA2B,uBAAuB,MAAM,MAExE,MAAA,KAAK,MACH,qEAAqE,GAEhE,IAAA,SAAS,MAAK,KAEd,IAAI,IAAA,SAAQ,OAAA,OAAA,CAAA,GACd,eAAe,CAAA;MAGxB;;AAGW,YAAA,sBAAsB,IAAI,oBAAmB;;;;;;;;;;;;;;;;;;;;AC/C1D,iBAAA,2BAAA,OAAA;AACA,iBAAA,uBAAA,OAAA;AACA,iBAAA,+BAAA,OAAA;AACA,iBAAA,2BAAA,OAAA;;;;;;;;;;;ACHO,QAAM,gBAAgB,CAAI,QAE7B,QAAQ,QAAQ,OAAO,OAAQ,YAAY,OAAO,IAAI,QAAS;AAFtD,YAAA,gBAAa;;;;;;;;;;;ACA1B,QAAA,aAAA,oBAEA,QAAA,eACA,UAAA,kBAYa,kBAAkB,OAC7B,SAAkC,CAAA,MACZ;AACtB,UAAM,YAAyB,MAAM,QAAQ,KAC1C,OAAO,aAAa,CAAA,GAAI,IAAI,OAAM,MAAI;AACrC,YAAI;AACF,cAAM,WAAW,MAAM,EAAE,OAAO,MAAM;AACtC,uBAAA,KAAK,MAAM,GAAG,EAAE,YAAY,IAAI,oBAAoB,QAAQ,GACrD;iBACA,GAAG;AACV,uBAAA,KAAK,MAAM,GAAG,EAAE,YAAY,IAAI,YAAY,EAAE,OAAO,EAAE,GAChD,WAAA,SAAS,MAAK;;MAEzB,CAAC,CAAC;AAIJ,0BAAa,SAAS,GAEf,UAAU,OACf,CAAC,KAAK,aAAa,IAAI,MAAM,QAAQ,GACrC,WAAA,SAAS,MAAK,CAAE;IAEpB;AAvBa,YAAA,kBAAe;AA8BrB,QAAM,sBAAsB,CACjC,SAAkC,CAAA,MACrB;;AACb,UAAM,cAA0B,KAAA,OAAO,eAAS,QAAA,OAAA,SAAA,KAAI,CAAA,GAAI,IACtD,CAAC,MAA8B;AAC7B,YAAI;AACF,cAAM,oBAAoB,EAAE,OAAO,MAAM,GACrC;AACJ,kBAAI,QAAA,eAAwB,iBAAiB,GAAG;AAC9C,gBAAM,gBAAgB,aACK,MAAM,mBACP;AAE1B,uBAAW,IAAI,WAAA,SAAS,CAAA,GAAI,cAAa,CAAE;;AAE3C,uBAAW;AAGb,iBAAI,SAAS,yBACN,SACF,uBAAsB,EACtB,KAAK,MACJ,MAAA,KAAK,MAAM,GAAG,EAAE,YAAY,IAAI,oBAAoB,QAAQ,CAAC,IAGjE,MAAA,KAAK,MAAM,GAAG,EAAE,YAAY,IAAI,oBAAoB,QAAQ,GAGvD;iBACA,GAAG;AACV,uBAAA,KAAK,MAAM,GAAG,EAAE,YAAY,IAAI,YAAY,EAAE,OAAO,EAAE,GAChD,WAAA,SAAS,MAAK;;MAEzB,CAAC,GAGG,kBAAkB,UAAU,OAChC,CAAC,KAAK,aAAa,IAAI,MAAM,QAAQ,GACrC,WAAA,SAAS,MAAK,CAAE;AAGlB,aAAI,gBAAgB,0BACb,gBAAgB,uBAAsB,EAAG,KAAK,MAAK;AAEtD,qBAAa,SAAS;MACxB,CAAC,GAGI;IACT;AAjDa,YAAA,sBAAmB;AAwDhC,QAAM,eAAe,CAAC,cAA+B;AACnD,gBAAU,QAAQ,cAAW;AAE3B,YAAI,OAAO,KAAK,SAAS,UAAU,EAAE,SAAS,GAAG;AAC/C,cAAM,sBAAsB,KAAK,UAAU,SAAS,YAAY,MAAM,CAAC;AACvE,gBAAA,KAAK,QAAQ,mBAAmB;;MAEpC,CAAC;IACH;;;;;;;;;;;;;;;;;;;;AC7GA,iBAAA,oBAAA,OAAA;AACA,iBAAA,qBAAA,OAAA;AACA,iBAAA,qBAAA,OAAA;AACA,iBAAA,kBAAA,OAAA;AACA,iBAAA,kBAAA,OAAA;AACA,iBAAA,qBAAA,OAAA;AACA,iBAAA,4BAAA,OAAA;;;;;;;;;;;ACAA,QAAa,eAAb,MAAyB;MAAzB,cAAA;AACU,aAAA,mBAA2B,CAAA;MA4CrC;MA1CE,QAAQ,MAAU;AAChB,aAAK,iBAAiB,KAAK,IAAI;MACjC;MAEA,UACE,YACA,OAA2B;AAS3B,eAPc,KAAK,iBAAiB,OAAO,oBAEvC,KAAK,iBAAiB,eAAe,oBAAoB,UAAU,KACnE,KAAK,YAAY,eAAe,eAAe,KAAK,CAEvD;MAGH;MAEQ,iBACN,UACA,YAAgC;AAEhC,gBACG,SAAS,QAAO,MAAO,UACtB,WAAW,SAAS,SAAS,QAAO,MACtC,SAAS,cAAa,EAAG,MAAM,WAAW,IAAI,KAC9C,SAAS,cAAa,EAAG,MAAM,WAAW,IAAI;MAElD;MAEQ,YACN,UACA,OAA2B;AAE3B,eACE,SAAS,cAAa,EAAG,MAAM,MAAM,IAAI,MACxC,MAAM,YAAY,UACjB,SAAS,iBAAgB,EAAG,MAAM,MAAM,OAAO,OAChD,MAAM,cAAc,UACnB,SAAS,mBAAkB,EAAG,MAAM,MAAM,SAAS;MAEzD;;AA5CF,YAAA,eAAA;;;;;;;;;;;ACNA,QAAA,QAAA,eAeA,SAAA,gBAQa,iBAAb,MAA2B;MACzB,YACU,wBACE,aAAiC;AADnC,aAAA,yBAAA,wBACE,KAAA,cAAA;MACT;MAEO,QACR,OACA,aAA+B,CAAA,GAC/B,UAAmB,MAAA,QAAW,OAAM,GAAE;AAEtC,YAAI,OAAO,SAAU,UAAU;AAC7B,gBAAA,KAAK,KACH,uCAAuC,KAAK,YAAY,IAAI,KAAK,KAAK,EAAE;AAE1E;;AAEF,QACE,KAAK,YAAY,cAAc,MAAA,UAAU,OACzC,CAAC,OAAO,UAAU,KAAK,MAEvB,MAAA,KAAK,KACH,2DAA2D,KAAK,YAAY,IAAI,mCAAmC,GAErH,QAAQ,KAAK,MAAM,KAAK,GAEpB,CAAC,OAAO,UAAU,KAAK,MAI7B,KAAK,uBAAuB,OAC1B,OACA,YACA,aACA,OAAA,gBAAe,KAAK,IAAG,CAAE,CAAC;MAE9B;;AApCF,YAAA,iBAAA;AA0CA,QAAa,0BAAb,cACU,eAAc;;;;MAMtB,IAAI,OAAe,YAA+B,KAAa;AAC7D,aAAK,QAAQ,OAAO,YAAY,GAAG;MACrC;;AATF,YAAA,0BAAA;AAeA,QAAa,oBAAb,cAAuC,eAAc;;;;MAInD,IAAI,OAAe,YAA+B,KAAa;AAC7D,YAAI,QAAQ,GAAG;AACb,gBAAA,KAAK,KACH,sCAAsC,KAAK,YAAY,IAAI,KAAK,KAAK,EAAE;AAEzE;;AAGF,aAAK,QAAQ,OAAO,YAAY,GAAG;MACrC;;AAbF,YAAA,oBAAA;AAmBA,QAAa,sBAAb,cAAyC,eAAc;;;;MAIrD,OAAO,OAAe,YAA+B,KAAa;AAChE,YAAI,QAAQ,GAAG;AACb,gBAAA,KAAK,KACH,wCAAwC,KAAK,YAAY,IAAI,KAAK,KAAK,EAAE;AAE3E;;AAEF,aAAK,QAAQ,OAAO,YAAY,GAAG;MACrC;;AAZF,YAAA,sBAAA;AAeA,QAAa,uBAAb,MAAiC;MAM/B,YACE,YACA,gBACQ,qBAAuC;AAAvC,aAAA,sBAAA,qBAER,KAAK,cAAc,YACnB,KAAK,kBAAkB;MACzB;;;;MAKA,YAAY,UAA4B;AACtC,aAAK,oBAAoB,YAAY,UAAU,IAAI;MACrD;;;;MAKA,eAAe,UAA4B;AACzC,aAAK,oBAAoB,eAAe,UAAU,IAAI;MACxD;;AA3BF,YAAA,uBAAA;AA8BA,QAAa,8BAAb,cACU,qBAAoB;;AAD9B,YAAA,8BAAA;AAGA,QAAa,4BAAb,cACU,qBAAoB;;AAD9B,YAAA,4BAAA;AAGA,QAAa,oCAAb,cACU,qBAAoB;;AAD9B,YAAA,oCAAA;AAIA,aAAgB,uBACd,IAAW;AAEX,aAAO,cAAc;IACvB;AAJA,YAAA,yBAAA;;;;;;;;;;;AC9IA,QAAA,yBAAA,gCAIA,gBAAA,uBAaa,QAAb,MAAkB;MAChB,YAAoB,mBAAmC;AAAnC,aAAA,oBAAA;MAAsC;;;;MAK1D,gBAAgB,MAAc,SAAuB;AACnD,YAAM,iBAAa,uBAAA,4BACjB,MACA,uBAAA,eAAe,WACf,OAAO,GAEH,UAAU,KAAK,kBAAkB,sBAAsB,UAAU;AACvE,eAAO,IAAI,cAAA,oBAAoB,SAAS,UAAU;MACpD;;;;MAKA,cAAc,MAAc,SAAuB;AACjD,YAAM,iBAAa,uBAAA,4BACjB,MACA,uBAAA,eAAe,SACf,OAAO,GAEH,UAAU,KAAK,kBAAkB,sBAAsB,UAAU;AACvE,eAAO,IAAI,cAAA,kBAAkB,SAAS,UAAU;MAClD;;;;MAKA,oBAAoB,MAAc,SAAuB;AACvD,YAAM,iBAAa,uBAAA,4BACjB,MACA,uBAAA,eAAe,iBACf,OAAO,GAEH,UAAU,KAAK,kBAAkB,sBAAsB,UAAU;AACvE,eAAO,IAAI,cAAA,wBAAwB,SAAS,UAAU;MACxD;;;;MAKA,sBACE,MACA,SAAuB;AAEvB,YAAM,iBAAa,uBAAA,4BACjB,MACA,uBAAA,eAAe,kBACf,OAAO,GAEH,WACJ,KAAK,kBAAkB,2BAA2B,UAAU;AAC9D,eAAO,IAAI,cAAA,0BACT,YACA,UACA,KAAK,kBAAkB,kBAAkB;MAE7C;;;;MAKA,wBACE,MACA,SAAuB;AAEvB,YAAM,iBAAa,uBAAA,4BACjB,MACA,uBAAA,eAAe,oBACf,OAAO,GAEH,WACJ,KAAK,kBAAkB,2BAA2B,UAAU;AAC9D,eAAO,IAAI,cAAA,4BACT,YACA,UACA,KAAK,kBAAkB,kBAAkB;MAE7C;;;;MAKA,8BACE,MACA,SAAuB;AAEvB,YAAM,iBAAa,uBAAA,4BACjB,MACA,uBAAA,eAAe,4BACf,OAAO,GAEH,WACJ,KAAK,kBAAkB,2BAA2B,UAAU;AAC9D,eAAO,IAAI,cAAA,kCACT,YACA,UACA,KAAK,kBAAkB,kBAAkB;MAE7C;;;;MAKA,2BACE,UACA,aAAyB;AAEzB,aAAK,kBAAkB,mBAAmB,iBACxC,UACA,WAAW;MAEf;;;;MAKA,8BACE,UACA,aAAyB;AAEzB,aAAK,kBAAkB,mBAAmB,oBACxC,UACA,WAAW;MAEf;;AAjIF,YAAA,QAAA;;;;;;;;;;;ACzBA,QAAA,yBAAA,gCAUsB,gBAAtB,MAAmC;MACjC,YAAsB,uBAA2C;AAA3C,aAAA,wBAAA;MAA8C;MAapE,0BAAuB;AACrB,eAAO,KAAK;MACd;MAEA,kBAAkB,aAAmB;AACnC,aAAK,4BAAwB,uBAAA,4BAC3B,KAAK,sBAAsB,MAC3B,KAAK,sBAAsB,MAC3B;UACE;UACA,WAAW,KAAK,sBAAsB;UACtC,MAAM,KAAK,sBAAsB;SAClC;MAEL;;AA5BF,YAAA,gBAAA;;;;;;;;;;;ACbA,QAAA,UAAA,kBAMa,UAAb,MAAoB;MAIlB,YAAoB,OAAkC;AAAlC,aAAA,QAAA,OAHZ,KAAA,YAAY,oBAAI,IAAG,GACnB,KAAA,UAAU,oBAAI,IAAG;MAEgC;MAEzD,IAAI,KAAc,UAAuB;AACvC,4BAAA,WAAa,KAAK,MAAM,GAAG,IACpB,KAAK,UAAU,IAAI,QAAQ;MACpC;MAEA,aAAa,KAAc,gBAA+B;AACxD,YAAM,OAAO,KAAK,MAAM,GAAG;AAC3B,YAAI,KAAK,UAAU,IAAI,IAAI;AACzB,iBAAO,KAAK,UAAU,IAAI,IAAI;AAEhC,YAAM,MAAM,eAAc;AAC1B,eAAK,KAAK,QAAQ,IAAI,IAAI,KACxB,KAAK,QAAQ,IAAI,MAAM,GAAG,GAE5B,KAAK,UAAU,IAAI,MAAM,GAAG,GACrB;MACT;MAEA,IAAI,KAAc,OAAkB,UAAuB;AACzD,qBAAA,WAAa,KAAK,MAAM,GAAG,IACtB,KAAK,QAAQ,IAAI,QAAQ,KAC5B,KAAK,QAAQ,IAAI,UAAU,GAAG,GAEhC,KAAK,UAAU,IAAI,UAAU,KAAK;MACpC;MAEA,IAAI,KAAc,UAAuB;AACvC,4BAAA,WAAa,KAAK,MAAM,GAAG,IACpB,KAAK,UAAU,IAAI,QAAQ;MACpC;MAEA,CAAC,OAAI;AACH,YAAM,cAAc,KAAK,QAAQ,QAAO,GACpC,OAAO,YAAY,KAAI;AAC3B,eAAO,KAAK,SAAS;AACnB,gBAAM,CAAC,KAAK,MAAM,CAAC,GAAG,KAAK,MAAM,CAAC,CAAC,GACnC,OAAO,YAAY,KAAI;MAE3B;MAEA,CAAC,UAAO;AACN,YAAM,gBAAgB,KAAK,UAAU,QAAO,GACxC,OAAO,cAAc,KAAI;AAC7B,eAAO,KAAK,SAAS;AAGnB,gBAAM,CAAC,KAAK,QAAQ,IAAI,KAAK,MAAM,CAAC,CAAC,GAAI,KAAK,MAAM,CAAC,GAAG,KAAK,MAAM,CAAC,CAAC,GACrE,OAAO,cAAc,KAAI;MAE7B;MAEA,IAAI,OAAI;AACN,eAAO,KAAK,UAAU;MACxB;;AA3DF,YAAA,UAAA;AA8DA,QAAa,mBAAb,cAAiD,QAIhD;MACC,cAAA;AACE,cAAM,QAAA,cAAc;MACtB;;AAPF,YAAA,mBAAA;;;;;;;;;;;AClEA,QAAA,YAAA,mBASa,uBAAb,MAAiC;MAM/B,YAAoB,aAA0B;AAA1B,aAAA,cAAA,aALZ,KAAA,2BAA2B,IAAI,UAAA,iBAAgB,GAG/C,KAAA,yBAAyB,IAAI,UAAA,iBAAgB;MAEJ;MAEjD,OACE,OACA,YACA,UACA,gBAAsB;AAEtB,YAAM,eAAe,KAAK,yBAAyB,aACjD,YACA,MAAM,KAAK,YAAY,mBAAmB,cAAc,CAAC;AAE3D,QAAA,cAAc,OAAO,KAAK;MAC5B;MAEA,cACE,cACA,gBAAsB;AAEtB,cAAM,KAAK,aAAa,QAAO,CAAE,EAAE,QACjC,CAAC,CAAC,YAAY,OAAO,QAAQ,MAAK;AAChC,cAAM,eACJ,KAAK,YAAY,mBAAmB,cAAc;AACpD,UAAA,cAAc,OAAO,KAAK;AAC1B,cAAI,QAAQ;AAEZ,cAAI,KAAK,uBAAuB,IAAI,YAAY,QAAQ,GAAG;AAGzD,gBAAM,WAAW,KAAK,uBAAuB,IAC3C,YACA,QAAQ;AAEV,oBAAQ,KAAK,YAAY,KAAK,UAAU,YAAY;;AAGtD,cAAI,KAAK,yBAAyB,IAAI,YAAY,QAAQ,GAAG;AAG3D,gBAAM,SAAS,KAAK,yBAAyB,IAC3C,YACA,QAAQ;AAEV,oBAAQ,KAAK,YAAY,MAAM,QAAQ,KAAK;;AAI9C,eAAK,uBAAuB,IAAI,YAAY,cAAc,QAAQ,GAClE,KAAK,yBAAyB,IAAI,YAAY,OAAO,QAAQ;QAC/D,CAAC;MAEL;;;;;MAMA,UAAO;AACL,YAAM,kBAAkB,KAAK;AAC7B,oBAAK,2BAA2B,IAAI,UAAA,iBAAgB,GAC7C;MACT;;AAnEF,YAAA,uBAAA;;;;;;;;;;;ACJA,QAAA,2BAAA,kCAGA,YAAA,mBA0Ba,0BAAb,MAAa,yBAAuB;MAUlC,YACU,aACR,kBAAyC;AADjC,aAAA,cAAA,aAVF,KAAA,2BAA2B,oBAAI,IAAG,GAIlC,KAAA,iBAAiB,oBAAI,IAAG,GAS9B,iBAAiB,QAAQ,YAAS;AAChC,eAAK,yBAAyB,IAAI,QAAQ,CAAA,CAAE;QAC9C,CAAC;MACH;;;;;;;;;;MAWA,aACE,WACA,sBACA,sBACA,gBAAsB;AAEtB,aAAK,oBAAoB,oBAAoB;AAC7C,YAAM,0BACJ,KAAK,kCAAkC,SAAS,GAE9C,SAAS,yBACT;AAEJ,YAAI,KAAK,eAAe,IAAI,SAAS,GAAG;AAEtC,cAAM,OAAO,KAAK,eAAe,IAAI,SAAS,GACxC,qBAAqB,KAAK;AAChC,mCAAyB,KAAK,wBAc1B,2BAA2B,yBAAA,uBAAuB,aAGpD,SAAS,yBAAwB,MAC/B,KAAK,eACL,yBACA,KAAK,WAAW,IAGlB,SAAS,yBAAwB,mBAC/B,KAAK,eACL,yBACA,kBAAkB;;AAKtB,mCAAyB,UAAU,6BACjC,qBAAqB,IAAI;AAK7B,aAAK,eAAe,IAAI,WAAW;UACjC,eAAe;UACf;UACA;SACD;AAED,YAAM,sBAAsB,mCAAmC,MAAM;AAGrE,YAAI,oBAAoB,WAAW;AAInC,iBAAO,KAAK,YAAY;YACtB;YACA;YACA;;YACc;UAAc;MAEhC;MAEQ,oBAAoB,qBAAwC;AAClE,YAAM,uBAAuB,KAAK,yBAAyB,KAAI;AAC/D,iBAAW,aAAa,sBAAsB;AAC5C,cAAI,QAAQ,KAAK,yBAAyB,IAAI,SAAS;AACvD,UAAI,UAAU,WACZ,QAAQ,CAAA,GACR,KAAK,yBAAyB,IAAI,WAAW,KAAK,IAEpD,MAAM,KAAK,mBAAmB;;MAElC;MAEQ,kCAAkC,WAAgC;AACxE,YAAI,SAAS,IAAI,UAAA,iBAAgB,GAC3B,iBAAiB,KAAK,yBAAyB,IAAI,SAAS;AAElE,YADA,KAAK,yBAAyB,IAAI,WAAW,CAAA,CAAE,GAC3C,mBAAmB;AACrB,iBAAO;AAET,iBAAW,MAAM;AACf,mBAAS,yBAAwB,MAAM,QAAQ,IAAI,KAAK,WAAW;AAErE,eAAO;MACT;MAEA,OAAO,MACL,MACA,SACA,YAAyB;AAEzB,YAAM,SAAS,MACT,WAAW,QAAQ,QAAO,GAC5B,OAAO,SAAS,KAAI;AACxB,eAAO,KAAK,SAAS,MAAM;AACzB,cAAM,CAAC,KAAK,QAAQ,IAAI,IAAI,KAAK;AACjC,cAAI,KAAK,IAAI,KAAK,IAAI,GAAG;AACvB,gBAAM,mBAAmB,KAAK,IAAI,KAAK,IAAI,GAGrC,eAAe,WAAW,MAAM,kBAAmB,MAAM;AAC/D,mBAAO,IAAI,KAAK,cAAc,IAAI;;AAElC,mBAAO,IAAI,KAAK,QAAQ,IAAI;AAG9B,iBAAO,SAAS,KAAI;;AAEtB,eAAO;MACT;;;;;MAMA,OAAO,mBACL,MACA,SACA,oBAA0B;AAE1B,iBAAW,CAAC,KAAK,IAAI,KAAK,KAAK,KAAI,GAAI;AACrC,cAAM,sBAAsB,QAAQ,IAAI,KAAK,IAAI;AACjD,UAAA,qBAAqB,aAAa,kBAAkB;;AAEtD,eAAO;MACT;;AAvKF,YAAA,0BAAA;AA2KA,aAAS,mCACP,KAAwB;AAExB,aAAO,MAAM,KAAK,IAAI,QAAO,CAAE;IACjC;;;;;;;;;;;AChNA,QAAA,kBAAA,yBAEA,yBAAA,gCACA,4BAAA,mCAGA,YAAA,mBAQa,qBAAb,cACU,gBAAA,cAAa;MAMrB,YACE,uBACA,YACQ,sBACR,kBAAyC;AAEzC,cAAM,qBAAqB,GAHnB,KAAA,uBAAA,sBAIR,KAAK,sBAAsB,IAAI,uBAAA,qBAAqB,UAAU,GAC9D,KAAK,yBAAyB,IAAI,0BAAA,wBAChC,YACA,gBAAgB;MAEpB;MAEA,OAAO,cAAwC,iBAAuB;AACpE,YAAM,YAAY,IAAI,UAAA,iBAAgB;AACtC,cAAM,KAAK,aAAa,QAAO,CAAE,EAAE,QAAQ,CAAC,CAAC,YAAY,KAAK,MAAK;AACjE,oBAAU,IAAI,KAAK,qBAAqB,QAAQ,UAAU,GAAG,KAAK;QACpE,CAAC,GACD,KAAK,oBAAoB,cAAc,WAAW,eAAe;MACnE;;;;;;;;MASA,QACE,WACA,gBAAsB;AAEtB,YAAM,gBAAgB,KAAK,oBAAoB,QAAO;AAEtD,eAAO,KAAK,uBAAuB,aACjC,WACA,KAAK,uBACL,eACA,cAAc;MAElB;;AAhDF,YAAA,qBAAA;;;;;;;;;;;ACfA,aAAgB,0BACd,UACA,iBAAqC;AAErC,UAAI,kBAAkB;AACtB,aAAI,SAAS,SAAS,gBAAgB,SACpC,mBAAmB,YAAa,SAAS,IAAI,qBAAqB,gBAAgB,IAAI;IAEpF,SAAS,SAAS,gBAAgB,SACpC,mBAAmB,YAAa,SAAS,IAAI,qBAAqB,gBAAgB,IAAI;IAEpF,SAAS,cAAc,gBAAgB,cACzC,mBAAmB,kBAAmB,SAAS,SAAS,qBAAqB,gBAAgB,SAAS;IAEpG,SAAS,gBAAgB,gBAAgB,gBAC3C,mBAAmB,mBAAoB,SAAS,WAAW,qBAAqB,gBAAgB,WAAW;IAGtG;IACT;AAnBA,YAAA,4BAAA;AAqBA,aAAgB,qCACd,UACA,iBAAqC;AAErC,aAAO,qBAAsB,SAAS,SAAS,kEAAkE,gBAAgB,IAAI;IACvI;AALA,YAAA,uCAAA;AAOA,aAAgB,gCACd,UACA,iBAAqC;AAErC,aAAO,gBAAiB,SAAS,IAAI,kEAAkE,gBAAgB,IAAI;IAC7H;AALA,YAAA,kCAAA;AAOA,aAAgB,gCACd,UACA,iBAAqC;AAErC,UAAM,WAAuC;QAC3C,MAAM,gBAAgB;QACtB,MAAM,gBAAgB;QACtB,MAAM,gBAAgB;SAGlB,iBAAiB,KAAK,UAAU,QAAQ;AAE9C,aAAO,gDAAiD,SAAS,IAAI,6BAA6B,cAAc;IAClH;AAbA,YAAA,kCAAA;AAeA,aAAgB,+BACd,UACA,iBAAqC;AAErC,UAAM,WAAuC;QAC3C,MAAM,gBAAgB;QACtB,MAAM,gBAAgB;QACtB,MAAM,gBAAgB;SAGlB,iBAAiB,KAAK,UAAU,QAAQ;AAE9C,aAAO,gDAAiD,SAAS,IAAI,6BAA6B,cAAc;8CACnE,SAAS,IAAI,qBAAqB,SAAS,WAAW,4BAA4B,cAAc;8CAChG,gBAAgB,IAAI,qBAAqB,SAAS,WAAW,4BAA4B,cAAc;IACtJ;AAfA,YAAA,iCAAA;AAiBA,aAAgB,4BACd,UACA,iBAAqC;AAGrC,aAAI,SAAS,cAAc,gBAAgB,YAClC,qCAAqC,UAAU,eAAe,IAGnE,SAAS,SAAS,gBAAgB,OAC7B,gCAAgC,UAAU,eAAe,IAI9D,SAAS,SAAS,gBAAgB,OAE7B,gCAAgC,UAAU,eAAe,IAG9D,SAAS,gBAAgB,gBAAgB,cACpC,+BAA+B,UAAU,eAAe,IAG1D;IACT;AAxBA,YAAA,8BAAA;;;;;;;;;;;ACrEA,QAAA,yBAAA,gCAIA,MAAA,eACA,0BAAA,iCAWa,wBAAb,MAAa,uBAAqB;MAAlC,cAAA;AACmB,aAAA,kBAA8B,oBAAI,IAAG,GACrC,KAAA,wBAAwB,oBAAI,IAAG;MAqIlD;MAhIE,OAAO,SAAM;AACX,eAAO,IAAI,uBAAqB;MAClC;MAEA,YAAY,WAAgC;AAC1C,YAAI,WAA4B,CAAA;AAChC,iBAAW,kBAAkB,KAAK,gBAAgB,OAAM;AACtD,qBAAW,SAAS,OAAO,cAAc;AAG3C,YAAM,uBAAuB,KAAK,sBAAsB,IAAI,SAAS;AACrE,YAAI,wBAAwB;AAC1B,mBAAW,kBAAkB,qBAAqB,OAAM;AACtD,uBAAW,SAAS,OAAO,cAAc;AAI7C,eAAO;MACT;MAEA,SAAS,SAAsB;AAC7B,aAAK,iBAAiB,SAAS,KAAK,eAAe;MACrD;MAEA,qBACE,WACA,SAAsB;AAEtB,YAAI,aAAa,KAAK,sBAAsB,IAAI,SAAS;AACzD,QAAI,cAAc,SAChB,aAAa,oBAAI,IAAG,GACpB,KAAK,sBAAsB,IAAI,WAAW,UAAU,IAEtD,KAAK,iBAAiB,SAAS,UAAU;MAC3C;MAEA,8BACE,oBAAwC;AAExC,YAAM,WAAW,KAAK,gBAAgB,IAAI,mBAAmB,IAAI;AACjE,eAAI,aAAa,SACR,OAKF,KAAK,+BAAkC,oBAAoB,QAAQ;MAC5E;MAEA,uCACE,WACA,oBAAwC;AAExC,YAAM,aAAa,KAAK,sBAAsB,IAAI,SAAS;AAC3D,YAAI,eAAe;AACjB,iBAAO;AAGT,YAAM,WAAW,WAAW,IAAI,mBAAmB,IAAI;AACvD,eAAI,aAAa,SACR,OAKF,KAAK,+BAAkC,oBAAoB,QAAQ;MAC5E;MAEQ,iBAAiB,SAAwB,YAAsB;AACrE,YAAM,aAAa,QAAQ,wBAAuB,GAC5C,WAAW,WAAW,IAAI,WAAW,IAAI;AAE/C,YAAI,aAAa,QAAW;AAC1B,qBAAW,IAAI,WAAW,MAAM,CAAC,OAAO,CAAC;AACzC;;AAGF,iBAAS,KAAK,OAAO;MACvB;MAEQ,+BACN,oBACA,kBAAiC;AAEjC,YAAI,oBAAoB;AAExB,iBAAW,mBAAmB,kBAAkB;AAC9C,cAAM,qBAAqB,gBAAgB,wBAAuB;AAElE,cAAI,uBAAA,4BAA2B,oBAAoB,kBAAkB,KAE/D,mBAAmB,gBAAgB,mBAAmB,gBAEtD,mBAAmB,YAAY,SAC/B,mBAAmB,YAAY,UAE/B,gBAAgB,kBAAkB,mBAAmB,WAAW,GAGlE,IAAI,KAAK,KACP,uCACA,mBAAmB,MACnB;GACA;OACA,wBAAA,2BAA0B,oBAAoB,kBAAkB,GAChE;+BACA,wBAAA,6BAA4B,oBAAoB,kBAAkB,CAAC,IAIvE,oBAAoB,mBAIpB,IAAI,KAAK,KACP,uCACA,mBAAmB,MACnB;GACA;OACA,wBAAA,2BAA0B,oBAAoB,kBAAkB,GAChE;OACA,wBAAA,6BAA4B,oBAAoB,kBAAkB,CAAC;;AAKzE,eAAO;MACT;;AAtIF,YAAA,wBAAA;;;;;;;;;;;ACXA,QAAa,qBAAb,MAA+B;MAC7B,YAA6B,kBAAyC;AAAzC,aAAA,mBAAA;MAA4C;MAEzE,OACE,OACA,YACA,SACA,YAAkB;AAElB,aAAK,iBAAiB,QAAQ,QAAK;AACjC,aAAG,OAAO,OAAO,YAAY,SAAS,UAAU;QAClD,CAAC;MACH;;AAZF,YAAA,qBAAA;;;;;;;;;;;ACNA,QAAA,QAAA,eAQA,YAAA,mBACA,gBAAA,uBAMa,uBAAb,MAAiC;MAM/B,YAAoB,aAAiC;AAAjC,aAAA,cAAA,aAFpB,KAAA,UAAU,IAAI,UAAA,iBAAgB;MAE0B;;;;MAKxD,QAAQ,OAAe,aAA+B,CAAA,GAAE;AACtD,YAAI,OAAO,SAAU,UAAU;AAC7B,gBAAA,KAAK,KACH,uCAAuC,KAAK,YAAY,IAAI,KAAK,KAAK,EAAE;AAE1E;;AAEF,QACE,KAAK,YAAY,cAAc,MAAA,UAAU,OACzC,CAAC,OAAO,UAAU,KAAK,MAEvB,MAAA,KAAK,KACH,2DAA2D,KAAK,YAAY,IAAI,mCAAmC,GAErH,QAAQ,KAAK,MAAM,KAAK,GAEpB,CAAC,OAAO,UAAU,KAAK,MAI7B,KAAK,QAAQ,IAAI,YAAY,KAAK;MACpC;;AAhCF,YAAA,uBAAA;AAsCA,QAAa,4BAAb,MAAsC;MAAtC,cAAA;AAIE,aAAA,UAA+D,oBAAI,IAAG;MAuCxE;;;;MAlCE,QACE,QACA,OACA,aAA+B,CAAA,GAAE;AAEjC,YAAI,KAAC,cAAA,wBAAuB,MAAM;AAChC;AAEF,YAAI,MAAM,KAAK,QAAQ,IAAI,MAAM;AAKjC,YAJI,OAAO,SACT,MAAM,IAAI,UAAA,iBAAgB,GAC1B,KAAK,QAAQ,IAAI,QAAQ,GAAG,IAE1B,OAAO,SAAU,UAAU;AAC7B,gBAAA,KAAK,KACH,uCAAuC,OAAO,YAAY,IAAI,KAAK,KAAK,EAAE;AAE5E;;AAEF,QACE,OAAO,YAAY,cAAc,MAAA,UAAU,OAC3C,CAAC,OAAO,UAAU,KAAK,MAEvB,MAAA,KAAK,KACH,2DAA2D,OAAO,YAAY,IAAI,mCAAmC,GAEvH,QAAQ,KAAK,MAAM,KAAK,GAEpB,CAAC,OAAO,UAAU,KAAK,MAI7B,IAAI,IAAI,YAAY,KAAK;MAC3B;;AA1CF,YAAA,4BAAA;;;;;;;;;;;ACrDA,QAAA,QAAA,eAOA,gBAAA,uBACA,qBAAA,4BAIA,UAAA,kBA6Ba,qBAAb,MAA+B;MAA/B,cAAA;AACU,aAAA,aAAyC,CAAA,GACzC,KAAA,kBAAmD,CAAA;MAkJ7D;MAhJE,YAAY,UAA8B,YAAgC;AAExE,QADY,KAAK,cAAc,UAAU,UAAU,KACxC,KAGX,KAAK,WAAW,KAAK,EAAE,UAAU,WAAU,CAAE;MAC/C;MAEA,eACE,UACA,YAAgC;AAEhC,YAAM,MAAM,KAAK,cAAc,UAAU,UAAU;AACnD,QAAI,MAAM,KAGV,KAAK,WAAW,OAAO,KAAK,CAAC;MAC/B;MAEA,iBACE,UACA,aAAyB;AAGzB,YAAM,wBAAwB,IAAI,IAChC,YAAY,OAAO,cAAA,sBAAsB,CAAC;AAE5C,YAAI,sBAAsB,SAAS,GAAG;AACpC,gBAAA,KAAK,MACH,oEACA,WAAW;AAEb;;AAGF,QADY,KAAK,mBAAmB,UAAU,qBAAqB,KACxD,KAGX,KAAK,gBAAgB,KAAK,EAAE,UAAU,aAAa,sBAAqB,CAAE;MAC5E;MAEA,oBACE,UACA,aAAyB;AAGzB,YAAM,wBAAwB,IAAI,IAChC,YAAY,OAAO,cAAA,sBAAsB,CAAC,GAEtC,MAAM,KAAK,mBAAmB,UAAU,qBAAqB;AACnE,QAAI,MAAM,KAGV,KAAK,gBAAgB,OAAO,KAAK,CAAC;MACpC;;;;MAKA,MAAM,QACJ,gBACA,eAAsB;AAEtB,YAAM,kBAAkB,KAAK,kBAC3B,gBACA,aAAa,GAET,uBAAuB,KAAK,uBAChC,gBACA,aAAa;AAWf,gBARgB,UAAM,QAAA,mBAAkB;UACtC,GAAG;UACH,GAAG;SACJ,GAGE,OAAO,QAAA,kCAAkC,EACzC,IAAI,QAAM,GAAG,MAAM;MAExB;MAEQ,kBAAkB,iBAAyB,eAAsB;AACvE,eAAO,KAAK,WAAW,IAAI,OAAO,EAAE,UAAU,WAAU,MAAM;AAC5D,cAAM,mBAAmB,IAAI,mBAAA,qBAAqB,WAAW,WAAW,GACpE,cAA6B,QAAQ,QACvC,SAAS,gBAAgB,CAAC;AAE5B,UAAI,iBAAiB,SACnB,kBAAc,QAAA,iBAAgB,aAAa,aAAa,IAE1D,MAAM,aACN,WAAW,gBAAgB,QAAQ,mBAAgB;AACjD,0BAAc,OAAO,iBAAiB,SAAS,eAAe;UAChE,CAAC;QACH,CAAC;MACH;MAEQ,uBACN,iBACA,eAAsB;AAEtB,eAAO,KAAK,gBAAgB,IAAI,OAAO,EAAE,UAAU,YAAW,MAAM;AAClE,cAAM,mBAAmB,IAAI,mBAAA,0BAAyB,GAClD,cAA6B,QAAQ,QACvC,SAAS,gBAAgB,CAAC;AAE5B,UAAI,iBAAiB,SACnB,kBAAc,QAAA,iBAAgB,aAAa,aAAa,IAE1D,MAAM,aACN,YAAY,QAAQ,gBAAa;AAC/B,gBAAM,SAAS,iBAAiB,QAAQ,IAAI,UAAU;AACtD,YAAI,UAAU,QAGd,WAAW,gBAAgB,QAAQ,mBAAgB;AACjD,4BAAc,OAAO,QAAQ,eAAe;YAC9C,CAAC;UACH,CAAC;QACH,CAAC;MACH;MAEQ,cACN,UACA,YAAgC;AAEhC,eAAO,KAAK,WAAW,UAAU,YACxB,OAAO,aAAa,YAAY,OAAO,eAAe,UAC9D;MACH;MAEQ,mBACN,UACA,aAAsC;AAEtC,eAAO,KAAK,gBAAgB,UAAU,YAElC,OAAO,aAAa,gBACpB,QAAA,WAAU,OAAO,aAAa,WAAW,CAE5C;MACH;;AAnJF,YAAA,qBAAA;;;;;;;;;;;ACpCA,QAAA,kBAAA,yBAEA,yBAAA,gCACA,4BAAA,mCASa,oBAAb,cACU,gBAAA,cAAa;MAMrB,YACE,sBACA,YACQ,sBACR,kBAAyC;AAEzC,cAAM,oBAAoB,GAHlB,KAAA,uBAAA,sBAIR,KAAK,sBAAsB,IAAI,uBAAA,qBAAqB,UAAU,GAC9D,KAAK,yBAAyB,IAAI,0BAAA,wBAChC,YACA,gBAAgB;MAEpB;MAEA,OACE,OACA,YACA,SACA,YAAkB;AAElB,qBAAa,KAAK,qBAAqB,QAAQ,YAAY,OAAO,GAClE,KAAK,oBAAoB,OAAO,OAAO,YAAY,SAAS,UAAU;MACxE;;;;;;;MAQA,QACE,WACA,gBAAsB;AAEtB,YAAM,gBAAgB,KAAK,oBAAoB,QAAO;AAEtD,eAAO,KAAK,uBAAuB,aACjC,WACA,KAAK,uBACL,eACA,cAAc;MAElB;;AAjDF,YAAA,oBAAA;;;;;;;;;;;ACVA,QAAsB,sBAAtB,MAAyC;MAavC,OAAO,OAAI;AACT,eAAO;MACT;;AAfF,YAAA,sBAAA;AAkBA,QAAa,0BAAb,cAA6C,oBAAmB;MAC9D,QAAQ,UAA4B,UAAkB;AACpD,eAAO;MACT;;AAHF,YAAA,0BAAA;AAUA,QAAa,+BAAb,cAAkD,oBAAmB;MACnE,YAAoB,wBAAgC;AAClD,cAAK,GADa,KAAA,yBAAA;MAEpB;MAEA,QAAQ,UAA4B,UAAiB;AACnD,YAAM,qBAAuC,CAAA;AAC7C,sBAAO,KAAK,QAAQ,EACjB,OAAO,mBACN,KAAK,uBAAuB,SAAS,aAAa,CAAC,EAEpD,QACC,mBACG,mBAAmB,aAAa,IAAI,SAAS,aAAa,CAAE,GAE5D;MACT;;AAhBF,YAAA,+BAAA;AAmBA,QAAM,OAAO,IAAI,wBAAuB;;;;;;;;;;;AClDxC,QAAA,yBAAA,gCAIA,UAAA,iBACA,UAAA,kBACA,uBAAA,8BAGA,0BAAA,iCACA,+BAAA,sCACA,uBAAA,8BACA,sBAAA,6BAEA,wBAAA,+BAMa,mBAAb,MAA6B;MAK3B,YACU,2BACA,uBAA2C;AAD3C,aAAA,4BAAA,2BACA,KAAA,wBAAA,uBANV,KAAA,wBAAwB,IAAI,wBAAA,sBAAqB,GACjD,KAAA,qBAAqB,IAAI,qBAAA,mBAAkB,GAOzC,KAAK,QAAQ,IAAI,QAAA,MAAM,IAAI;MAC7B;MAEA,sBAAsB,YAAgC;AACpD,YAAM,WAAW,KAAK,uBAAuB,YAAY,oBAAA,iBAAiB;AAE1E,eAAI,SAAS,WAAW,IACf,SAAS,CAAC,IAEZ,IAAI,6BAAA,mBAAmB,QAAQ;MACxC;MAEA,2BAA2B,YAAgC;AAMzD,eALiB,KAAK,uBACpB,YACA,qBAAA,kBAAkB;MAItB;;;;;;;MAQA,MAAM,QACJ,WACA,gBACA,SAA8B;AAM9B,YAAM,SAAS,MAAM,KAAK,mBAAmB,QAC3C,gBACA,SAAS,aAAa,GAElB,WAAW,KAAK,sBAAsB,YAAY,SAAS;AAGjE,YAAI,SAAS,WAAW;AACtB,iBAAO;AAGT,YAAM,iBAAiB,SACpB,IAAI,mBACI,cAAc,QAAQ,WAAW,cAAc,CACvD,EACA,OAAO,QAAA,YAAY;AAGtB,eAAI,eAAe,WAAW,IACrB,EAAE,OAAM,IAGV;UACL,cAAc;YACZ,OAAO,KAAK;YACZ,SAAS;;UAEX;;MAEJ;MAEQ,uBAIN,YACA,mBAAoC;AAMpC,YAAI,WAJU,KAAK,0BAA0B,aAAa,UACxD,YACA,KAAK,qBAAqB,EAEP,IAAI,UAAO;AAC9B,cAAM,qBAAiB,uBAAA,oCACrB,MACA,UAAU,GAEN,oBACJ,KAAK,sBAAsB,8BACzB,cAAc;AAElB,cAAI,qBAAqB;AACvB,mBAAO;AAET,cAAM,aAAa,KAAK,YAAY,iBAAiB,cAAc,GAC7D,cAAc,IAAI,kBACtB,gBACA,YACA,KAAK,qBACL,KAAK,0BAA0B,gBAAgB;AAEjD,sBAAK,sBAAsB,SAAS,WAAW,GACxC;QACT,CAAC;AAGD,YAAI,SAAS,WAAW,GAAG;AAGzB,cAAM,oBADJ,KAAK,0BAA0B,mBAAmB,WAAW,IAAI,EAChB,IACjD,CAAC,CAAC,WAAW,WAAW,MAAK;AAC3B,gBAAM,oBACJ,KAAK,sBAAsB,uCACzB,WACA,UAAU;AAEd,gBAAI,qBAAqB;AACvB,qBAAO;AAET,gBAAM,aAAa,YAAY,iBAAiB,UAAU,GACpD,UAAU,IAAI,kBAClB,YACA,YACA,sBAAA,oBAAoB,KAAI,GACxB,CAAC,SAAS,CAAC;AAEb,wBAAK,sBAAsB,qBAAqB,WAAW,OAAO,GAC3D;UACT,CAAC;AAEH,qBAAW,SAAS,OAAO,iBAAiB;;AAG9C,eAAO;MACT;;AA3IF,YAAA,mBAAA;;;;;;;;;;;ACrBA,QAAA,UAAA,kBACA,iBAAA,wBACA,qBAAA,4BAMa,2BAAb,MAAqC;MAOnC,YAAmB,UAAmB;AAAnB,aAAA,WAAA,UANnB,KAAA,eAAe,IAAI,eAAA,aAAY,GAE/B,KAAA,mBAAsC,CAAA,GAEtC,KAAA,oBAAmD,oBAAI,IAAG;MAEjB;MAEzC,oBAAoBE,uBAA0C;AAC5D,YAAM,SAAK,QAAA,wBAAuBA,qBAAoB,GAClD,mBAAmB,KAAK,kBAAkB,IAAI,EAAE;AACpD,eAAI,oBAAoB,SACtB,mBAAmB,IAAI,mBAAA,iBAAiB,MAAMA,qBAAoB,GAClE,KAAK,kBAAkB,IAAI,IAAI,gBAAgB,IAE1C;MACT;MAEA,mBAAmB,gBAA8B;AAC/C,YAAM,SAAiD,CAAA;AACvD,iBAAW,aAAa,KAAK;AAC3B,iBAAO,KAAK,CAAC,WAAW,UAAU,kBAAkB,cAAc,CAAC,CAAC;AAEtE,eAAO;MACT;;AAzBF,YAAA,2BAAA;;;;;;;;;;;ACXA,QAAA,SAAA,gBAca,kBAAb,MAA4B;MAC1B,YACU,cACA,eAA2B;AAD3B,aAAA,eAAA,cACA,KAAA,gBAAA;MACP;MAEH,MAAM,QAAQ,SAA8B;AAC1C,YAAM,qBAAiB,OAAA,gBAAe,KAAK,IAAG,CAAE,GAC1C,eAA+B,CAAA,GAC/B,SAAoB,CAAA,GAEpB,0BAA0B,MAAM,KACpC,KAAK,aAAa,kBAAkB,OAAM,CAAE,EAC5C,IAAI,OAAM,qBAAmB;AAC7B,cAAM,UAAU,MAAM,iBAAiB,QACrC,MACA,gBACA,OAAO;AAIT,UAAI,SAAS,gBAAgB,QAC3B,aAAa,KAAK,QAAQ,YAAY,GAIpC,SAAS,UAAU,QACrB,OAAO,KAAK,GAAG,QAAQ,MAAM;QAEjC,CAAC;AACD,qBAAM,QAAQ,IAAI,uBAAuB,GAElC;UACL,iBAAiB;YACf,UAAU,KAAK,aAAa;YAC5B;;UAEF;;MAEJ;;;;MAKA,MAAM,WAAW,SAA2B;AAC1C,cAAM,KAAK,cAAc,WAAW,OAAO;MAC7C;;;;MAKA,MAAM,SAAS,SAAyB;AACtC,cAAM,KAAK,cAAc,SAAS,OAAO;MAC3C;MAEA,6BAA6B,gBAA8B;AACzD,eAAO,KAAK,cAAc,6BAA6B,cAAc;MACvE;MAEA,kBAAkB,gBAA8B;AAC9C,eAAO,KAAK,cAAc,kBAAkB,cAAc;MAC5D;;AA7DF,YAAA,kBAAA;;;;;;;;;;;ACdA,QAAA,QAAA,eAOA,cAAA,gBAEA,6BAAA,oCACA,oBAAA,2BAgBaC,iBAAb,MAA0B;MAIxB,YAAY,SAA8B;;AAFlC,aAAA,YAAY;AAGlB,YAAM,WAAW,YAAA,SAAS,QAAO,EAAG,OAClC,KAAA,SAAS,cAAQ,QAAA,OAAA,SAAA,KAAI,YAAA,SAAS,MAAK,CAAE;AAGvC,YADA,KAAK,eAAe,IAAI,2BAAA,yBAAyB,QAAQ,GACrD,SAAS,SAAS,QAAQ,QAAQ,MAAM,SAAS;AACnD,mBAAW,QAAQ,QAAQ;AACzB,iBAAK,aAAa,aAAa,QAAQ,IAAI;MAGjD;;;;MAKA,SAAS,MAAc,UAAU,IAAI,UAAwB,CAAA,GAAE;AAE7D,eAAI,KAAK,aACP,MAAA,KAAK,KAAK,iDAAiD,OACpD,MAAA,iBAAe,KAGjB,KAAK,aAAa,oBAAoB;UAC3C;UACA;UACA,WAAW,QAAQ;SACpB,EAAE;MACL;;;;;;;MAQA,gBAAgB,cAA0B;AACxC,YAAM,YAAY,IAAI,kBAAA,gBAAgB,KAAK,cAAc,YAAY;AACrE,qBAAa,kBAAkB,SAAS,GACxC,KAAK,aAAa,iBAAiB,KAAK,SAAS;MACnD;;;;;;;MAQA,MAAM,SAAS,SAAyB;AACtC,YAAI,KAAK,WAAW;AAClB,gBAAA,KAAK,KAAK,oDAAoD;AAC9D;;AAGF,aAAK,YAAY,IAEjB,MAAM,QAAQ,IACZ,KAAK,aAAa,iBAAiB,IAAI,eAC9B,UAAU,SAAS,OAAO,CAClC,CAAC;MAEN;;;;;;MAOA,MAAM,WAAW,SAA2B;AAE1C,YAAI,KAAK,WAAW;AAClB,gBAAA,KAAK,KAAK,6DAA6D;AACvE;;AAGF,cAAM,QAAQ,IACZ,KAAK,aAAa,iBAAiB,IAAI,eAC9B,UAAU,WAAW,OAAO,CACpC,CAAC;MAEN;;AAnFF,YAAA,gBAAAA;;;;;;;;;;;ACvBA,QAAM,SAAS,uBASF,mBAAb,MAAa,kBAAgB;MAI3B,YAAY,SAAe;AACzB,QAAI,YAAY,OACd,KAAK,YAAY,IACjB,KAAK,UAAU,SAEf,KAAK,YAAY,IACjB,KAAK,UAAU,IAAI,OAAO,kBAAiB,cAAc,OAAO,CAAC;MAErE;MAEA,MAAM,KAAW;AACf,eAAI,KAAK,YACA,KAGF,KAAK,QAAQ,KAAK,GAAG;MAC9B;MAEA,OAAO,cAAc,SAAe;AAClC,eAAO,IAAI,QAAQ,QAAQ,QAAQ,MAAM,EAAE,QAAQ,KAAK,IAAI,CAAC;MAC/D;MAEA,OAAO,YAAY,SAAe;AAChC,eAAO,QAAQ,SAAS,GAAG;MAC7B;;AA5BF,YAAA,mBAAA;AA+BA,QAAa,iBAAb,MAA2B;MAIzB,YAAY,SAAgB;AAC1B,aAAK,YAAY,YAAY,QAC7B,KAAK,WAAW;MAClB;MAEA,MAAM,KAAW;AAIf,eAHI,QAAK,aAGL,QAAQ,KAAK;MAInB;;AAjBF,YAAA,iBAAA;;;;;;;;;;;AC1CA,QAAA,cAAA,qBAQa,qBAAb,MAA+B;MAK7B,YAAY,UAAqC;;AAC/C,aAAK,cAAc,IAAI,YAAA,kBAAiB,KAAA,UAAU,UAAI,QAAA,OAAA,SAAA,KAAI,GAAG,GAC7D,KAAK,QAAQ,UAAU,MACvB,KAAK,cAAc,IAAI,YAAA,eAAe,UAAU,IAAI;MACtD;MAEA,UAAO;AACL,eAAO,KAAK;MACd;MAEA,gBAAa;AACX,eAAO,KAAK;MACd;MAEA,gBAAa;AACX,eAAO,KAAK;MACd;;AArBF,YAAA,qBAAA;;;;;;;;;;;ACTA,QAAA,cAAA,qBAQa,gBAAb,MAA0B;MAKxB,YAAY,UAAgC;AAC1C,aAAK,cAAc,IAAI,YAAA,eAAe,UAAU,IAAI,GACpD,KAAK,iBAAiB,IAAI,YAAA,eAAe,UAAU,OAAO,GAC1D,KAAK,mBAAmB,IAAI,YAAA,eAAe,UAAU,SAAS;MAChE;MAEA,gBAAa;AACX,eAAO,KAAK;MACd;;;;MAKA,mBAAgB;AACd,eAAO,KAAK;MACd;MAEA,qBAAkB;AAChB,eAAO,KAAK;MACd;;AAxBF,YAAA,gBAAA;;;;;;;;;;;ACRA,QAAA,cAAA,qBACA,wBAAA,+BAIA,uBAAA,8BACA,kBAAA,yBACA,gBAAA;AAgGA,aAAS,sBAAsB,SAAoB;AACjD,aACE,QAAQ,kBAAkB,QAC1B,QAAQ,kBAAkB,QAC1B,QAAQ,kBAAkB,QAC1B,QAAQ,aAAa,QACrB,QAAQ,gBAAgB,QACxB,QAAQ,kBAAkB;IAE9B;AAKA,QAAaC,QAAb,MAAiB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MA4Df,YAAY,aAAwB;;AAGlC,YAAI,sBAAsB,WAAW;AACnC,gBAAM,IAAI,MAAM,wDAAwD;AAK1E,YACE,YAAY,QAAQ,SACnB,aAAa,kBAAkB,QAC9B,YAAA,iBAAiB,YAAY,YAAY,cAAc;AAEzD,gBAAM,IAAI,MACR,yHAAyH;AAK7H,QAAI,YAAY,iBAAiB,OAC/B,KAAK,sBAAsB,IAAI,sBAAA,6BAC7B,YAAY,aAAa,IAG3B,KAAK,sBAAsB,sBAAA,oBAAoB,KAAI,GAGrD,KAAK,OAAO,YAAY,MACxB,KAAK,cAAc,YAAY,aAC/B,KAAK,eAAc,KAAA,YAAY,iBAAW,QAAA,OAAA,SAAA,KAAI,cAAA,YAAY,QAAO,GACjE,KAAK,qBAAqB,IAAI,qBAAA,mBAAmB;UAC/C,MAAM,YAAY;UAClB,MAAM,YAAY;UAClB,MAAM,YAAY;SACnB,GACD,KAAK,gBAAgB,IAAI,gBAAA,cAAc;UACrC,MAAM,YAAY;UAClB,SAAS,YAAY;UACrB,WAAW,YAAY;SACxB;MACH;;AArGF,YAAA,OAAAA;;;;;;;;;;;ACzGA,QAAA,2BAAA;AAAS,WAAA,eAAA,SAAA,0BAAA,EAAA,YAAA,IAAA,KAAA,WAAA;AAAA,aAAA,yBAAA;IAAsB,EAAA,CAAA;AAE/B,QAAA,eAAA;AAEE,WAAA,eAAA,SAAA,iBAAA,EAAA,YAAA,IAAA,KAAA,WAAA;AAAA,aAAA,aAAA;IAAa,EAAA,CAAA;AAaf,QAAA,iBAAA;AAAS,WAAA,eAAA,SAAA,gBAAA,EAAA,YAAA,IAAA,KAAA,WAAA;AAAA,aAAA,eAAA;IAAY,EAAA,CAAA;AAErB,QAAA,kCAAA;AACE,WAAA,eAAA,SAAA,iCAAA,EAAA,YAAA,IAAA,KAAA,WAAA;AAAA,aAAA,gCAAA;IAA6B,EAAA,CAAA;AAI/B,QAAA,2BAAA;AAAS,WAAA,eAAA,SAAA,0BAAA,EAAA,YAAA,IAAA,KAAA,WAAA;AAAA,aAAA,yBAAA;IAAsB,EAAA,CAAA;AAE/B,QAAA,0BAAA;AAAS,WAAA,eAAA,SAAA,yBAAA,EAAA,YAAA,IAAA,KAAA,WAAA;AAAA,aAAA,wBAAA;IAAqB,EAAA,CAAA;AAI9B,QAAA,yBAAA;AAA+B,WAAA,eAAA,SAAA,kBAAA,EAAA,YAAA,IAAA,KAAA,WAAA;AAAA,aAAA,uBAAA;IAAc,EAAA,CAAA;AAE7C,QAAA,kBAAA;AAAS,WAAA,eAAA,SAAA,iBAAA,EAAA,YAAA,IAAA,KAAA,WAAA;AAAA,aAAA,gBAAA;IAAa,EAAA,CAAA;AAEtB,QAAA,gBAAA;AACE,WAAA,eAAA,SAAA,sBAAA,EAAA,YAAA,IAAA,KAAA,WAAA;AAAA,aAAA,cAAA;IAAkB,EAAA,CAAA;AAClB,WAAA,eAAA,SAAA,sCAAA,EAAA,YAAA,IAAA,KAAA,WAAA;AAAA,aAAA,cAAA;IAAkC,EAAA,CAAA;AAClC,WAAA,eAAA,SAAA,mCAAA,EAAA,YAAA,IAAA,KAAA,WAAA;AAAA,aAAA,cAAA;IAA+B,EAAA,CAAA;AAC/B,WAAA,eAAA,SAAA,mBAAA,EAAA,YAAA,IAAA,KAAA,WAAA;AAAA,aAAA,cAAA;IAAe,EAAA,CAAA;AACf,WAAA,eAAA,SAAA,wBAAA,EAAA,YAAA,IAAA,KAAA,WAAA;AAAA,aAAA,cAAA;IAAoB,EAAA,CAAA;AACpB,WAAA,eAAA,SAAA,wBAAA,EAAA,YAAA,IAAA,KAAA,WAAA;AAAA,aAAA,cAAA;IAAoB,EAAA,CAAA;AACpB,WAAA,eAAA,SAAA,kBAAA,EAAA,YAAA,IAAA,KAAA,WAAA;AAAA,aAAA,cAAA;IAAc,EAAA,CAAA;AACd,WAAA,eAAA,SAAA,eAAA,EAAA,YAAA,IAAA,KAAA,WAAA;AAAA,aAAA,cAAA;IAAW,EAAA,CAAA;AAGb,QAAA,SAAA;AAAS,WAAA,eAAA,SAAA,QAAA,EAAA,YAAA,IAAA,KAAA,WAAA;AAAA,aAAA,OAAA;IAAI,EAAA,CAAA;AAEb,QAAA,UAAA;AAAS,WAAA,eAAA,SAAA,gBAAA,EAAA,YAAA,IAAA,KAAA,WAAA;AAAA,aAAA,QAAA;IAAY,EAAA,CAAA;;;;;;;;;;;AC3DrB,QAAA,QAAA,eAEM,2BAAuB,MAAA,kBAC3B,gDAAgD;AAGlD,aAAgB,gBAAgB,SAAgB;AAC9C,aAAO,QAAQ,SAAS,sBAAsB,EAAI;IACpD;AAFA,YAAA,kBAAA;AAIA,aAAgB,kBAAkB,SAAgB;AAChD,aAAO,QAAQ,YAAY,oBAAoB;IACjD;AAFA,YAAA,oBAAA;AAIA,aAAgB,oBAAoB,SAAgB;AAClD,aAAO,QAAQ,SAAS,oBAAoB,MAAM;IACpD;AAFA,YAAA,sBAAA;;;;;;;;;;;ACda,YAAA,6BAA6B;AAC7B,YAAA,+BAA+B;AAC/B,YAAA,0BAA0B;AAG1B,YAAA,iBAAiB;AAEjB,YAAA,+BAA+B;AAE/B,YAAA,mCAAmC;AAEnC,YAAA,2BAA2B;;;;;;;;;;;ACZxC,QAAA,QAAA,eAKA,cAAA;AAaA,aAAgB,kBAAkB,UAAkB;AAClD,aAAO,SAAS,OAAO,CAAC,QAAgB,YAAmB;AACzD,YAAM,QAAQ,GAAG,MAAM,GACrB,WAAW,KAAK,YAAA,0BAA0B,EAC5C,GAAG,OAAO;AACV,eAAO,MAAM,SAAS,YAAA,2BAA2B,SAAS;MAC5D,GAAG,EAAE;IACP;AAPA,YAAA,oBAAA;AASA,aAAgB,YAAY,SAAgB;AAC1C,aAAO,QAAQ,cAAa,EAAG,IAAI,CAAC,CAAC,KAAK,KAAK,MAAK;AAClD,YAAI,QAAQ,GAAG,mBAAmB,GAAG,CAAC,IAAI,mBAAmB,MAAM,KAAK,CAAC;AAIzE,eAAI,MAAM,aAAa,WACrB,SAAS,YAAA,+BAA+B,MAAM,SAAS,SAAQ,IAG1D;MACT,CAAC;IACH;AAZA,YAAA,cAAA;AAcA,aAAgB,kBACd,OAAa;AAEb,UAAM,aAAa,MAAM,MAAM,YAAA,4BAA4B;AAC3D,UAAI,WAAW,UAAU;AAAG;AAC5B,UAAM,cAAc,WAAW,MAAK;AACpC,UAAI,CAAC;AAAa;AAClB,UAAM,iBAAiB,YAAY,QAAQ,YAAA,0BAA0B;AACrE,UAAI,kBAAkB;AAAG;AACzB,UAAM,MAAM,mBACV,YAAY,UAAU,GAAG,cAAc,EAAE,KAAI,CAAE,GAE3C,QAAQ,mBACZ,YAAY,UAAU,iBAAiB,CAAC,EAAE,KAAI,CAAE,GAE9C;AACJ,aAAI,WAAW,SAAS,MACtB,eAAW,MAAA,gCACT,WAAW,KAAK,YAAA,4BAA4B,CAAC,IAG1C,EAAE,KAAK,OAAO,SAAQ;IAC/B;AAtBA,YAAA,oBAAA;AA4BA,aAAgB,wBACd,OAAc;AAEd,aAAI,OAAO,SAAU,YAAY,MAAM,WAAW,IAAU,CAAA,IACrD,MACJ,MAAM,YAAA,uBAAuB,EAC7B,IAAI,WACI,kBAAkB,KAAK,CAC/B,EACA,OAAO,aAAW,YAAY,UAAa,QAAQ,MAAM,SAAS,CAAC,EACnE,OAA+B,CAAC,SAAS,aAExC,QAAQ,QAAS,GAAG,IAAI,QAAS,OAC1B,UACN,CAAA,CAAE;IACT;AAfA,YAAA,0BAAA;;;;;;;;;;;ACpEA,QAAA,QAAA,eASA,qBAAA,6BACA,cAAA,sBAMA,UAAA,kBAQa,uBAAb,MAAiC;MAC/B,OAAO,SAAkB,SAAkB,QAAqB;AAC9D,YAAM,UAAU,MAAA,YAAY,WAAW,OAAO;AAC9C,YAAI,CAAC,eAAW,mBAAA,qBAAoB,OAAO;AAAG;AAC9C,YAAM,eAAW,QAAA,aAAY,OAAO,EACjC,OAAO,CAAC,SACA,KAAK,UAAU,YAAA,gCACvB,EACA,MAAM,GAAG,YAAA,4BAA4B,GAClC,kBAAc,QAAA,mBAAkB,QAAQ;AAC9C,QAAI,YAAY,SAAS,KACvB,OAAO,IAAI,SAAS,YAAA,gBAAgB,WAAW;MAEnD;MAEA,QAAQ,SAAkB,SAAkB,QAAqB;AAC/D,YAAM,cAAc,OAAO,IAAI,SAAS,YAAA,cAAc,GAChD,gBAAgB,MAAM,QAAQ,WAAW,IAC3C,YAAY,KAAK,YAAA,uBAAuB,IACxC;AACJ,YAAI,CAAC;AAAe,iBAAO;AAC3B,YAAM,UAAwC,CAAA;AAe9C,eAdI,cAAc,WAAW,MAGf,cAAc,MAAM,YAAA,uBAAuB,EACnD,QAAQ,WAAQ;AACpB,cAAM,cAAU,QAAA,mBAAkB,KAAK;AACvC,cAAI,SAAS;AACX,gBAAM,eAA6B,EAAE,OAAO,QAAQ,MAAK;AACzD,YAAI,QAAQ,aACV,aAAa,WAAW,QAAQ,WAElC,QAAQ,QAAQ,GAAG,IAAI;;QAE3B,CAAC,GACG,OAAO,QAAQ,OAAO,EAAE,WAAW,KAC9B,UAEF,MAAA,YAAY,WAAW,SAAS,MAAA,YAAY,cAAc,OAAO,CAAC;MAC3E;MAEA,SAAM;AACJ,eAAO,CAAC,YAAA,cAAc;MACxB;;AA5CF,YAAA,uBAAA;;;;;;;;;;;ACAA,QAAa,gBAAb,MAA0B;;;;;;;MAWxB,YAAmB,aAAoB,gBAAqB;AAC1D,aAAK,kBAAkB,gBACvB,KAAK,eAAe,YAAY,IAAG,GACnC,KAAK,qBAAqB,eAAe,IAAG;MAC9C;;;;;MAMO,MAAG;AACR,YAAM,QAAQ,KAAK,gBAAgB,IAAG,IAAK,KAAK;AAChD,eAAO,KAAK,eAAe;MAC7B;;AAxBF,YAAA,gBAAA;;;;;;;;;;;ACxBA,QAAA,QAAA;AAEA,aAAgB,mBAAmB,YAAmB;AACpD,UAAM,MAAsB,CAAA;AAE5B,UAAI,OAAO,cAAe,YAAY,cAAc;AAClD,eAAO;AAGT,eAAW,CAAC,KAAK,GAAG,KAAK,OAAO,QAAQ,UAAU,GAAG;AACnD,YAAI,CAAC,eAAe,GAAG,GAAG;AACxB,gBAAA,KAAK,KAAK,0BAA0B,GAAG,EAAE;AACzC;;AAEF,YAAI,CAAC,iBAAiB,GAAG,GAAG;AAC1B,gBAAA,KAAK,KAAK,wCAAwC,GAAG,EAAE;AACvD;;AAEF,QAAI,MAAM,QAAQ,GAAG,IACnB,IAAI,GAAG,IAAI,IAAI,MAAK,IAEpB,IAAI,GAAG,IAAI;;AAIf,aAAO;IACT;AAxBA,YAAA,qBAAA;AA0BA,aAAgB,eAAe,KAAY;AACzC,aAAO,OAAO,OAAQ,YAAY,IAAI,SAAS;IACjD;AAFA,YAAA,iBAAA;AAIA,aAAgB,iBAAiB,KAAY;AAC3C,aAAI,OAAO,OACF,KAGL,MAAM,QAAQ,GAAG,IACZ,iCAAiC,GAAG,IAGtC,+BAA+B,GAAG;IAC3C;AAVA,YAAA,mBAAA;AAYA,aAAS,iCAAiC,KAAc;AACtD,UAAI;AAEJ,eAAW,WAAW;AAEpB,YAAI,WAAW,MAEf;cAAI,CAAC,MAAM;AACT,gBAAI,+BAA+B,OAAO,GAAG;AAC3C,qBAAO,OAAO;AACd;;AAGF,mBAAO;;AAGT,cAAI,OAAO,YAAY;AAIvB,mBAAO;;AAGT,aAAO;IACT;AAEA,aAAS,+BAA+B,KAAY;AAClD,cAAQ,OAAO,KAAK;QAClB,KAAK;QACL,KAAK;QACL,KAAK;AACH,iBAAO;;AAGX,aAAO;IACT;;;;;;;;;;;AC/EA,QAAA,QAAA;AAOA,aAAgB,sBAAmB;AACjC,aAAO,CAAC,OAAiB;AACvB,cAAA,KAAK,MAAM,mBAAmB,EAAE,CAAC;MACnC;IACF;AAJA,YAAA,sBAAA;AAUA,aAAS,mBAAmB,IAAsB;AAChD,aAAI,OAAO,MAAO,WACT,KAEA,KAAK,UAAU,iBAAiB,EAAE,CAAC;IAE9C;AAOA,aAAS,iBAAiB,IAAa;AACrC,UAAM,SAAS,CAAA,GACX,UAAU;AAEd,aAAO,YAAY;AACjB,eAAO,oBAAoB,OAAO,EAAE,QAAQ,kBAAe;AACzD,cAAI,OAAO,YAAY;AAAG;AAC1B,cAAM,QAAQ,QAAQ,YAAoC;AAC1D,UAAI,UACF,OAAO,YAAY,IAAI,OAAO,KAAK;QAEvC,CAAC,GACD,UAAU,OAAO,eAAe,OAAO;AAGzC,aAAO;IACT;;;;;;;;;;;AC7CA,QAAA,0BAAA,kCAII,sBAAkB,wBAAA,qBAAmB;AAMzC,aAAgB,sBAAsB,SAAqB;AACzD,wBAAkB;IACpB;AAFA,YAAA,wBAAA;AAQA,aAAgB,mBAAmB,IAAa;AAC9C,UAAI;AACF,wBAAgB,EAAE;cACZ;MAAA;IACV;AAJA,YAAA,qBAAA;;;;;;;;;;;ACnBA,QAAY;AAAZ,KAAA,SAAYC,sBAAmB;AAC7B,MAAAA,qBAAA,YAAA,cACAA,qBAAA,WAAA,aACAA,qBAAA,uBAAA,0BACAA,qBAAA,sBAAA,yBACAA,qBAAA,0BAAA,4BACAA,qBAAA,eAAA;IACF,GAPY,sBAAA,QAAA,wBAAA,QAAA,sBAAmB,CAAA,EAAA;;;;;;;;;;;ACYlB,YAAA,cACX,OAAO,cAAe,WAClB,aACA,OAAO,QAAS,WAChB,OACA,OAAO,UAAW,WAClB,SACA,OAAO,UAAW,WAClB,SACC,CAAA;;;;;;;;;;;ACrBP,QAAA,QAAA,eACA,aAAA,qBACA,eAAA,uBAEM,yBAAyB,KAMzB,2BAA2B,CAAC,mBAAmB;AAMrD,aAAS,iBAAiB,KAAY;AACpC,aACE,yBAAyB,QAAQ,GAAiC,IAAI;IAE1E;AAEA,QAAM,2BAA2B;MAC/B;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;;AAOF,aAAS,gBAAgB,KAAY;AACnC,aACE,yBAAyB,QAAQ,GAAgC,IAAI;IAEzE;AAEA,QAAM,yBAAyB;MAC7B;MACA;;AAOF,aAAS,cAAc,KAAY;AACjC,aAAO,uBAAuB,QAAQ,GAA8B,IAAI;IAC1E;AA8Da,YAAA,uCAAuC;AAEvC,YAAA,gCAAgC;AAEhC,YAAA,+CAA+C;AAC/C,YAAA,8CAA8C;AAK9C,YAAA,sBAA6C;MACxD,mBAAmB;MACnB,gBAAgB;MAChB,+BAA+B;MAC/B,4BAA4B;MAC5B,UAAU;MACV,yBAAyB;MACzB,WAAW;MACX,yBAAyB;MACzB,gCAAgC;MAChC,yBAAyB;MACzB,yBAAyB;MACzB,0BAA0B;MAC1B,iCAAiC;MACjC,0BAA0B;MAC1B,0BAA0B;MAC1B,iCAAiC;MACjC,iCAAiC;MACjC,+BAA+B;MAC/B,+BAA+B;MAC/B,2BAA2B;MAC3B,6BAA6B;MAC7B,oCAAoC;MACpC,qCAAqC;MACrC,kCAAkC;MAClC,4BAA4B;MAC5B,mCAAmC;MACnC,oCAAoC;MACpC,iCAAiC;MACjC,4BAA4B;MAC5B,mCAAmC;MACnC,oCAAoC;MACpC,iCAAiC;MACjC,+BAA+B;MAC/B,gBAAgB,MAAA,aAAa;MAC7B,uBAAuB,CAAA;MACvB,kBAAkB,CAAC,gBAAgB,SAAS;MAC5C,0BAA0B;MAC1B,mBAAmB;MACnB,mCAAmC,QAAA;MACnC,4BAA4B,QAAA;MAC5B,wCAAwC,QAAA;MACxC,iCAAiC,QAAA;MACjC,6CACE,QAAA;MACF,sCAAsC,QAAA;MACtC,6BAA6B;MAC7B,4BAA4B;MAC5B,2CACE,QAAA;MACF,0CACE,QAAA;MACF,sBAAsB;MACtB,qBAAqB,WAAA,oBAAoB;MACzC,yBAAyB;MACzB,oBAAoB;MACpB,6BAA6B;MAC7B,oCAAoC;MACpC,qCAAqC;MACrC,kCAAkC;MAClC,gCAAgC;MAChC,uCAAuC;MACvC,wCAAwC;MACxC,qCAAqC;MACrC,gCAAgC;MAChC,uCAAuC;MACvC,wCAAwC;MACxC,qCAAqC;MACrC,+BAA+B;MAC/B,sCAAsC;MACtC,uCAAuC;MACvC,oCAAoC;MACpC,uCAAuC;MACvC,8CAA8C;MAC9C,+CAA+C;MAC/C,4CAA4C;MAC5C,6BAA6B;MAC7B,oCAAoC;MACpC,qCAAqC;MACrC,kCAAkC;MAClC,mDAAmD;;AAQrD,aAAS,aACP,KACA,aACA,QAAuB;AAEvB,UAAI,OAAO,OAAO,GAAG,IAAM;AACzB;AAGF,UAAM,QAAQ,OAAO,OAAO,GAAG,CAAC;AAEhC,kBAAY,GAAG,IAAI,MAAM,YAAW,MAAO;IAC7C;AAUA,aAAS,YACP,MACA,aACA,QACA,MAAM,QACN,MAAM,OAAQ;AAEd,UAAI,OAAO,OAAO,IAAI,IAAM,KAAa;AACvC,YAAM,QAAQ,OAAO,OAAO,IAAI,CAAW;AAC3C,QAAK,MAAM,KAAK,MACV,QAAQ,MACV,YAAY,IAAI,IAAI,MACX,QAAQ,MACjB,YAAY,IAAI,IAAI,MAEpB,YAAY,IAAI,IAAI;;IAI5B;AASA,aAAS,gBACP,MACA,QACA,OACA,YAAY,wBAAsB;AAElC,UAAM,aAAa,MAAM,IAAI;AAC7B,MAAI,OAAO,cAAe,aACxB,OAAO,IAAI,IAAI,WAAW,MAAM,SAAS,EAAE,IAAI,OAAK,EAAE,KAAI,CAAE;IAEhE;AAGA,QAAM,cAA+C;MACnD,KAAK,MAAA,aAAa;MAClB,SAAS,MAAA,aAAa;MACtB,OAAO,MAAA,aAAa;MACpB,MAAM,MAAA,aAAa;MACnB,MAAM,MAAA,aAAa;MACnB,OAAO,MAAA,aAAa;MACpB,MAAM,MAAA,aAAa;;AASrB,aAAS,mBACP,KACA,aACA,QAAuB;AAEvB,UAAM,QAAQ,OAAO,GAAG;AACxB,UAAI,OAAO,SAAU,UAAU;AAC7B,YAAM,WAAW,YAAY,MAAM,YAAW,CAAE;AAChD,QAAI,YAAY,SACd,YAAY,GAAG,IAAI;;IAGzB;AAMA,aAAgB,iBAAiB,QAAuB;AACtD,UAAM,cAA2B,CAAA;AAEjC,eAAW,OAAO,QAAA,qBAAqB;AACrC,YAAM,MAAM;AAEZ,gBAAQ,KAAK;UACX,KAAK;AACH,+BAAmB,KAAK,aAAa,MAAM;AAC3C;UAEF;AACE,gBAAI,iBAAiB,GAAG;AACtB,2BAAa,KAAK,aAAa,MAAM;qBAC5B,gBAAgB,GAAG;AAC5B,0BAAY,KAAK,aAAa,MAAM;qBAC3B,cAAc,GAAG;AAC1B,8BAAgB,KAAK,aAAa,MAAM;iBACnC;AACL,kBAAM,QAAQ,OAAO,GAAG;AACxB,cAAI,OAAO,QAAU,OAAe,UAAU,SAC5C,YAAY,GAAG,IAAI,OAAO,KAAK;;;;AAMzC,aAAO;IACT;AA5BA,YAAA,mBAAA;AAkCA,aAAgB,wBAAqB;AACnC,aAAO,OAAO,UAAY,OAAe,WAAW,QAAQ,MACxD,iBAAiB,QAAQ,GAAsB,IAC/C,iBAAiB,aAAA,WAAkD;IACzE;AAJA,YAAA,wBAAA;;;;;;;;;;;ACxWA,QAAA,KAAA,UAAA,IAAA,GACA,gBAAA;AAUA,aAAgB,SAAM;AACpB,UAAM,iBAAa,cAAA,kBAAiB,QAAQ,GAAsB;AAClE,aAAO,OAAO,OACZ;QACE,UAAU,GAAG,SAAQ;SAEvB,cAAA,qBACA,UAAU;IAEd;AATA,YAAA,SAAA;;;;;;;;;;;ACTa,YAAA,cAAc,OAAO,cAAe,WAAW,aAAa;;;;;;;;;;;ACHzE,aAAS,SAAS,UAAgB;AAEhC,aAAI,YAAY,MAAM,YAAY,KACzB,WAAW,KAIhB,YAAY,MAAM,YAAY,MACzB,WAAW,KAIb,WAAW;IACpB;AAEA,QAAM,OAAO,OAAO,MAAM,CAAC,GACrB,QAAQ,OAAO,MAAM,EAAE;AAE7B,aAAgB,YAAY,QAAc;AACxC,UAAI;AACJ,MAAI,OAAO,WAAW,KACpB,MAAM,OACG,OAAO,WAAW,KAC3B,MAAM,QAEN,MAAM,OAAO,MAAM,OAAO,SAAS,CAAC;AAEtC,UAAI,SAAS;AAEb,eAAS,IAAI,GAAG,IAAI,OAAO,QAAQ,KAAK,GAAG;AACzC,YAAM,KAAK,SAAS,OAAO,WAAW,CAAC,CAAC,GAClC,KAAK,SAAS,OAAO,WAAW,IAAI,CAAC,CAAC;AAC5C,YAAI,WAAY,MAAM,IAAK,IAAI,QAAQ;;AAGzC,aAAO,IAAI,SAAS,QAAQ;IAC9B;AAlBA,YAAA,cAAA;;;;;;;;;;;AChBA,QAAM,gBAAgB,GAChB,iBAAiB,IAKV,oBAAb,MAA8B;MAA9B,cAAA;AAKE,aAAA,kBAAkB,eAAe,cAAc,GAM/C,KAAA,iBAAiB,eAAe,aAAa;MAC/C;;AAZA,YAAA,oBAAA;AAcA,QAAM,gBAAgB,OAAO,YAAY,cAAc;AACvD,aAAS,eAAe,OAAa;AACnC,aAAO,WAAmB;AACxB,iBAAS,IAAI,GAAG,IAAI,QAAQ,GAAG;AAG7B,wBAAc,cAAe,KAAK,OAAM,IAAK,KAAK,OAAQ,GAAG,IAAI,CAAC;AAIpE,iBAAS,IAAI,GAAG,IAAI,SACd,gBAAc,CAAC,IAAI,IADE;AAGlB,UAAI,MAAM,QAAQ,MACvB,cAAc,QAAQ,CAAC,IAAI;AAI/B,eAAO,cAAc,SAAS,OAAO,GAAG,KAAK;MAC/C;IACF;;;;;;;;;;;ACzCA,QAAA,eAAA,UAAA,YAAA;AAEa,YAAA,gBAAgB,aAAA;;;;;;;;;;;ACDhB,YAAA,UAAU;;;;;;;;;;;ACAV,YAAA,qBAAqB;;;;;;MAMhC,wBAAwB;;;;MAKxB,WAAW;;;;MAKX,sBAAsB;;;;MAKtB,SAAS;;;;MAKT,0BAA0B;;;;;;MAO1B,SAAS;;;;;;MAOT,cAAc;;;;;;MAOd,cAAc;;;;;;MAOd,wBAAwB;;;;MAKxB,uBAAuB;;;;MAKvB,wBAAwB;;;;MAKxB,gCAAgC;;;;;;MAOhC,oBAAoB;;;;MAKpB,0BAA0B;;;;MAK1B,0CACE;;;;MAKF,6BAA6B;;;;MAK7B,6BAA6B;;;;MAK7B,oBAAoB;;;;MAKpB,yBAAyB;;;;MAKzB,uBAAuB;;;;;;MAOvB,cAAc;;;;MAKd,gBAAgB;;;;MAKhB,mBAAmB;;;;MAKnB,sBAAsB;;;;;;;;;;;;;;;;;;;;;MAsBtB,mBAAmB;;;;MAKnB,cAAc;;;;MAKd,gBAAgB;;;;MAKhB,0BAA0B;;;;MAK1B,yBAAyB;;;;MAKzB,oBAAoB;;;;MAKpB,oBAAoB;;;;MAKpB,WAAW;;;;MAKX,WAAW;;;;MAKX,gBAAgB;;;;;;MAOhB,mBAAmB;;;;;;MAOnB,uBAAuB;;;;;;MAOvB,qBAAqB;;;;MAKrB,eAAe;;;;MAKf,aAAa;;;;MAKb,eAAe;;;;MAKf,eAAe;;;;MAKf,aAAa;;;;MAKb,eAAe;;;;MAKf,eAAe;;;;MAKf,0BAA0B;;;;MAK1B,6BAA6B;;;;MAK7B,uBAAuB;;;;MAKvB,sBAAsB;;;;MAKtB,sBAAsB;;;;MAKtB,sBAAsB;;;;MAKtB,cAAc;;;;MAKd,YAAY;;;;MAKZ,cAAc;;;;MAKd,eAAe;;;;MAKf,WAAW;;;;MAKX,aAAa;;;;MAKb,eAAe;;;;MAKf,gBAAgB;;;;MAKhB,eAAe;;;;MAKf,aAAa;;;;MAKb,aAAa;;;;;;MAOb,UAAU;;;;MAKV,aAAa;;;;;;MAOb,WAAW;;;;MAKX,aAAa;;;;MAKb,kBAAkB;;;;;;MAOlB,aAAa;;;;MAKb,iBAAiB;;;;MAKjB,6BAA6B;;;;MAK7B,0CACE;;;;MAKF,8BAA8B;;;;MAK9B,2CACE;;;;;;MAOF,kBAAkB;;;;MAKlB,YAAY;;;;;;;;;;;;;;;;MAiBZ,gBAAgB;;;;MAKhB,0BAA0B;;;;MAK1B,gCAAgC;;;;MAKhC,sCAAsC;;;;MAKtC,wCACE;;;;MAKF,yCACE;;;;MAKF,8BAA8B;;;;MAK9B,yBAAyB;;;;MAKzB,oBAAoB;;;;MAKpB,gCAAgC;;;;MAKhC,yBAAyB;;;;MAKzB,qBAAqB;;;;MAKrB,uCACE;;;;MAKF,sCAAsC;;;;MAKtC,oCAAoC;;;;MAKpC,0BAA0B;;;;MAK1B,2BAA2B;;;;MAK3B,sBAAsB;;;;MAKtB,6BAA6B;;;;MAK7B,oBAAoB;;;;MAKpB,4BAA4B;;;;MAK5B,oCAAoC;;;;MAKpC,6CACE;;;;MAKF,kBAAkB;;;;MAKlB,uBAAuB;;;;MAKvB,4BAA4B;;;;MAK5B,4BAA4B;;;;MAK5B,oBAAoB;;;;MAKpB,4BAA4B;;;;MAK5B,eAAe;;;;MAKf,sBAAsB;;;;MAKtB,2BAA2B;;;;MAK3B,sCAAsC;;;;MAKtC,iDACE;;;;MAKF,qBAAqB;;;;MAKrB,uBAAuB;;;;MAKvB,gCAAgC;;;;;;MAOhC,6BAA6B;;;;MAK7B,gCAAgC;;;;MAKhC,2BAA2B;;;;MAK3B,2BAA2B;;;;MAK3B,2BAA2B;;;;MAK3B,YAAY;;;;;;MAOZ,aAAa;;;;;;MAOb,YAAY;;;;MAKZ,sBAAsB;;;;MAKtB,qBAAqB;;;;MAKrB,wBAAwB;;;;MAKxB,wBAAwB;;;;MAKxB,2BAA2B;;;;MAK3B,cAAc;;;;;;MAOd,YAAY;;;;MAKZ,yBAAyB;;;;MAKzB,2BAA2B;;AAGhB,YAAA,iBAAiB;;MAE5B,WAAW;;MAEX,OAAO;;MAEP,OAAO;;MAEP,QAAQ;;MAER,KAAK;;MAEL,YAAY;;MAEZ,UAAU;;MAEV,MAAM;;MAEN,YAAY;;MAEZ,QAAQ;;MAER,UAAU;;MAEV,OAAO;;MAEP,QAAQ;;MAER,QAAQ;;MAER,UAAU;;MAEV,KAAK;;MAEL,OAAO;;MAEP,QAAQ;;MAER,UAAU;;MAEV,OAAO;;MAEP,WAAW;;MAEX,UAAU;;MAEV,WAAW;;MAEX,WAAW;;MAEX,SAAS;;MAET,SAAS;;MAET,WAAW;;MAEX,WAAW;;MAEX,QAAQ;;MAER,QAAQ;;MAER,UAAU;;MAEV,SAAS;;MAET,IAAI;;MAEJ,YAAY;;MAEZ,WAAW;;MAEX,OAAO;;MAEP,SAAS;;MAET,OAAO;;MAEP,WAAW;;MAEX,SAAS;;MAET,UAAU;;MAEV,UAAU;;MAEV,OAAO;;MAEP,OAAO;;MAEP,eAAe;;MAEf,WAAW;;MAEX,aAAa;;AAKF,YAAA,oCAAoC;;MAE/C,KAAK;;MAEL,aAAa;;MAEb,QAAQ;;MAER,cAAc;;MAEd,KAAK;;MAEL,KAAK;;MAEL,OAAO;;MAEP,WAAW;;MAEX,KAAK;;MAEL,QAAQ;;MAER,cAAc;;AAKH,YAAA,oBAAoB;;MAE/B,YAAY;;MAEZ,MAAM;;MAEN,QAAQ;;MAER,OAAO;;MAEP,OAAO;;AAKI,YAAA,8BAA8B;;MAEzC,QAAQ;;MAER,MAAM;;MAEN,QAAQ;;AAKG,YAAA,4BAA4B;;MAEvC,eAAe;;MAEf,KAAK;;MAEL,OAAO;;MAEP,KAAK;;AAKM,YAAA,qBAAqB;;MAEhC,QAAQ;;MAER,QAAQ;;MAER,IAAI;;MAEJ,MAAM;;MAEN,MAAM;;MAEN,QAAQ;;MAER,OAAO;;AAKI,YAAA,8BAA8B;;MAEzC,MAAM;;MAEN,OAAO;;MAEP,MAAM;;MAEN,aAAa;;MAEb,SAAS;;AAKE,YAAA,iCAAiC;;MAE5C,MAAM;;MAEN,MAAM;;MAEN,MAAM;;MAEN,MAAM;;MAEN,QAAQ;;MAER,QAAQ;;MAER,gBAAgB;;MAEhB,OAAO;;MAEP,OAAO;;MAEP,MAAM;;MAEN,MAAM;;MAEN,QAAQ;;MAER,KAAK;;MAEL,OAAO;;MAEP,OAAO;;MAEP,KAAK;;MAEL,UAAU;;MAEV,OAAO;;MAEP,IAAI;;MAEJ,OAAO;;MAEP,QAAQ;;AAKG,YAAA,mBAAmB;;MAE9B,UAAU;;MAEV,UAAU;;MAEV,UAAU;;MAEV,MAAM;;MAEN,MAAM;;AAKK,YAAA,iCAAiC;;MAE5C,OAAO;;MAEP,OAAO;;AAKI,YAAA,2BAA2B;;MAEtC,SAAS;;MAET,SAAS;;AAKE,YAAA,0BAA0B;;MAErC,IAAI;;MAEJ,WAAW;;MAEX,SAAS;;MAET,kBAAkB;;MAElB,mBAAmB;;MAEnB,WAAW;;MAEX,gBAAgB;;MAEhB,mBAAmB;;MAEnB,oBAAoB;;MAEpB,qBAAqB;;MAErB,SAAS;;MAET,cAAc;;MAEd,eAAe;;MAEf,UAAU;;MAEV,aAAa;;MAEb,WAAW;;MAEX,iBAAiB;;AAKN,YAAA,oBAAoB;;MAE/B,MAAM;;MAEN,UAAU;;;;;;;;;;;;;;;;;;;;;AC/gCZ,iBAAA,+BAAA,OAAA;;;;;;;;;;;ACEa,YAAA,6BAA6B;;;;MAIxC,gBAAgB;;;;MAKhB,kBAAkB;;;;MAKlB,cAAc;;;;;;MAOd,yBAAyB;;;;;;MAOzB,gBAAgB;;;;MAKhB,uBAAuB;;;;MAKvB,qBAAqB;;;;MAKrB,oBAAoB;;;;MAKpB,kBAAkB;;;;MAKlB,qBAAqB;;;;MAKrB,uBAAuB;;;;MAKvB,qBAAqB;;;;;;MAOrB,qBAAqB;;;;;;MAOrB,oBAAoB;;;;MAKpB,sBAAsB;;;;;;MAOtB,qBAAqB;;;;MAKrB,gBAAgB;;;;MAKhB,cAAc;;;;MAKd,mBAAmB;;;;MAKnB,sBAAsB;;;;MAKtB,qBAAqB;;;;MAKrB,wBAAwB;;;;;;MAOxB,WAAW;;;;;;MAOX,yBAAyB;;;;;;MAOzB,mBAAmB;;;;;;MAOnB,WAAW;;;;;;;;;;;;;;;;;;;MAoBX,SAAS;;;;;;;;;;;;;;MAeT,cAAc;;;;;;MAOd,eAAe;;;;;;MAOf,iBAAiB;;;;MAKjB,SAAS;;;;MAKT,WAAW;;;;MAKX,WAAW;;;;MAKX,WAAW;;;;MAKX,iBAAiB;;;;MAKjB,eAAe;;;;MAKf,oBAAoB;;;;MAKpB,kBAAkB;;;;MAKlB,eAAe;;;;MAKf,cAAc;;;;MAKd,oBAAoB;;;;MAKpB,aAAa;;;;MAKb,cAAc;;;;MAKd,oBAAoB;;;;MAKpB,oBAAoB;;;;MAKpB,qBAAqB;;;;MAKrB,oBAAoB;;;;MAKpB,qBAAqB;;;;MAKrB,qBAAqB;;;;MAKrB,sBAAsB;;;;MAKtB,mBAAmB;;;;MAKnB,oBAAoB;;;;MAKpB,aAAa;;;;MAKb,cAAc;;;;MAKd,iBAAiB;;;;MAKjB,kBAAkB;;;;MAKlB,SAAS;;;;MAKT,gBAAgB;;;;MAKhB,SAAS;;;;MAKT,YAAY;;;;MAKZ,aAAa;;;;MAKb,yBAAyB;;;;MAKzB,yBAAyB;;;;MAKzB,iBAAiB;;;;MAKjB,sBAAsB;;;;MAKtB,sBAAsB;;;;MAKtB,eAAe;;;;MAKf,sBAAsB;;;;MAKtB,yBAAyB;;;;MAKzB,6BAA6B;;;;;;MAO7B,cAAc;;;;;;MAOd,mBAAmB;;;;;;MAOnB,qBAAqB;;;;MAKrB,iBAAiB;;;;MAKjB,oBAAoB;;;;MAKpB,wBAAwB;;;;MAKxB,uBAAuB;;;;MAKvB,wBAAwB;;;;MAKxB,gBAAgB;;;;MAKhB,mBAAmB;;;;MAKnB,uBAAuB;;AAGZ,YAAA,sBAAsB;;MAEjC,eAAe;;MAEf,KAAK;;MAEL,OAAO;;MAEP,KAAK;;AAKM,YAAA,sBAAsB;;MAEjC,mBAAmB;;MAEnB,kBAAkB;;MAElB,SAAS;;MAET,SAAS;;MAET,SAAS;;MAET,YAAY;;MAEZ,uBAAuB;;MAEvB,UAAU;;MAEV,2BAA2B;;MAE3B,WAAW;;MAEX,iBAAiB;;MAEjB,mBAAmB;;MAEnB,oBAAoB;;MAEpB,eAAe;;MAEf,uBAAuB;;MAEvB,qBAAqB;;MAErB,gBAAgB;;AAKL,YAAA,yBAAyB;;MAEpC,KAAK;;MAEL,SAAS;;AAKE,YAAA,iBAAiB;;MAE5B,OAAO;;MAEP,OAAO;;MAEP,OAAO;;MAEP,MAAM;;MAEN,OAAO;;MAEP,OAAO;;MAEP,KAAK;;AAKM,YAAA,eAAe;;MAE1B,SAAS;;MAET,OAAO;;MAEP,QAAQ;;MAER,SAAS;;MAET,QAAQ;;MAER,SAAS;;MAET,cAAc;;MAEd,MAAM;;MAEN,KAAK;;MAEL,SAAS;;MAET,MAAM;;AAIK,YAAA,6BAA6B;;MAExC,KAAK;;MAEL,QAAQ;;MAER,QAAQ;;MAER,IAAI;;MAEJ,MAAM;;MAEN,QAAQ;;MAER,KAAK;;MAEL,QAAQ;;MAER,MAAM;;MAEN,OAAO;;;;;;;;;;;;;;;;;;;;;AC5kBT,iBAAA,uCAAA,OAAA;;;;;;;;;;;;;;;;;;;;ACCA,iBAAA,kBAAA,OAAA;AACA,iBAAA,qBAAA,OAAA;;;;;;;;;;;ACDA,QAAA,YAAA,oBACA,yBAAA;AAMa,YAAA,WAAW;MACtB,CAAC,uBAAA,2BAA2B,kBAAkB,GAAG;MACjD,CAAC,uBAAA,2BAA2B,oBAAoB,GAAG;MACnD,CAAC,uBAAA,2BAA2B,sBAAsB,GAChD,uBAAA,2BAA2B;MAC7B,CAAC,uBAAA,2BAA2B,qBAAqB,GAAG,UAAA;;;;;;;;;;;;ACbtD,aAAgB,WAAW,OAAmB;AAC5C,YAAM,MAAK;IACb;AAFA,YAAA,aAAA;;;;;;;;;;;;;;;;;;;;ACCA,iBAAA,wBAAA,OAAA;AACA,iBAAA,uBAAA,OAAA;AACA,iBAAA,0BAAA,OAAA;AACA,iBAAA,8BAAA,OAAA;AACA,iBAAA,wBAAA,OAAA;AACA,iBAAA,qBAAA,OAAA;AACA,iBAAA,uBAAA,OAAA;;;;;;;;;;;;;;;;;;;;ACPA,iBAAA,iBAAA,OAAA;;;;;;;;;;;ACEA,QAAA,aAAA,qBAGM,oBAAoB,GACpB,8BAA8B,GAC9B,8BAA8B,KAAK,IAAI,IAAI,2BAA2B,GACtE,wBAAwB,KAAK,IAAI,IAAI,iBAAiB;AAM5D,aAAgB,eAAe,aAAmB;AAChD,UAAM,eAAe,cAAc,KAE7B,UAAU,KAAK,MAAM,YAAY,GAEjC,QAAQ,KAAK,MAAO,cAAc,MAAQ,2BAA2B;AAC3E,aAAO,CAAC,SAAS,KAAK;IACxB;AAPA,YAAA,iBAAA;AASA,aAAgB,gBAAa;AAC3B,UAAI,aAAa,WAAA,cAAY;AAC7B,UAAI,OAAO,cAAe,UAAU;AAClC,YAAM,OAAyB,WAAA;AAC/B,qBAAa,KAAK,UAAU,KAAK,OAAO;;AAE1C,aAAO;IACT;AAPA,YAAA,gBAAA;AAaA,aAAgB,OAAO,gBAAuB;AAC5C,UAAM,aAAa,eAAe,cAAa,CAAE,GAC3C,MAAM,eACV,OAAO,kBAAmB,WAAW,iBAAiB,WAAA,cAAY,IAAG,CAAE;AAGzE,aAAO,WAAW,YAAY,GAAG;IACnC;AAPA,YAAA,SAAA;AAcA,aAAgB,kBAAkB,MAAmB;AAEnD,UAAI,kBAAkB,IAAI;AACxB,eAAO;AACF,UAAI,OAAO,QAAS;AAEzB,eAAI,OAAO,cAAa,IACf,OAAO,IAAI,IAGX,eAAe,IAAI;AAEvB,UAAI,gBAAgB;AACzB,eAAO,eAAe,KAAK,QAAO,CAAE;AAEpC,YAAM,UAAU,oBAAoB;IAExC;AAjBA,YAAA,oBAAA;AAwBA,aAAgB,eACd,WACA,SAAmB;AAEnB,UAAI,UAAU,QAAQ,CAAC,IAAI,UAAU,CAAC,GAClC,QAAQ,QAAQ,CAAC,IAAI,UAAU,CAAC;AAGpC,aAAI,QAAQ,MACV,WAAW,GAEX,SAAS,wBAGJ,CAAC,SAAS,KAAK;IACxB;AAfA,YAAA,iBAAA;AAqBA,aAAgB,kBAAkB,MAAgB;AAChD,UAAM,YAAY,mBACZ,MAAM,GAAG,IAAI,OAAO,SAAS,CAAC,GAAG,KAAK,CAAC,CAAC,KACxC,aAAa,IAAI,OAAO,IAAI,SAAS,YAAY,CAAC;AAExD,aADa,IAAI,KAAK,KAAK,CAAC,IAAI,GAAI,EAAE,YAAW,EACrC,QAAQ,QAAQ,UAAU;IACxC;AANA,YAAA,oBAAA;AAYA,aAAgB,oBAAoB,MAAgB;AAClD,aAAO,KAAK,CAAC,IAAI,wBAAwB,KAAK,CAAC;IACjD;AAFA,YAAA,sBAAA;AAQA,aAAgB,qBAAqB,MAAgB;AACnD,aAAO,KAAK,CAAC,IAAI,MAAM,KAAK,CAAC,IAAI;IACnC;AAFA,YAAA,uBAAA;AAQA,aAAgB,qBAAqB,MAAgB;AACnD,aAAO,KAAK,CAAC,IAAI,MAAM,KAAK,CAAC,IAAI;IACnC;AAFA,YAAA,uBAAA;AAQA,aAAgB,kBAAkB,OAAc;AAC9C,aACE,MAAM,QAAQ,KAAK,KACnB,MAAM,WAAW,KACjB,OAAO,MAAM,CAAC,KAAM,YACpB,OAAO,MAAM,CAAC,KAAM;IAExB;AAPA,YAAA,oBAAA;AAaA,aAAgB,YACd,OAAc;AAEd,aACE,kBAAkB,KAAK,KACvB,OAAO,SAAU,YACjB,iBAAiB;IAErB;AARA,YAAA,cAAA;AAaA,aAAgB,WAAW,OAAmB,OAAiB;AAC7D,UAAM,MAAM,CAAC,MAAM,CAAC,IAAI,MAAM,CAAC,GAAG,MAAM,CAAC,IAAI,MAAM,CAAC,CAAC;AAGrD,aAAI,IAAI,CAAC,KAAK,0BACZ,IAAI,CAAC,KAAK,uBACV,IAAI,CAAC,KAAK,IAGL;IACT;AAVA,YAAA,aAAA;;;;;;;;;;;;;;;;;;;;ACvJA,QAAYC;AAAZ,KAAA,SAAYA,mBAAgB;AAC1B,MAAAA,kBAAAA,kBAAA,UAAA,CAAA,IAAA,WACAA,kBAAAA,kBAAA,SAAA,CAAA,IAAA;IACF,GAHYA,oBAAA,QAAA,qBAAA,QAAA,mBAAgB,CAAA,EAAA;;;;;;;;;;;ACL5B,QAAA,QAAA,eAmBa,sBAAb,MAAgC;;;;;;MAS9B,YAAY,SAAoC,CAAA,GAAE;;AAChD,aAAK,gBAAe,KAAA,OAAO,iBAAW,QAAA,OAAA,SAAA,KAAI,CAAA,GAE1C,KAAK,UAAU,MAAM,KACnB,IAAI,IACF,KAAK,aAEF,IAAI,OAAM,OAAO,EAAE,UAAW,aAAa,EAAE,OAAM,IAAK,CAAA,CAAG,EAC3D,OAAO,CAAC,GAAG,MAAM,EAAE,OAAO,CAAC,GAAG,CAAA,CAAE,CAAC,CACrC;MAEL;;;;;;;;;;MAWA,OAAO,SAAkB,SAAkB,QAAqB;AAC9D,iBAAW,cAAc,KAAK;AAC5B,cAAI;AACF,uBAAW,OAAO,SAAS,SAAS,MAAM;mBACnC,KAAK;AACZ,kBAAA,KAAK,KACH,yBAAyB,WAAW,YAAY,IAAI,UAAU,IAAI,OAAO,EAAE;;MAInF;;;;;;;;;;MAWA,QAAQ,SAAkB,SAAkB,QAAqB;AAC/D,eAAO,KAAK,aAAa,OAAO,CAAC,KAAK,eAAc;AAClD,cAAI;AACF,mBAAO,WAAW,QAAQ,KAAK,SAAS,MAAM;mBACvC,KAAK;AACZ,kBAAA,KAAK,KACH,yBAAyB,WAAW,YAAY,IAAI,UAAU,IAAI,OAAO,EAAE;;AAG/E,iBAAO;QACT,GAAG,OAAO;MACZ;MAEA,SAAM;AAEJ,eAAO,KAAK,QAAQ,MAAK;MAC3B;;AApEF,YAAA,sBAAA;;;;;;;;;;;ACnBA,QAAM,uBAAuB,gBACvB,YAAY,QAAQ,oBAAoB,WACxC,mBAAmB,WAAW,oBAAoB,gBAAgB,oBAAoB,UACtF,kBAAkB,IAAI,OAAO,OAAO,SAAS,IAAI,gBAAgB,IAAI,GACrE,yBAAyB,uBACzB,kCAAkC;AAUxC,aAAgB,YAAY,KAAW;AACrC,aAAO,gBAAgB,KAAK,GAAG;IACjC;AAFA,YAAA,cAAA;AAQA,aAAgB,cAAc,OAAa;AACzC,aACE,uBAAuB,KAAK,KAAK,KACjC,CAAC,gCAAgC,KAAK,KAAK;IAE/C;AALA,YAAA,gBAAA;;;;;;;;;;;ACtBA,QAAA,eAAA,uBAEM,wBAAwB,IACxB,sBAAsB,KACtB,yBAAyB,KACzB,iCAAiC,KAW1B,aAAb,MAAa,YAAU;MAGrB,YAAY,eAAsB;AAF1B,aAAA,iBAAsC,oBAAI,IAAG,GAG/C,iBAAe,KAAK,OAAO,aAAa;MAC9C;MAEA,IAAI,KAAa,OAAa;AAG5B,YAAM,aAAa,KAAK,OAAM;AAC9B,eAAI,WAAW,eAAe,IAAI,GAAG,KACnC,WAAW,eAAe,OAAO,GAAG,GAEtC,WAAW,eAAe,IAAI,KAAK,KAAK,GACjC;MACT;MAEA,MAAM,KAAW;AACf,YAAM,aAAa,KAAK,OAAM;AAC9B,0BAAW,eAAe,OAAO,GAAG,GAC7B;MACT;MAEA,IAAI,KAAW;AACb,eAAO,KAAK,eAAe,IAAI,GAAG;MACpC;MAEA,YAAS;AACP,eAAO,KAAK,MAAK,EACd,OAAO,CAAC,KAAe,SACtB,IAAI,KAAK,MAAM,iCAAiC,KAAK,IAAI,GAAG,CAAC,GACtD,MACN,CAAA,CAAE,EACJ,KAAK,sBAAsB;MAChC;MAEQ,OAAO,eAAqB;AAClC,QAAI,cAAc,SAAS,wBAC3B,KAAK,iBAAiB,cACnB,MAAM,sBAAsB,EAC5B,QAAO,EACP,OAAO,CAAC,KAA0B,SAAgB;AACjD,cAAM,aAAa,KAAK,KAAI,GACtB,IAAI,WAAW,QAAQ,8BAA8B;AAC3D,cAAI,MAAM,IAAI;AACZ,gBAAM,MAAM,WAAW,MAAM,GAAG,CAAC,GAC3B,QAAQ,WAAW,MAAM,IAAI,GAAG,KAAK,MAAM;AACjD,gBAAI,aAAA,aAAY,GAAG,SAAK,aAAA,eAAc,KAAK,KACzC,IAAI,IAAI,KAAK,KAAK;;AAKtB,iBAAO;QACT,GAAG,oBAAI,IAAG,CAAE,GAGV,KAAK,eAAe,OAAO,0BAC7B,KAAK,iBAAiB,IAAI,IACxB,MAAM,KAAK,KAAK,eAAe,QAAO,CAAE,EACrC,QAAO,EACP,MAAM,GAAG,qBAAqB,CAAC;MAGxC;MAEQ,QAAK;AACX,eAAO,MAAM,KAAK,KAAK,eAAe,KAAI,CAAE,EAAE,QAAO;MACvD;MAEQ,SAAM;AACZ,YAAM,aAAa,IAAI,YAAU;AACjC,0BAAW,iBAAiB,IAAI,IAAI,KAAK,cAAc,GAChD;MACT;;AA3EF,YAAA,aAAA;;;;;;;;;;;ACjBA,QAAA,QAAA,eAUA,qBAAA,6BACA,eAAA;AAEa,YAAA,sBAAsB;AACtB,YAAA,qBAAqB;AAElC,QAAM,UAAU,MACV,eAAe,qBACf,gBAAgB,2BAChB,iBAAiB,2BACjB,aAAa,eACb,qBAAqB,IAAI,OAC7B,SAAS,YAAY,MAAM,aAAa,MAAM,cAAc,MAAM,UAAU,cAAc;AAa5F,aAAgB,iBAAiB,aAAmB;AAClD,UAAM,QAAQ,mBAAmB,KAAK,WAAW;AAMjD,aALI,CAAC,SAKD,MAAM,CAAC,MAAM,QAAQ,MAAM,CAAC,IAAU,OAEnC;QACL,SAAS,MAAM,CAAC;QAChB,QAAQ,MAAM,CAAC;QACf,YAAY,SAAS,MAAM,CAAC,GAAG,EAAE;;IAErC;AAdA,YAAA,mBAAA;AAsBA,QAAa,4BAAb,MAAsC;MACpC,OAAO,SAAkB,SAAkB,QAAqB;AAC9D,YAAM,cAAc,MAAA,MAAM,eAAe,OAAO;AAChD,YACE,CAAC,mBACD,mBAAA,qBAAoB,OAAO,KAC3B,KAAC,MAAA,oBAAmB,WAAW;AAE/B;AAEF,YAAM,cAAc,GAAG,OAAO,IAAI,YAAY,OAAO,IACnD,YAAY,MACd,KAAK,OAAO,YAAY,cAAc,MAAA,WAAW,IAAI,EAAE,SAAS,EAAE,CAAC;AAEnE,eAAO,IAAI,SAAS,QAAA,qBAAqB,WAAW,GAChD,YAAY,cACd,OAAO,IACL,SACA,QAAA,oBACA,YAAY,WAAW,UAAS,CAAE;MAGxC;MAEA,QAAQ,SAAkB,SAAkB,QAAqB;AAC/D,YAAM,oBAAoB,OAAO,IAAI,SAAS,QAAA,mBAAmB;AACjE,YAAI,CAAC;AAAmB,iBAAO;AAC/B,YAAM,cAAc,MAAM,QAAQ,iBAAiB,IAC/C,kBAAkB,CAAC,IACnB;AACJ,YAAI,OAAO,eAAgB;AAAU,iBAAO;AAC5C,YAAM,cAAc,iBAAiB,WAAW;AAChD,YAAI,CAAC;AAAa,iBAAO;AAEzB,oBAAY,WAAW;AAEvB,YAAM,mBAAmB,OAAO,IAAI,SAAS,QAAA,kBAAkB;AAC/D,YAAI,kBAAkB;AAGpB,cAAM,QAAQ,MAAM,QAAQ,gBAAgB,IACxC,iBAAiB,KAAK,GAAG,IACzB;AACJ,sBAAY,aAAa,IAAI,aAAA,WAC3B,OAAO,SAAU,WAAW,QAAQ,MAAS;;AAGjD,eAAO,MAAA,MAAM,eAAe,SAAS,WAAW;MAClD;MAEA,SAAM;AACJ,eAAO,CAAC,QAAA,qBAAqB,QAAA,kBAAkB;MACjD;;AApDF,YAAA,4BAAA;;;;;;;;;;;;;;;;;;;;ACzDA,QAAA,QAAA,eAEM,uBAAmB,MAAA,kBACvB,4CAA4C,GAGlC;AAAZ,KAAA,SAAYC,UAAO;AACjB,MAAAA,SAAA,OAAA;IACF,GAFY,UAAA,QAAA,YAAA,QAAA,UAAO,CAAA,EAAA;AAenB,aAAgB,eAAe,SAAkB,MAAiB;AAChE,aAAO,QAAQ,SAAS,kBAAkB,IAAI;IAChD;AAFA,YAAA,iBAAA;AAIA,aAAgB,kBAAkB,SAAgB;AAChD,aAAO,QAAQ,YAAY,gBAAgB;IAC7C;AAFA,YAAA,oBAAA;AAIA,aAAgB,eAAe,SAAgB;AAC7C,aAAO,QAAQ,SAAS,gBAAgB;IAC1C;AAFA,YAAA,iBAAA;;;;;;;;;;;AC7BA,QAAA,QAAA,eAMa,mBAAb,MAA6B;MAC3B,eAAY;AACV,eAAO;UACL,UAAU,MAAA,iBAAiB;;MAE/B;MAEA,WAAQ;AACN,eAAO;MACT;;AATF,YAAA,mBAAA;;;;;;;;;;;ACNA,QAAA,QAAA,eAMa,kBAAb,MAA4B;MAC1B,eAAY;AACV,eAAO;UACL,UAAU,MAAA,iBAAiB;;MAE/B;MAEA,WAAQ;AACN,eAAO;MACT;;AATF,YAAA,kBAAA;;;;;;;;;;;ACNA,QAAA,QAAA,eAWA,yBAAA,iCACA,qBAAA,6BACA,oBAAA,4BAOa,qBAAb,MAA+B;MAO7B,YAAY,QAAgC;;AAC1C,aAAK,QAAQ,OAAO,MAEf,KAAK,cACR,uBAAA,oBACE,IAAI,MAAM,wDAAwD,CAAC,GAErE,KAAK,QAAQ,IAAI,kBAAA,gBAAe,IAGlC,KAAK,wBACH,KAAA,OAAO,yBAAmB,QAAA,OAAA,SAAA,KAAI,IAAI,kBAAA,gBAAe,GACnD,KAAK,2BACH,KAAA,OAAO,4BAAsB,QAAA,OAAA,SAAA,KAAI,IAAI,mBAAA,iBAAgB,GACvD,KAAK,uBACH,KAAA,OAAO,wBAAkB,QAAA,OAAA,SAAA,KAAI,IAAI,kBAAA,gBAAe,GAClD,KAAK,0BACH,KAAA,OAAO,2BAAqB,QAAA,OAAA,SAAA,KAAI,IAAI,mBAAA,iBAAgB;MACxD;MAEA,aACE,SACA,SACA,UACA,UACA,YACA,OAAa;AAEb,YAAM,gBAAgB,MAAA,MAAM,eAAe,OAAO;AAElD,eAAI,CAAC,iBAAiB,KAAC,MAAA,oBAAmB,aAAa,IAC9C,KAAK,MAAM,aAChB,SACA,SACA,UACA,UACA,YACA,KAAK,IAIL,cAAc,WACZ,cAAc,aAAa,MAAA,WAAW,UACjC,KAAK,qBAAqB,aAC/B,SACA,SACA,UACA,UACA,YACA,KAAK,IAGF,KAAK,wBAAwB,aAClC,SACA,SACA,UACA,UACA,YACA,KAAK,IAIL,cAAc,aAAa,MAAA,WAAW,UACjC,KAAK,oBAAoB,aAC9B,SACA,SACA,UACA,UACA,YACA,KAAK,IAIF,KAAK,uBAAuB,aACjC,SACA,SACA,UACA,UACA,YACA,KAAK;MAET;MAEA,WAAQ;AACN,eAAO,oBAAoB,KAAK,MAAM,SAAQ,CAAE,yBAAyB,KAAK,qBAAqB,SAAQ,CAAE,4BAA4B,KAAK,wBAAwB,SAAQ,CAAE,wBAAwB,KAAK,oBAAoB,SAAQ,CAAE,2BAA2B,KAAK,uBAAuB,SAAQ,CAAE;MAC9S;;AA5FF,YAAA,qBAAA;;;;;;;;;;;ACpBA,QAAA,QAAA,eAWa,2BAAb,MAAqC;MAGnC,YAA6B,SAAiB,GAAC;AAAlB,aAAA,SAAA,QAC3B,KAAK,SAAS,KAAK,WAAW,MAAM,GACpC,KAAK,cAAc,KAAK,MAAM,KAAK,SAAS,UAAU;MACxD;MAEA,aAAa,SAAkB,SAAe;AAC5C,eAAO;UACL,cACE,MAAA,gBAAe,OAAO,KAAK,KAAK,YAAY,OAAO,IAAI,KAAK,cACxD,MAAA,iBAAiB,qBACjB,MAAA,iBAAiB;;MAE3B;MAEA,WAAQ;AACN,eAAO,qBAAqB,KAAK,MAAM;MACzC;MAEQ,WAAW,OAAa;AAC9B,eAAI,OAAO,SAAU,YAAY,MAAM,KAAK,IAAU,IAC/C,SAAS,IAAI,IAAI,SAAS,IAAI,IAAI;MAC3C;MAEQ,YAAY,SAAe;AACjC,YAAI,eAAe;AACnB,iBAAS,IAAI,GAAG,IAAI,QAAQ,SAAS,GAAG,KAAK;AAC3C,cAAM,MAAM,IAAI,GACV,OAAO,SAAS,QAAQ,MAAM,KAAK,MAAM,CAAC,GAAG,EAAE;AACrD,0BAAgB,eAAe,UAAU;;AAE3C,eAAO;MACT;;AAlCF,YAAA,2BAAA;;;;;;;;;;;ACJA,QAAM,YAAY,mBACZ,UAAU,iBACV,eAAe,sBACf,YAAY,SAAS,WACrB,eAAe,UAAU,UACzB,mBAAmB,aAAa,KAAK,MAAM,GAC3C,eAAe,QAAQ,OAAO,gBAAgB,MAAM,GACpD,cAAc,OAAO,WACrB,iBAAiB,YAAY,gBAC7B,iBAAiB,SAAS,OAAO,cAAc,QAC/C,uBAAuB,YAAY;AAUzC,aAAS,QAAQ,MAAgB,WAAc;AAC7C,aAAO,SAAU,KAAQ;AACvB,eAAO,KAAK,UAAU,GAAG,CAAC;MAC5B;IACF;AA8BA,aAAgB,cAAc,OAAU;AACtC,UAAI,CAAC,aAAa,KAAK,KAAK,WAAW,KAAK,MAAM;AAChD,eAAO;AAET,UAAM,QAAQ,aAAa,KAAK;AAChC,UAAI,UAAU;AACZ,eAAO;AAET,UAAM,OAAO,eAAe,KAAK,OAAO,aAAa,KAAK,MAAM;AAChE,aACE,OAAO,QAAQ,cACf,gBAAgB,QAChB,aAAa,KAAK,IAAI,MAAM;IAEhC;AAdA,YAAA,gBAAA;AAwCA,aAAS,aAAa,OAAU;AAC9B,aAAO,SAAS,QAAQ,OAAO,SAAS;IAC1C;AASA,aAAS,WAAW,OAAU;AAC5B,aAAI,SAAS,OACJ,UAAU,SAAY,eAAe,UAEvC,kBAAkB,kBAAkB,OAAO,KAAK,IACnD,UAAU,KAAK,IACf,eAAe,KAAK;IAC1B;AASA,aAAS,UAAU,OAAU;AAC3B,UAAM,QAAQ,eAAe,KAAK,OAAO,cAAqB,GAC5D,MAAM,MAAM,cAAqB,GAC/B,WAAW;AAEf,UAAI;AACF,cAAM,cAAqB,IAAI,QAC/B,WAAW;cACD;;AAIZ,UAAM,SAAS,qBAAqB,KAAK,KAAK;AAC9C,aAAI,aACE,QACF,MAAM,cAAqB,IAAI,MAE/B,OAAO,MAAM,cAAqB,IAG/B;IACT;AASA,aAAS,eAAe,OAAU;AAChC,aAAO,qBAAqB,KAAK,KAAK;IACxC;;;;;;;;;;;AC9JA,QAAA,iBAAA,yBAEM,YAAY;AAWlB,aAAgB,SAAS,MAAW;AAClC,UAAI,SAAc,KAAK,MAAK,GACtB,UAAkD,oBAAI,QAAO;AAInE,aAAO,KAAK,SAAS;AACnB,iBAAS,gBAAgB,QAAQ,KAAK,MAAK,GAAI,GAAG,OAAO;AAG3D,aAAO;IACT;AAXA,YAAA,QAAA;AAaA,aAAS,UAAU,OAAU;AAC3B,aAAI,QAAQ,KAAK,IACR,MAAM,MAAK,IAEb;IACT;AAUA,aAAS,gBACP,KACA,KACA,QAAQ,GACR,SAAmC;AAEnC,UAAI;AACJ,UAAI,UAAQ,YAIZ;YADA,SACI,YAAY,GAAG,KAAK,YAAY,GAAG,KAAK,WAAW,GAAG;AACxD,mBAAS,UAAU,GAAG;iBACb,QAAQ,GAAG;AAEpB,cADA,SAAS,IAAI,MAAK,GACd,QAAQ,GAAG;AACb,qBAAS,IAAI,GAAG,IAAI,IAAI,QAAQ,IAAI,GAAG;AACrC,qBAAO,KAAK,UAAU,IAAI,CAAC,CAAC,CAAC;mBAEtB,SAAS,GAAG,GAAG;AACxB,gBAAM,OAAO,OAAO,KAAK,GAAG;AAC5B,qBAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,IAAI,GAAG,KAAK;AAC3C,kBAAM,MAAM,KAAK,CAAC;AAClB,qBAAO,GAAG,IAAI,UAAU,IAAI,GAAG,CAAC;;;mBAG3B,SAAS,GAAG;AACrB,cAAI,SAAS,GAAG,GAAG;AACjB,gBAAI,CAAC,YAAY,KAAK,GAAG;AACvB,qBAAO;AAET,qBAAS,OAAO,OAAO,CAAA,GAAI,GAAG;AAC9B,gBAAM,OAAO,OAAO,KAAK,GAAG;AAE5B,qBAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,IAAI,GAAG,KAAK;AAC3C,kBAAM,MAAM,KAAK,CAAC,GACZ,WAAW,IAAI,GAAG;AAExB,kBAAI,YAAY,QAAQ;AACtB,gBAAI,OAAO,WAAa,MACtB,OAAO,OAAO,GAAG,IAGjB,OAAO,GAAG,IAAI;mBAEX;AACL,oBAAM,OAAO,OAAO,GAAG,GACjB,OAAO;AAEb,oBACE,oBAAoB,KAAK,KAAK,OAAO,KACrC,oBAAoB,KAAK,KAAK,OAAO;AAErC,yBAAO,OAAO,GAAG;qBACZ;AACL,sBAAI,SAAS,IAAI,KAAK,SAAS,IAAI,GAAG;AACpC,wBAAM,OAAO,QAAQ,IAAI,IAAI,KAAK,CAAA,GAC5B,OAAO,QAAQ,IAAI,IAAI,KAAK,CAAA;AAClC,yBAAK,KAAK,EAAE,KAAK,KAAK,IAAG,CAAE,GAC3B,KAAK,KAAK,EAAE,KAAK,KAAK,IAAG,CAAE,GAC3B,QAAQ,IAAI,MAAM,IAAI,GACtB,QAAQ,IAAI,MAAM,IAAI;;AAGxB,yBAAO,GAAG,IAAI,gBACZ,OAAO,GAAG,GACV,UACA,OACA,OAAO;;;;;AAMf,qBAAS;AAIb,eAAO;;IACT;AAQA,aAAS,oBACP,KACA,KACA,SAAmC;AAEnC,UAAM,MAAM,QAAQ,IAAI,IAAI,GAAG,CAAC,KAAK,CAAA;AACrC,eAAS,IAAI,GAAG,IAAI,IAAI,QAAQ,IAAI,GAAG,KAAK;AAC1C,YAAM,OAAO,IAAI,CAAC;AAClB,YAAI,KAAK,QAAQ,OAAO,KAAK,QAAQ;AACnC,iBAAO;;AAGX,aAAO;IACT;AAEA,aAAS,QAAQ,OAAU;AACzB,aAAO,MAAM,QAAQ,KAAK;IAC5B;AAEA,aAAS,WAAW,OAAU;AAC5B,aAAO,OAAO,SAAU;IAC1B;AAEA,aAAS,SAAS,OAAU;AAC1B,aACE,CAAC,YAAY,KAAK,KAClB,CAAC,QAAQ,KAAK,KACd,CAAC,WAAW,KAAK,KACjB,OAAO,SAAU;IAErB;AAEA,aAAS,YAAY,OAAU;AAC7B,aACE,OAAO,SAAU,YACjB,OAAO,SAAU,YACjB,OAAO,SAAU,aACjB,OAAO,QAAU,OACjB,iBAAiB,QACjB,iBAAiB,UACjB,UAAU;IAEd;AAEA,aAAS,YAAY,KAAU,KAAQ;AACrC,aAAI,OAAC,eAAA,eAAc,GAAG,KAAK,KAAC,eAAA,eAAc,GAAG;IAK/C;;;;;;;;;;;ACjLA,QAAa,eAAb,MAAa,sBAAqB,MAAK;MACrC,YAAY,SAAgB;AAC1B,cAAM,OAAO,GAIb,OAAO,eAAe,MAAM,cAAa,SAAS;MACpD;;AAPF,YAAA,eAAA;AAmBA,aAAgB,gBACd,SACA,SAAe;AAEf,UAAI,eAEE,iBAAiB,IAAI,QAAe,SACxC,UACA,QAAM;AAEN,wBAAgB,WAAW,WAAuB;AAChD,iBAAO,IAAI,aAAa,sBAAsB,CAAC;QACjD,GAAG,OAAO;MACZ,CAAC;AAED,aAAO,QAAQ,KAAK,CAAC,SAAS,cAAc,CAAC,EAAE,KAC7C,aACE,aAAa,aAAa,GACnB,SAET,YAAS;AACP,2BAAa,aAAa,GACpB;MACR,CAAC;IAEL;AAzBA,YAAA,kBAAA;;;;;;;;;;;ACvBA,aAAgB,WAAWC,MAAa,YAA2B;AACjE,aAAI,OAAO,cAAe,WACjBA,SAAQ,aAER,CAAC,CAACA,KAAI,MAAM,UAAU;IAEjC;AANA,YAAA,aAAA;AAYA,aAAgB,aACdA,MACA,aAAoC;AAEpC,UAAI,CAAC;AACH,eAAO;AAGT,eAAW,aAAa;AACtB,YAAI,WAAWA,MAAK,SAAS;AAC3B,iBAAO;AAGX,aAAO;IACT;AAdA,YAAA,eAAA;;;;;;;;;;;ACLA,aAAgB,UAAU,MAAa;AACrC,aACE,OAAO,QAAS,cAChB,OAAQ,KAAqB,cAAe,cAC5C,OAAQ,KAAqB,YAAa,cACzC,KAAqB,cAAc;IAExC;AAPA,YAAA,YAAA;;;;;;;;;;;ACNA,QAAa,WAAb,MAAqB;MAInB,cAAA;AACE,aAAK,WAAW,IAAI,QAAQ,CAAC,SAAS,WAAU;AAC9C,eAAK,WAAW,SAChB,KAAK,UAAU;QACjB,CAAC;MACH;MAEA,IAAI,UAAO;AACT,eAAO,KAAK;MACd;MAEA,QAAQ,KAAM;AACZ,aAAK,SAAS,GAAG;MACnB;MAEA,OAAO,KAAY;AACjB,aAAK,QAAQ,GAAG;MAClB;;AArBF,YAAA,WAAA;;;;;;;;;;;ACAA,QAAA,YAAA,oBAKa,iBAAb,MAA2B;MAOzB,YACU,WACA,OAAW;AADX,aAAA,YAAA,WACA,KAAA,QAAA,OAJF,KAAA,YAAY,IACZ,KAAA,YAAY,IAAI,UAAA,SAAQ;MAI7B;MAEH,IAAI,WAAQ;AACV,eAAO,KAAK;MACd;MAEA,IAAI,UAAO;AACT,eAAO,KAAK,UAAU;MACxB;MAEA,QAAQ,MAAmB;AACzB,YAAI,CAAC,KAAK,WAAW;AACnB,eAAK,YAAY;AACjB,cAAI;AACF,oBAAQ,QAAQ,KAAK,UAAU,KAAK,KAAK,OAAO,GAAG,IAAI,CAAC,EAAE,KACxD,SAAO,KAAK,UAAU,QAAQ,GAAG,GACjC,SAAO,KAAK,UAAU,OAAO,GAAG,CAAC;mBAE5B,KAAK;AACZ,iBAAK,UAAU,OAAO,GAAG;;;AAG7B,eAAO,KAAK,UAAU;MACxB;;AAjCF,YAAA,iBAAA;;;;;;;;;;;ACLA,QAAA,QAAA,eAEA,qBAAA;AAUA,aAAgB,QACd,UACA,KAAM;AAEN,aAAO,IAAI,QAAQ,aAAU;AAE3B,cAAA,QAAQ,SAAK,mBAAA,iBAAgB,MAAA,QAAQ,OAAM,CAAE,GAAG,MAAK;AACnD,mBAAS,OAAO,KAAK,CAAC,WAAwB;AAC5C,oBAAQ,MAAM;UAChB,CAAC;QACH,CAAC;MACH,CAAC;IACH;AAZA,YAAA,UAAA;;;;;;;;;;;;;;;;;;;;;ACZA,iBAAA,iCAAA,OAAA;AACA,iBAAA,2BAAA,OAAA;AACA,iBAAA,uBAAA,OAAA;AACA,iBAAA,iCAAA,OAAA;AACA,iBAAA,kCAAA,OAAA;AACA,iBAAA,iBAAA,OAAA;AACA,iBAAA,kBAAA,OAAA;AACA,iBAAA,yBAAA,OAAA;AACA,iBAAA,oBAAA,OAAA;AACA,YAAA,eAAA;AACA,iBAAA,qBAAA,OAAA;AACA,iBAAA,sBAAA,OAAA;AACA,iBAAA,sCAAA,OAAA;AACA,iBAAA,wBAAA,OAAA;AACA,iBAAA,yBAAA,OAAA;AACA,iBAAA,6BAAA,OAAA;AACA,iBAAA,4BAAA,OAAA;AACA,iBAAA,+BAAA,OAAA;AACA,iBAAA,qCAAA,OAAA;AACA,iBAAA,6BAAA,OAAA;AACA,iBAAA,uBAAA,OAAA;AACA,iBAAA,wBAAA,OAAA;AACA,iBAAA,kBAAA,OAAA;AACA,iBAAA,qBAAA,OAAA;AACA,iBAAA,oBAAA,OAAA;AACA,iBAAA,gBAAA,OAAA;AACA,iBAAA,iBAAA,OAAA;AACA,iBAAA,qBAAA,OAAA;AACA,iBAAA,oBAAA,OAAA;AACA,QAAA,aAAA;AACa,YAAA,WAAW;MACtB,SAAA,WAAA;;;;;;;;;;;;AC5BF,QAAYC;AAAZ,KAAA,SAAYA,yBAAsB;AAChC,MAAAA,wBAAAA,wBAAA,QAAA,CAAA,IAAA,SACAA,wBAAAA,wBAAA,aAAA,CAAA,IAAA;IACF,GAHYA,0BAAA,QAAA,2BAAA,QAAA,yBAAsB,CAAA,EAAA;;;;;;;;;;;ACsFlC,QAAY;AAAZ,KAAA,SAAYC,gBAAa;AAMvB,MAAAA,eAAAA,eAAA,YAAA,CAAA,IAAA,aAOAA,eAAAA,eAAA,wBAAA,CAAA,IAAA,yBAIAA,eAAAA,eAAA,QAAA,CAAA,IAAA,SAKAA,eAAAA,eAAA,MAAA,CAAA,IAAA;IACF,GAvBY,gBAAA,QAAA,kBAAA,QAAA,gBAAa,CAAA,EAAA;;;;;;;;;;;ACpFzB,aAAgB,aAAgB,MAAc;AAC5C,aAA6B,QAAS;IACxC;AAFA,YAAA,eAAA;AAQA,aAAgB,eAAe,YAA4B;AACzD,UAAI,OAAO,OAAO,KAAK,UAAU;AACjC,aAAI,KAAK,WAAW,IAAU,MAG9B,OAAO,KAAK,KAAI,GACT,KAAK,UAAU,KAAK,IAAI,SAAO,CAAC,KAAK,WAAW,GAAG,CAAC,CAAC,CAAC;IAC/D;AAPA,YAAA,iBAAA;AAaA,aAAgB,uBACdC,uBAA0C;;AAE1C,aAAO,GAAGA,sBAAqB,IAAI,KAAI,KAAAA,sBAAqB,aAAO,QAAA,OAAA,SAAA,KAAI,EAAE,KACvE,KAAAA,sBAAqB,eAAS,QAAA,OAAA,SAAA,KAAI,EACpC;IACF;AANA,YAAA,yBAAA;AAWA,QAAa,eAAb,MAAa,sBAAqB,MAAK;MACrC,YAAY,SAAgB;AAC1B,cAAM,OAAO,GAIb,OAAO,eAAe,MAAM,cAAa,SAAS;MACpD;;AAPF,YAAA,eAAA;AAmBA,aAAgB,gBACd,SACA,SAAe;AAEf,UAAI,eAEE,iBAAiB,IAAI,QAAe,SACxC,UACA,QAAM;AAEN,wBAAgB,WAAW,WAAuB;AAChD,iBAAO,IAAI,aAAa,sBAAsB,CAAC;QACjD,GAAG,OAAO;MACZ,CAAC;AAED,aAAO,QAAQ,KAAK,CAAC,SAAS,cAAc,CAAC,EAAE,KAC7C,aACE,aAAa,aAAa,GACnB,SAET,YAAS;AACP,2BAAa,aAAa,GACpB;MACR,CAAC;IAEL;AAzBA,YAAA,kBAAA;AA4CO,mBAAe,kBACpB,UAAsB;AAEtB,aAAO,QAAQ,IACb,SAAS,IAAyC,OAAM,MAAI;AAC1D,YAAI;AAEF,iBAAO;YACL,QAAQ;YACR,OAHU,MAAM;;iBAKX,GAAG;AACV,iBAAO;YACL,QAAQ;YACR,QAAQ;;;MAGd,CAAC,CAAC;IAEN;AAnBA,YAAA,oBAAA;AAqBA,aAAgB,mCACd,IAAoC;AAEpC,aAAO,GAAG,WAAW;IACvB;AAJA,YAAA,qCAAA;AASA,aAAgB,QAAc,KAAU,IAAkB;AACxD,UAAM,SAAc,CAAA;AACpB,iBAAI,QAAQ,QAAK;AACf,eAAO,KAAK,GAAG,GAAG,EAAE,CAAC;MACvB,CAAC,GACM;IACT;AANA,YAAA,UAAA;AAQA,aAAgB,UAAU,KAAmB,KAAiB;AAC5D,UAAI,IAAI,SAAS,IAAI;AACnB,eAAO;AAET,eAAW,QAAQ;AACjB,YAAI,CAAC,IAAI,IAAI,IAAI;AACf,iBAAO;AAGX,aAAO;IACT;AAVA,YAAA,YAAA;AAkBA,aAAgB,eAAe,KAAe,OAAa;AACzD,UAAI,KAAK,GACL,KAAK,IAAI,SAAS;AAEtB,aAAO,KAAK,KAAK,KAAG;AAClB,YAAM,MAAM,KAAK,OAAO,KAAK,MAAM,CAAC;AACpC,QAAI,IAAI,GAAG,KAAK,QACd,KAAK,MAEL,KAAK,MAAM;;AAIf,aAAI,IAAI,EAAE,KAAK,QACN,KACE,IAAI,EAAE,KAAK,QACb,KAEF;IACT;AAnBA,YAAA,iBAAA;AAqBA,aAAgB,sBAAsB,KAAa,KAAW;AAC5D,aAAO,IAAI,YAAW,MAAO,IAAI,YAAW;IAC9C;AAFA,YAAA,wBAAA;;;;;;;;;;;AC1KA,QAAY;AAAZ,KAAA,SAAYC,iBAAc;AACxB,MAAAA,gBAAAA,gBAAA,OAAA,CAAA,IAAA,QACAA,gBAAAA,gBAAA,MAAA,CAAA,IAAA,OACAA,gBAAAA,gBAAA,aAAA,CAAA,IAAA,cACAA,gBAAAA,gBAAA,YAAA,CAAA,IAAA,aACAA,gBAAAA,gBAAA,wBAAA,CAAA,IAAA;IACF,GANY,iBAAA,QAAA,mBAAA,QAAA,iBAAc,CAAA,EAAA;;;;;;;;;;;ACF1B,QAAA,UAAA,kBAGa,iBAAb,MAA2B;MAA3B,cAAA;AACE,aAAA,OAA4B,QAAA,eAAe;MAsB7C;MApBE,qBAAkB;MAElB;MAEA,MAAM,WAAsB,QAAiB;MAE7C;MAEA,KAAK,WAAsB,UAAmB;MAE9C;MAEA,aACE,aACA,yBACA,2BACA,UAAgB;MAGlB;;AAtBF,YAAA,iBAAA;;;;;;;;;;;ACRA,QAAA,QAAA,eAEA,UAAA,kBAKY;AAAZ,KAAA,SAAYC,iBAAc;AACxB,MAAAA,gBAAA,UAAA,WACAA,gBAAA,YAAA,aACAA,gBAAA,kBAAA,mBACAA,gBAAA,qBAAA,sBACAA,gBAAA,mBAAA,oBACAA,gBAAA,6BAAA;IACF,GAPY,iBAAA,QAAA,mBAAA,QAAA,iBAAc,CAAA,EAAA;AAoB1B,aAAgB,2BACd,MACA,MACA,SAAuB;;AAEvB,aAAK,YAAY,IAAI,KACnB,MAAA,KAAK,KACH,yBAAyB,IAAI,2FAA2F,GAGrH;QACL;QACA;QACA,cAAa,KAAA,SAAS,iBAAW,QAAA,OAAA,SAAA,KAAI;QACrC,OAAM,KAAA,SAAS,UAAI,QAAA,OAAA,SAAA,KAAI;QACvB,YAAW,KAAA,SAAS,eAAS,QAAA,OAAA,SAAA,KAAI,MAAA,UAAU;;IAE/C;AAjBA,YAAA,6BAAA;AAmBA,aAAgB,mCACd,MACA,YAAgC;;AAEhC,aAAO;QACL,OAAM,KAAA,KAAK,UAAI,QAAA,OAAA,SAAA,KAAI,WAAW;QAC9B,cAAa,KAAA,KAAK,iBAAW,QAAA,OAAA,SAAA,KAAI,WAAW;QAC5C,MAAM,WAAW;QACjB,MAAM,WAAW;QACjB,WAAW,WAAW;;IAE1B;AAXA,YAAA,qCAAA;AAaA,aAAgB,2BACd,YACA,iBAAqC;AAGrC,iBACE,QAAA,uBAAsB,WAAW,MAAM,gBAAgB,IAAI,KAC3D,WAAW,SAAS,gBAAgB,QACpC,WAAW,SAAS,gBAAgB,QACpC,WAAW,cAAc,gBAAgB;IAE7C;AAXA,YAAA,6BAAA;AAeA,QAAM,cAAc;AACpB,aAAgB,YAAY,MAAY;AACtC,aAAO,KAAK,MAAM,WAAW,KAAK;IACpC;AAFA,YAAA,cAAA;;;;;;;;;;;AC3EA,QAAA,UAAA,kBAMA,eAAA,uBAEA,yBAAA,iCACA,UAAA;AAoBA,aAAS,yBAAyB,YAAoB;AACpD,UAAM,SAAS,WAAW,IAAI,MAAM,CAAC;AACrC,oBAAO,KAAK,CAAC,GACN;QACL,SAAS;UACP;UACA;;QAEF,KAAK;QACL,OAAO;QACP,WAAW;QACX,KAAK;QACL,KAAK;;IAET;AAEA,QAAa,wBAAb,MAAkC;MAChC,YACS,WACU,aACT,gBAAgB,IAChB,WAA8B,yBAAyB,WAAW,GAAC;AAHpE,aAAA,YAAA,WACU,KAAA,cAAA,aACT,KAAA,gBAAA,eACA,KAAA,WAAA;MACP;MAEH,OAAO,OAAa;AAClB,aAAK,SAAS,SAAS,GACvB,KAAK,SAAS,OAAO,OAEjB,KAAK,kBACP,KAAK,SAAS,MAAM,KAAK,IAAI,OAAO,KAAK,SAAS,GAAG,GACrD,KAAK,SAAS,MAAM,KAAK,IAAI,OAAO,KAAK,SAAS,GAAG,GACrD,KAAK,SAAS,YAAY;AAG5B,YAAM,UAAM,QAAA,gBAAe,KAAK,aAAa,KAAK;AAClD,aAAK,SAAS,QAAQ,OAAO,MAAM,CAAC,KAAK;MAC3C;MAEA,aAAa,WAAiB;AAC5B,aAAK,YAAY;MACnB;MAEA,eAAY;AACV,eAAO,KAAK;MACd;;AA5BF,YAAA,wBAAA;AAmCA,QAAa,sBAAb,MAAgC;;;;;MAO9B,YACmB,aACA,eAAsB;AADtB,aAAA,cAAA,aACA,KAAA,gBAAA,eARZ,KAAA,OAAiC,QAAA,eAAe;MASpD;MAEH,mBAAmB,WAAiB;AAClC,eAAO,IAAI,sBACT,WACA,KAAK,aACL,KAAK,aAAa;MAEtB;;;;;;MAOA,MACE,UACA,OAA4B;AAE5B,YAAM,gBAAgB,SAAS,aAAY,GACrC,aAAa,MAAM,aAAY,GAE/B,iBAAiB,cAAc,QAAQ,QACvC,cAAc,WAAW,QAAQ,QAEjC,eAAe,IAAI,MAAM,eAAe,MAAM;AACpD,iBAAS,MAAM,GAAG,MAAM,eAAe,QAAQ;AAC7C,uBAAa,GAAG,IAAI,eAAe,GAAG,IAAI,YAAY,GAAG;AAG3D,YAAI,MAAM,OACN,MAAM;AAEV,eAAI,KAAK,kBACH,cAAc,aAAa,WAAW,aACxC,MAAM,KAAK,IAAI,cAAc,KAAK,WAAW,GAAG,GAChD,MAAM,KAAK,IAAI,cAAc,KAAK,WAAW,GAAG,KACvC,cAAc,aACvB,MAAM,cAAc,KACpB,MAAM,cAAc,OACX,WAAW,cACpB,MAAM,WAAW,KACjB,MAAM,WAAW,OAId,IAAI,sBACT,SAAS,WACT,cAAc,QAAQ,YACtB,KAAK,eACL;UACE,SAAS;YACP,YAAY,cAAc,QAAQ;YAClC,QAAQ;;UAEV,OAAO,cAAc,QAAQ,WAAW;UACxC,KAAK,cAAc,MAAM,WAAW;UACpC,WACE,KAAK,kBACJ,cAAc,aAAa,WAAW;UACzC;UACA;SACD;MAEL;;;;MAKA,KACE,UACA,SAA8B;AAE9B,YAAM,gBAAgB,SAAS,aAAY,GACrC,eAAe,QAAQ,aAAY,GAEnC,iBAAiB,cAAc,QAAQ,QACvC,gBAAgB,aAAa,QAAQ,QAErC,eAAe,IAAI,MAAM,eAAe,MAAM;AACpD,iBAAS,MAAM,GAAG,MAAM,eAAe,QAAQ;AAC7C,uBAAa,GAAG,IAAI,cAAc,GAAG,IAAI,eAAe,GAAG;AAG7D,eAAO,IAAI,sBACT,QAAQ,WACR,cAAc,QAAQ,YACtB,KAAK,eACL;UACE,SAAS;YACP,YAAY,cAAc,QAAQ;YAClC,QAAQ;;UAEV,OAAO,aAAa,QAAQ,cAAc;UAC1C,KAAK,aAAa,MAAM,cAAc;UACtC,WAAW;UACX,KAAK;UACL,KAAK;SACN;MAEL;MAEA,aACE,YACA,wBACA,0BACA,SAAe;AAEf,eAAO;UACL;UACA;UACA,eAAe,aAAA,cAAc;UAC7B,YAAY,yBAAyB,IAAI,CAAC,CAAC,YAAY,YAAY,MAAK;AACtE,gBAAM,aAAa,aAAa,aAAY,GAGtC,uBACJ,WAAW,SAAS,uBAAA,eAAe,mBACnC,WAAW,SAAS,uBAAA,eAAe,oBACnC,WAAW,SAAS,uBAAA,eAAe;AAErC,mBAAO;cACL;cACA,WAAW,aAAa;cACxB;cACA,OAAO;gBACL,KAAK,WAAW,YAAY,WAAW,MAAM;gBAC7C,KAAK,WAAW,YAAY,WAAW,MAAM;gBAC7C,KAAM,uBAAwC,SAAjB,WAAW;gBACxC,SAAS,WAAW;gBACpB,OAAO,WAAW;;;UAGxB,CAAC;;MAEL;;AAjJF,YAAA,sBAAA;;;;;;;;;;;ACjFA,QAAa,UAAb,MAAa,SAAO;;;;;;;;;;;;;;;;;;MAkBlB,YACS,UAAU,IAAI,eAAc,GAC5B,YAAY,GACZ,aAAa,GACb,WAAW,GAAC;AAHZ,aAAA,UAAA,SACA,KAAA,YAAA,WACA,KAAA,aAAA,YACA,KAAA,WAAA;MACN;;;;;MAMH,IAAI,SAAM;AACR,eAAO,KAAK;MACd;;;;;MAMA,IAAI,SAAM;AAKR,eAJI,KAAK,QAAQ,WAAW,KAIxB,KAAK,aAAa,KAAK,cAAc,KAAK,GAAG,CAAC,MAAM,IAC/C,IAGF,KAAK,WAAW,KAAK,aAAa;MAC3C;;;;;;;;MASA,SAAM;AACJ,eAAO,MAAM,KAAK,EAAE,QAAQ,KAAK,OAAM,GAAI,CAAC,GAAG,MAAM,KAAK,GAAG,CAAC,CAAC;MACjE;;;;;;;MAQA,GAAG,UAAgB;AACjB,YAAM,OAAO,KAAK,YAAY,KAAK;AACnC,eAAI,WAAW,SACb,YAAY,KAAK,QAAQ,SAG3B,YAAY,MACL,KAAK,QAAQ,QAAQ,QAAQ;MACtC;;;;;;MAOA,gBAAgB,aAAqB,WAAiB;AACpD,aAAK,QAAQ,UAAU,aAAa,SAAS;MAC/C;;;;;;;MAQA,gBAAgB,aAAqB,WAAiB;AACpD,aAAK,QAAQ,UAAU,aAAa,SAAS;MAC/C;;;;;;MAOA,OAAI;AACF,iBAAS,IAAI,GAAG,IAAI,KAAK,QAAQ;AAC/B,cAAI,KAAK,GAAG,CAAC,MAAM,GAAG;AACpB,iBAAK,cAAc;AACnB;qBACS,MAAM,KAAK,SAAS,GAAG;AAEhC,iBAAK,aAAa,KAAK,WAAW,KAAK,YAAY;AACnD;;AAIJ,iBAAS,IAAI,KAAK,SAAS,GAAG,KAAK,GAAG;AACpC,cAAI,KAAK,GAAG,CAAC,MAAM,GAAG;AACpB,iBAAK,YAAY,KAAK,SAAS,IAAI;AACnC;;AAIJ,aAAK,QAAO;MACd;;;;;MAMA,UAAU,IAAU;AAClB,aAAK,QAAO;AAEZ,YAAM,OAAO,IAAI,KAAK,WAAW,KAAK,YAChC,OAAO,KAAK,IACd,QAAQ,GACR,SAAS;AAEb,iBAAS,MAAM,KAAK,YAAY,OAAO,KAAK,YAAY;AACtD,cAAI,MAAM,MAAM;AAChB,UAAI,MAAM,MACR,OAAO;AAET,mBAAS,IAAI,KAAK,IAAI,QAAQ,QAAQ,MAAM;AAC1C,iBAAK,gBAAgB,QAAQ,KAAK,GAClC,SACA;AAEF;;AAGF,aAAK,eAAe,IACpB,KAAK,aAAa,IAClB,KAAK,YAAY,KAAK;MACxB;;;;;MAMA,QAAK;AACH,eAAO,IAAI,SACT,KAAK,QAAQ,MAAK,GAClB,KAAK,WACL,KAAK,YACL,KAAK,QAAQ;MAEjB;;;;;MAMQ,UAAO;AACb,YAAM,OAAO,KAAK,YAAY,KAAK;AAEnC,QAAI,SAAS,MAEF,OAAO,KAChB,KAAK,QAAQ,QAAQ,GAAG,KAAK,QAAQ,MAAM,GAC3C,KAAK,QAAQ,QAAQ,GAAG,IAAI,GAC5B,KAAK,QAAQ,QAAQ,MAAM,KAAK,QAAQ,MAAM,MAG9C,KAAK,QAAQ,QAAQ,GAAG,KAAK,QAAQ,MAAM,GAC3C,KAAK,QAAQ,QAAQ,GAAG,KAAK,QAAQ,SAAS,IAAI,IAEpD,KAAK,YAAY,KAAK;MACxB;;;;;MAMQ,gBAAgB,MAAc,KAAW;AAC/C,QAAI,SAAS,OAGb,KAAK,gBAAgB,MAAM,KAAK,QAAQ,YAAY,GAAG,CAAC;MAC1D;;AAnMF,YAAA,UAAA;AA0MA,QAAM,iBAAN,MAAM,gBAAc;MAClB,YAAoB,UAAU,CAAC,CAAC,GAAC;AAAb,aAAA,UAAA;MAAgB;;;;;MAMpC,IAAI,SAAM;AACR,eAAO,KAAK,QAAQ;MACtB;;;;MAKA,QAAQ,KAAW;AACjB,eAAO,KAAK,QAAQ,GAAG;MACzB;;;;;MAMA,OAAO,SAAiB,kBAA0B,kBAAwB;AACxE,YAAM,MAAM,IAAI,MAAc,OAAO,EAAE,KAAK,CAAC;AAC7C,YAAI,OACF,kBACA,KAAK,QAAQ,SAAS,kBACtB,GAAG,KAAK,QAAQ,MAAM,gBAAgB,CAAC,GAEzC,IAAI,OAAO,GAAG,kBAAkB,GAAG,KAAK,QAAQ,MAAM,GAAG,gBAAgB,CAAC,GAC1E,KAAK,UAAU;MACjB;;;;MAKA,QAAQ,MAAc,OAAa;AACjC,YAAM,MAAM,KAAK,OAAO,OAAO,SAAS,CAAC,IAAI;AAC7C,iBAAS,IAAI,GAAG,IAAI,KAAK,KAAK;AAC5B,cAAM,MAAM,KAAK,QAAQ,OAAO,CAAC;AACjC,eAAK,QAAQ,OAAO,CAAC,IAAI,KAAK,QAAQ,QAAQ,IAAI,CAAC,GACnD,KAAK,QAAQ,QAAQ,IAAI,CAAC,IAAI;;MAElC;;;;;MAMA,YAAY,KAAW;AACrB,YAAM,MAAM,KAAK,QAAQ,GAAG;AAC5B,oBAAK,QAAQ,GAAG,IAAI,GACb;MACT;;;;MAKA,UAAU,aAAqB,WAAiB;AAC9C,aAAK,QAAQ,WAAW,KAAK;MAC/B;;;;MAKA,UAAU,aAAqB,WAAiB;AAC9C,QAAI,KAAK,QAAQ,WAAW,KAAK,YAC/B,KAAK,QAAQ,WAAW,KAAK,YAI7B,KAAK,QAAQ,WAAW,IAAI;MAEhC;;;;MAKA,QAAK;AACH,eAAO,IAAI,gBAAe,CAAC,GAAG,KAAK,OAAO,CAAC;MAC7C;;;;;;;;;;;;AC/QW,YAAA,oBAAoB;AAMjC,QAAM,gBAAgB,YAMhB,mBAAmB,SAMnB,gBAAgB;AAMT,YAAA,sBAAsB,CAAC,gBAAgB;AAMvC,YAAA,sBAAsB;AAKtB,YAAA,YAAY,KAAK,IAAI,GAAG,KAAK;AAW1C,aAAgB,eAAe,OAAa;AAC1C,UAAM,KAAK,IAAI,SAAS,IAAI,YAAY,CAAC,CAAC;AAC1C,gBAAG,WAAW,GAAG,KAAK,KAEP,GAAG,UAAU,CAAC,IACH,kBAAkB,MAC3B;IACnB;AAPA,YAAA,iBAAA;AAcA,aAAgB,eAAe,OAAa;AAC1C,UAAM,KAAK,IAAI,SAAS,IAAI,YAAY,CAAC,CAAC;AAC1C,SAAG,WAAW,GAAG,KAAK;AAEtB,UAAM,SAAS,GAAG,UAAU,CAAC,GACvB,SAAS,GAAG,UAAU,CAAC;AAK7B,cAF2B,SAAS,oBAAoB,KAAK,IAAI,GAAG,EAAE,IAE3C;IAC7B;AAXA,YAAA,iBAAA;;;;;;;;;;;ACzDA,aAAgB,MAAM,MAAc,KAAW;AAC7C,aACE,SAAS,KACT,SAAS,OAAO,qBAChB,SAAS,OAAO,qBAChB,OAAO,MAAM,IAAI,IAEV,OAEF,OAAO,KAAK,IAAI,GAAG,GAAG;IAC/B;AAVA,YAAA,QAAA;AAmBA,aAAgB,kBAAkB,GAAS;AAIzC,kBACA,KAAK,KAAK,GACV,KAAK,KAAK,GACV,KAAK,KAAK,GACV,KAAK,KAAK,GACV,KAAK,KAAK,IACV,KACO;IACT;AAZA,YAAA,oBAAA;;;;;;;;;;;ACjCA,QAAa,eAAb,cAAkC,MAAK;;AAAvC,YAAA,eAAA;;;;;;;;;;;ACAA,QAAA,UAAA,oBACA,OAAA,iBACA,UAAA,kBAMa,kBAAb,MAA4B;MAG1B,YAAY,OAAa;AACvB,aAAK,SAAS,CAAC;MACjB;;;;;;MAOA,WAAW,OAAa;AACtB,YAAI,QAAQ,QAAQ;AAClB,iBAAO,KAAK,6BAA4B;AAG1C,YAAM,MAAM,QAAQ,eAAe,KAAK,GAMlC,aAAa,KAAK,YACtB,QAAQ,eAAe,KAAK,IAAI,GAChC,QAAQ,iBAAiB;AAG3B,eAAQ,MAAM,cAAe,KAAK;MACpC;;;;;;;MAQA,cAAc,OAAa;AACzB,YAAM,WAAW,KAAK,6BAA4B;AAClD,YAAI,QAAQ;AACV,gBAAM,IAAI,QAAA,aACR,cAAc,KAAK,iCAAiC,QAAQ,EAAE;AAGlE,YAAM,WAAW,KAAK,6BAA4B;AAClD,YAAI,QAAQ;AACV,gBAAM,IAAI,QAAA,aACR,aAAa,KAAK,iCAAiC,QAAQ,EAAE;AAIjE,eAAO,KAAK,MAAM,GAAG,SAAS,KAAK,MAAM;MAC3C;;;;;MAMA,IAAI,QAAK;AACP,eAAI,KAAK,WAAW,IACX,IAEF,CAAC,KAAK;MACf;MAEQ,+BAA4B;AAClC,YAAI,QAAQ,QAAQ,uBAAuB,KAAK;AAChD,eAAI,KAAK,SAAS,KAChB,SAGK;MACT;MAEQ,+BAA4B;AAClC,eAAO,QAAQ,uBAAuB,KAAK;MAC7C;MAEQ,YAAY,OAAe,OAAa;AAC9C,eAAO,KAAK,MAAM,QAAQ,KAAK,IAAI,GAAG,CAAC,KAAK,CAAC;MAC/C;;AAhFF,YAAA,kBAAA;;;;;;;;;;;ACRA,QAAA,UAAA,oBACA,OAAA,iBACA,UAAA,kBAMa,mBAAb,MAA6B;MAK3B,YAAY,OAAa;AACvB,aAAK,SAAS,OACd,KAAK,eAAe,KAAK,MAAM,KAAK,OAAO,KAAK,GAChD,KAAK,iBAAiB,KAAK,MAAM,KAAK,KAAK,CAAC,KAAK;MACnD;;;;;;MAOA,WAAW,OAAa;AACtB,YAAI,SAAS,QAAQ;AACnB,iBAAO,KAAK,6BAA4B,IAAK;AAI/C,YAAI,QAAQ,eAAe,KAAK,MAAM;AAEpC,kBADY,QAAQ,eAAe,KAAK,KACzB,KAAK,UAAU;AAIhC,YAAM,QAAQ,KAAK,MAAM,KAAK,IAAI,KAAK,IAAI,KAAK,YAAY,GACtD,WAAW,KAAK,6BAA4B;AAClD,eAAI,SAAS,WACJ,WAGF;MACT;;;;;;;MAQA,cAAc,OAAa;AACzB,YAAM,WAAW,KAAK,6BAA4B;AAClD,YAAI,SAAS,UAAU;AACrB,cAAI,UAAU;AACZ,mBAAO,IAAI,KAAK,KAAK,SAAS,KAAK,KAAK,WAAW,KAAK,YAAY;AAEtE,gBAAM,IAAI,QAAA,aACR,aAAa,KAAK,iCAAiC,QAAQ,EAAE;;AAIjE,YAAM,WAAW,KAAK,6BAA4B;AAClD,YAAI,SAAS,UAAU;AACrB,cAAI,UAAU;AACZ,mBAAO,QAAQ;AACV,cAAI,UAAU,WAAW;AAC9B,mBAAO,KAAK,KAAK,SAAS,KAAK,KAAK,WAAW,KAAK,YAAY,IAAI;AAEtE,gBAAM,IAAI,QAAA,aACR,aAAa,KAAK,iCAAiC,QAAQ,EAAE;;AAIjE,eAAO,KAAK,IAAI,QAAQ,KAAK,cAAc;MAC7C;;;;;MAMA,IAAI,QAAK;AACP,eAAO,KAAK;MACd;MAEQ,+BAA4B;AAClC,eAAO,QAAQ,uBAAuB,KAAK;MAC7C;MAEQ,+BAA4B;AAClC,gBAAS,QAAQ,sBAAsB,KAAM,KAAK,UAAU;MAC9D;;AAnFF,YAAA,mBAAA;;;;;;;;;;;ACRA,QAAA,oBAAA,4BACA,qBAAA,6BACA,UAAA,kBAEM,YAAY,KACZ,YAAY,IACZ,oBAAoB,MAAM,KAAK,EAAE,QAAQ,GAAE,GAAI,CAAC,GAAG,MACnD,IAAI,KACC,IAAI,mBAAA,iBAAiB,IAAI,EAAE,IAE7B,IAAI,kBAAA,gBAAgB,IAAI,EAAE,CAClC;AASD,aAAgB,WAAW,OAAa;AACtC,UAAI,QAAQ,aAAa,QAAQ;AAC/B,cAAM,IAAI,QAAA,aACR,qBAAqB,SAAS,UAAU,SAAS,UAAU,KAAK,EAAE;AAItE,aAAO,kBAAkB,QAAQ,EAAE;IACrC;AARA,YAAA,aAAA;;;;;;;;;;;ACnBA,QAAA,UAAA,kBAOA,eAAA,uBAIA,QAAA,eACA,yBAAA,iCAGA,YAAA,oBACA,eAAA,uBAEA,SAAA,iBAgBM,UAAN,MAAM,SAAO;MAIX,YACS,KACA,MAAY;AADZ,aAAA,MAAA,KACA,KAAA,OAAA;MACN;MANH,OAAO,QAAQ,IAAa,IAAW;AACrC,eAAO,IAAI,SAAQ,KAAK,IAAI,GAAG,KAAK,GAAG,GAAG,GAAG,KAAK,IAAI,GAAG,MAAM,GAAG,IAAI,CAAC;MACzE;OAOI,YAAY,IACZ,mBAAmB,KACnB,eAAe,GAER,mCAAb,MAAa,kCAAgC;MAC3C,YACS,YAAoB,WACnB,WAAW,kBACX,gBAAgB,IAChB,OAAO,GACP,SAAS,GACT,aAAa,GACb,OAAO,OAAO,mBACd,OAAO,OAAO,mBACd,YAAY,IAAI,UAAA,QAAO,GACvB,YAAY,IAAI,UAAA,QAAO,GACvB,eAAoB,aAAA,YAAW,SAAS,GAAC;AAV1C,aAAA,YAAA,WACC,KAAA,WAAA,UACA,KAAA,gBAAA,eACA,KAAA,OAAA,MACA,KAAA,SAAA,QACA,KAAA,aAAA,YACA,KAAA,OAAA,MACA,KAAA,OAAA,MACA,KAAA,YAAA,WACA,KAAA,YAAA,WACA,KAAA,WAAA,UAEJ,KAAK,WAAW,iBAClB,MAAA,KAAK,KAAK,yCAAyC,KAAK,QAAQ,sDACnB,YAAY,EAAE,GAC3D,KAAK,WAAW;MAEpB;;;;;MAMA,OAAO,OAAa;AAClB,aAAK,kBAAkB,OAAO,CAAC;MACjC;;;;;MAMA,aAAa,WAAiB;AAC5B,aAAK,YAAY;MACnB;;;;;MAMA,eAAY;AACV,eAAO;UACL,WAAW,KAAK;UAChB,KAAK,KAAK;UACV,KAAK,KAAK;UACV,KAAK,KAAK;UACV,UAAU;YACR,QAAQ,KAAK,SAAS;YACtB,cAAc,KAAK,SAAS,OAAM;;UAEpC,UAAU;YACR,QAAQ,KAAK,SAAS;YACtB,cAAc,KAAK,SAAS,OAAM;;UAEpC,OAAO,KAAK;UACZ,OAAO,KAAK;UACZ,WAAW,KAAK;;MAEpB;;;;MAKA,IAAI,MAAG;AACL,eAAO,KAAK;MACd;;;;MAKA,IAAI,MAAG;AACL,eAAO,KAAK;MACd;;;;MAKA,IAAI,MAAG;AACL,eAAO,KAAK;MACd;;;;MAKA,IAAI,QAAK;AACP,eAAO,KAAK;MACd;;;;MAKA,IAAI,YAAS;AACX,eAAO,KAAK;MACd;;;;MAKA,IAAI,QAAK;AACP,eAAI,KAAK,WAAW,KAAK,aAEhB,IAEF,KAAK,SAAS;MACvB;;;;;MAMA,IAAI,WAAQ;AACV,eAAO,KAAK;MACd;;;;;MAMA,IAAI,WAAQ;AACV,eAAO,KAAK;MACd;;;;;;;MAQA,kBAAkB,OAAe,WAAiB;AAUhD,YATI,QAAQ,KAAK,SACf,KAAK,OAAO,QAEV,QAAQ,KAAK,SACf,KAAK,OAAO,QAGd,KAAK,UAAU,WAEX,UAAU,GAAG;AACf,eAAK,cAAc;AACnB;;AAGF,aAAK,QAAQ,QAAQ,WAEjB,QAAQ,IACV,KAAK,eAAe,KAAK,WAAW,OAAO,SAAS,IAEpD,KAAK,eAAe,KAAK,WAAW,CAAC,OAAO,SAAS;MAEzD;;;;;MAMA,MAAM,UAA0C;AAC9C,QAAI,KAAK,WAAW,KAClB,KAAK,OAAO,SAAS,KACrB,KAAK,OAAO,SAAS,OACZ,SAAS,UAAU,MACxB,SAAS,MAAM,KAAK,QACtB,KAAK,OAAO,SAAS,MAEnB,SAAS,MAAM,KAAK,QACtB,KAAK,OAAO,SAAS,OAIzB,KAAK,YAAY,SAAS,WAC1B,KAAK,QAAQ,SAAS,KACtB,KAAK,UAAU,SAAS,OACxB,KAAK,cAAc,SAAS;AAE5B,YAAM,WAAW,KAAK,UAAU,QAAQ;AAExC,aAAK,WAAW,KAAK,QAAQ,QAAQ,GAErC,KAAK,cAAc,KAAK,UAAU,UAAU,SAAS,UAAU,QAAQ,GACvE,KAAK,cAAc,KAAK,UAAU,UAAU,SAAS,UAAU,QAAQ;MACzE;;;;;MAMA,KAAK,OAAuC;AAC1C,aAAK,OAAO,OACZ,KAAK,OAAO,QACZ,KAAK,QAAQ,MAAM,KACnB,KAAK,UAAU,MAAM,OACrB,KAAK,cAAc,MAAM;AAEzB,YAAM,WAAW,KAAK,UAAU,KAAK;AAErC,aAAK,WAAW,KAAK,QAAQ,QAAQ,GAErC,KAAK,aAAa,KAAK,UAAU,OAAO,MAAM,UAAU,QAAQ,GAChE,KAAK,aAAa,KAAK,UAAU,OAAO,MAAM,UAAU,QAAQ;MAClE;;;;;MAMA,QAAK;AACH,eAAO,IAAI,kCACT,KAAK,WACL,KAAK,UACL,KAAK,eACL,KAAK,MACL,KAAK,QACL,KAAK,YACL,KAAK,MACL,KAAK,MACL,KAAK,SAAS,MAAK,GACnB,KAAK,SAAS,MAAK,GACnB,KAAK,QAAQ;MAEjB;;;;;;MAOQ,eAAe,SAAkB,OAAe,WAAiB;AACvE,YAAI,QAAQ,KAAK,SAAS,WAAW,KAAK,GAGtC,kBAAkB,IAClB,OAAO,GACP,MAAM;AAuBV,YArBI,QAAQ,WAAW,KACrB,QAAQ,aAAa,OACrB,QAAQ,WAAW,QAAQ,YAC3B,QAAQ,YAAY,QAAQ,cAE5B,QAAQ,QAAQ,cAChB,QAAQ,WAAW,SAAS,KAAK,YAEjC,kBAAkB,IAClB,MAAM,OACN,OAAO,QAAQ,YAEf,QAAQ,QAAQ,YAChB,QAAQ,QAAQ,cAAc,KAAK,aAEnC,kBAAkB,IAClB,MAAM,QAAQ,YACd,OAAO,QAIL,iBAAiB;AACnB,cAAM,SAAS,KAAK,aAAa,MAAM,GAAG;AAC1C,eAAK,WAAW,MAAM,GACtB,QAAQ,KAAK,SAAS,WAAW,KAAK;;AAGxC,aAAK,kBAAkB,SAAS,OAAO,SAAS;MAClD;;;;;;;MAQQ,kBACN,SACA,OACA,WAAiB;AAEjB,YAAI,cAAc;AAEhB;AAGF,YAAI,QAAQ,QAAQ,YAAY;AAC9B,cAAM,OAAO,QAAQ,WAAW;AAChC,UAAI,QAAQ,QAAQ,QAAQ,UAC1B,KAAK,MAAM,SAAS,OAAO,CAAC,GAE9B,QAAQ,aAAa;mBACZ,QAAQ,QAAQ,UAAU;AACnC,cAAM,OAAO,QAAQ,QAAQ;AAC7B,UAAI,QAAQ,QAAQ,QAAQ,UAC1B,KAAK,MAAM,SAAS,OAAO,CAAC,GAE9B,QAAQ,WAAW;;AAGrB,YAAI,cAAc,QAAQ,QAAQ;AAClC,QAAI,cAAc,MAChB,eAAe,QAAQ,QAAQ,SAEjC,QAAQ,gBAAgB,aAAa,SAAS;MAChD;;;;;;MAOQ,MAAM,SAAkB,QAAc;AAC5C,YAAM,OAAO,QAAQ,QAAQ,QACvB,OAAO,QAAQ,YAAY,QAAQ,YACnC,mBAAmB,OAAO,MAC5B,cAAU,OAAA,mBAAkB,MAAM;AACtC,QAAI,UAAU,KAAK,aACjB,UAAU,KAAK;AAEjB,YAAM,mBAAmB,UAAU;AACnC,gBAAQ,QAAQ,OAAO,SAAS,kBAAkB,gBAAgB;MACpE;;;;;MAMQ,aAAa,MAAc,KAAW;AAC5C,YAAI,SAAS;AACb,eAAO,OAAO,OAAO,KAAK;AACxB,mBAAS,GACT,QAAQ,GACR;AAEF,eAAO;MACT;;;;MAKQ,WAAW,QAAc;AAC/B,YAAI,WAAW;AACb;AAEF,YAAI,SAAS;AAGX,gBAAM,IAAI,MAAM,+BAA+B,KAAK,KAAK,EAAE;AAE7D,YAAM,WAAW,KAAK,SAAS,QAAQ;AAEvC,aAAK,UAAU,UAAU,MAAM,GAC/B,KAAK,UAAU,UAAU,MAAM,GAE/B,KAAK,eAAW,aAAA,YAAW,QAAQ;MACrC;;;;MAKQ,UAAU,OAAuC;AACvD,YAAM,WAAW,KAAK,IAAI,KAAK,OAAO,MAAM,KAAK,GAE3C,aAAa,QAAQ,QACzB,KAAK,gBAAgB,KAAK,UAAU,KAAK,OAAO,QAAQ,GACxD,KAAK,gBAAgB,MAAM,UAAU,MAAM,OAAO,QAAQ,CAAC,GAGvD,aAAa,QAAQ,QACzB,KAAK,gBAAgB,KAAK,UAAU,KAAK,OAAO,QAAQ,GACxD,KAAK,gBAAgB,MAAM,UAAU,MAAM,OAAO,QAAQ,CAAC;AAG7D,eAAO,KAAK,IACV,WAAW,KAAK,aAAa,WAAW,MAAM,WAAW,GAAG,GAC5D,WAAW,KAAK,aAAa,WAAW,MAAM,WAAW,GAAG,CAAC;MAEjE;;;;MAKQ,gBACN,SACA,cACA,UAAgB;AAEhB,YAAI,QAAQ,WAAW;AACrB,iBAAO,IAAI,QAAQ,GAAG,EAAE;AAE1B,YAAM,QAAQ,eAAe;AAC7B,eAAO,IAAI,QAAQ,QAAQ,cAAc,OAAO,QAAQ,YAAY,KAAK;MAC3E;;;;;MAMQ,cACN,MACA,OACA,QACA,OAAa;AAEb,YAAM,cAAc,OAAO,QACrB,cAAc,MAAM,QAAQ;AAElC,iBAAS,IAAI,GAAG,IAAI,OAAO,QAAQ;AACjC,eAAK,kBACH,MACC,cAAc,KAAM,aACrB,OAAO,GAAG,CAAC,CAAC;MAGlB;;;;;MAMQ,aACN,MACA,OACA,QACA,OAAa;AAEb,YAAM,cAAc,OAAO,QACrB,cAAc,MAAM,QAAQ;AAElC,iBAAS,IAAI,GAAG,IAAI,OAAO,QAAQ,KAAK;AAEtC,cAAI,eADc,cAAc,KAAM,eACT,KAAK;AAClC,UAAI,cAAc,MAChB,eAAe,KAAK,QAAQ,SAE9B,KAAK,gBAAgB,aAAa,OAAO,GAAG,CAAC,CAAC;;AAGhD,aAAK,KAAI;MACX;;AAnbF,YAAA,mCAAA;AAybA,QAAa,iCAAb,MAA2C;;;;;;;MAYzC,YACW,UACQ,eAAsB;AAD9B,aAAA,WAAA,UACQ,KAAA,gBAAA,eAXZ,KAAA,OACL,QAAA,eAAe;MAWd;MAEH,mBAAmB,WAAiB;AAClC,eAAO,IAAI,iCACT,WACA,KAAK,UACL,KAAK,aAAa;MAEtB;;;;MAKA,MACE,UACA,OAAuC;AAEvC,YAAM,SAAS,MAAM,MAAK;AAC1B,sBAAO,MAAM,QAAQ,GAEd;MACT;;;;MAKA,KACE,UACA,SAAyC;AAEzC,YAAM,SAAS,QAAQ,MAAK;AAC5B,sBAAO,KAAK,QAAQ,GAEb;MACT;MAEA,aACE,YACA,wBACA,0BACA,SAAe;AAEf,eAAO;UACL;UACA;UACA,eAAe,aAAA,cAAc;UAC7B,YAAY,yBAAyB,IAAI,CAAC,CAAC,YAAY,YAAY,MAAK;AACtE,gBAAM,aAAa,aAAa,aAAY,GAGtC,uBACJ,WAAW,SAAS,uBAAA,eAAe,mBACnC,WAAW,SAAS,uBAAA,eAAe,oBACnC,WAAW,SAAS,uBAAA,eAAe;AAErC,mBAAO;cACL;cACA,WAAW,aAAa;cACxB;cACA,OAAO;gBACL,KAAK,WAAW,YAAY,WAAW,MAAM;gBAC7C,KAAK,WAAW,YAAY,WAAW,MAAM;gBAC7C,KAAM,uBAAwC,SAAjB,WAAW;gBACxC,UAAU;kBACR,QAAQ,WAAW,SAAS;kBAC5B,cAAc,WAAW,SAAS;;gBAEpC,UAAU;kBACR,QAAQ,WAAW,SAAS;kBAC5B,cAAc,WAAW,SAAS;;gBAEpC,OAAO,WAAW;gBAClB,OAAO,WAAW;gBAClB,WAAW,WAAW;;;UAG5B,CAAC;;MAEL;;AA7FF,YAAA,iCAAA;;;;;;;;;;;ACzeA,QAAA,UAAA,kBAQA,SAAA,gBACA,eAAA,uBAKa,wBAAb,MAAkC;MAChC,YACS,WACC,WAAmB,GACpB,aAAqB,CAAC,GAAG,CAAC,GAAC;AAF3B,aAAA,YAAA,WACC,KAAA,WAAA,UACD,KAAA,aAAA;MACN;MAEH,OAAO,OAAa;AAClB,aAAK,WAAW,OAChB,KAAK,iBAAa,OAAA,gBAAe,KAAK,IAAG,CAAE;MAC7C;MAEA,aAAa,WAAiB;AAC5B,aAAK,YAAY;MACnB;MAEA,eAAY;AACV,eAAO,KAAK;MACd;;AAlBF,YAAA,wBAAA;AAsBA,QAAa,sBAAb,MAAgC;MAAhC,cAAA;AACS,aAAA,OAAkC,QAAA,eAAe;MAuE1D;MArEE,mBAAmB,WAAiB;AAClC,eAAO,IAAI,sBAAsB,SAAS;MAC5C;;;;;;MAOA,MACE,UACA,OAA4B;AAG5B,YAAM,yBACJ,OAAA,sBAAqB,MAAM,UAAU,SACrC,OAAA,sBAAqB,SAAS,UAAU,IACpC,QACA;AACN,eAAO,IAAI,sBACT,SAAS,WACT,mBAAmB,aAAY,GAC/B,mBAAmB,UAAU;MAEjC;;;;;;;MAQA,KACE,UACA,SAA8B;AAG9B,YAAM,yBACJ,OAAA,sBAAqB,QAAQ,UAAU,SACvC,OAAA,sBAAqB,SAAS,UAAU,IACpC,UACA;AACN,eAAO,IAAI,sBACT,QAAQ,WACR,mBAAmB,aAAY,GAC/B,mBAAmB,UAAU;MAEjC;MAEA,aACE,YACA,wBACA,0BACA,SAAe;AAEf,eAAO;UACL;UACA;UACA,eAAe,aAAA,cAAc;UAC7B,YAAY,yBAAyB,IAAI,CAAC,CAAC,YAAY,YAAY,OAC1D;YACL;YACA,WAAW,aAAa;YACxB;YACA,OAAO,aAAa,aAAY;YAEnC;;MAEL;;AAvEF,YAAA,sBAAA;;;;;;;;;;;ACpCA,QAAA,UAAA,kBAQA,eAAA,uBAKa,kBAAb,MAA4B;MAC1B,YACS,WACA,WACC,WAAmB,GACpB,QAAQ,IAAK;AAHb,aAAA,YAAA,WACA,KAAA,YAAA,WACC,KAAA,WAAA,UACD,KAAA,QAAA;MACN;MAEH,OAAO,OAAa;AAClB,QAAI,KAAK,aAAa,QAAQ,MAG9B,KAAK,YAAY;MACnB;MAEA,aAAa,WAAiB;AAC5B,aAAK,YAAY;MACnB;MAEA,eAAY;AACV,eAAO,KAAK;MACd;;AArBF,YAAA,kBAAA;AAyBA,QAAa,gBAAb,MAA0B;MAGxB,YAAmB,WAAkB;AAAlB,aAAA,YAAA,WAFZ,KAAA,OAA2B,QAAA,eAAe;MAET;MAExC,mBAAmB,WAAiB;AAClC,eAAO,IAAI,gBAAgB,WAAW,KAAK,SAAS;MACtD;;;;MAKA,MAAM,UAA2B,OAAsB;AACrD,YAAM,SAAS,SAAS,aAAY,GAC9B,UAAU,MAAM,aAAY;AAClC,eAAI,MAAM,QACD,IAAI,gBACT,MAAM,WACN,KAAK,WACL,SACA,MAAM,KAAK,IAGR,IAAI,gBACT,SAAS,WACT,KAAK,WACL,SAAS,OAAO;MAEpB;;;;MAKA,KAAK,UAA2B,SAAwB;AACtD,YAAM,SAAS,SAAS,aAAY,GAC9B,SAAS,QAAQ,aAAY;AAMnC,eAAI,KAAK,aAAa,SAAS,SACtB,IAAI,gBACT,QAAQ,WACR,KAAK,WACL,QACA,EAAI,IAGD,IAAI,gBACT,QAAQ,WACR,KAAK,WACL,SAAS,MAAM;MAEnB;MAEA,aACE,YACA,wBACA,0BACA,SAAe;AAEf,eAAO;UACL;UACA;UACA,eAAe,aAAA,cAAc;UAC7B,YAAY,yBAAyB,IAAI,CAAC,CAAC,YAAY,YAAY,OAC1D;YACL;YACA,WAAW,aAAa;YACxB;YACA,OAAO,aAAa,aAAY;YAEnC;UACD,aAAa,KAAK;;MAEtB;;AA5EF,YAAA,gBAAA;;;;;;;;;;;;;;;;;;;;ACtCA,iBAAA,iBAAA,OAAA;AACA,iBAAA,sBAAA,OAAA;AACA,iBAAA,iCAAA,OAAA;AACA,iBAAA,sBAAA,OAAA;AACA,iBAAA,gBAAA,OAAA;;;;;;;;;;;ACJA,QAAA,MAAA,eACA,eAAA,uBASA,yBAAA,iCAQsB,cAAtB,MAAiC;MAK/B,OAAO,OAAI;AACT,eAAO;MACT;MAEA,OAAO,MAAG;AACR,eAAO;MACT;MAEA,OAAO,YAAS;AACd,eAAO;MACT;MAEA,OAAO,YAAS;AACd,eAAO;MACT;MAEA,OAAO,uBAAoB;AACzB,eAAO;MACT;MAEA,OAAO,UAAO;AACZ,eAAO;MACT;;AA3BF,YAAA,cAAA;AAiCA,QAAa,kBAAb,MAAa,yBAAwB,YAAW;MAE9C,iBAAiB,aAAiC;AAChD,eAAO,iBAAgB;MACzB;;AAJF,YAAA,kBAAA;AACiB,oBAAA,mBAAmB,IAAI,aAAA,eAAc;AAStD,QAAa,iBAAb,MAAa,wBAAuB,YAAW;MAG7C,iBAAiB,YAAgC;AAC/C,gBAAQ,WAAW,MAAM;UACvB,KAAK,uBAAA,eAAe;UACpB,KAAK,uBAAA,eAAe;UACpB,KAAK,uBAAA,eAAe;AAClB,mBAAO,gBAAe;UAExB;AACE,mBAAO,gBAAe;;MAG5B;;AAdF,YAAA,iBAAA;AACiB,mBAAA,qBAAqB,IAAI,aAAA,cAAc,EAAI;AAC3C,mBAAA,yBAAyB,IAAI,aAAA,cAAc,EAAK;AAkBjE,QAAa,uBAAb,MAAa,8BAA6B,YAAW;MAEnD,iBAAiB,aAAiC;AAChD,eAAO,sBAAqB;MAC9B;;AAJF,YAAA,uBAAA;AACiB,yBAAA,mBAAmB,IAAI,aAAA,oBAAmB;AAS3D,QAAa,uBAAb,MAAa,8BAA6B,YAAW;MAKnD,iBAAiB,aAAiC;AAChD,eAAO,sBAAqB;MAC9B;;AAPF,YAAA,uBAAA;AACiB,yBAAA,mBAAmB,IAAI,aAAA,oBACpC,CAAC,GAAG,GAAG,IAAI,IAAI,IAAI,IAAI,KAAK,KAAK,KAAK,KAAK,KAAM,MAAM,KAAM,MAAM,GAAK,GACxE,EAAI;AAUR,QAAaC,sCAAb,cAAwD,YAAW;;;;;MAOjE,YACE,YACiB,gBAAgB,IAAI;AAGrC,YADA,MAAK,GAFY,KAAA,gBAAA,eAGb,eAAe,UAAa,WAAW,WAAW;AACpD,gBAAM,IAAI,MAAM,wDAAwD;AAG1E,qBAAa,WAAW,OAAM,GAG9B,aAAa,WAAW,KAAK,CAAC,GAAG,MAAM,IAAI,CAAC;AAE5C,YAAM,qBAAqB,WAAW,YAAY,MAAS,GACvD,gBAAoC,WAAW,QAAQ,KAAQ;AACnE,QAAI,kBAAkB,OACpB,gBAAgB,SAElB,KAAK,cAAc,WAAW,MAAM,qBAAqB,GAAG,aAAa;MAC3E;MAEA,iBAAiB,aAAiC;AAChD,eAAO,IAAI,aAAA,oBAAoB,KAAK,aAAa,KAAK,aAAa;MACrE;;AA/BF,YAAA,qCAAAA;AAkCA,QAAa,kCAAb,cAAqD,YAAW;MAC9D,YACmB,WAAmB,KACnB,gBAAgB,IAAI;AAErC,cAAK,GAHY,KAAA,WAAA,UACA,KAAA,gBAAA;MAGnB;MACA,iBAAiB,aAAiC;AAChD,eAAO,IAAI,aAAA,+BACT,KAAK,UACL,KAAK,aAAa;MAEtB;;AAZF,YAAA,kCAAA;AAkBA,QAAa,qBAAb,cAAwC,YAAW;MACzC,SAAS,YAAgC;AAE/C,gBAAQ,WAAW,MAAiB;UAClC,KAAK,uBAAA,eAAe;UACpB,KAAK,uBAAA,eAAe;UACpB,KAAK,uBAAA,eAAe;UACpB,KAAK,uBAAA,eAAe;AAClB,mBAAO;UAET,KAAK,uBAAA,eAAe;AAClB,mBAAO;UAET,KAAK,uBAAA,eAAe;AAClB,mBAAO;;AAGX,mBAAI,KAAK,KAAK,wCAAwC,WAAW,IAAI,EAAE,GAChE;MACT;MAEA,iBACE,YAAgC;AAEhC,eAAO,KAAK,SAAS,UAAU,EAAE,iBAAiB,UAAU;MAC9D;;AAzBF,YAAA,qBAAA;AA4BA,QAAM,mBAAmB,IAAI,gBAAe,GACtC,kBAAkB,IAAI,eAAc,GACpC,yBAAyB,IAAI,qBAAoB,GACjD,wBAAwB,IAAI,qBAAoB,GAChD,oCAAoC,IAAI,gCAA+B,GACvE,sBAAsB,IAAI,mBAAkB;;;;;;;;;;;AC5LlD,QAAA,gBAAA,wBACA,2BAAA,mCAgBa,+BACX,qBAAmB,cAAA,YAAY,QAAO;AAD3B,YAAA,+BAA4B;AAElC,QAAM,2CACX,qBAAmB,yBAAA,uBAAuB;AAD/B,YAAA,2CAAwC;;;;;;;;;;;ACpBrD,QAAA,MAAA,eAIA,UAAA,kBAQA,wBAAA,gCAgCsBC,gBAAtB,MAAkC;MAWhC,YAAY,SAA6B;;AARjC,aAAA,YAAY,IASlB,KAAK,wBACH,KAAA,SAAS,yBAAmB,QAAA,OAAA,SAAA,KAAI,sBAAA,8BAClC,KAAK,mCACH,KAAA,SAAS,oCAA8B,QAAA,OAAA,SAAA,KACvC,sBAAA,0CACF,KAAK,oBAAmB,KAAA,SAAS,qBAAe,QAAA,OAAA,SAAA,KAAI,CAAA;MACtD;;;;;;;;;;;MAYA,kBAAkB,gBAA8B;AAC9C,YAAI,KAAK;AACP,gBAAM,IAAI,MACR,yDAAyD;AAG7D,aAAK,qBAAqB,gBAC1B,KAAK,cAAa;MACpB;;;;;MAMA,kBAAkB,gBAA8B;AAC9C,eAAO,KAAK,qBAAqB,cAAc;MACjD;;;;;MAMA,6BACE,gBAA8B;AAE9B,eAAO,KAAK,gCAAgC,cAAc;MAC5D;;;;;MAMU,gBAAa;MAEvB;;;;MAsBA,MAAM,QAAQ,SAA2B;AACvC,YAAI,KAAK,uBAAuB;AAC9B,gBAAM,IAAI,MAAM,+CAA+C;AAIjE,YAAI,KAAK;AACP,gBAAM,IAAI,MAAM,0BAA0B;AAG5C,YAAM,CAAC,sBAAsB,GAAG,2BAA2B,IACzD,MAAM,QAAQ,IAAI;UAChB,KAAK,mBAAmB,QAAQ;YAC9B,eAAe,SAAS;WACzB;UACD,GAAG,KAAK,iBAAiB,IAAI,cAC3B,SAAS,QAAQ;YACf,eAAe,SAAS;WACzB,CAAC;SAEL,GAGG,SAAS,qBAAqB,OAAO,WACzC,QAAA,SAAQ,6BAA6B,YAAU,OAAO,MAAM,CAAC,GAEzD,WAAW,qBAAqB,gBAAgB,UAChD,eACJ,qBAAqB,gBAAgB,aAAa,WAChD,QAAA,SACE,6BACA,YAAU,OAAO,gBAAgB,YAAY,CAC9C;AAEL,eAAO;UACL,iBAAiB;YACf;YACA;;UAEF;;MAEJ;;;;;;;MAQA,MAAM,SAAS,SAAyB;AAEtC,YAAI,KAAK,WAAW;AAClB,cAAI,KAAK,MAAM,6BAA6B;AAC5C;;AAIF,QAAI,SAAS,iBAAiB,OAC5B,MAAM,KAAK,WAAU,IAErB,UAAM,QAAA,iBAAgB,KAAK,WAAU,GAAI,QAAQ,aAAa,GAGhE,KAAK,YAAY;MACnB;;;;;;;MAQA,MAAM,WAAW,SAA2B;AAC1C,YAAI,KAAK,WAAW;AAClB,cAAI,KAAK,KAAK,qDAAqD;AACnE;;AAIF,YAAI,SAAS,iBAAiB,MAAM;AAClC,gBAAM,KAAK,aAAY;AACvB;;AAGF,kBAAM,QAAA,iBAAgB,KAAK,aAAY,GAAI,QAAQ,aAAa;MAClE;;AA3KF,YAAA,eAAAA;;;;;;;;;;;AC5CA,QAAA,MAAA,eACA,SAAA,gBAMA,iBAAA,yBAEA,UAAA,kBACA,QAAA,eA8Ba,gCAAb,cAAmD,eAAA,aAAY;MAM7D,YAAY,SAA6C;;AAUvD,YATA,MAAM;UACJ,sBAAqB,KAAA,QAAQ,SAAS,uBAAiB,QAAA,OAAA,SAAA,SAAA,GAAE,KACvD,QAAQ,QAAQ;UAElB,iCACE,KAAA,QAAQ,SAAS,kCAA4B,QAAA,OAAA,SAAA,SAAA,GAAE,KAAK,QAAQ,QAAQ;UACtE,iBAAiB,QAAQ;SAC1B,GAGC,QAAQ,yBAAyB,UACjC,QAAQ,wBAAwB;AAEhC,gBAAM,MAAM,6CAA6C;AAG3D,YACE,QAAQ,wBAAwB,UAChC,QAAQ,uBAAuB;AAE/B,gBAAM,MAAM,4CAA4C;AAG1D,YACE,QAAQ,wBAAwB,UAChC,QAAQ,yBAAyB,UACjC,QAAQ,uBAAuB,QAAQ;AAEvC,gBAAM,MACJ,2EAA2E;AAI/E,aAAK,mBAAkB,KAAA,QAAQ,0BAAoB,QAAA,OAAA,SAAA,KAAI,KACvD,KAAK,kBAAiB,KAAA,QAAQ,yBAAmB,QAAA,OAAA,SAAA,KAAI,KACrD,KAAK,YAAY,QAAQ;MAC3B;MAEQ,MAAM,WAAQ;AACpB,YAAI;AACF,oBAAM,QAAA,iBAAgB,KAAK,OAAM,GAAI,KAAK,cAAc;iBACjD,KAAK;AACZ,cAAI,eAAe,QAAA,cAAc;AAC/B,gBAAI,KAAK,MACP,0DACA,KAAK,cAAc;AAErB;;AAGF,cAAA,OAAA,oBAAmB,GAAG;;MAE1B;MAEQ,MAAM,SAAM;;AAClB,YAAM,EAAE,iBAAiB,OAAM,IAAK,MAAM,KAAK,QAAQ;UACrD,eAAe,KAAK;SACrB;AAED,QAAI,OAAO,SAAS,KAClB,IAAI,KAAK,MACP,4DACA,GAAG,MAAM;AAIb,YAAM,WAAW,YAAW;AAC1B,cAAM,SAAS,MAAM,OAAA,SAAS,QAAQ,KAAK,WAAW,eAAe;AACrE,cAAI,OAAO,SAAS,OAAA,iBAAiB;AACnC,kBAAM,IAAI,MACR,+DAA+D,OAAO,KAAK,GAAG;QAGpF;AAGA,QAAI,gBAAgB,SAAS,0BAC3B,MAAA,KAAA,gBAAgB,UACb,4BAAsB,QAAA,OAAA,UAAA,GAAA,KAAA,EAAA,EACtB,KAAK,UAAU,SACd,MAAA,KAAK,MAAM,qDAAqD,GAAG,CAAC,IAGxE,MAAM,SAAQ;MAElB;MAEmB,gBAAa;AAE9B,aAAK,YAAY,YAAY,MAAK;AAEhC,UAAK,KAAK,SAAQ;QACpB,GAAG,KAAK,eAAe,OACvB,OAAA,YAAW,KAAK,SAAS;MAC3B;MAEU,MAAM,eAAY;AAC1B,cAAM,KAAK,SAAQ,GACnB,MAAM,KAAK,UAAU,WAAU;MACjC;MAEU,MAAM,aAAU;AACxB,QAAI,KAAK,aACP,cAAc,KAAK,SAAS,GAG9B,MAAM,KAAK,UAAU,SAAQ;MAC/B;;AAlHF,YAAA,gCAAA;;;;;;;;;;;ACxCA,QAAA,SAAA,gBAYa,yBAAb,MAAmC;MAKjC,YAAY,wBAA8C;AAJhD,aAAA,YAAY,IAEd,KAAA,WAA8B,CAAA,GAGpC,KAAK,0BAA0B;MACjC;;;;MAKA,OACE,SACA,gBAA8C;AAG9C,YAAI,KAAK,WAAW;AAClB,qBAAW,MAAM,eAAe,EAAE,MAAM,OAAA,iBAAiB,OAAM,CAAE,GAAG,CAAC;AACrE;;AAGF,aAAK,SAAS,KAAK,OAAO,GAC1B,WAAW,MAAM,eAAe,EAAE,MAAM,OAAA,iBAAiB,QAAO,CAAE,GAAG,CAAC;MACxE;;;;;MAMO,aAAU;AACf,eAAO,KAAK;MACd;MAEA,aAAU;AACR,eAAO,QAAQ,QAAO;MACxB;MAEA,QAAK;AACH,aAAK,WAAW,CAAA;MAClB;MAEA,6BACE,iBAA+B;AAE/B,eAAO,KAAK;MACd;MAEA,WAAQ;AACN,oBAAK,YAAY,IACV,QAAQ,QAAO;MACxB;;AAnDF,YAAA,yBAAA;;;;;;;;;;;ACbA,QAAA,SAAA,gBAKA,wBAAA,gCAUaC,yBAAb,MAAa,uBAAqB;MAIhC,YAAY,SAAsC;;AAHxC,aAAA,YAAY,IAIpB,KAAK,wBACH,KAAA,SAAS,yBAAmB,QAAA,OAAA,SAAA,KAAI,sBAAA;MACpC;MAEA,OACE,SACA,gBAA8C;AAE9C,YAAI,KAAK,WAAW;AAElB,uBAAa,gBAAgB,EAAE,MAAM,OAAA,iBAAiB,OAAM,CAAE;AAC9D;;AAGF,eAAO,uBAAsB,aAAa,SAAS,cAAc;MACnE;MAEA,aAAU;AACR,eAAO,QAAQ,QAAO;MACxB;MAEA,6BACE,iBAA+B;AAE/B,eAAO,KAAK,qBAAqB,eAAe;MAClD;MAEA,WAAQ;AACN,oBAAK,YAAY,IACV,QAAQ,QAAO;MACxB;MAEQ,OAAO,aACb,SACA,MAAoC;AAEpC,iBAAW,gBAAgB,QAAQ;AACjC,mBAAW,UAAU,aAAa;AAChC,oBAAQ,IAAI;cACV,YAAY,OAAO;cACnB,eAAe,OAAO;cACtB,YAAY,OAAO;aACpB;AAIL,aAAK,EAAE,MAAM,OAAA,iBAAiB,QAAO,CAAE;MACzC;;AApDF,YAAA,wBAAAA;;;;;;;;;;;ACdA,aAAgB,qBAAkB;AAChC,aAAO,mBAAmB,QAAQ,KAAK;IACzC;AAFA,YAAA,qBAAA;;;;;;;;;;;ACDO,QAAM,gBAAgB,CAAC,mBAAkC;AAG9D,cAAQ,gBAAgB;QACtB,KAAK;AACH,iBAAO;QACT,KAAK;AACH,iBAAO;QACT,KAAK;AACH,iBAAO;QACT;AACE,iBAAO;;IAEb;AAba,YAAA,gBAAa;AAenB,QAAM,gBAAgB,CAAC,iBAAgC;AAG5D,cAAQ,cAAc;QACpB,KAAK;AACH,iBAAO;QACT,KAAK;AACH,iBAAO;QACT;AACE,iBAAO;;IAEb;AAXa,YAAA,gBAAa;;;;;;;;;;;ACd1B,QAAA,gBAAA,UAAA,eAAA,GACA,OAAA,UAAA,MAAA;AAEa,YAAA,YAAY,KAAK,UAAU,cAAc,IAAI;;;;;;;;;;;ACH1D,QAAA,cAAA,sBACA,QAAA;AAEO,mBAAe,eAAY;AAChC,UAAI;AAGF,YAAM,UAFS,UAAM,YAAA,WAAU,wCAAwC,GAEjD,OACnB,MAAM;CAAI,EACV,KAAK,UAAQ,KAAK,SAAS,gBAAgB,CAAC;AAE/C,YAAI,CAAC;AACH,iBAAO;AAGT,YAAM,QAAQ,OAAO,MAAM,OAAO;AAClC,YAAI,MAAM,WAAW;AACnB,iBAAO,MAAM,CAAC,EAAE,MAAM,GAAG,EAAE;eAEtB,GAAG;AACV,cAAA,KAAK,MAAM,6BAA6B,CAAC,EAAE;;AAG7C,aAAO;IACT;AArBA,YAAA,eAAA;;;;;;;;;;;ACJA,QAAA,OAAA,UAAA,IAAA,GACA,QAAA;AAEO,mBAAe,eAAY;AAChC,UAAM,QAAQ,CAAC,mBAAmB,0BAA0B;AAE5D,eAAW,QAAQ;AACjB,YAAI;AAEF,kBADe,MAAM,KAAA,SAAG,SAAS,MAAM,EAAE,UAAU,OAAM,CAAE,GAC7C,KAAI;iBACX,GAAG;AACV,gBAAA,KAAK,MAAM,6BAA6B,CAAC,EAAE;;AAI/C,aAAO;IACT;AAbA,YAAA,eAAA;;;;;;;;;;;ACFA,QAAA,OAAA,UAAA,IAAA,GACA,cAAA,sBACA,QAAA;AAEO,mBAAe,eAAY;AAChC,UAAI;AAEF,gBADe,MAAM,KAAA,SAAG,SAAS,eAAe,EAAE,UAAU,OAAM,CAAE,GACtD,KAAI;eACX,GAAG;AACV,cAAA,KAAK,MAAM,6BAA6B,CAAC,EAAE;;AAG7C,UAAI;AAEF,gBADe,UAAM,YAAA,WAAU,4BAA4B,GAC7C,OAAO,KAAI;eAClB,GAAG;AACV,cAAA,KAAK,MAAM,6BAA6B,CAAC,EAAE;;AAG7C,aAAO;IACT;AAhBA,YAAA,eAAA;;;;;;;;;;;ACJA,QAAAC,WAAA,UAAA,SAAA,GACA,cAAA,sBACA,QAAA;AAEO,mBAAe,eAAY;AAChC,UAAM,OACJ,8EACE,UAAU;AACd,MAAIA,SAAQ,SAAS,UAAU,4BAA4BA,SAAQ,QACjE,UAAU,qCAAqC;AAGjD,UAAI;AAEF,YAAM,SADS,UAAM,YAAA,WAAU,GAAG,OAAO,IAAI,IAAI,EAAE,GAC9B,OAAO,MAAM,QAAQ;AAC1C,YAAI,MAAM,WAAW;AACnB,iBAAO,MAAM,CAAC,EAAE,KAAI;eAEf,GAAG;AACV,cAAA,KAAK,MAAM,6BAA6B,CAAC,EAAE;;AAG7C,aAAO;IACT;AAnBA,YAAA,eAAA;;;;;;;;;;;ACJA,QAAA,QAAA;AAEO,mBAAe,eAAY;AAChC,mBAAA,KAAK,MAAM,iDAAiD,GACrD;IACT;AAHA,YAAA,eAAA;;;;;;;;;;;ACHA,QAAAC,WAAA,UAAA,SAAA,GAEI;AAmBK,YAAA,eAAA;AAjBT,YAAQA,SAAQ,UAAU;MACxB,KAAK;AACH,QAAG,QAAA,eAAA,eAAiB,+BAAgC;AACpD;MACF,KAAK;AACH,QAAG,QAAA,eAAA,eAAiB,8BAA+B;AACnD;MACF,KAAK;AACH,QAAG,QAAA,eAAA,eAAiB,4BAA6B;AACjD;MACF,KAAK;AACH,QAAG,QAAA,eAAA,eAAiB,4BAA6B;AACjD;MACF;AACE,QAAG,QAAA,eAAA,eAAiB,oCAAqC;;;;;;;;;;;;ACjB7D,QAAA,yBAAA,gBACA,aAAA,qBAGA,OAAA,UAAA,IAAA,GACA,UAAA,kBACA,iBAAA,yBAMM,mBAAN,MAAsB;MACpB,OAAO,SAAiC;AACtC,YAAM,aAAiC;UACrC,CAAC,uBAAA,2BAA2B,SAAS,OAAG,KAAA,UAAQ;UAChD,CAAC,uBAAA,2BAA2B,SAAS,OAAG,QAAA,mBAAc,KAAA,MAAI,CAAE;;AAG9D,eAAO,IAAI,WAAA,SAAS,YAAY,KAAK,oBAAmB,CAAE;MAC5D;MAEQ,sBAAmB;AACzB,mBAAO,eAAA,cAAY,EAAG,KAAK,eAAY;AACrC,cAAM,aAAiC,CAAA;AACvC,iBAAI,cACF,WAAW,uBAAA,2BAA2B,OAAO,IAAI,YAE5C;QACT,CAAC;MACH;;AAGW,YAAA,mBAAmB,IAAI,iBAAgB;;;;;;;;;;;AC9BpD,QAAA,qBAAA,6BAMM,eAAN,MAAkB;MAChB,OAAO,SAAiC;AACtC,eAAO,QAAQ,QAAQ,mBAAA,iBAAiB,OAAO,OAAO,CAAC;MACzD;;AAGW,YAAA,eAAe,IAAI,aAAY;;;;;;;;;;;ACf5C,QAAA,yBAAA,gBACA,aAAA,qBAGA,OAAA,UAAA,IAAA,GACA,UAAA,kBAMM,iBAAN,MAAoB;MAClB,OAAO,SAAiC;AACtC,YAAM,aAAiC;UACrC,CAAC,uBAAA,2BAA2B,OAAO,OAAG,QAAA,mBAAc,KAAA,UAAQ,CAAE;UAC9D,CAAC,uBAAA,2BAA2B,UAAU,OAAG,KAAA,SAAO;;AAElD,eAAO,IAAI,WAAA,SAAS,UAAU;MAChC;;AAGW,YAAA,iBAAiB,IAAI,eAAc;;;;;;;;;;;AClBhD,QAAA,mBAAA,2BAMM,aAAN,MAAgB;MACd,OAAO,SAAiC;AACtC,eAAO,QAAQ,QAAQ,iBAAA,eAAe,OAAO,OAAO,CAAC;MACvD;;AAGW,YAAA,aAAa,IAAI,WAAU;;;;;;;;;;;ACfxC,QAAA,QAAA,eACA,yBAAA,gBACA,aAAA,qBAIA,KAAA,UAAA,IAAA,GAMM,sBAAN,MAAyB;MACvB,OAAO,SAAiC;AACtC,YAAM,aAAiC;UACrC,CAAC,uBAAA,2BAA2B,WAAW,GAAG,QAAQ;UAClD,CAAC,uBAAA,2BAA2B,uBAAuB,GAAG,QAAQ;UAC9D,CAAC,uBAAA,2BAA2B,uBAAuB,GAAG,QAAQ;UAC9D,CAAC,uBAAA,2BAA2B,oBAAoB,GAAG;YACjD,QAAQ,KAAK,CAAC;YACd,GAAG,QAAQ;YACX,GAAG,QAAQ,KAAK,MAAM,CAAC;;UAEzB,CAAC,uBAAA,2BAA2B,uBAAuB,GACjD,QAAQ,SAAS;UACnB,CAAC,uBAAA,2BAA2B,oBAAoB,GAAG;UACnD,CAAC,uBAAA,2BAA2B,2BAA2B,GAAG;;AAG5D,QAAI,QAAQ,KAAK,SAAS,MACxB,WAAW,uBAAA,2BAA2B,eAAe,IAAI,QAAQ,KAAK,CAAC;AAGzE,YAAI;AACF,cAAM,WAAW,GAAG,SAAQ;AAC5B,qBAAW,uBAAA,2BAA2B,aAAa,IAAI,SAAS;iBACzD,GAAG;AACV,gBAAA,KAAK,MAAM,kCAAkC,CAAC,EAAE;;AAGlD,eAAO,IAAI,WAAA,SAAS,UAAU;MAChC;;AAGW,YAAA,sBAAsB,IAAI,oBAAmB;;;;;;;;;;;ACzC1D,QAAA,wBAAA,gCAMM,kBAAN,MAAqB;MACnB,OAAO,QAAgC;AACrC,eAAO,QAAQ,QAAQ,sBAAA,oBAAoB,OAAO,MAAM,CAAC;MAC3D;;AAGW,YAAA,kBAAkB,IAAI,gBAAe;;;;;;;;;;;;;;;;;;;;ACflD,iBAAA,iCAAA,OAAA;AACA,iBAAA,yBAAA,OAAA;AACA,iBAAA,uBAAA,OAAA;AACA,iBAAA,6BAAA,OAAA;AACA,iBAAA,2BAAA,OAAA;AACA,iBAAA,4BAAA,OAAA;AACA,iBAAA,gCAAA,OAAA;;;;;;;;;;;;;;;;;;;;ACNA,iBAAA,iBAAA,OAAA;;;;;;;;;;;ACAA,QAAA,QAAA,eACA,yBAAA,gBACA,SAAA,gBAEA,aAAA,qBAOaC,YAAb,MAAa,UAAQ;MAoCnB,YAME,YACA,wBAAoD;;AAEpD,aAAK,cAAc,YACnB,KAAK,yBAAyB,0BAA0B,MACxD,KAAK,mBAAkB,KAAA,KAAK,iBAAW,QAAA,OAAA,SAAA,KAAI,CAAA,GAC3C,KAAK,0BAA0B,wBAAwB,KACrD,sBACE,KAAK,cAAc,OAAO,OAAO,CAAA,GAAI,KAAK,aAAa,eAAe,GACtE,KAAK,yBAAyB,IACvB,kBAET,UACE,MAAA,KAAK,MAAM,sDAAsD,GAAG,GACpE,KAAK,yBAAyB,IACvB,CAAA,EACR;MAEL;;;;MA3CA,OAAO,QAAK;AACV,eAAO,UAAS;MAClB;;;;MAKA,OAAO,UAAO;AACZ,eAAO,IAAI,UAAS;UAClB,CAAC,uBAAA,2BAA2B,YAAY,OAAG,WAAA,oBAAkB;UAC7D,CAAC,uBAAA,2BAA2B,sBAAsB,GAChD,OAAA,SAAS,uBAAA,2BAA2B,sBAAsB;UAC5D,CAAC,uBAAA,2BAA2B,kBAAkB,GAC5C,OAAA,SAAS,uBAAA,2BAA2B,kBAAkB;UACxD,CAAC,uBAAA,2BAA2B,qBAAqB,GAC/C,OAAA,SAAS,uBAAA,2BAA2B,qBAAqB;SAC5D;MACH;MA4BA,IAAI,aAAU;;AACZ,eAAI,KAAK,0BACP,MAAA,KAAK,MACH,+DAA+D,IAI5D,KAAA,KAAK,iBAAW,QAAA,OAAA,SAAA,KAAI,CAAA;MAC7B;;;;;;MAOA,MAAM,yBAAsB;AAC1B,QAAI,KAAK,0BACP,MAAM,KAAK;MAEf;;;;;;;;;MAUA,MAAM,OAAuB;;AAC3B,YAAI,CAAC;AAAO,iBAAO;AAGnB,YAAM,uBAAoB,OAAA,OAAA,OAAA,OAAA,CAAA,GACrB,KAAK,eAAe,IAEnB,KAAC,MAAmB,qBAAe,QAAA,OAAA,SAAA,KAAI,MAAM,UAAW;AAG9D,YACE,CAAC,KAAK,2BACN,CAAE,MAAmB;AAErB,iBAAO,IAAI,UAAS,oBAAoB;AAG1C,YAAM,0BAA0B,QAAQ,IAAI;UAC1C,KAAK;UACJ,MAAmB;SACrB,EAAE,KAAK,CAAC,CAAC,qBAAqB,oBAAoB,MAAK;;AACtD,iBAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,CAAA,GACK,KAAK,eAAe,GACpB,mBAAmB,IAElBC,MAAC,MAAmB,qBAAe,QAAAA,QAAA,SAAAA,MAAI,MAAM,UAAW,GACzD,oBAAoB;QAE3B,CAAC;AAED,eAAO,IAAI,UAAS,sBAAsB,uBAAuB;MACnE;;AA1HF,YAAA,WAAAD;AACkB,IAAAA,UAAA,QAAQ,IAAIA,UAAS,CAAA,CAAE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACZzC,QAAA,MAAA,gBAUM,kBAAN,MAAqB;MACnB,OAAO,QAAgC;AACrC,eAAO,QAAQ,QAAQ,IAAA,oBAAoB,OAAO,MAAM,CAAC;MAC3D;;AAGW,YAAA,kBAAkB,IAAI,gBAAe;;;;;;;;;;;AChBlD,QAAA,QAAA,eACA,SAAA,gBACA,yBAAA,gBACA,aAAA,qBASM,kBAAN,MAAqB;MAArB,cAAA;AAEmB,aAAA,cAAc,KAGd,KAAA,mBAAmB,KAGnB,KAAA,4BAA4B,KAE5B,KAAA,+BACf,0EACA,KAAK,cACL,gBAEe,KAAA,+BACf,uDACA,KAAK,cACL;MA+GJ;;;;;;;;MAtGE,OAAO,SAAiC;AACtC,YAAM,aAAiC,CAAA,GACjC,UAAM,OAAA,QAAM,GAEZ,gBAAgB,IAAI,0BACpB,cAAc,IAAI;AAExB,YAAI;AACF,cAAI;AACF,gBAAM,mBAAmB,KAAK,yBAAyB,aAAa;AACpE,mBAAO,OAAO,YAAY,gBAAgB;mBACnC,GAAG;AACV,kBAAA,KAAK,MAAM,uBAAuB,EAAE,OAAO,EAAE;;AAIjD,eAAI,gBACF,WAAW,uBAAA,2BAA2B,YAAY,IAAI,cAGjD,IAAI,WAAA,SAAS,UAAU;MAChC;;;;;;;;;;;;;;;MAgBQ,yBACN,kBAAyB;AAEzB,YAAI,CAAC;AAAkB,iBAAO,CAAA;AAE9B,YAAM,aAAiC,CAAA,GACjC,gBAA0B,iBAAiB,MAC/C,KAAK,kBACL,EAAE;AAEJ,iBAAW,gBAAgB,eAAe;AACxC,cAAM,eAAyB,aAAa,MAC1C,KAAK,2BACL,EAAE;AAEJ,cAAI,aAAa,WAAW;AAC1B;AAEF,cAAI,CAAC,KAAK,KAAK,IAAI;AAInB,cAFA,MAAM,IAAI,KAAI,GACd,QAAQ,MAAM,KAAI,EAAG,MAAM,OAAO,EAAE,KAAK,EAAE,GACvC,CAAC,KAAK,oBAAoB,GAAG;AAC/B,kBAAM,IAAI,MAAM,iBAAiB,KAAK,4BAA4B,EAAE;AAEtE,cAAI,CAAC,KAAK,SAAS,KAAK;AACtB,kBAAM,IAAI,MAAM,mBAAmB,KAAK,4BAA4B,EAAE;AAExE,qBAAW,GAAG,IAAI,mBAAmB,KAAK;;AAE5C,eAAO;MACT;;;;;;;;MASQ,SAAS,MAAY;AAC3B,eAAO,KAAK,UAAU,KAAK,eAAe,KAAK,sBAAsB,IAAI;MAC3E;;MAGQ,sBAAsB,KAAW;AACvC,iBAAS,IAAI,GAAG,IAAI,IAAI,QAAQ,KAAK;AACnC,cAAM,KAAK,IAAI,WAAW,CAAC;AAC3B,cAAI,KAAK,MAAQ,OAAO,MAAQ,OAAO,MAAQ,OAAO,MAAQ,KAAK;AACjE,mBAAO;;AAGX,eAAO;MACT;;;;;;;;MASQ,oBAAoB,KAAW;AACrC,eAAO,IAAI,SAAS,KAAK,KAAK,SAAS,GAAG;MAC5C;;AAGW,YAAA,kBAAkB,IAAI,gBAAe;;;;;;;;;;;AC5IlD,QAAA,oBAAA,4BAMM,cAAN,MAAiB;;;;;;;;MAQf,OAAO,QAAgC;AACrC,eAAO,QAAQ,QAAQ,kBAAA,gBAAgB,OAAO,MAAM,CAAC;MACvD;;AAGW,YAAA,cAAc,IAAI,YAAW;;;;;;;;;;;ACtB1C,QAAA,yBAAA,gBACA,MAAA,gBAEA,QAAA,eAKM,sBAAN,MAAyB;MACvB,OAAO,QAAgC;AAErC,YAAI,EADc,OAAO,YAAc;AAErC,iBAAO,IAAA,SAAS,MAAK;AAEvB,YAAM,kBAAsC;UAC1C,CAAC,uBAAA,2BAA2B,oBAAoB,GAAG;UACnD,CAAC,uBAAA,2BAA2B,2BAA2B,GAAG;UAC1D,CAAC,uBAAA,2BAA2B,uBAAuB,GAAG,UAAU;;AAElE,eAAO,KAAK,uBAAuB,iBAAiB,MAAM;MAC5D;;;;;;;;MAQQ,uBACN,iBACA,SAAiC;AAEjC,eACE,gBAAgB,uBAAA,2BAA2B,uBAAuB,MAAM,MAExE,MAAA,KAAK,MACH,qEAAqE,GAEhE,IAAA,SAAS,MAAK,KAEd,IAAI,IAAA,SAAQ,OAAA,OAAA,CAAA,GACd,eAAe,CAAA;MAGxB;;AAGW,YAAA,sBAAsB,IAAI,oBAAmB;;;;;;;;;;;;;;;;;;;;AC/C1D,iBAAA,4BAAA,OAAA;AACA,iBAAA,wBAAA,OAAA;AACA,iBAAA,gCAAA,OAAA;AACA,iBAAA,4BAAA,OAAA;;;;;;;;;;;ACHO,QAAM,gBAAgB,CAAI,QAE7B,QAAQ,QAAQ,OAAO,OAAQ,YAAY,OAAO,IAAI,QAAS;AAFtD,YAAA,gBAAa;;;;;;;;;;;ACA1B,QAAA,aAAA,qBAEA,QAAA,eACA,UAAA,mBAYa,kBAAkB,OAC7B,SAAkC,CAAA,MACZ;AACtB,UAAM,YAAyB,MAAM,QAAQ,KAC1C,OAAO,aAAa,CAAA,GAAI,IAAI,OAAM,MAAI;AACrC,YAAI;AACF,cAAM,WAAW,MAAM,EAAE,OAAO,MAAM;AACtC,uBAAA,KAAK,MAAM,GAAG,EAAE,YAAY,IAAI,oBAAoB,QAAQ,GACrD;iBACA,GAAG;AACV,uBAAA,KAAK,MAAM,GAAG,EAAE,YAAY,IAAI,YAAY,EAAE,OAAO,EAAE,GAChD,WAAA,SAAS,MAAK;;MAEzB,CAAC,CAAC;AAIJ,0BAAa,SAAS,GAEf,UAAU,OACf,CAAC,KAAK,aAAa,IAAI,MAAM,QAAQ,GACrC,WAAA,SAAS,MAAK,CAAE;IAEpB;AAvBa,YAAA,kBAAe;AA8BrB,QAAM,sBAAsB,CACjC,SAAkC,CAAA,MACrB;;AACb,UAAM,cAA0B,KAAA,OAAO,eAAS,QAAA,OAAA,SAAA,KAAI,CAAA,GAAI,IACtD,CAAC,MAA8B;AAC7B,YAAI;AACF,cAAM,oBAAoB,EAAE,OAAO,MAAM,GACrC;AACJ,kBAAI,QAAA,eAAwB,iBAAiB,GAAG;AAC9C,gBAAM,gBAAgB,aACK,MAAM,mBACP;AAE1B,uBAAW,IAAI,WAAA,SAAS,CAAA,GAAI,cAAa,CAAE;;AAE3C,uBAAW;AAGb,iBAAI,SAAS,yBACN,SACF,uBAAsB,EACtB,KAAK,MACJ,MAAA,KAAK,MAAM,GAAG,EAAE,YAAY,IAAI,oBAAoB,QAAQ,CAAC,IAGjE,MAAA,KAAK,MAAM,GAAG,EAAE,YAAY,IAAI,oBAAoB,QAAQ,GAGvD;iBACA,GAAG;AACV,uBAAA,KAAK,MAAM,GAAG,EAAE,YAAY,IAAI,YAAY,EAAE,OAAO,EAAE,GAChD,WAAA,SAAS,MAAK;;MAEzB,CAAC,GAGG,kBAAkB,UAAU,OAChC,CAAC,KAAK,aAAa,IAAI,MAAM,QAAQ,GACrC,WAAA,SAAS,MAAK,CAAE;AAGlB,aAAI,gBAAgB,0BACb,gBAAgB,uBAAsB,EAAG,KAAK,MAAK;AAEtD,qBAAa,SAAS;MACxB,CAAC,GAGI;IACT;AAjDa,YAAA,sBAAmB;AAwDhC,QAAM,eAAe,CAAC,cAA+B;AACnD,gBAAU,QAAQ,cAAW;AAE3B,YAAI,OAAO,KAAK,SAAS,UAAU,EAAE,SAAS,GAAG;AAC/C,cAAM,sBAAsB,KAAK,UAAU,SAAS,YAAY,MAAM,CAAC;AACvE,gBAAA,KAAK,QAAQ,mBAAmB;;MAEpC,CAAC;IACH;;;;;;;;;;;;;;;;;;;;AC7GA,iBAAA,qBAAA,OAAA;AACA,iBAAA,sBAAA,OAAA;AACA,iBAAA,qBAAA,OAAA;AACA,iBAAA,kBAAA,OAAA;AACA,iBAAA,mBAAA,OAAA;AACA,iBAAA,sBAAA,OAAA;AACA,iBAAA,6BAAA,OAAA;;;;;;;;;;;ACAA,QAAa,eAAb,MAAyB;MAAzB,cAAA;AACU,aAAA,mBAA2B,CAAA;MA4CrC;MA1CE,QAAQ,MAAU;AAChB,aAAK,iBAAiB,KAAK,IAAI;MACjC;MAEA,UACE,YACA,OAA2B;AAS3B,eAPc,KAAK,iBAAiB,OAAO,oBAEvC,KAAK,iBAAiB,eAAe,oBAAoB,UAAU,KACnE,KAAK,YAAY,eAAe,eAAe,KAAK,CAEvD;MAGH;MAEQ,iBACN,UACA,YAAgC;AAEhC,gBACG,SAAS,QAAO,MAAO,UACtB,WAAW,SAAS,SAAS,QAAO,MACtC,SAAS,cAAa,EAAG,MAAM,WAAW,IAAI,KAC9C,SAAS,cAAa,EAAG,MAAM,WAAW,IAAI;MAElD;MAEQ,YACN,UACA,OAA2B;AAE3B,eACE,SAAS,cAAa,EAAG,MAAM,MAAM,IAAI,MACxC,MAAM,YAAY,UACjB,SAAS,iBAAgB,EAAG,MAAM,MAAM,OAAO,OAChD,MAAM,cAAc,UACnB,SAAS,mBAAkB,EAAG,MAAM,MAAM,SAAS;MAEzD;;AA5CF,YAAA,eAAA;;;;;;;;;;;ACNA,QAAA,QAAA,eAeA,SAAA,gBAQa,iBAAb,MAA2B;MACzB,YACU,wBACE,aAAiC;AADnC,aAAA,yBAAA,wBACE,KAAA,cAAA;MACT;MAEO,QACR,OACA,aAA+B,CAAA,GAC/B,UAAmB,MAAA,QAAW,OAAM,GAAE;AAEtC,YAAI,OAAO,SAAU,UAAU;AAC7B,gBAAA,KAAK,KACH,uCAAuC,KAAK,YAAY,IAAI,KAAK,KAAK,EAAE;AAE1E;;AAEF,QACE,KAAK,YAAY,cAAc,MAAA,UAAU,OACzC,CAAC,OAAO,UAAU,KAAK,MAEvB,MAAA,KAAK,KACH,2DAA2D,KAAK,YAAY,IAAI,mCAAmC,GAErH,QAAQ,KAAK,MAAM,KAAK,GAEpB,CAAC,OAAO,UAAU,KAAK,MAI7B,KAAK,uBAAuB,OAC1B,OACA,YACA,aACA,OAAA,gBAAe,KAAK,IAAG,CAAE,CAAC;MAE9B;;AApCF,YAAA,iBAAA;AA0CA,QAAa,0BAAb,cACU,eAAc;;;;MAMtB,IAAI,OAAe,YAA+B,KAAa;AAC7D,aAAK,QAAQ,OAAO,YAAY,GAAG;MACrC;;AATF,YAAA,0BAAA;AAeA,QAAa,oBAAb,cAAuC,eAAc;;;;MAInD,IAAI,OAAe,YAA+B,KAAa;AAC7D,YAAI,QAAQ,GAAG;AACb,gBAAA,KAAK,KACH,sCAAsC,KAAK,YAAY,IAAI,KAAK,KAAK,EAAE;AAEzE;;AAGF,aAAK,QAAQ,OAAO,YAAY,GAAG;MACrC;;AAbF,YAAA,oBAAA;AAmBA,QAAa,sBAAb,cAAyC,eAAc;;;;MAIrD,OAAO,OAAe,YAA+B,KAAa;AAChE,YAAI,QAAQ,GAAG;AACb,gBAAA,KAAK,KACH,wCAAwC,KAAK,YAAY,IAAI,KAAK,KAAK,EAAE;AAE3E;;AAEF,aAAK,QAAQ,OAAO,YAAY,GAAG;MACrC;;AAZF,YAAA,sBAAA;AAeA,QAAa,uBAAb,MAAiC;MAM/B,YACE,YACA,gBACQ,qBAAuC;AAAvC,aAAA,sBAAA,qBAER,KAAK,cAAc,YACnB,KAAK,kBAAkB;MACzB;;;;MAKA,YAAY,UAA4B;AACtC,aAAK,oBAAoB,YAAY,UAAU,IAAI;MACrD;;;;MAKA,eAAe,UAA4B;AACzC,aAAK,oBAAoB,eAAe,UAAU,IAAI;MACxD;;AA3BF,YAAA,uBAAA;AA8BA,QAAa,8BAAb,cACU,qBAAoB;;AAD9B,YAAA,8BAAA;AAGA,QAAa,4BAAb,cACU,qBAAoB;;AAD9B,YAAA,4BAAA;AAGA,QAAa,oCAAb,cACU,qBAAoB;;AAD9B,YAAA,oCAAA;AAIA,aAAgB,uBACd,IAAW;AAEX,aAAO,cAAc;IACvB;AAJA,YAAA,yBAAA;;;;;;;;;;;AC9IA,QAAA,yBAAA,iCAIA,gBAAA,wBAaa,QAAb,MAAkB;MAChB,YAAoB,mBAAmC;AAAnC,aAAA,oBAAA;MAAsC;;;;MAK1D,gBAAgB,MAAc,SAAuB;AACnD,YAAM,iBAAa,uBAAA,4BACjB,MACA,uBAAA,eAAe,WACf,OAAO,GAEH,UAAU,KAAK,kBAAkB,sBAAsB,UAAU;AACvE,eAAO,IAAI,cAAA,oBAAoB,SAAS,UAAU;MACpD;;;;MAKA,cAAc,MAAc,SAAuB;AACjD,YAAM,iBAAa,uBAAA,4BACjB,MACA,uBAAA,eAAe,SACf,OAAO,GAEH,UAAU,KAAK,kBAAkB,sBAAsB,UAAU;AACvE,eAAO,IAAI,cAAA,kBAAkB,SAAS,UAAU;MAClD;;;;MAKA,oBAAoB,MAAc,SAAuB;AACvD,YAAM,iBAAa,uBAAA,4BACjB,MACA,uBAAA,eAAe,iBACf,OAAO,GAEH,UAAU,KAAK,kBAAkB,sBAAsB,UAAU;AACvE,eAAO,IAAI,cAAA,wBAAwB,SAAS,UAAU;MACxD;;;;MAKA,sBACE,MACA,SAAuB;AAEvB,YAAM,iBAAa,uBAAA,4BACjB,MACA,uBAAA,eAAe,kBACf,OAAO,GAEH,WACJ,KAAK,kBAAkB,2BAA2B,UAAU;AAC9D,eAAO,IAAI,cAAA,0BACT,YACA,UACA,KAAK,kBAAkB,kBAAkB;MAE7C;;;;MAKA,wBACE,MACA,SAAuB;AAEvB,YAAM,iBAAa,uBAAA,4BACjB,MACA,uBAAA,eAAe,oBACf,OAAO,GAEH,WACJ,KAAK,kBAAkB,2BAA2B,UAAU;AAC9D,eAAO,IAAI,cAAA,4BACT,YACA,UACA,KAAK,kBAAkB,kBAAkB;MAE7C;;;;MAKA,8BACE,MACA,SAAuB;AAEvB,YAAM,iBAAa,uBAAA,4BACjB,MACA,uBAAA,eAAe,4BACf,OAAO,GAEH,WACJ,KAAK,kBAAkB,2BAA2B,UAAU;AAC9D,eAAO,IAAI,cAAA,kCACT,YACA,UACA,KAAK,kBAAkB,kBAAkB;MAE7C;;;;MAKA,2BACE,UACA,aAAyB;AAEzB,aAAK,kBAAkB,mBAAmB,iBACxC,UACA,WAAW;MAEf;;;;MAKA,8BACE,UACA,aAAyB;AAEzB,aAAK,kBAAkB,mBAAmB,oBACxC,UACA,WAAW;MAEf;;AAjIF,YAAA,QAAA;;;;;;;;;;;ACzBA,QAAA,yBAAA,iCAUsB,gBAAtB,MAAmC;MACjC,YAAsB,uBAA2C;AAA3C,aAAA,wBAAA;MAA8C;MAcpE,0BAAuB;AACrB,eAAO,KAAK;MACd;MAEA,kBAAkB,aAAmB;AACnC,aAAK,4BAAwB,uBAAA,4BAC3B,KAAK,sBAAsB,MAC3B,KAAK,sBAAsB,MAC3B;UACE;UACA,WAAW,KAAK,sBAAsB;UACtC,MAAM,KAAK,sBAAsB;SAClC;MAEL;;AA7BF,YAAA,gBAAA;;;;;;;;;;;ACbA,QAAA,UAAA,kBAMa,UAAb,MAAoB;MAIlB,YAAoB,OAAkC;AAAlC,aAAA,QAAA,OAHZ,KAAA,YAAY,oBAAI,IAAG,GACnB,KAAA,UAAU,oBAAI,IAAG;MAEgC;MAEzD,IAAI,KAAc,UAAuB;AACvC,4BAAA,WAAa,KAAK,MAAM,GAAG,IACpB,KAAK,UAAU,IAAI,QAAQ;MACpC;MAEA,aAAa,KAAc,gBAA+B;AACxD,YAAM,OAAO,KAAK,MAAM,GAAG;AAC3B,YAAI,KAAK,UAAU,IAAI,IAAI;AACzB,iBAAO,KAAK,UAAU,IAAI,IAAI;AAEhC,YAAM,MAAM,eAAc;AAC1B,eAAK,KAAK,QAAQ,IAAI,IAAI,KACxB,KAAK,QAAQ,IAAI,MAAM,GAAG,GAE5B,KAAK,UAAU,IAAI,MAAM,GAAG,GACrB;MACT;MAEA,IAAI,KAAc,OAAkB,UAAuB;AACzD,qBAAA,WAAa,KAAK,MAAM,GAAG,IACtB,KAAK,QAAQ,IAAI,QAAQ,KAC5B,KAAK,QAAQ,IAAI,UAAU,GAAG,GAEhC,KAAK,UAAU,IAAI,UAAU,KAAK;MACpC;MAEA,IAAI,KAAc,UAAuB;AACvC,4BAAA,WAAa,KAAK,MAAM,GAAG,IACpB,KAAK,UAAU,IAAI,QAAQ;MACpC;MAEA,CAAC,OAAI;AACH,YAAM,cAAc,KAAK,QAAQ,QAAO,GACpC,OAAO,YAAY,KAAI;AAC3B,eAAO,KAAK,SAAS;AACnB,gBAAM,CAAC,KAAK,MAAM,CAAC,GAAG,KAAK,MAAM,CAAC,CAAC,GACnC,OAAO,YAAY,KAAI;MAE3B;MAEA,CAAC,UAAO;AACN,YAAM,gBAAgB,KAAK,UAAU,QAAO,GACxC,OAAO,cAAc,KAAI;AAC7B,eAAO,KAAK,SAAS;AAGnB,gBAAM,CAAC,KAAK,QAAQ,IAAI,KAAK,MAAM,CAAC,CAAC,GAAI,KAAK,MAAM,CAAC,GAAG,KAAK,MAAM,CAAC,CAAC,GACrE,OAAO,cAAc,KAAI;MAE7B;MAEA,IAAI,OAAI;AACN,eAAO,KAAK,UAAU;MACxB;;AA3DF,YAAA,UAAA;AA8DA,QAAa,mBAAb,cAAiD,QAIhD;MACC,cAAA;AACE,cAAM,QAAA,cAAc;MACtB;;AAPF,YAAA,mBAAA;;;;;;;;;;;AClEA,QAAA,YAAA,oBASa,uBAAb,MAAiC;MAM/B,YAAoB,aAA0B;AAA1B,aAAA,cAAA,aALZ,KAAA,2BAA2B,IAAI,UAAA,iBAAgB,GAG/C,KAAA,yBAAyB,IAAI,UAAA,iBAAgB;MAEJ;MAEjD,OACE,OACA,YACA,UACA,gBAAsB;AAEtB,YAAM,eAAe,KAAK,yBAAyB,aACjD,YACA,MAAM,KAAK,YAAY,mBAAmB,cAAc,CAAC;AAE3D,QAAA,cAAc,OAAO,KAAK;MAC5B;MAEA,cACE,cACA,gBAAsB;AAEtB,cAAM,KAAK,aAAa,QAAO,CAAE,EAAE,QACjC,CAAC,CAAC,YAAY,OAAO,QAAQ,MAAK;AAChC,cAAM,eACJ,KAAK,YAAY,mBAAmB,cAAc;AACpD,UAAA,cAAc,OAAO,KAAK;AAC1B,cAAI,QAAQ;AAEZ,cAAI,KAAK,uBAAuB,IAAI,YAAY,QAAQ,GAAG;AAGzD,gBAAM,WAAW,KAAK,uBAAuB,IAC3C,YACA,QAAQ;AAEV,oBAAQ,KAAK,YAAY,KAAK,UAAU,YAAY;;AAGtD,cAAI,KAAK,yBAAyB,IAAI,YAAY,QAAQ,GAAG;AAG3D,gBAAM,SAAS,KAAK,yBAAyB,IAC3C,YACA,QAAQ;AAEV,oBAAQ,KAAK,YAAY,MAAM,QAAQ,KAAK;;AAI9C,eAAK,uBAAuB,IAAI,YAAY,cAAc,QAAQ,GAClE,KAAK,yBAAyB,IAAI,YAAY,OAAO,QAAQ;QAC/D,CAAC;MAEL;;;;;MAMA,UAAO;AACL,YAAM,kBAAkB,KAAK;AAC7B,oBAAK,2BAA2B,IAAI,UAAA,iBAAgB,GAC7C;MACT;;AAnEF,YAAA,uBAAA;;;;;;;;;;;ACJA,QAAA,2BAAA,mCAGA,YAAA,oBA0Ba,0BAAb,MAAa,yBAAuB;MAUlC,YAAoB,aAA0B;AAA1B,aAAA,cAAA,aATZ,KAAA,2BAA2B,oBAAI,IAAG,GAIlC,KAAA,iBAAiB,oBAAI,IAAG;MAKiB;;;;;;;;;;MAWjD,aACE,WACA,YACA,sBACA,sBACA,gBAAsB;AAEtB,aAAK,oBAAoB,YAAY,oBAAoB;AACzD,YAAM,0BACJ,KAAK,kCAAkC,SAAS,GAE9C,SAAS,yBACT;AAEJ,YAAI,KAAK,eAAe,IAAI,SAAS,GAAG;AAEtC,cAAM,OAAO,KAAK,eAAe,IAAI,SAAS,GACxC,qBAAqB,KAAK;AAChC,mCAAyB,KAAK,wBAc1B,2BAA2B,yBAAA,uBAAuB,aAGpD,SAAS,yBAAwB,MAC/B,KAAK,eACL,yBACA,KAAK,WAAW,IAGlB,SAAS,yBAAwB,mBAC/B,KAAK,eACL,yBACA,kBAAkB;;AAKtB,mCAAyB,UAAU,6BACjC,qBAAqB,IAAI;AAK7B,oBAAK,eAAe,IAAI,WAAW;UACjC,eAAe;UACf;UACA;SACD,GAEM,KAAK,YAAY;UACtB;UACA;UACA,mCAAmC,MAAM;;UAC3B;QAAc;MAEhC;MAEQ,oBACN,YACA,qBAAwC;AAExC,mBAAW,QAAQ,QAAK;AACtB,cAAI,QAAQ,KAAK,yBAAyB,IAAI,EAAE;AAChD,UAAI,UAAU,WACZ,QAAQ,CAAA,GACR,KAAK,yBAAyB,IAAI,IAAI,KAAK,IAE7C,MAAM,KAAK,mBAAmB;QAChC,CAAC;MACH;MAEQ,kCAAkC,WAAgC;AACxE,YAAI,SAAS,IAAI,UAAA,iBAAgB,GAC3B,iBAAiB,KAAK,yBAAyB,IAAI,SAAS;AAElE,YADA,KAAK,yBAAyB,IAAI,WAAW,CAAA,CAAE,GAC3C,mBAAmB;AACrB,iBAAO;AAET,iBAAW,MAAM;AACf,mBAAS,yBAAwB,MAAM,QAAQ,IAAI,KAAK,WAAW;AAErE,eAAO;MACT;MAEA,OAAO,MACL,MACA,SACA,YAAyB;AAEzB,YAAM,SAAS,MACT,WAAW,QAAQ,QAAO,GAC5B,OAAO,SAAS,KAAI;AACxB,eAAO,KAAK,SAAS,MAAM;AACzB,cAAM,CAAC,KAAK,QAAQ,IAAI,IAAI,KAAK;AACjC,cAAI,KAAK,IAAI,KAAK,IAAI,GAAG;AACvB,gBAAM,mBAAmB,KAAK,IAAI,KAAK,IAAI,GAGrC,eAAe,WAAW,MAAM,kBAAmB,MAAM;AAC/D,mBAAO,IAAI,KAAK,cAAc,IAAI;;AAElC,mBAAO,IAAI,KAAK,QAAQ,IAAI;AAG9B,iBAAO,SAAS,KAAI;;AAEtB,eAAO;MACT;;;;;MAMA,OAAO,mBACL,MACA,SACA,oBAA0B;AAE1B,iBAAW,CAAC,KAAK,IAAI,KAAK,KAAK,KAAI,GAAI;AACrC,cAAM,sBAAsB,QAAQ,IAAI,KAAK,IAAI;AACjD,UAAA,qBAAqB,aAAa,kBAAkB;;AAEtD,eAAO;MACT;;AA5JF,YAAA,0BAAA;AAgKA,aAAS,mCACP,KAAwB;AAExB,aAAO,MAAM,KAAK,IAAI,QAAO,CAAE;IACjC;;;;;;;;;;;ACrMA,QAAA,kBAAA,0BAEA,yBAAA,iCACA,4BAAA,oCAGA,YAAA,oBAQa,qBAAb,cACU,gBAAA,cAAa;MAMrB,YACE,uBACA,YACQ,sBAAyC;AAEjD,cAAM,qBAAqB,GAFnB,KAAA,uBAAA,sBAGR,KAAK,sBAAsB,IAAI,uBAAA,qBAAqB,UAAU,GAC9D,KAAK,yBAAyB,IAAI,0BAAA,wBAAwB,UAAU;MACtE;MAEA,OAAO,cAAwC,iBAAuB;AACpE,YAAM,YAAY,IAAI,UAAA,iBAAgB;AACtC,cAAM,KAAK,aAAa,QAAO,CAAE,EAAE,QAAQ,CAAC,CAAC,YAAY,KAAK,MAAK;AACjE,oBAAU,IAAI,KAAK,qBAAqB,QAAQ,UAAU,GAAG,KAAK;QACpE,CAAC,GACD,KAAK,oBAAoB,cAAc,WAAW,eAAe;MACnE;;;;;;;;MASA,QACE,WACA,YACA,gBAAsB;AAEtB,YAAM,gBAAgB,KAAK,oBAAoB,QAAO;AAEtD,eAAO,KAAK,uBAAuB,aACjC,WACA,YACA,KAAK,uBACL,eACA,cAAc;MAElB;;AA9CF,YAAA,qBAAA;;;;;;;;;;;ACfA,aAAgB,0BACd,UACA,iBAAqC;AAErC,UAAI,kBAAkB;AACtB,aAAI,SAAS,SAAS,gBAAgB,SACpC,mBAAmB,YAAa,SAAS,IAAI,qBAAqB,gBAAgB,IAAI;IAEpF,SAAS,SAAS,gBAAgB,SACpC,mBAAmB,YAAa,SAAS,IAAI,qBAAqB,gBAAgB,IAAI;IAEpF,SAAS,cAAc,gBAAgB,cACzC,mBAAmB,kBAAmB,SAAS,SAAS,qBAAqB,gBAAgB,SAAS;IAEpG,SAAS,gBAAgB,gBAAgB,gBAC3C,mBAAmB,mBAAoB,SAAS,WAAW,qBAAqB,gBAAgB,WAAW;IAGtG;IACT;AAnBA,YAAA,4BAAA;AAqBA,aAAgB,qCACd,UACA,iBAAqC;AAErC,aAAO,qBAAsB,SAAS,SAAS,kEAAkE,gBAAgB,IAAI;IACvI;AALA,YAAA,uCAAA;AAOA,aAAgB,gCACd,UACA,iBAAqC;AAErC,aAAO,gBAAiB,SAAS,IAAI,kEAAkE,gBAAgB,IAAI;IAC7H;AALA,YAAA,kCAAA;AAOA,aAAgB,gCACd,UACA,iBAAqC;AAErC,UAAM,WAAuC;QAC3C,MAAM,gBAAgB;QACtB,MAAM,gBAAgB;QACtB,MAAM,gBAAgB;SAGlB,iBAAiB,KAAK,UAAU,QAAQ;AAE9C,aAAO,gDAAiD,SAAS,IAAI,6BAA6B,cAAc;IAClH;AAbA,YAAA,kCAAA;AAeA,aAAgB,+BACd,UACA,iBAAqC;AAErC,UAAM,WAAuC;QAC3C,MAAM,gBAAgB;QACtB,MAAM,gBAAgB;QACtB,MAAM,gBAAgB;SAGlB,iBAAiB,KAAK,UAAU,QAAQ;AAE9C,aAAO,gDAAiD,SAAS,IAAI,6BAA6B,cAAc;8CACnE,SAAS,IAAI,qBAAqB,SAAS,WAAW,4BAA4B,cAAc;8CAChG,gBAAgB,IAAI,qBAAqB,SAAS,WAAW,4BAA4B,cAAc;IACtJ;AAfA,YAAA,iCAAA;AAiBA,aAAgB,4BACd,UACA,iBAAqC;AAGrC,aAAI,SAAS,cAAc,gBAAgB,YAClC,qCAAqC,UAAU,eAAe,IAGnE,SAAS,SAAS,gBAAgB,OAC7B,gCAAgC,UAAU,eAAe,IAI9D,SAAS,SAAS,gBAAgB,OAE7B,gCAAgC,UAAU,eAAe,IAG9D,SAAS,gBAAgB,gBAAgB,cACpC,+BAA+B,UAAU,eAAe,IAG1D;IACT;AAxBA,YAAA,8BAAA;;;;;;;;;;;ACrEA,QAAA,yBAAA,iCAIA,MAAA,eACA,0BAAA,kCAWa,wBAAb,MAAa,uBAAqB;MAAlC,cAAA;AACmB,aAAA,kBAA8B,oBAAI,IAAG,GACrC,KAAA,wBAAwB,oBAAI,IAAG;MAqIlD;MAhIE,OAAO,SAAM;AACX,eAAO,IAAI,uBAAqB;MAClC;MAEA,YAAY,WAAgC;AAC1C,YAAI,WAA4B,CAAA;AAChC,iBAAW,kBAAkB,KAAK,gBAAgB,OAAM;AACtD,qBAAW,SAAS,OAAO,cAAc;AAG3C,YAAM,uBAAuB,KAAK,sBAAsB,IAAI,SAAS;AACrE,YAAI,wBAAwB;AAC1B,mBAAW,kBAAkB,qBAAqB,OAAM;AACtD,uBAAW,SAAS,OAAO,cAAc;AAI7C,eAAO;MACT;MAEA,SAAS,SAAsB;AAC7B,aAAK,iBAAiB,SAAS,KAAK,eAAe;MACrD;MAEA,qBACE,WACA,SAAsB;AAEtB,YAAI,aAAa,KAAK,sBAAsB,IAAI,SAAS;AACzD,QAAI,cAAc,SAChB,aAAa,oBAAI,IAAG,GACpB,KAAK,sBAAsB,IAAI,WAAW,UAAU,IAEtD,KAAK,iBAAiB,SAAS,UAAU;MAC3C;MAEA,8BACE,oBAAwC;AAExC,YAAM,WAAW,KAAK,gBAAgB,IAAI,mBAAmB,IAAI;AACjE,eAAI,aAAa,SACR,OAKF,KAAK,+BAAkC,oBAAoB,QAAQ;MAC5E;MAEA,uCACE,WACA,oBAAwC;AAExC,YAAM,aAAa,KAAK,sBAAsB,IAAI,SAAS;AAC3D,YAAI,eAAe;AACjB,iBAAO;AAGT,YAAM,WAAW,WAAW,IAAI,mBAAmB,IAAI;AACvD,eAAI,aAAa,SACR,OAKF,KAAK,+BAAkC,oBAAoB,QAAQ;MAC5E;MAEQ,iBAAiB,SAAwB,YAAsB;AACrE,YAAM,aAAa,QAAQ,wBAAuB,GAC5C,WAAW,WAAW,IAAI,WAAW,IAAI;AAE/C,YAAI,aAAa,QAAW;AAC1B,qBAAW,IAAI,WAAW,MAAM,CAAC,OAAO,CAAC;AACzC;;AAGF,iBAAS,KAAK,OAAO;MACvB;MAEQ,+BACN,oBACA,kBAAiC;AAEjC,YAAI,oBAAoB;AAExB,iBAAW,mBAAmB,kBAAkB;AAC9C,cAAM,qBAAqB,gBAAgB,wBAAuB;AAElE,cAAI,uBAAA,4BAA2B,oBAAoB,kBAAkB,KAE/D,mBAAmB,gBAAgB,mBAAmB,gBAEtD,mBAAmB,YAAY,SAC/B,mBAAmB,YAAY,UAE/B,gBAAgB,kBAAkB,mBAAmB,WAAW,GAGlE,IAAI,KAAK,KACP,uCACA,mBAAmB,MACnB;GACA;OACA,wBAAA,2BAA0B,oBAAoB,kBAAkB,GAChE;+BACA,wBAAA,6BAA4B,oBAAoB,kBAAkB,CAAC,IAIvE,oBAAoB,mBAIpB,IAAI,KAAK,KACP,uCACA,mBAAmB,MACnB;GACA;OACA,wBAAA,2BAA0B,oBAAoB,kBAAkB,GAChE;OACA,wBAAA,6BAA4B,oBAAoB,kBAAkB,CAAC;;AAKzE,eAAO;MACT;;AAtIF,YAAA,wBAAA;;;;;;;;;;;ACXA,QAAa,qBAAb,MAA+B;MAC7B,YAA6B,kBAAyC;AAAzC,aAAA,mBAAA;MAA4C;MAEzE,OACE,OACA,YACA,SACA,YAAkB;AAElB,aAAK,iBAAiB,QAAQ,QAAK;AACjC,aAAG,OAAO,OAAO,YAAY,SAAS,UAAU;QAClD,CAAC;MACH;;AAZF,YAAA,qBAAA;;;;;;;;;;;ACNA,QAAA,QAAA,eAQA,YAAA,oBACA,gBAAA,wBAMa,uBAAb,MAAiC;MAM/B,YAAoB,aAAiC;AAAjC,aAAA,cAAA,aAFpB,KAAA,UAAU,IAAI,UAAA,iBAAgB;MAE0B;;;;MAKxD,QAAQ,OAAe,aAA+B,CAAA,GAAE;AACtD,YAAI,OAAO,SAAU,UAAU;AAC7B,gBAAA,KAAK,KACH,uCAAuC,KAAK,YAAY,IAAI,KAAK,KAAK,EAAE;AAE1E;;AAEF,QACE,KAAK,YAAY,cAAc,MAAA,UAAU,OACzC,CAAC,OAAO,UAAU,KAAK,MAEvB,MAAA,KAAK,KACH,2DAA2D,KAAK,YAAY,IAAI,mCAAmC,GAErH,QAAQ,KAAK,MAAM,KAAK,GAEpB,CAAC,OAAO,UAAU,KAAK,MAI7B,KAAK,QAAQ,IAAI,YAAY,KAAK;MACpC;;AAhCF,YAAA,uBAAA;AAsCA,QAAa,4BAAb,MAAsC;MAAtC,cAAA;AAIE,aAAA,UAA+D,oBAAI,IAAG;MAuCxE;;;;MAlCE,QACE,QACA,OACA,aAA+B,CAAA,GAAE;AAEjC,YAAI,KAAC,cAAA,wBAAuB,MAAM;AAChC;AAEF,YAAI,MAAM,KAAK,QAAQ,IAAI,MAAM;AAKjC,YAJI,OAAO,SACT,MAAM,IAAI,UAAA,iBAAgB,GAC1B,KAAK,QAAQ,IAAI,QAAQ,GAAG,IAE1B,OAAO,SAAU,UAAU;AAC7B,gBAAA,KAAK,KACH,uCAAuC,OAAO,YAAY,IAAI,KAAK,KAAK,EAAE;AAE5E;;AAEF,QACE,OAAO,YAAY,cAAc,MAAA,UAAU,OAC3C,CAAC,OAAO,UAAU,KAAK,MAEvB,MAAA,KAAK,KACH,2DAA2D,OAAO,YAAY,IAAI,mCAAmC,GAEvH,QAAQ,KAAK,MAAM,KAAK,GAEpB,CAAC,OAAO,UAAU,KAAK,MAI7B,IAAI,IAAI,YAAY,KAAK;MAC3B;;AA1CF,YAAA,4BAAA;;;;;;;;;;;ACrDA,QAAA,QAAA,eAOA,gBAAA,wBACA,qBAAA,6BAIA,UAAA,kBA6Ba,qBAAb,MAA+B;MAA/B,cAAA;AACU,aAAA,aAAyC,CAAA,GACzC,KAAA,kBAAmD,CAAA;MAkJ7D;MAhJE,YAAY,UAA8B,YAAgC;AAExE,QADY,KAAK,cAAc,UAAU,UAAU,KACxC,KAGX,KAAK,WAAW,KAAK,EAAE,UAAU,WAAU,CAAE;MAC/C;MAEA,eACE,UACA,YAAgC;AAEhC,YAAM,MAAM,KAAK,cAAc,UAAU,UAAU;AACnD,QAAI,MAAM,KAGV,KAAK,WAAW,OAAO,KAAK,CAAC;MAC/B;MAEA,iBACE,UACA,aAAyB;AAGzB,YAAM,wBAAwB,IAAI,IAChC,YAAY,OAAO,cAAA,sBAAsB,CAAC;AAE5C,YAAI,sBAAsB,SAAS,GAAG;AACpC,gBAAA,KAAK,MACH,oEACA,WAAW;AAEb;;AAGF,QADY,KAAK,mBAAmB,UAAU,qBAAqB,KACxD,KAGX,KAAK,gBAAgB,KAAK,EAAE,UAAU,aAAa,sBAAqB,CAAE;MAC5E;MAEA,oBACE,UACA,aAAyB;AAGzB,YAAM,wBAAwB,IAAI,IAChC,YAAY,OAAO,cAAA,sBAAsB,CAAC,GAEtC,MAAM,KAAK,mBAAmB,UAAU,qBAAqB;AACnE,QAAI,MAAM,KAGV,KAAK,gBAAgB,OAAO,KAAK,CAAC;MACpC;;;;MAKA,MAAM,QACJ,gBACA,eAAsB;AAEtB,YAAM,kBAAkB,KAAK,kBAC3B,gBACA,aAAa,GAET,uBAAuB,KAAK,uBAChC,gBACA,aAAa;AAWf,gBARgB,UAAM,QAAA,mBAAkB;UACtC,GAAG;UACH,GAAG;SACJ,GAGE,OAAO,QAAA,kCAAkC,EACzC,IAAI,QAAM,GAAG,MAAM;MAExB;MAEQ,kBAAkB,iBAAyB,eAAsB;AACvE,eAAO,KAAK,WAAW,IAAI,OAAO,EAAE,UAAU,WAAU,MAAM;AAC5D,cAAM,mBAAmB,IAAI,mBAAA,qBAAqB,WAAW,WAAW,GACpE,cAA6B,QAAQ,QACvC,SAAS,gBAAgB,CAAC;AAE5B,UAAI,iBAAiB,SACnB,kBAAc,QAAA,iBAAgB,aAAa,aAAa,IAE1D,MAAM,aACN,WAAW,gBAAgB,QAAQ,mBAAgB;AACjD,0BAAc,OAAO,iBAAiB,SAAS,eAAe;UAChE,CAAC;QACH,CAAC;MACH;MAEQ,uBACN,iBACA,eAAsB;AAEtB,eAAO,KAAK,gBAAgB,IAAI,OAAO,EAAE,UAAU,YAAW,MAAM;AAClE,cAAM,mBAAmB,IAAI,mBAAA,0BAAyB,GAClD,cAA6B,QAAQ,QACvC,SAAS,gBAAgB,CAAC;AAE5B,UAAI,iBAAiB,SACnB,kBAAc,QAAA,iBAAgB,aAAa,aAAa,IAE1D,MAAM,aACN,YAAY,QAAQ,gBAAa;AAC/B,gBAAM,SAAS,iBAAiB,QAAQ,IAAI,UAAU;AACtD,YAAI,UAAU,QAGd,WAAW,gBAAgB,QAAQ,mBAAgB;AACjD,4BAAc,OAAO,QAAQ,eAAe;YAC9C,CAAC;UACH,CAAC;QACH,CAAC;MACH;MAEQ,cACN,UACA,YAAgC;AAEhC,eAAO,KAAK,WAAW,UAAU,YACxB,OAAO,aAAa,YAAY,OAAO,eAAe,UAC9D;MACH;MAEQ,mBACN,UACA,aAAsC;AAEtC,eAAO,KAAK,gBAAgB,UAAU,YAElC,OAAO,aAAa,gBACpB,QAAA,WAAU,OAAO,aAAa,WAAW,CAE5C;MACH;;AAnJF,YAAA,qBAAA;;;;;;;;;;;ACpCA,QAAA,kBAAA,0BAEA,yBAAA,iCACA,4BAAA,oCASa,oBAAb,cACU,gBAAA,cAAa;MAMrB,YACE,sBACA,YACQ,sBAAyC;AAEjD,cAAM,oBAAoB,GAFlB,KAAA,uBAAA,sBAGR,KAAK,sBAAsB,IAAI,uBAAA,qBAAqB,UAAU,GAC9D,KAAK,yBAAyB,IAAI,0BAAA,wBAAwB,UAAU;MACtE;MAEA,OACE,OACA,YACA,SACA,YAAkB;AAElB,qBAAa,KAAK,qBAAqB,QAAQ,YAAY,OAAO,GAClE,KAAK,oBAAoB,OAAO,OAAO,YAAY,SAAS,UAAU;MACxE;;;;;;;MAQA,QACE,WACA,YACA,gBAAsB;AAEtB,YAAM,gBAAgB,KAAK,oBAAoB,QAAO;AAEtD,eAAO,KAAK,uBAAuB,aACjC,WACA,YACA,KAAK,uBACL,eACA,cAAc;MAElB;;AA/CF,YAAA,oBAAA;;;;;;;;;;;ACVA,QAAsB,sBAAtB,MAAyC;MAavC,OAAO,OAAI;AACT,eAAO;MACT;;AAfF,YAAA,sBAAA;AAkBA,QAAa,0BAAb,cAA6C,oBAAmB;MAC9D,QAAQ,UAA4B,UAAkB;AACpD,eAAO;MACT;;AAHF,YAAA,0BAAA;AAUA,QAAa,+BAAb,cAAkD,oBAAmB;MACnE,YAAoB,wBAAgC;AAClD,cAAK,GADa,KAAA,yBAAA;MAEpB;MAEA,QAAQ,UAA4B,UAAiB;AACnD,YAAM,qBAAuC,CAAA;AAC7C,sBAAO,KAAK,QAAQ,EACjB,OAAO,mBACN,KAAK,uBAAuB,SAAS,aAAa,CAAC,EAEpD,QACC,mBACG,mBAAmB,aAAa,IAAI,SAAS,aAAa,CAAE,GAE5D;MACT;;AAhBF,YAAA,+BAAA;AAmBA,QAAM,OAAO,IAAI,wBAAuB;;;;;;;;;;;AClDxC,QAAA,yBAAA,iCAIA,UAAA,kBACA,UAAA,kBACA,uBAAA,+BAGA,0BAAA,kCACA,+BAAA,uCACA,uBAAA,+BACA,sBAAA,8BAEA,wBAAA,gCAMa,mBAAb,MAA6B;MAK3B,YACU,2BACA,uBAA2C;AAD3C,aAAA,4BAAA,2BACA,KAAA,wBAAA,uBANV,KAAA,wBAAwB,IAAI,wBAAA,sBAAqB,GACjD,KAAA,qBAAqB,IAAI,qBAAA,mBAAkB,GAOzC,KAAK,QAAQ,IAAI,QAAA,MAAM,IAAI;MAC7B;MAEA,sBAAsB,YAAgC;AACpD,YAAM,WAAW,KAAK,uBAAuB,YAAY,oBAAA,iBAAiB;AAE1E,eAAI,SAAS,WAAW,IACf,SAAS,CAAC,IAEZ,IAAI,6BAAA,mBAAmB,QAAQ;MACxC;MAEA,2BAA2B,YAAgC;AAMzD,eALiB,KAAK,uBACpB,YACA,qBAAA,kBAAkB;MAItB;;;;;;;MAQA,MAAM,QACJ,WACA,gBACA,SAA8B;AAM9B,YAAM,SAAS,MAAM,KAAK,mBAAmB,QAC3C,gBACA,SAAS,aAAa,GAElB,iBAAiB,MAAM,KAC3B,KAAK,sBAAsB,YAAY,SAAS,CAAC,EAEhD,IAAI,mBACI,cAAc,QACnB,WACA,KAAK,0BAA0B,kBAC/B,cAAc,CAEjB,EACA,OAAO,QAAA,YAAY;AAEtB,eAAO;UACL,cAAc;YACZ,OAAO,KAAK;YACZ,SAAS,eAAe,OAAO,QAAA,YAAY;;UAE7C;;MAEJ;MAEQ,uBAIN,YACA,mBAAoC;AAMpC,YAAI,WAJU,KAAK,0BAA0B,aAAa,UACxD,YACA,KAAK,qBAAqB,EAEP,IAAI,UAAO;AAC9B,cAAM,qBAAiB,uBAAA,oCACrB,MACA,UAAU,GAEN,oBACJ,KAAK,sBAAsB,8BACzB,cAAc;AAElB,cAAI,qBAAqB;AACvB,mBAAO;AAET,cAAM,aAAa,KAAK,YAAY,iBAAiB,cAAc,GAC7D,cAAc,IAAI,kBACtB,gBACA,YACA,KAAK,mBAAmB;AAE1B,sBAAK,sBAAsB,SAAS,WAAW,GACxC;QACT,CAAC;AAGD,YAAI,SAAS,WAAW,GAAG;AAGzB,cAAM,oBADJ,KAAK,0BAA0B,mBAAmB,WAAW,IAAI,EAChB,IACjD,CAAC,CAAC,WAAW,WAAW,MAAK;AAC3B,gBAAM,oBACJ,KAAK,sBAAsB,uCACzB,WACA,UAAU;AAEd,gBAAI,qBAAqB;AACvB,qBAAO;AAET,gBAAM,aAAa,YAAY,iBAAiB,UAAU,GACpD,UAAU,IAAI,kBAClB,YACA,YACA,sBAAA,oBAAoB,KAAI,CAAE;AAE5B,wBAAK,sBAAsB,qBAAqB,WAAW,OAAO,GAC3D;UACT,CAAC;AAEH,qBAAW,SAAS,OAAO,iBAAiB;;AAG9C,eAAO;MACT;;AAnIF,YAAA,mBAAA;;;;;;;;;;;ACrBA,QAAA,UAAA,kBACA,iBAAA,yBACA,qBAAA,6BAMa,2BAAb,MAAqC;MAOnC,YAAmB,UAAmB;AAAnB,aAAA,WAAA,UANnB,KAAA,eAAe,IAAI,eAAA,aAAY,GAE/B,KAAA,mBAAsC,CAAA,GAEtC,KAAA,oBAAmD,oBAAI,IAAG;MAEjB;MAEzC,oBAAoBE,uBAA0C;AAC5D,YAAM,SAAK,QAAA,wBAAuBA,qBAAoB,GAClD,mBAAmB,KAAK,kBAAkB,IAAI,EAAE;AACpD,eAAI,oBAAoB,SACtB,mBAAmB,IAAI,mBAAA,iBAAiB,MAAMA,qBAAoB,GAClE,KAAK,kBAAkB,IAAI,IAAI,gBAAgB,IAE1C;MACT;MAEA,mBAAmB,gBAA8B;AAC/C,YAAM,SAAiD,CAAA;AACvD,iBAAW,aAAa,KAAK;AAC3B,iBAAO,KAAK,CAAC,WAAW,UAAU,kBAAkB,cAAc,CAAC,CAAC;AAEtE,eAAO;MACT;;AAzBF,YAAA,2BAAA;;;;;;;;;;;ACXA,QAAA,SAAA,gBAOA,UAAA,kBAQa,kBAAb,MAA4B;MAC1B,YACU,cACA,eAA2B;AAD3B,aAAA,eAAA,cACA,KAAA,gBAAA;MACP;MAEH,MAAM,QAAQ,SAA8B;AAC1C,YAAM,qBAAiB,OAAA,gBAAe,KAAK,IAAG,CAAE,GAC1C,0BAA0B,MAAM,KACpC,KAAK,aAAa,kBAAkB,OAAM,CAAE,EAC5C,IAAI,sBACJ,iBAAiB,QAAQ,MAAM,gBAAgB,OAAO,CAAC,GAEnD,SAAS,MAAM,QAAQ,IAAI,uBAAuB;AAExD,eAAO;UACL,iBAAiB;YACf,UAAU,KAAK,aAAa;YAC5B,cAAc,OAAO,IAAI,QAAM,GAAG,YAAY;;UAEhD,YAAQ,QAAA,SAAQ,QAAQ,QAAM,GAAG,MAAM;;MAE3C;;;;MAKA,MAAM,WAAW,SAA2B;AAC1C,cAAM,KAAK,cAAc,WAAW,OAAO;MAC7C;;;;MAKA,MAAM,SAAS,SAAyB;AACtC,cAAM,KAAK,cAAc,SAAS,OAAO;MAC3C;MAEA,6BAA6B,gBAA8B;AACzD,eAAO,KAAK,cAAc,6BAA6B,cAAc;MACvE;MAEA,kBAAkB,gBAA8B;AAC9C,eAAO,KAAK,cAAc,kBAAkB,cAAc;MAC5D;;AA5CF,YAAA,kBAAA;;;;;;;;;;;ACfA,QAAA,QAAA,eAOA,cAAA,gBAEA,6BAAA,qCACA,oBAAA,4BAgBaC,iBAAb,MAA0B;MAIxB,YAAY,SAA8B;;AAFlC,aAAA,YAAY;AAGlB,YAAM,WAAW,YAAA,SAAS,QAAO,EAAG,OAClC,KAAA,SAAS,cAAQ,QAAA,OAAA,SAAA,KAAI,YAAA,SAAS,MAAK,CAAE;AAGvC,YADA,KAAK,eAAe,IAAI,2BAAA,yBAAyB,QAAQ,GACrD,SAAS,SAAS,QAAQ,QAAQ,MAAM,SAAS;AACnD,mBAAW,QAAQ,QAAQ;AACzB,iBAAK,aAAa,aAAa,QAAQ,IAAI;MAGjD;;;;MAKA,SAAS,MAAc,UAAU,IAAI,UAAwB,CAAA,GAAE;AAE7D,eAAI,KAAK,aACP,MAAA,KAAK,KAAK,iDAAiD,OACpD,MAAA,iBAAe,KAGjB,KAAK,aAAa,oBAAoB;UAC3C;UACA;UACA,WAAW,QAAQ;SACpB,EAAE;MACL;;;;;;;MAQA,gBAAgB,cAA0B;AACxC,YAAM,YAAY,IAAI,kBAAA,gBAAgB,KAAK,cAAc,YAAY;AACrE,qBAAa,kBAAkB,SAAS,GACxC,KAAK,aAAa,iBAAiB,KAAK,SAAS;MACnD;;;;;;;MAQA,MAAM,SAAS,SAAyB;AACtC,YAAI,KAAK,WAAW;AAClB,gBAAA,KAAK,KAAK,oDAAoD;AAC9D;;AAGF,aAAK,YAAY,IAEjB,MAAM,QAAQ,IACZ,KAAK,aAAa,iBAAiB,IAAI,eAC9B,UAAU,SAAS,OAAO,CAClC,CAAC;MAEN;;;;;;MAOA,MAAM,WAAW,SAA2B;AAE1C,YAAI,KAAK,WAAW;AAClB,gBAAA,KAAK,KAAK,6DAA6D;AACvE;;AAGF,cAAM,QAAQ,IACZ,KAAK,aAAa,iBAAiB,IAAI,eAC9B,UAAU,WAAW,OAAO,CACpC,CAAC;MAEN;;AAnFF,YAAA,gBAAAA;;;;;;;;;;;ACvBA,QAAM,SAAS,uBASF,mBAAb,MAAa,kBAAgB;MAI3B,YAAY,SAAe;AACzB,QAAI,YAAY,OACd,KAAK,YAAY,IACjB,KAAK,UAAU,SAEf,KAAK,YAAY,IACjB,KAAK,UAAU,IAAI,OAAO,kBAAiB,cAAc,OAAO,CAAC;MAErE;MAEA,MAAM,KAAW;AACf,eAAI,KAAK,YACA,KAGF,KAAK,QAAQ,KAAK,GAAG;MAC9B;MAEA,OAAO,cAAc,SAAe;AAClC,eAAO,IAAI,QAAQ,QAAQ,QAAQ,MAAM,EAAE,QAAQ,KAAK,IAAI,CAAC;MAC/D;MAEA,OAAO,YAAY,SAAe;AAChC,eAAO,QAAQ,SAAS,GAAG;MAC7B;;AA5BF,YAAA,mBAAA;AA+BA,QAAa,iBAAb,MAA2B;MAIzB,YAAY,SAAgB;AAC1B,aAAK,YAAY,YAAY,QAC7B,KAAK,WAAW;MAClB;MAEA,MAAM,KAAW;AAIf,eAHI,QAAK,aAGL,QAAQ,KAAK;MAInB;;AAjBF,YAAA,iBAAA;;;;;;;;;;;AC1CA,QAAA,cAAA,sBAQa,qBAAb,MAA+B;MAK7B,YAAY,UAAqC;;AAC/C,aAAK,cAAc,IAAI,YAAA,kBAAiB,KAAA,UAAU,UAAI,QAAA,OAAA,SAAA,KAAI,GAAG,GAC7D,KAAK,QAAQ,UAAU,MACvB,KAAK,cAAc,IAAI,YAAA,eAAe,UAAU,IAAI;MACtD;MAEA,UAAO;AACL,eAAO,KAAK;MACd;MAEA,gBAAa;AACX,eAAO,KAAK;MACd;MAEA,gBAAa;AACX,eAAO,KAAK;MACd;;AArBF,YAAA,qBAAA;;;;;;;;;;;ACTA,QAAA,cAAA,sBAQa,gBAAb,MAA0B;MAKxB,YAAY,UAAgC;AAC1C,aAAK,cAAc,IAAI,YAAA,eAAe,UAAU,IAAI,GACpD,KAAK,iBAAiB,IAAI,YAAA,eAAe,UAAU,OAAO,GAC1D,KAAK,mBAAmB,IAAI,YAAA,eAAe,UAAU,SAAS;MAChE;MAEA,gBAAa;AACX,eAAO,KAAK;MACd;;;;MAKA,mBAAgB;AACd,eAAO,KAAK;MACd;MAEA,qBAAkB;AAChB,eAAO,KAAK;MACd;;AAxBF,YAAA,gBAAA;;;;;;;;;;;ACRA,QAAA,cAAA,sBACA,wBAAA,gCAIA,uBAAA,+BACA,kBAAA,0BACA,gBAAA;AAgGA,aAAS,sBAAsB,SAAoB;AACjD,aACE,QAAQ,kBAAkB,QAC1B,QAAQ,kBAAkB,QAC1B,QAAQ,kBAAkB,QAC1B,QAAQ,aAAa,QACrB,QAAQ,gBAAgB,QACxB,QAAQ,kBAAkB;IAE9B;AAKA,QAAaC,QAAb,MAAiB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MA4Df,YAAY,aAAwB;;AAGlC,YAAI,sBAAsB,WAAW;AACnC,gBAAM,IAAI,MAAM,wDAAwD;AAK1E,YACE,YAAY,QAAQ,SACnB,aAAa,kBAAkB,QAC9B,YAAA,iBAAiB,YAAY,YAAY,cAAc;AAEzD,gBAAM,IAAI,MACR,yHAAyH;AAK7H,QAAI,YAAY,iBAAiB,OAC/B,KAAK,sBAAsB,IAAI,sBAAA,6BAC7B,YAAY,aAAa,IAG3B,KAAK,sBAAsB,sBAAA,oBAAoB,KAAI,GAGrD,KAAK,OAAO,YAAY,MACxB,KAAK,cAAc,YAAY,aAC/B,KAAK,eAAc,KAAA,YAAY,iBAAW,QAAA,OAAA,SAAA,KAAI,cAAA,YAAY,QAAO,GACjE,KAAK,qBAAqB,IAAI,qBAAA,mBAAmB;UAC/C,MAAM,YAAY;UAClB,MAAM,YAAY;UAClB,MAAM,YAAY;SACnB,GACD,KAAK,gBAAgB,IAAI,gBAAA,cAAc;UACrC,MAAM,YAAY;UAClB,SAAS,YAAY;UACrB,WAAW,YAAY;SACxB;MACH;;AArGF,YAAA,OAAAA;;;;;;;;;;;ACzGA,QAAA,2BAAA;AAAS,WAAA,eAAA,SAAA,0BAAA,EAAA,YAAA,IAAA,KAAA,WAAA;AAAA,aAAA,yBAAA;IAAsB,EAAA,CAAA;AAE/B,QAAA,eAAA;AAEE,WAAA,eAAA,SAAA,iBAAA,EAAA,YAAA,IAAA,KAAA,WAAA;AAAA,aAAA,aAAA;IAAa,EAAA,CAAA;AAaf,QAAA,iBAAA;AAAS,WAAA,eAAA,SAAA,gBAAA,EAAA,YAAA,IAAA,KAAA,WAAA;AAAA,aAAA,eAAA;IAAY,EAAA,CAAA;AAErB,QAAA,kCAAA;AACE,WAAA,eAAA,SAAA,iCAAA,EAAA,YAAA,IAAA,KAAA,WAAA;AAAA,aAAA,gCAAA;IAA6B,EAAA,CAAA;AAI/B,QAAA,2BAAA;AAAS,WAAA,eAAA,SAAA,0BAAA,EAAA,YAAA,IAAA,KAAA,WAAA;AAAA,aAAA,yBAAA;IAAsB,EAAA,CAAA;AAE/B,QAAA,0BAAA;AAAS,WAAA,eAAA,SAAA,yBAAA,EAAA,YAAA,IAAA,KAAA,WAAA;AAAA,aAAA,wBAAA;IAAqB,EAAA,CAAA;AAI9B,QAAA,yBAAA;AAA+B,WAAA,eAAA,SAAA,kBAAA,EAAA,YAAA,IAAA,KAAA,WAAA;AAAA,aAAA,uBAAA;IAAc,EAAA,CAAA;AAE7C,QAAA,kBAAA;AAAS,WAAA,eAAA,SAAA,iBAAA,EAAA,YAAA,IAAA,KAAA,WAAA;AAAA,aAAA,gBAAA;IAAa,EAAA,CAAA;AAEtB,QAAA,gBAAA;AACE,WAAA,eAAA,SAAA,sBAAA,EAAA,YAAA,IAAA,KAAA,WAAA;AAAA,aAAA,cAAA;IAAkB,EAAA,CAAA;AAClB,WAAA,eAAA,SAAA,sCAAA,EAAA,YAAA,IAAA,KAAA,WAAA;AAAA,aAAA,cAAA;IAAkC,EAAA,CAAA;AAClC,WAAA,eAAA,SAAA,mCAAA,EAAA,YAAA,IAAA,KAAA,WAAA;AAAA,aAAA,cAAA;IAA+B,EAAA,CAAA;AAC/B,WAAA,eAAA,SAAA,mBAAA,EAAA,YAAA,IAAA,KAAA,WAAA;AAAA,aAAA,cAAA;IAAe,EAAA,CAAA;AACf,WAAA,eAAA,SAAA,wBAAA,EAAA,YAAA,IAAA,KAAA,WAAA;AAAA,aAAA,cAAA;IAAoB,EAAA,CAAA;AACpB,WAAA,eAAA,SAAA,wBAAA,EAAA,YAAA,IAAA,KAAA,WAAA;AAAA,aAAA,cAAA;IAAoB,EAAA,CAAA;AACpB,WAAA,eAAA,SAAA,kBAAA,EAAA,YAAA,IAAA,KAAA,WAAA;AAAA,aAAA,cAAA;IAAc,EAAA,CAAA;AACd,WAAA,eAAA,SAAA,eAAA,EAAA,YAAA,IAAA,KAAA,WAAA;AAAA,aAAA,cAAA;IAAW,EAAA,CAAA;AAGb,QAAA,SAAA;AAAS,WAAA,eAAA,SAAA,QAAA,EAAA,YAAA,IAAA,KAAA,WAAA;AAAA,aAAA,OAAA;IAAI,EAAA,CAAA;AAEb,QAAA,UAAA;AAAS,WAAA,eAAA,SAAA,gBAAA,EAAA,YAAA,IAAA,KAAA,WAAA;AAAA,aAAA,QAAA;IAAY,EAAA,CAAA;;;;;;;;;;;AClDrB,QAAY;AAAZ,KAAA,SAAYC,mCAAgC;AAC1C,MAAAA,kCAAAA,kCAAA,QAAA,CAAA,IAAA,SACAA,kCAAAA,kCAAA,aAAA,CAAA,IAAA,cACAA,kCAAAA,kCAAA,YAAA,CAAA,IAAA;IACF,GAJY,mCAAA,QAAA,qCAAA,QAAA,mCAAgC,CAAA,EAAA;;;;;;;;;;;ACT5C,QAAA,SAAA,gBACA,gBAAA,gBAOA,8BAAA,qCAMA,QAAA,eAEa,gCACX,MAAM,cAAA,uBAAuB;AADlB,YAAA,gCAA6B;AAGnC,QAAM,2BAA2D,CACtE,mBACE;AACF,cAAQ,gBAAgB;QACtB,KAAK,cAAA,eAAe;QACpB,KAAK,cAAA,eAAe;QACpB,KAAK,cAAA,eAAe;QACpB,KAAK,cAAA,eAAe;AAClB,iBAAO,cAAA,uBAAuB;QAChC,KAAK,cAAA,eAAe;QACpB,KAAK,cAAA,eAAe;AAClB,iBAAO,cAAA,uBAAuB;;IAEpC;AAba,YAAA,2BAAwB;AAe9B,QAAM,+BAA+D,CAC1E,mBACE;AACF,cAAQ,gBAAgB;QACtB,KAAK,cAAA,eAAe;QACpB,KAAK,cAAA,eAAe;AAClB,iBAAO,cAAA,uBAAuB;QAChC,KAAK,cAAA,eAAe;QACpB,KAAK,cAAA,eAAe;QACpB,KAAK,cAAA,eAAe;QACpB,KAAK,cAAA,eAAe;AAClB,iBAAO,cAAA,uBAAuB;;IAEpC;AAba,YAAA,+BAA4B;AAezC,aAAS,2CAAwC;AAC/C,UAAM,UAAM,OAAA,QAAM,GACZ,wBACJ,IAAI,kDAAkD,KAAI,EAAG,YAAW;AAE1E,aAAI,0BAA0B,eACrB,QAAA,gCAEL,0BAA0B,UACrB,QAAA,2BAEL,0BAA0B,cACrB,QAAA,gCAGT,MAAA,KAAK,KACH,gEAAgE,IAAI,iDAAiD,yFAAyF,GAEzM,QAAA;IACT;AAEA,aAAS,0BACP,uBAE0B;AAG1B,aAAI,yBAAyB,OACvB,0BAA0B,4BAAA,iCAAiC,QACtD,QAAA,2BAEP,0BAA0B,4BAAA,iCAAiC,YAEpD,QAAA,+BAEF,QAAA,gCAGF,yCAAwC;IACjD;AAEA,QAAa,yBAAb,MAAmC;MAWjC,YAAY,UAAa,QAAkC;AACzD,aAAK,gBAAgB,UACrB,KAAK,kCAAkC,0BACrC,QAAQ,qBAAqB;MAEjC;MAEA,OACE,SACA,gBAA8C;AAE9C,aAAK,cAAc,OAAO,CAAC,OAAO,GAAG,cAAc;MACrD;MAEA,MAAM,WAAQ;AACZ,cAAM,KAAK,cAAc,SAAQ;MACnC;MAEA,aAAU;AACR,eAAO,QAAQ,QAAO;MACxB;MAEA,6BACE,gBAA8B;AAE9B,eAAO,KAAK,gCAAgC,cAAc;MAC5D;;AArCF,YAAA,yBAAA;;;;;;;;;;;AC1FA,QAAA,QAAA,eACA,SAAA,gBAEM,wBAAwB;AACjB,YAAA,8BAA8B;AAC9B,YAAA,iCAAiC;AACjC,YAAA,6BAA6B;AAC7B,YAAA,oCAAoC;AAMjD,aAAgB,aACd,iBAAmD,CAAA,GAAE;AAErD,UAAM,UAAkC,CAAA;AACxC,oBAAO,QAAQ,cAAc,EAAE,QAAQ,CAAC,CAAC,KAAK,KAAK,MAAK;AACtD,QAAI,OAAO,QAAU,MACnB,QAAQ,GAAG,IAAI,OAAO,KAAK,IAE3B,MAAA,KAAK,KAAK,WAAW,GAAG,uCAAuC;MAEnE,CAAC,GACM;IACT;AAZA,YAAA,eAAA;AAoBA,aAAgB,wBAAwBC,MAAa,MAAY;AAC/D,aAAKA,KAAI,SAAS,GAAG,MACnBA,OAAMA,OAAM,MAEPA,OAAM;IACf;AALA,YAAA,0BAAA;AAYA,aAAgB,4BAA4BA,MAAW;AACrD,UAAI;AACF,YAAM,YAAY,IAAI,IAAIA,IAAG;AAC7B,eAAI,UAAU,aAAa,OACzB,UAAU,WAAW,UAAU,WAAW,MAErC,UAAU,SAAQ;cACnB;AACN,qBAAA,KAAK,KAAK,gCAAgCA,IAAG,GAAG,GACzCA;;IAEX;AAXA,YAAA,8BAAA;AAkBA,aAAgB,yBACd,eAAiC;AAEjC,aAAI,OAAO,iBAAkB,WACvB,iBAAiB,IAEZ,eAAe,eAAe,qBAAqB,IAErD,gBAEA,0BAAyB;IAEpC;AAZA,YAAA,2BAAA;AAcA,aAAS,4BAAyB;;AAChC,UAAM,iBAAiB,QACrB,SAAA,OAAA,QAAM,EAAG,uCAAiC,QAAA,OAAA,SAAA,SACxC,OAAA,QAAM,EAAG,0BAA0B;AAGvC,aAAI,kBAAkB,IAEb,eAAe,gBAAgB,qBAAqB,IAEpD;IAEX;AAGA,aAAgB,eACd,SACA,gBAAsB;AAEtB,mBAAA,KAAK,KAAK,kCAAkC,OAAO,GAE5C;IACT;AAPA,YAAA,iBAAA;AASA,aAAgB,kBAAkB,YAAkB;AAGlD,aAFmB,CAAC,KAAK,KAAK,KAAK,GAAG,EAEpB,SAAS,UAAU;IACvC;AAJA,YAAA,oBAAA;AAMA,aAAgB,uBAAuB,YAA0B;AAC/D,UAAI,cAAc;AAChB,eAAO;AAET,UAAM,UAAU,OAAO,SAAS,YAAY,EAAE;AAC9C,UAAI,OAAO,UAAU,OAAO;AAC1B,eAAO,UAAU,IAAI,UAAU,MAAO;AAGxC,UAAM,QAAQ,IAAI,KAAK,UAAU,EAAE,QAAO,IAAK,KAAK,IAAG;AAEvD,aAAI,SAAS,IACJ,QAEF;IACT;AAfA,YAAA,yBAAA;;;;;;;;;;;AC3GA,QAAA,QAAA,eACA,SAAA,gBAUA,SAAA,iBAKsB,mBAAtB,MAAsC;;;;MAepC,YAAY,SAAY,CAAA,GAAO;AANrB,aAAA,mBAAuC,CAAA,GAO/C,KAAK,MAAM,KAAK,cAAc,MAAM,GAChC,OAAO,OAAO,YAAa,aAC7B,KAAK,WAAW,OAAO,WAGzB,KAAK,WAAW,KAAK,SAAS,KAAK,IAAI,GACvC,KAAK,gBAAgB,IAAI,OAAA,eAAe,KAAK,WAAW,IAAI,GAE5D,KAAK,oBACH,OAAO,OAAO,oBAAqB,WAC/B,OAAO,mBACP,OAEN,KAAK,oBAAgB,OAAA,0BAAyB,OAAO,aAAa,GAGlE,KAAK,OAAO,MAAM;MACpB;;;;;;MAOA,OACE,OACA,gBAA8C;AAE9C,YAAI,KAAK,cAAc,UAAU;AAC/B,yBAAe;YACb,MAAM,OAAA,iBAAiB;YACvB,OAAO,IAAI,MAAM,4BAA4B;WAC9C;AACD;;AAGF,YAAI,KAAK,iBAAiB,UAAU,KAAK,mBAAmB;AAC1D,yBAAe;YACb,MAAM,OAAA,iBAAiB;YACvB,OAAO,IAAI,MAAM,iCAAiC;WACnD;AACD;;AAGF,aAAK,QAAQ,KAAK,EACf,KAAK,MAAK;AACT,yBAAe,EAAE,MAAM,OAAA,iBAAiB,QAAO,CAAE;QACnD,CAAC,EACA,MAAM,CAAC,UAA6B;AACnC,yBAAe,EAAE,MAAM,OAAA,iBAAiB,QAAQ,MAAK,CAAE;QACzD,CAAC;MACL;MAEQ,QAAQ,OAAmB;AACjC,eAAO,IAAI,QAAc,CAAC,SAAS,WAAU;AAC3C,cAAI;AACF,kBAAA,KAAK,MAAM,oBAAoB,KAAK,GACpC,KAAK,KAAK,OAAO,SAAS,MAAM;mBACzB,GAAG;AACV,mBAAO,CAAC;;QAEZ,CAAC;MACH;;;;MAKA,WAAQ;AACN,eAAO,KAAK,cAAc,KAAI;MAChC;;;;MAKA,aAAU;AACR,eAAO,QAAQ,IAAI,KAAK,gBAAgB,EAAE,KAAK,MAAK;QAEpD,CAAC;MACH;;;;MAKQ,YAAS;AACf,qBAAA,KAAK,MAAM,kBAAkB,GAC7B,KAAK,WAAU,GACR,KAAK,WAAU;MACxB;;AAvGF,YAAA,mBAAA;;;;;;;;;;;ACHA,QAAY;AAAZ,KAAA,SAAYC,uBAAoB;AAC9B,MAAAA,sBAAA,OAAA,QACAA,sBAAA,OAAA;IACF,GAHY,uBAAA,QAAA,yBAAA,QAAA,uBAAoB,CAAA,EAAA;;;;;;;;;;;ACVhC,QAAa,oBAAb,cAAuC,MAAK;MAK1C,YAAY,SAAkB,MAAe,MAAa;AACxD,cAAM,OAAO,GAJG,KAAA,OAAe,qBAK/B,KAAK,OAAO,MACZ,KAAK,OAAO;MACd;;AATF,YAAA,oBAAA;;;;;;;;;;;ACJA,QAAAC,OAAA,UAAA,KAAA,GACA,OAAA,UAAA,MAAA,GACA,QAAA,UAAA,OAAA,GACA,OAAA,UAAA,MAAA,GACA,WAAA,UAAA,QAAA,GAGA,QAAA,eACA,UAAA,mBACA,SAAA,gBACA,UAAA,mBACA,SAAA;AAiBA,aAAgB,aACd,WACA,MACA,aACA,WACA,SAA2C;AAE3C,UAAM,kBAAkB,UAAU,eAC5B,YAAY,IAAIA,KAAI,IAAI,UAAU,GAAG,GACrC,cAAc,OAAO,QAAQ,SAAS,KAAK,MAAM,GAAG,EAAE,CAAC,CAAC,GAC1D,YACA,KACA,iBAAiB,IAEf,gBAAgB,WAAW,MAAK;AAIpC,YAHA,aAAa,UAAU,GACvB,iBAAiB,IAEb,IAAI,WAAW;AACjB,cAAM,MAAM,IAAI,QAAA,kBAAkB,iBAAiB;AACnD,kBAAQ,GAAG;;AAGX,yBAAe,KAAK,IAAI,QAAO,IAAK,IAAI,MAAK;MAEjD,GAAG,eAAe,GAEZ,UAAsD;QAC1D,UAAU,UAAU;QACpB,MAAM,UAAU;QAChB,MAAM,UAAU;QAChB,QAAQ;QACR,SAAO,OAAA,OAAA,EACL,gBAAgB,YAAW,GACxB,UAAU,OAAO;QAEtB,OAAO,UAAU;SAGb,UAAU,UAAU,aAAa,UAAU,KAAK,UAAU,MAAM,SAEhE,gBAAgB,CACpB,UAAU,OAAA,6BACV,WAAW,OAAA,mCACT;AA6EF,gBA5EA,MAAM,QAAQ,SAAS,CAAC,QAA6B;AACnD,cAAI,eAAe;AACnB,cAAI,GAAG,QAAQ,WAAU,gBAAgB,KAAM,GAE/C,IAAI,GAAG,WAAW,MAAK;AACrB,gBAAI,gBAAgB;AAClB,kBAAM,MAAM,IAAI,QAAA,kBAAkB,iBAAiB;AACnD,sBAAQ,GAAG;;UAEf,CAAC,GAED,IAAI,GAAG,OAAO,MAAK;AACjB,gBAAI,mBAAmB;AACrB,kBAAI,IAAI,cAAc,IAAI,aAAa;AACrC,sBAAA,KAAK,MAAM,eAAe,IAAI,UAAU,IAAI,YAAY,GACxD,UAAS,GAET,aAAa,aAAa,GAC1B,aAAa,UAAU;uBAEvB,IAAI,kBACJ,OAAA,mBAAkB,IAAI,UAAU,KAChC,UAAU,GACV;AACA,oBAAI;AACJ,2BAAW,OAAA,oCAAoC,UAG3C,IAAI,QAAQ,aAAa,IAC3B,gBAAY,OAAA,wBAAuB,IAAI,QAAQ,aAAa,CAAE,IAG9D,YAAY,KAAK,MACf,KAAK,OAAM,KAAM,OAAA,6BAA6B,YAC5C,QAAQ,GAId,aAAa,WAAW,MAAK;AAC3B,gCAAc,UAAU,GAAG,QAAQ;gBACrC,GAAG,SAAS;qBACP;AACL,oBAAM,QAAQ,IAAI,QAAA,kBAChB,IAAI,eACJ,IAAI,YACJ,YAAY;AAEd,wBAAQ,KAAK,GAEb,aAAa,aAAa,GAC1B,aAAa,UAAU;;UAG7B,CAAC;QACH,CAAC,GAED,IAAI,GAAG,SAAS,CAAC,UAAsB;AACrC,cAAI,gBAAgB;AAClB,gBAAM,MAAM,IAAI,QAAA,kBAAkB,mBAAmB,MAAM,IAAI;AAC/D,oBAAQ,GAAG;;AAEX,oBAAQ,KAAK;AAEf,uBAAa,aAAa,GAC1B,aAAa,UAAU;QACzB,CAAC,GAED,IAAI,GAAG,SAAS,MAAK;AACnB,cAAI,gBAAgB;AAClB,gBAAM,MAAM,IAAI,QAAA,kBAAkB,iBAAiB;AACnD,oBAAQ,GAAG;;AAEb,uBAAa,aAAa,GAC1B,aAAa,UAAU;QACzB,CAAC,GAEO,UAAU,aAAa;UAC7B,KAAK,QAAA,qBAAqB,MAAM;AAC9B,gBAAI,UAAU,oBAAoB,MAAM,GACrB,mBAAmB,IAAI,EAEvC,GAAG,SAAS,OAAO,EACnB,KAAK,KAAK,WAAU,CAAE,EACtB,GAAG,SAAS,OAAO,EACnB,KAAK,GAAG;AAEX;;UAEF;AACE,gBAAI,IAAI,IAAI;AACZ;;MAEN;AACA,oBAAa;IACf;AA3IA,YAAA,eAAA;AA6IA,aAAS,mBAAmB,MAAqB;AAC/C,UAAM,WAAW,IAAI,SAAA,SAAQ;AAC7B,sBAAS,KAAK,IAAI,GAClB,SAAS,KAAK,IAAI,GAEX;IACT;AAEA,aAAgB,gBACd,QAAkC;AAElC,UAAI,OAAO,oBAAoB,OAAO,cAAc,IAAO;AACzD,cAAA,KAAK,KAAK,sDAAsD;AAChE;;AAGF,UAAI,SAAO,cAAc,MAAS,CAAC,OAAO;AAE1C,YAAI;AAEF,cAAM,QADY,IAAIA,KAAI,IAAI,OAAO,GAAa,EAC1B,aAAa,UAAU,KAAK,QAAQ,MAAM;AAClE,iBAAO,IAAI,MAAK,OAAA,OAAA,EAAG,WAAW,GAAI,GAAK,OAAO,gBAAgB,CAAA;iBACvD,KAAK;AACZ,gBAAA,KAAK,MACH,wDAAwD,IAAI,OAAO,EAAE;AAEvE;;IAEJ;AApBA,YAAA,kBAAA;AAsBA,aAAgB,qBACd,aAA6C;AAE7C,aAAI,qBAIA,OAAA,QAAM,EAAG,6CACT,OAAA,QAAM,EAAG,oCACmB,QAAA,qBAAqB,OAC/C,QAAA,qBAAqB,OACrB,QAAA,qBAAqB;IAE7B;AAbA,YAAA,uBAAA;;;;;;;;;;;ACnMA,QAAA,qBAAA,4BAGA,SAAA,iBACA,SAAA,iBACA,QAAA,eACA,SAAA,gBAKsB,uBAAtB,cAGU,mBAAA,iBAIT;MAMC,YAAY,SAAqC,CAAA,GAAE;AACjD,cAAM,MAAM,GANd,KAAA,kBAA0C,CAAA,GAQnC,OAAe,YAClB,MAAA,KAAK,KAAK,wCAAwC,GAEpD,KAAK,UAAU,OAAO,OACpB,KAAK,qBACL,OAAA,cAAa,OAAO,OAAO,GAC3B,OAAA,aAAa,4BAAwB,OAAA,QAAM,EAAG,0BAA0B,CAAC,GAE3E,KAAK,YAAQ,OAAA,iBAAgB,MAAM,GACnC,KAAK,kBAAc,OAAA,sBAAqB,OAAO,WAAW;MAC5D;MAEA,OAAO,SAAmC;MAAS;MAEnD,KACE,SACA,WACA,SAAqD;AAErD,YAAI,KAAK,cAAc,UAAU;AAC/B,gBAAA,KAAK,MAAM,+CAA+C;AAC1D;;AAEF,YAAM,iBAAiB,KAAK,QAAQ,OAAO,GAErC,UAAU,IAAI,QAAc,CAAC,SAAS,WAAU;AACpD,cAAA,OAAA,cACE,MACA,KAAK,UAAU,cAAc,GAC7B,oBACA,SACA,MAAM;QAEV,CAAC,EAAE,KAAK,WAAW,OAAO;AAE1B,aAAK,iBAAiB,KAAK,OAAO;AAClC,YAAM,aAAa,MAAK;AACtB,cAAM,QAAQ,KAAK,iBAAiB,QAAQ,OAAO;AACnD,eAAK,iBAAiB,OAAO,OAAO,CAAC;QACvC;AACA,gBAAQ,KAAK,YAAY,UAAU;MACrC;MAEA,aAAU;MAAU;;AA3DtB,YAAA,uBAAA;;;;;;;;;;;ACdA,QAAA,yBAAA;AAAS,WAAA,eAAA,SAAA,wBAAA,EAAA,YAAA,IAAA,KAAA,WAAA;AAAA,aAAA,uBAAA;IAAoB,EAAA,CAAA;AAC7B,QAAA,SAAA;AAAS,WAAA,eAAA,SAAA,gBAAA,EAAA,YAAA,IAAA,KAAA,WAAA;AAAA,aAAA,OAAA;IAAY,EAAA,CAAA;AAAE,WAAA,eAAA,SAAA,mBAAA,EAAA,YAAA,IAAA,KAAA,WAAA;AAAA,aAAA,OAAA;IAAe,EAAA,CAAA;AAAE,WAAA,eAAA,SAAA,wBAAA,EAAA,YAAA,IAAA,KAAA,WAAA;AAAA,aAAA,OAAA;IAAoB,EAAA,CAAA;AAC5D,QAAA,UAAA;AAAqC,WAAA,eAAA,SAAA,wBAAA,EAAA,YAAA,IAAA,KAAA,WAAA;AAAA,aAAA,QAAA;IAAoB,EAAA,CAAA;;;;;;;;;;;ACHzD,QAAA,QAAA,eACA,UAAA,mBACA,SAAA;AAiBA,aAAgB,eACd,MACAC,MACA,iBACA,WACA,SAA2C;AAE3C,UAAI,UAAU,WAAWA,MAAK,IAAI,KAAK,CAAC,IAAI,GAAG,eAAe,CAAC;AAC7D,cAAA,KAAK,MAAM,yBAAyB,IAAI,GACxC,UAAS;WACJ;AACL,YAAM,QAAQ,IAAI,QAAA,kBAAkB,4BAA4B,IAAI,EAAE;AACtE,gBAAQ,KAAK;;IAEjB;AAdA,YAAA,iBAAA;AAyBA,aAAgB,YACd,MACAA,MACA,SACA,iBACA,WACA,SAA2C;AAE3C,UAAI,YACA,KACA,iBAAiB,IAEf,gBAAgB,WAAW,MAAK;AAIpC,YAHA,aAAa,UAAU,GACvB,iBAAiB,IAEb,IAAI,eAAe,eAAe,MAAM;AAC1C,cAAM,MAAM,IAAI,QAAA,kBAAkB,iBAAiB;AACnD,kBAAQ,GAAG;;AAEX,cAAI,MAAK;MAEb,GAAG,eAAe,GAEZ,gBAAgB,CACpB,UAAU,OAAA,6BACV,WAAW,OAAA,mCACT;AACF,cAAM,IAAI,eAAc,GACxB,IAAI,KAAK,QAAQA,IAAG,GAOpB,OAAO,QAAO,OAAA,OAAA,OAAA,OAAA,CAAA,GALS;UACrB,QAAQ;UACR,gBAAgB;SAIC,GACd,OAAO,CAAA,EACT,QAAQ,CAAC,CAAC,GAAG,CAAC,MAAK;AACpB,cAAI,iBAAiB,GAAG,CAAC;QAC3B,CAAC,GAED,IAAI,KAAK,IAAI,GAEb,IAAI,qBAAqB,MAAK;AAC5B,cAAI,IAAI,eAAe,eAAe,QAAQ,mBAAmB;AAC/D,gBAAI,IAAI,UAAU,OAAO,IAAI,UAAU;AACrC,oBAAA,KAAK,MAAM,eAAe,IAAI,GAC9B,UAAS,GACT,aAAa,aAAa,GAC1B,aAAa,UAAU;qBACd,IAAI,cAAU,OAAA,mBAAkB,IAAI,MAAM,KAAK,UAAU,GAAG;AACrE,kBAAI;AACJ,yBAAW,OAAA,oCAAoC,UAG3C,IAAI,kBAAkB,aAAa,IACrC,gBAAY,OAAA,wBACV,IAAI,kBAAkB,aAAa,CAAE,IAIvC,YAAY,KAAK,MACf,KAAK,OAAM,KAAM,OAAA,6BAA6B,YAAY,QAAQ,GAItE,aAAa,WAAW,MAAK;AAC3B,8BAAc,UAAU,GAAG,QAAQ;cACrC,GAAG,SAAS;mBACP;AACL,kBAAM,QAAQ,IAAI,QAAA,kBAChB,sCAAsC,IAAI,MAAM,KAChD,IAAI,MAAM;AAEZ,sBAAQ,KAAK,GACb,aAAa,aAAa,GAC1B,aAAa,UAAU;;QAG7B,GAEA,IAAI,UAAU,MAAK;AACjB,cAAI,gBAAgB;AAClB,gBAAM,MAAM,IAAI,QAAA,kBAAkB,iBAAiB;AACnD,oBAAQ,GAAG;;AAEb,uBAAa,aAAa,GAC1B,aAAa,UAAU;QACzB,GAEA,IAAI,UAAU,MAAK;AACjB,cAAI,gBAAgB;AAClB,gBAAM,MAAM,IAAI,QAAA,kBAAkB,iBAAiB;AACnD,oBAAQ,GAAG;;AAEb,uBAAa,aAAa,GAC1B,aAAa,UAAU;QACzB;MACF;AAEA,oBAAa;IACf;AAvGA,YAAA,cAAA;;;;;;;;;;;AC3CA,QAAA,qBAAA,4BAGA,SAAA,iBACA,SAAA,iBACA,QAAA,eACA,SAAA,gBAKsB,0BAAtB,cAGU,mBAAA,iBAAoE;;;;MAO5E,YAAY,SAAiC,CAAA,GAAE;AAC7C,cAAM,MAAM,GANN,KAAA,UAAmB,IAOzB,KAAK,UACH,CAAC,CAAC,OAAO,WAAW,OAAO,UAAU,cAAe,YAClD,KAAK,UACP,KAAK,WAAW,OAAO,OACrB,CAAA,OACA,OAAA,cAAa,OAAO,OAAO,GAC3B,OAAA,aAAa,4BACX,OAAA,QAAM,EAAG,0BAA0B,CACpC,IAGH,KAAK,WAAW,CAAA;MAEpB;MAEA,SAAM;AACJ,eAAO,iBAAiB,UAAU,KAAK,QAAQ;MACjD;MAEA,aAAU;AACR,eAAO,oBAAoB,UAAU,KAAK,QAAQ;MACpD;MAEA,KACE,OACA,WACA,SAAqD;AAErD,YAAI,KAAK,cAAc,UAAU;AAC/B,gBAAA,KAAK,MAAM,+CAA+C;AAC1D;;AAEF,YAAM,iBAAiB,KAAK,QAAQ,KAAK,GACnC,OAAO,KAAK,UAAU,cAAc,GAEpC,UAAU,IAAI,QAAc,CAAC,SAAS,WAAU;AACpD,UAAI,KAAK,cACP,OAAA,aACE,MACA,KAAK,KACL,KAAK,UACL,KAAK,eACL,SACA,MAAM,QAGR,OAAA,gBACE,MACA,KAAK,KACL,EAAE,MAAM,mBAAkB,GAC1B,SACA,MAAM;QAGZ,CAAC,EAAE,KAAK,WAAW,OAAO;AAE1B,aAAK,iBAAiB,KAAK,OAAO;AAClC,YAAM,aAAa,MAAK;AACtB,cAAM,QAAQ,KAAK,iBAAiB,QAAQ,OAAO;AACnD,eAAK,iBAAiB,OAAO,OAAO,CAAC;QACvC;AACA,gBAAQ,KAAK,YAAY,UAAU;MACrC;;AA1EF,YAAA,0BAAA;;;;;;;;;;;ACXA,QAAA,4BAAA;AAAS,WAAA,eAAA,SAAA,2BAAA,EAAA,YAAA,IAAA,KAAA,WAAA;AAAA,aAAA,0BAAA;IAAuB,EAAA,CAAA;AAChC,QAAA,SAAA;AAAS,WAAA,eAAA,SAAA,eAAA,EAAA,YAAA,IAAA,KAAA,WAAA;AAAA,aAAA,OAAA;IAAW,EAAA,CAAA;;;;;;;;;;;ACDpB,QAAA,SAAA;AACE,WAAA,eAAA,SAAA,wBAAA,EAAA,YAAA,IAAA,KAAA,WAAA;AAAA,aAAA,OAAA;IAAoB,EAAA,CAAA;AACpB,WAAA,eAAA,SAAA,gBAAA,EAAA,YAAA,IAAA,KAAA,WAAA;AAAA,aAAA,OAAA;IAAY,EAAA,CAAA;AACZ,WAAA,eAAA,SAAA,mBAAA,EAAA,YAAA,IAAA,KAAA,WAAA;AAAA,aAAA,OAAA;IAAe,EAAA,CAAA;AACf,WAAA,eAAA,SAAA,wBAAA,EAAA,YAAA,IAAA,KAAA,WAAA;AAAA,aAAA,OAAA;IAAoB,EAAA,CAAA;AAEpB,WAAA,eAAA,SAAA,wBAAA,EAAA,YAAA,IAAA,KAAA,WAAA;AAAA,aAAA,OAAA;IAAoB,EAAA,CAAA;AAEtB,QAAA,YAAA;AAAS,WAAA,eAAA,SAAA,2BAAA,EAAA,YAAA,IAAA,KAAA,WAAA;AAAA,aAAA,UAAA;IAAuB,EAAA,CAAA;AAAE,WAAA,eAAA,SAAA,eAAA,EAAA,YAAA,IAAA,KAAA,WAAA;AAAA,aAAA,UAAA;IAAW,EAAA,CAAA;;;;;;;;;;;;;;;;;;;;;ACT7C,iBAAA,qBAAA,OAAA;AACA,QAAA,qBAAA;AAAS,WAAA,eAAA,SAAA,oBAAA,EAAA,YAAA,IAAA,KAAA,WAAA;AAAA,aAAA,mBAAA;IAAgB,EAAA,CAAA;AACzB,QAAA,UAAA;AACE,WAAA,eAAA,SAAA,qBAAA,EAAA,YAAA,IAAA,KAAA,WAAA;AAAA,aAAA,QAAA;IAAiB,EAAA,CAAA;AAInB,QAAA,SAAA;AACE,WAAA,eAAA,SAAA,gBAAA,EAAA,YAAA,IAAA,KAAA,WAAA;AAAA,aAAA,OAAA;IAAY,EAAA,CAAA;AACZ,WAAA,eAAA,SAAA,2BAAA,EAAA,YAAA,IAAA,KAAA,WAAA;AAAA,aAAA,OAAA;IAAuB,EAAA,CAAA;AACvB,WAAA,eAAA,SAAA,+BAAA,EAAA,YAAA,IAAA,KAAA,WAAA;AAAA,aAAA,OAAA;IAA2B,EAAA,CAAA;AAC3B,WAAA,eAAA,SAAA,4BAAA,EAAA,YAAA,IAAA,KAAA,WAAA;AAAA,aAAA,OAAA;IAAwB,EAAA,CAAA;AACxB,WAAA,eAAA,SAAA,kBAAA,EAAA,YAAA,IAAA,KAAA,WAAA;AAAA,aAAA,OAAA;IAAc,EAAA,CAAA;;;;;;;;;;;;;;AC3BhB,IAAAC,kBAAA;AAAA;AAAA;AAAA;AACA,WAAO,eAAe,SAAS,cAAc,EAAE,OAAO,GAAK,CAAC;AAAA;AAAA;;;;;;;;;;;;;;;;;;ACiH5D,QAAY;AAAZ,KAAA,SAAYC,YAAS;AAEnB,MAAAA,WAAAA,WAAA,wBAAA,CAAA,IAAA,yBAKAA,WAAAA,WAAA,qBAAA,CAAA,IAAA,sBAKAA,WAAAA,WAAA,mBAAA,CAAA,IAAA,oBAIAA,WAAAA,WAAA,mBAAA,CAAA,IAAA,oBAOAA,WAAAA,WAAA,qBAAA,CAAA,IAAA,sBAMAA,WAAAA,WAAA,qBAAA,CAAA,IAAA;IACF,GA9BY,YAAA,QAAA,cAAA,QAAA,YAAS,CAAA,EAAA;;;;;;;;;;;;;;;;;;;;AChGrB,aAAgB,aAAa,YAAsB;AACjD,aAAO,OAAO,KAAK,UAAU,EAAE,IAAI,SAAO,WAAW,KAAK,WAAW,GAAG,CAAC,CAAC;IAC5E;AAFA,YAAA,eAAA;AAIA,aAAgB,WAAW,KAAa,OAAc;AACpD,aAAO;QACL;QACA,OAAO,WAAW,KAAK;;IAE3B;AALA,YAAA,aAAA;AAOA,aAAgB,WAAW,OAAc;AACvC,UAAM,IAAI,OAAO;AACjB,aAAI,MAAM,WAAiB,EAAE,aAAa,MAAe,IACrD,MAAM,WACH,OAAO,UAAU,KAAK,IACpB,EAAE,UAAU,MAAe,IADG,EAAE,aAAa,MAAe,IAGjE,MAAM,YAAkB,EAAE,WAAW,MAAgB,IACrD,iBAAiB,aAAmB,EAAE,YAAY,MAAK,IACvD,MAAM,QAAQ,KAAK,IACd,EAAE,YAAY,EAAE,QAAQ,MAAM,IAAI,UAAU,EAAC,EAAE,IACpD,MAAM,YAAY,SAAS,OACtB;QACL,aAAa;UACX,QAAQ,OAAO,QAAQ,KAAe,EAAE,IAAI,CAAC,CAAC,GAAG,CAAC,MAChD,WAAW,GAAG,CAAC,CAAC;;UAKjB,CAAA;IACT;AArBA,YAAA,aAAA;;;;;;;;;;;ACbA,QAAA,SAAA,gBAEA,aAAA,oBAEA,OAAA;AAEA,aAAgB,kBAAkB,MAAoB,QAAgB;;AACpE,UAAM,MAAM,KAAK,YAAW,GACtB,SAAS,KAAK,QACd,eAAe,SACjB,KAAK,eACL,KAAK,gBAAgB,OACrB,KAAK,YAAY,KAAK,YAAY,IAClC;AACJ,aAAO;QACL,SAAS,SAAS,IAAI,UAAU,KAAK,YAAY,IAAI,OAAO;QAC5D,QAAQ,SAAS,IAAI,SAAS,KAAK,YAAY,IAAI,MAAM;QACzD;QACA,aAAY,KAAA,IAAI,gBAAU,QAAA,OAAA,SAAA,SAAA,GAAE,UAAS;QACrC,MAAM,KAAK;;QAEX,MAAM,KAAK,QAAQ,OAAO,IAAI,KAAK,OAAO;QAC1C,uBAAmB,OAAA,qBAAoB,KAAK,SAAS;QACrD,qBAAiB,OAAA,qBAAoB,KAAK,OAAO;QACjD,gBAAY,WAAA,cAAa,KAAK,UAAU;QACxC,wBAAwB,KAAK;QAC7B,QAAQ,KAAK,OAAO,IAAI,eAAe;QACvC,oBAAoB,KAAK;QACzB,QAAQ;;UAEN,MAAM,OAAO;UACb,SAAS,OAAO;;QAElB,OAAO,KAAK,MAAM,IAAI,UAAQ,WAAW,MAAM,MAAM,CAAC;QACtD,mBAAmB,KAAK;;IAE5B;AA9BA,YAAA,oBAAA;AAgCA,aAAgB,WAAW,MAAY,QAAgB;;AACrD,aAAO;QACL,YAAY,KAAK,iBAAa,WAAA,cAAa,KAAK,UAAU,IAAI,CAAA;QAC9D,QAAQ,SACJ,KAAK,QAAQ,SACb,KAAK,YAAY,KAAK,QAAQ,MAAM;QACxC,SAAS,SACL,KAAK,QAAQ,UACb,KAAK,YAAY,KAAK,QAAQ,OAAO;QACzC,aAAY,KAAA,KAAK,QAAQ,gBAAU,QAAA,OAAA,SAAA,SAAA,GAAE,UAAS;QAC9C,wBAAwB,KAAK,0BAA0B;;IAE3D;AAZA,YAAA,aAAA;AAcA,aAAgB,gBAAgB,YAAsB;AACpD,aAAO;QACL,YAAY,WAAW,iBACnB,WAAA,cAAa,WAAW,UAAU,IAClC,CAAA;QACJ,MAAM,WAAW;QACjB,kBAAc,OAAA,qBAAoB,WAAW,IAAI;QACjD,wBAAwB,WAAW,0BAA0B;;IAEjE;AATA,YAAA,kBAAA;;;;;;;;;;;ACnDA,QAAA,aAAA,oBACA,aAAA;AAOA,aAAgB,gCACd,OACA,QAAgB;AAEhB,aAAO;QACL,eAAe,2BAA2B,OAAO,MAAM;;IAE3D;AAPA,YAAA,kCAAA;AASA,aAAS,kBAAkB,eAA6B;AACtD,UAAM,cAA2D,oBAAI,IAAG;AACxE,eAAW,UAAU,eAAe;AAClC,YAAI,SAAS,YAAY,IAAI,OAAO,QAAQ;AAE5C,QAAK,WACH,SAAS,oBAAI,IAAG,GAChB,YAAY,IAAI,OAAO,UAAU,MAAM;AAIzC,YAAM,4BAA4B,GAAG,OAAO,uBAAuB,IAAI,IACrE,OAAO,uBAAuB,WAAW,EAC3C,IAAI,OAAO,uBAAuB,aAAa,EAAE,IAC7C,UAAU,OAAO,IAAI,yBAAyB;AAElD,QAAK,YACH,UAAU,CAAA,GACV,OAAO,IAAI,2BAA2B,OAAO,IAG/C,QAAQ,KAAK,MAAM;;AAGrB,aAAO;IACT;AAEA,aAAS,2BACP,eACA,QAAgB;AAEhB,UAAM,cAAc,kBAAkB,aAAa,GAC7C,MAAwB,CAAA,GAExB,gBAAgB,YAAY,QAAO,GACrC,QAAQ,cAAc,KAAI;AAC9B,aAAO,CAAC,MAAM,QAAM;AAClB,YAAM,CAAC,UAAU,MAAM,IAAI,MAAM,OAC3B,qBAAoC,CAAA,GACpC,cAAc,OAAO,OAAM,GAC7B,WAAW,YAAY,KAAI;AAC/B,eAAO,CAAC,SAAS,QAAM;AACrB,cAAM,aAAa,SAAS;AAC5B,cAAI,WAAW,SAAS,GAAG;AACzB,gBAAM,EAAE,MAAM,SAAS,UAAS,IAC9B,WAAW,CAAC,EAAE,wBACV,QAAQ,WAAW,IAAI,sBAC3B,WAAA,mBAAkB,cAAc,MAAM,CAAC;AAGzC,+BAAmB,KAAK;cACtB,OAAO,EAAE,MAAM,QAAO;cACtB;cACA;aACD;;AAEH,qBAAW,YAAY,KAAI;;AAG7B,YAAM,mBAAmC;UACvC,UAAU;YACR,gBAAY,WAAA,cAAa,SAAS,UAAU;YAC5C,wBAAwB;;UAE1B,YAAY;UACZ,WAAW;;AAGb,YAAI,KAAK,gBAAgB,GACzB,QAAQ,cAAc,KAAI;;AAG5B,aAAO;IACT;;;;;;;;;;;AC5FA,QAAA,QAAA,eACA,SAAA,gBACA,gBAAA,gBAUA,aAAA;AAWA,aAAgB,kBACd,iBAAgC;AAEhC,aAAO;QACL,UAAU;UACR,gBAAY,WAAA,cAAa,gBAAgB,SAAS,UAAU;UAC5D,wBAAwB;;QAE1B,WAAW;QACX,cAAc,eAAe,gBAAgB,YAAY;;IAE7D;AAXA,YAAA,oBAAA;AAaA,aAAgB,eAAe,cAA4B;AACzD,aAAO,MAAM,KACX,aAAa,IAAI,cAAY;QAC3B,OAAO;UACL,MAAM,QAAQ,MAAM;UACpB,SAAS,QAAQ,MAAM;;QAEzB,SAAS,QAAQ,QAAQ,IAAI,gBAAc,SAAS,UAAU,CAAC;QAC/D,WAAW,QAAQ,MAAM;QACzB,CAAC;IAEP;AAXA,YAAA,iBAAA;AAaA,aAAgB,SAAS,YAAsB;AAC7C,UAAM,MAAe;QACnB,MAAM,WAAW,WAAW;QAC5B,aAAa,WAAW,WAAW;QACnC,MAAM,WAAW,WAAW;SAGxB,yBAAyB,yBAC7B,WAAW,sBAAsB;AAGnC,cAAQ,WAAW,eAAe;QAChC,KAAK,cAAA,cAAc;AACjB,cAAI,MAAM;YACR;YACA,aAAa,WAAW;YACxB,YAAY,qBAAqB,UAAU;;AAE7C;QACF,KAAK,cAAA,cAAc;AACjB,cAAI,QAAQ;YACV,YAAY,qBAAqB,UAAU;;AAE7C;QACF,KAAK,cAAA,cAAc;AACjB,cAAI,YAAY;YACd;YACA,YAAY,sBAAsB,UAAU;;AAE9C;QACF,KAAK,cAAA,cAAc;AACjB,cAAI,uBAAuB;YACzB;YACA,YAAY,iCAAiC,UAAU;;AAEzD;;AAGJ,aAAO;IACT;AAvCA,YAAA,WAAA;AAyCA,aAAS,oBACP,WAIA,WAAoB;AAEpB,UAAM,MAAwB;QAC5B,gBAAY,WAAA,cAAa,UAAU,UAAU;QAC7C,uBAAmB,OAAA,qBAAoB,UAAU,SAAS;QAC1D,kBAAc,OAAA,qBAAoB,UAAU,OAAO;;AAGrD,cAAQ,WAAW;QACjB,KAAK,MAAA,UAAU;AACb,cAAI,QAAQ,UAAU;AACtB;QACF,KAAK,MAAA,UAAU;AACb,cAAI,WAAW,UAAU;AACzB;;AAGJ,aAAO;IACT;AAEA,aAAS,qBAAqB,YAAsB;AAClD,aAAO,WAAW,WAAW,IAAI,eACxB,oBAAoB,WAAW,WAAW,WAAW,SAAS,CACtE;IACH;AAEA,aAAS,sBAAsB,YAAsB;AACnD,aAAO,WAAW,WAAW,IAAI,eAAY;AAC3C,YAAM,YAAY,UAAU;AAC5B,eAAO;UACL,gBAAY,WAAA,cAAa,UAAU,UAAU;UAC7C,cAAc,UAAU,QAAQ;UAChC,gBAAgB,UAAU,QAAQ;UAClC,OAAO,UAAU;UACjB,KAAK,UAAU;UACf,KAAK,UAAU;UACf,KAAK,UAAU;UACf,uBAAmB,OAAA,qBAAoB,UAAU,SAAS;UAC1D,kBAAc,OAAA,qBAAoB,UAAU,OAAO;;MAEvD,CAAC;IACH;AAEA,aAAS,iCACP,YAAsB;AAEtB,aAAO,WAAW,WAAW,IAAI,eAAY;AAC3C,YAAM,YAAY,UAAU;AAC5B,eAAO;UACL,gBAAY,WAAA,cAAa,UAAU,UAAU;UAC7C,OAAO,UAAU;UACjB,KAAK,UAAU;UACf,KAAK,UAAU;UACf,KAAK,UAAU;UACf,UAAU;YACR,QAAQ,UAAU,SAAS;YAC3B,cAAc,UAAU,SAAS;;UAEnC,UAAU;YACR,QAAQ,UAAU,SAAS;YAC3B,cAAc,UAAU,SAAS;;UAEnC,OAAO,UAAU;UACjB,WAAW,UAAU;UACrB,uBAAmB,OAAA,qBAAoB,UAAU,SAAS;UAC1D,kBAAc,OAAA,qBAAoB,UAAU,OAAO;;MAEvD,CAAC;IACH;AAEA,aAAS,yBACP,aAAmC;AAEnC,cAAQ,aAAa;QACnB,KAAK,cAAA,uBAAuB;AAC1B,iBAAA;QACF,KAAK,cAAA,uBAAuB;AAC1B,iBAAA;;IAEN;;;;;;;;;;;AC5KA,QAAA,aAAA;AAEA,aAAgB,kCACd,iBAAkC;AAElC,aAAO;QACL,iBAAiB,gBAAgB,IAAI,iBAAW,WAAA,mBAAkB,OAAO,CAAC;;IAE9E;AANA,YAAA,oCAAA;;;;;;;;;;;ACKA,QAAA,aAAA,oBACA,SAAA;AAKA,aAAgB,+BACd,YACA,QAAgB;AAEhB,aAAO;QACL,cAAc,yBAAyB,YAAY,MAAM;;IAE7D;AAPA,YAAA,iCAAA;AASA,aAAS,kBACP,YAA+B;AAE/B,UAAM,cAGF,oBAAI,IAAG;AAEX,eAAW,UAAU,YAAY;AAC/B,YAAM,EACJ,UACA,sBAAsB,EAAE,MAAM,UAAU,IAAI,YAAY,GAAE,EAAE,IAC1D,QAEA,SAAS,YAAY,IAAI,QAAQ;AACrC,QAAK,WACH,SAAS,oBAAI,IAAG,GAChB,YAAY,IAAI,UAAU,MAAM;AAGlC,YAAM,SAAS,GAAG,IAAI,IAAI,OAAO,IAAI,SAAS,IAC1C,UAAU,OAAO,IAAI,MAAM;AAC/B,QAAK,YACH,UAAU,CAAA,GACV,OAAO,IAAI,QAAQ,OAAO,IAE5B,QAAQ,KAAK,MAAM;;AAErB,aAAO;IACT;AAEA,aAAS,yBACP,YACA,QAAgB;AAEhB,UAAM,cAAc,kBAAkB,UAAU;AAChD,aAAO,MAAM,KAAK,aAAa,CAAC,CAAC,UAAU,MAAM,OAAO;QACtD,UAAU;UACR,gBAAY,WAAA,cAAa,SAAS,UAAU;UAC5C,wBAAwB;;QAE1B,WAAW,MAAM,KAAK,QAAQ,CAAC,CAAC,EAAE,SAAS,MAAK;AAC9C,cAAM,EACJ,sBAAsB,EAAE,MAAM,SAAS,UAAS,EAAE,IAChD,UAAU,CAAC;AACf,iBAAO;YACL,OAAO,EAAE,MAAM,QAAO;YACtB,YAAY,UAAU,IAAI,SAAO,YAAY,KAAK,MAAM,CAAC;YACzD;;QAEJ,CAAC;QACD,WAAW;QACX;IACJ;AAEA,aAAS,YAAY,KAAwB,QAAgB;;AAC3D,aAAO;QACL,kBAAc,OAAA,qBAAoB,IAAI,MAAM;QAC5C,0BAAsB,OAAA,qBAAoB,IAAI,cAAc;QAC5D,gBAAiC,IAAI;QACrC,cAAc,IAAI;QAClB,UAAM,WAAA,YAAW,IAAI,IAAI;QACzB,YAAY,gBAAgB,IAAI,UAAU;QAC1C,wBAAwB;QACxB,QAAO,KAAA,IAAI,iBAAW,QAAA,OAAA,SAAA,SAAA,GAAE;QACxB,SAAS,UACL,KAAA,IAAI,iBAAW,QAAA,OAAA,SAAA,SAAA,GAAE,UACjB,qBAAoB,KAAA,IAAI,iBAAW,QAAA,OAAA,SAAA,SAAA,GAAE,OAAO;QAChD,QAAQ,UACJ,KAAA,IAAI,iBAAW,QAAA,OAAA,SAAA,SAAA,GAAE,SACjB,qBAAoB,KAAA,IAAI,iBAAW,QAAA,OAAA,SAAA,SAAA,GAAE,MAAM;;IAEnD;AAQA,aAAS,oBAAoB,KAAuB;AAClD,UAAI,QAAQ;AACZ,mBAAO,OAAA,aAAY,GAAG;IACxB;AAEA,aAAgB,gBAAgB,YAAyB;AACvD,aAAO,OAAO,KAAK,UAAU,EAAE,IAAI,aAAO,WAAA,YAAW,KAAK,WAAW,GAAG,CAAC,CAAC;IAC5E;AAFA,YAAA,kBAAA;;;;;;;;;;;;;;;;;;;;;AC5GA,iBAAA,mBAAA,OAAA;AACA,iBAAA,mBAAA,OAAA;AACA,iBAAA,mBAAA,OAAA;AACA,iBAAA,mBAAA,OAAA;AACA,iBAAA,mBAAA,OAAA;AAEA,QAAA,UAAA;AAAS,WAAA,eAAA,SAAA,mCAAA,EAAA,YAAA,IAAA,KAAA,WAAA;AAAA,aAAA,QAAA;IAA+B,EAAA,CAAA;AACxC,QAAA,YAAA;AAAS,WAAA,eAAA,SAAA,qCAAA,EAAA,YAAA,IAAA,KAAA,WAAA;AAAA,aAAA,UAAA;IAAiC,EAAA,CAAA;AAC1C,QAAA,SAAA;AAAS,WAAA,eAAA,SAAA,kCAAA,EAAA,YAAA,IAAA,KAAA,WAAA;AAAA,aAAA,OAAA;IAA8B,EAAA,CAAA;;;;;;;;;;;ACP1B,YAAA,UAAU;;;;;;;;;;;ACAvB,QAAA,SAAA,gBAEA,2BAAA,kCACA,uBAAA,iBAMA,qBAAA,iBAIA,YAAA,oBAEM,kCAAkC,cAClC,wBAAwB,yBAAyB,+BAA+B,IAChF,aAAa;MACjB,cAAc,iCAAiC,UAAA,OAAO;OAGlD,wBAAN,cAAoC,qBAAA,qBAGnC;MACC,YAAY,QAA+D;AACzE,cAAM,MAAM,GACZ,KAAK,UAAO,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,CAAA,GACP,KAAK,OAAO,GACZ,UAAU,GACV,OAAA,aAAa,4BACd,OAAA,QAAM,EAAG,kCAAkC,CAC5C;MAEL;MAEA,QAAQ,SAA0B;AAChC,mBAAO,mBAAA,mCAAkC,OAAO;MAClD;MAEA,cAAc,QAAkC;AAC9C,eAAO,OAAO,OAAO,OAAQ,WACzB,OAAO,UACP,OAAA,QAAM,EAAG,oCAAoC,SAAS,QACtD,qBAAA,iCACE,OAAA,QAAM,EAAG,mCAAmC,QAE9C,OAAA,QAAM,EAAG,4BAA4B,SAAS,QAC9C,qBAAA,6BACE,OAAA,QAAM,EAAG,6BACT,+BAA+B,IAEjC;MACN;OAMWC,sBAAb,cAAwC,yBAAA,uBAA6C;MACnF,YAAY,QAA+D;AACzE,cAAM,IAAI,sBAAsB,MAAM,GAAG,MAAM;MACjD;;AAHF,YAAA,qBAAAA;;;;;;;;;;;;;;;;;;;;AC5DA,iBAAA,8BAAA,OAAA;;;;;;;;;;;;;;;;;;;;ACAA,iBAAA,iBAAA,OAAA;;;;;;;;;;;;;;;;;;;;ACAA,iBAAA,qBAAA,OAAA;AACA,iBAAA,qCAAA,OAAA;AACA,iBAAA,kCAAA,OAAA;;;;;AChBA;AAiBA,eAAsB,YACpB,QACA,OACA,SACA,SAAgB;AAEhB,MAAM,MAAM,MAAM,OAAO,QAAQ,OAAO,SAAS,OAAO;AAExD,SAAO,OAAO,YAAY,IAAI,UAAU,IAAI,CAAC,EAAC,QAAQ,OAAM,MAAM,CAAC,OAAO,MAAM,MAAM,CAAC,CAAC;AAC1F;AAmDA,eAAsB,uBAAuB,QAAc;AACzD,MAAM,QAAQ,MAAM,YAAY,QAAQ,mBAAmB,CAAA,CAAE,GACvD,QAAQ,2BAA2B,OAAO,OAAO,KAAK,EAAE,IAAI,CAAC,QAAQ,KAAK,IAAI,CAAC;AACrF,SAAI,2BAA2B,KAAK,IAAU,EAAC,SAAS,OAAO,OAAO,gCAA+B,IAC9F,EAAC,SAAS,MAAK;AACxB;;;ACpFA;;;ACAA;AAOA,IAAM,MAAM,mDAKC,yBAAyB,yBA+JhC,wBAAwB,oBAAI,IAAG;AAUrC,eAAsB,qBACpB,UACA,YACA,eAAoC;AAGpC,MAAM,cAAc,WAAW;AAC/B,MAAI,eAAe,OAAO,eAAgB,UAAU;AAClD,QAAI,sBAAsB,IAAI,WAAW;AACvC,aAAO,EAAC,MAAM,KAAI;AAEpB,0BAAsB,IAAI,WAAW;;AAGvC,MAAI;AACF,QAAM,eAAc,oBAAI,KAAI,GAAG,QAAO,GAChC,UAAU,EAAC,GAAG,YAAY,GAAG,cAAa,GAC1C,OAAO,KAAK,UAAU,EAAC,WAAW,UAAU,QAAO,CAAC,GACpD,UAAU,aAAa,WAAW,GAElC,WAAW,MAAM,MAAM,KAAK,EAAC,QAAQ,QAAQ,MAAM,QAAO,CAAC;AAEjE,WAAI,SAAS,WAAW,OACtB,YAAY,sCAAsC,YAAY,KAAK,gBAAgB,OAAO,CAAC,CAAC,EAAE,GACvF,EAAC,MAAM,KAAI,MAElB,YAAY,qCAAqC,SAAS,UAAU,EAAE,GAC/D,EAAC,MAAM,SAAS,SAAS,SAAS,WAAU;WAG9C,OAAO;AACd,QAAI,UAAU;AACd,WAAI,iBAAiB,UACnB,UAAU,QAAQ,OAAO,KAAK,MAAM,OAAO,EAAE,IAE/C,YAAY,OAAO,GACZ,EAAC,MAAM,SAAS,QAAO;;AAElC;AAQA,SAAS,gBAAkC,SAAU;AACnD,MAAM,SAAS,EAAC,GAAG,QAAO;AAC1B,SAAI,aAAa,WACf,OAAO,UAAU,SAGZ;AACT;AAEA,IAAM,eAAe,CAAC,iBACb;EACL,gBAAgB;EAChB,uCAAuC,YAAY,SAAQ;EAC3D,oCAAoC,YAAY,SAAQ;;;;AChP5D;;;AC8BA;AAAA,IAAY;CAAZ,SAAYC,uBAAoB;AAC9B,EAAAA,sBAAA,YAAA,aACAA,sBAAA,UAAA,WACAA,sBAAA,gBAAA;AACF,GAJY,yBAAA,uBAAoB,CAAA,EAAA;;;AC9BhC;;;ACAA;;;ACCA;yBAA2B,4BAC3B,cAA+B,4BAC/B,aAAmB;;;ACInB;AAAM,SAAU,SACd,MACA,MACA,EAAC,UAAU,IAAM,WAAW,GAAI,IAAqB,CAAA,GAAE;AAEvD,MAAI,UACA,QACA,SACA,UAAgD,MAChD,WAAW;AAEf,WAAS,QAAK;AACZ,eAAW,YAAY,KAAQ,IAAI,KAAK,IAAG,GAC3C,UAAU,MACN,aACF,SAAS,KAAK,MAAM,SAAS,QAAQ,IAEvC,UAAU,MACV,WAAW;EACb;AAEA,SAAO,YAAwB,MAAmB;AAChD,QAAM,MAAM,KAAK,IAAG;AACpB,IAAI,CAAC,YAAY,YAAY,OAAO,WAAW;AAE/C,QAAM,YAAY,QAAQ,MAAM;AAEhC,qBAAU,MACV,WAAW,MACP,aAAa,KAAK,YAAY,QAC5B,YACF,aAAa,OAAO,GACpB,UAAU,OAEZ,WAAW,KACP,aACF,SAAS,KAAK,MAAM,SAAS,QAAQ,IAEvC,UAAU,MACV,WAAW,QACF,CAAC,WAAW,aAAa,OAClC,UAAU,WAAW,OAAO,SAAS,IAEhC;EACT;AACF;;;ADjCM,IAAO,4BAAP,cAAyC,gCAAY;EAGzD,YAAY,EAAC,UAAU,cAAa,GAAmC;AACrE,UAAM;MACJ,qBAAqB,SAAS,mBAAmB,KAAK,QAAQ;MAC9D,gCAAgC,SAAS,8BAA8B,KAAK,QAAQ;KACrF,GACD,KAAK,YAAY,UAEjB,KAAK,eAAe;;MAElB,KAAK;MACL;IAAa;EAEjB;EAEU,MAAM,eAAY;AAC1B,QAAM,EAAC,iBAAiB,OAAM,IAAI,MAAM,KAAK,QAAQ,CAAA,CAAE;AAEvD,WAAI,OAAO,SAAS,KAClB,gBAAK,MAAM,4DAA4D,GAAG,MAAM,GAG3E,IAAI,QAAQ,CAAC,SAAS,WAAU;AACrC,WAAK,UAAU,OAAO,iBAAiB,CAAC,WAAU;AAChD,QAAI,OAAO,SAAS,6BAAiB,UACnC,QAAO,IAEP,OAAO,OAAO,SAAS,IAAI,MAAM,2DAA2D,OAAO,KAAK,GAAG,CAAC;MAEhH,CAAC;IACH,CAAC;EACH;EAEU,MAAM,aAAU;AACxB,UAAM,KAAK,UAAU,SAAQ;EAC/B;;;;ADvDF,wCAA4D,6BAC5D,mBAAuB,4BACvBC,sBAA2E,4BAC3E,8BAAyC,4BAa5B,uBAAP,cAAoC,kCAAa;EACrD,YAAY,EAAC,aAAa,KAAK,eAAe,QAAQ,aAAY,GAA8B;AAC9F,UAAM;MACJ,UAAU,IAAI,0BAAS;QACrB,CAAC,uDAA2B,YAAY,GAAG;OAC5C;KACF;AAED,QAAM,OAAkC;;;MAGtC,KAAK;MACL,uBAAuB,2CAAuB;;AAGhD,IAAI,WACF,KAAK,UAAU,CAAA;AAGjB,QAAM,WAAW,IAAI,qDAAmB,IAAI;AAE5C,SAAK,gBACH,IAAI,0BAA0B;MAC5B;MACA;KACD,CAAC,GAIA,QAAQ,SACV,KAAK,gBACH,IAAI,0BAA0B;MAC5B,UAAU,IAAI,0CAAqB;MACnC;KACD,CAAC;EAGR;;;;AGpDF;IAAAC,sBAAuD;;;ACFvD;IAAAC,cAAmB,2BAEb,mBAAmB,IAAI,OAAO,0BAA0B;AAExD,SAAU,kBAAkB,OAAa;AAC7C,SAAI,iBAAiB,KAAK,KAAK,KAC7B,iBAAK,KACH,eAAe,KAAK;kGAEpB,WAAW,GAEN,MAGF;AACT;;;ADAA,IAAM,uBAAuB,gCA8BhB,kBAAP,MAAsB;;;;EAW1B,YAAY,EAAC,aAAa,eAAe,IAAO,UAAU,CAAA,GAAI,UAAU,cAAa,GAAyB;AAC5G,QAPiB,KAAA,UAA6C,oBAAI,IAAG,GACpD,KAAA,kBAAkB,oBAAI,IAAG,GAMtC,CAAC;AACH,YAAM,IAAI,MAAM,2BAA2B;AAO7C,QALA,KAAK,cAAc,aAEnB,KAAK,eAAe,cAChB,YAAU,KAAK,YAAY,QAAQ,GAEnC,CAAC;AACH,YAAM,IAAI,MAAM,4BAA4B;AAE9C,SAAK,gBAAgB,eAErB,KAAK,SAAS,OAAO;EACvB;EAEA,mBAAgB;AACd,WAAO,KAAK;EACd;EAEA,QAAQ,aAAwB;AAG5B,SAAK,cAAsB,cAAc,cAAc,UAAU,IAAI,yBAAK,WAAW,CAAC;EAC1F;EAEA,OAAO,YAAoB,OAAe,QAAyB;AACjE,QAAM,eAAe,KAAK,QAAQ,IAAI,UAAU;AAChD,QAAI,CAAC;AACH,YAAM,IAAI,MACR,WAAW,KAAK,WAAW,wCAAwC,UAAU,0CAA0C;AAG3H,iBAAa,OAAO,MAAM;EAC5B;EAEA,eAAe,YAAoB,EAAC,MAAM,GAAG,QAAO,GAAmB;AACrE,QAAI,KAAK,QAAQ,IAAI,UAAU;AAC7B;AAEF,QAAM,QAAQ,KAAK,cAAc,SAAS,oBAAoB,GACxD,OAAO,KAAK,eAAe,GAAG,KAAK,WAAW,IAAI,UAAU,KAAK;AAEvE,QAAI,CAAC,kBAAkB,IAAI;AACzB;AAGF,QAAM,mBAAmB,MAAK;AAC5B,cAAQ,MAAM;QACZ,KAAK,qBAAqB;AACxB,iBAAO,MAAM,cAAc,MAAM,OAAO;QAC1C,KAAK,qBAAqB;AACxB,iBAAO,MAAM,oBAAoB,MAAM,OAAO;QAChD,KAAK,qBAAqB;AACxB,iBAAI,gBAAgB,WAClB,KAAK,QAAQ;YACX,gBAAgB;YAChB,aAAa,IAAI,uDAAmC,QAAQ,YAAY,EAAI;WAC7E,GAEI,MAAM,gBAAgB,MAAM,OAAO;;IAGhD;AAGA,SAAK,QAAQ,IAAI,YAAY,CAAC,YAAoB,gBAAkC;AAClF,UAAM,aAAa,iBAAgB,GAC7B,SAAS,CAAC,OAAe,WAA6B;AAC1D,YAAM,CAAC,YAAY,WAAW,IAAI,KAAK;UACrC;UACA;;UAEA,EAAC,GAAG,OAAM;QAAC;AAEb,QAAI,YAAY,aACd,WAAW,OAAO,YAAY,WAAW,IAEzC,WAAW,IAAI,YAAY,WAAW,GAGxC,KAAK,cAAc,WAAW,CAAA,CAAE;MAClC;AACA,aAAO,YAAY,WAAW,GAC9B,KAAK,QAAQ,IAAI,YAAY,MAAM;IACrC,CAAC;EACH;EAEA,SAAS,SAAsB;AAC7B,WAAO,QAAQ,OAAO,EAAE,QAAQ,CAAC,CAAC,YAAY,OAAO,MAAK;AACxD,WAAK,eAAe,YAAY,OAAO;IACzC,CAAC;EACH;EAEA,YAAY,UAA0B;AACpC,gBAAK,gBAAgB,IAAI,QAAQ,GAC1B,MAAK;AACV,WAAK,gBAAgB,OAAO,QAAQ;IACtC;EACF;EAEA,eAAe,UAA0B;AACvC,SAAK,gBAAgB,OAAO,QAAQ;EACtC;EAEA,WAAQ;AACN,gBAAK,QAAQ,MAAK,GAClB,KAAK,gBAAgB,MAAK,GACnB,KAAK,cAAc,SAAQ;EACpC;EAEU,sBAAsB,YAAoB,cAAsB,eAA+B;AACvG,WAAO,MAAM,KAAK,KAAK,eAAe,EAAE,OACtC,CAAC,YAAY,aACJ,SAAS,YAAY,GAAG,UAAU,KAAK,YAEhD,CAAC,cAAc,aAAa,CAAC;EAEjC;;;;AJ7KF,IAAAC,cAAoD,2BAsBvC,qBAAP,cAAkC,gBAAe;;;;EAIrD,YAAY;IACV,gBAAgB;IAChB,MAAM;IACN;IACA,eAAe;IACf,UAAU,CAAA;IACV;IACA;IACA,SAAS;;IAET;EAAY,GACc;AAC1B,qBAAK,UACH,IAAI,8BAAiB,GACrB,CAAC,cAAc,SAAS,EAAE,SAAS,GAAG,IAAI,yBAAa,QAAQ,yBAAa,IAAI,GAGlF,MAAM;MACJ;MACA,eACE,iBACA,IAAI,qBAAqB;QACvB;QACA;QACA;QACA;;QAEA;OACD;MACH;MACA;MACA;KACD;EACH;EAES,WAAQ;AACf,4BAAK,QAAO,GACL,MAAM,SAAQ;EACvB;;;;AF1DF,IAAAC,cAAwB,2BAuBnB;CAAL,SAAKC,OAAI;AACP,EAAAA,MAAA,UAAA,sBACAA,MAAA,WAAA,4BACAA,MAAA,UAAA;AACF,GAJK,SAAA,OAAI,CAAA,EAAA;AA2BT,eAAsB,cACpB,SACA,QACA,kBAA4E,sBAAoB;AAEhG,MAAM,WAAW,gBAAgB;IAC/B,qBAAqB,QAAQ;IAC7B,aAAa,mBAAkB;GAChC,GAEG,wBAAwB,QAAQ;AAEpC,EAAI,QAAQ,WAAW,SAAS,SAAS,IACvC,wBAAwB,YACf,QAAQ,WAAW,SAAS,KAAK,MAC1C,wBAAwB;AAE1B,MAAM,SAAS;IACb,MAAM,QAAQ;IACd,KAAK,GAAG,QAAQ,YAAY,KAAK,QAAQ,OAAO;IAChD,aAAa;;AAGf,uBAAqB,UAAU,MAAM,GACrC,oBAAoB,UAAU,QAAQ,MAAM;AAC9C;AAKA,SAAS,qBAAkB;AACzB,SAAO;IACL,aAAa;IACb,eAAe;IACf,cAAc;IACd,SAAS;MACP,CAAC,KAAK,OAAO,GAAG;QACd,MAAM,qBAAqB;QAC3B,aAAa;QACb,WAAW,sBAAU;;MAEvB,CAAC,KAAK,QAAQ,GAAG;QACf,MAAM,qBAAqB;QAC3B,aACE;QACF,WAAW,sBAAU;QACrB,YAAY,CAAC,GAAG,KAAK,KAAK,KAAK,KAAM,KAAM,KAAM,KAAQ,KAAQ,GAAM;;MAEzE,CAAC,KAAK,OAAO,GAAG;QACd,MAAM,qBAAqB;QAC3B,aACE;QACF,WAAW,sBAAU;QACrB,YAAY,CAAC,GAAG,KAAK,KAAK,KAAK,KAAM,KAAM,KAAM,KAAQ,KAAQ,GAAM;;;;AAI/E;AAQA,SAAS,qBAAqB,SAAoC;AAChE,MAAI,WAA2B;AAC/B,SAAM,QAAQ,uBAAuB,WAAU,KAAM,kBAAiB,MACpE,WAAW;IACT,MAAM;IACN,MAAM,kBAAkB,OAAO;MAG5B;AACT;AAEA,IAAI;AAOJ,SAAS,kBAAkB,SAAoC;AAC7D,SAAK,iBACH,eAAe,IAAI,mBAAmB;IACpC,GAAG,QAAQ;IACX,KAAK;IACL,cAAc,GAAG,oBAAmB,CAAE;GACvC,IAEI;AACT;AAKA,SAAS,qBAAqB,UAA0B,QAAc;AACpE,MAAI,aAAa,WAAW;AAC1B,gBAAY,8BAA8B,KAAK,OAAO,YAAY,YAAY,KAAK,EAAC,OAAM,CAAC,CAAC,EAAE;AAC9F;;AAEF,WAAS,KAAK,OAAO,KAAK,SAAS,GAAG,MAAM;AAC9C;AAKA,SAAS,oBAAoB,UAA0B,QAAgB,QAAc;AACnF,MAAI,aAAa,WAAW;AAC1B,gBACE,8BAA8B,KAAK,QAAQ,cAAc,OAAO,OAAO,SAAQ,CAAE,MAAM,YAAY,KAAK;MACtG;KACD,CAAC,EAAE,GAEN,YAAY,8BAA8B,KAAK,OAAO,6BAA6B,OAAO,OAAO,SAAQ,CAAE,IAAI,GAC/G,YAAY,8BAA8B,KAAK,OAAO,8BAA8B,OAAO,QAAQ,SAAQ,CAAE,IAAI,GACjH,YAAY,8BAA8B,KAAK,OAAO,6BAA6B,OAAO,OAAO,SAAQ,CAAE,IAAI;AAC/G;;AAGF,EAAI,OAAO,SAAS,MAClB,SAAS,KAAK,OAAO,KAAK,UAAU,OAAO,QAAQ,MAAM,GACzD,SAAS,KAAK,OAAO,KAAK,SAAS,OAAO,QAAQ,EAAC,GAAG,QAAQ,OAAO,SAAQ,CAAC,IAE5E,OAAO,UAAU,KACnB,SAAS,KAAK,OAAO,KAAK,SAAS,OAAO,SAAS,EAAC,GAAG,QAAQ,OAAO,UAAS,CAAC,GAE9E,OAAO,SAAS,KAClB,SAAS,KAAK,OAAO,KAAK,SAAS,OAAO,QAAQ,EAAC,GAAG,QAAQ,OAAO,SAAQ,CAAC;AAElF;;;AF3JA,eAAsB,qBAAqB,SAAoC;AAC7E,MAAI;AACF,QAAM,UAAU,MAAM,aAAa,OAAO;AAC1C,QAAI,YAAY;AAEd;AAGF,QAAI,kBAAkB;AAQtB,QAPA,MAAM,iBAAiB;MACrB,KAAK;MACL,GAAG;MACH,MAAM,YAAW;AACf,0BAAkB;MACpB;KACD,GACG,CAAC,iBAAiB;AACpB,kBAAY,0EAA0E,YAAY,KAAK,OAAO,CAAC,EAAE;AACjH;;AAGF,QAAM,wBAAwB,CAAC,mBAAkB,KAAM,kBAAiB,GAClE,sBAAsB,CAAC,iBAAgB,KAAM,kBAAiB;AACpE,KAAI,yBAAyB,wBAC3B,YAAY,qDAAqD,YAAY,KAAK,OAAO,CAAC,EAAE;AAG9F,QAAM,aAAa,YAAW;AAC5B,UAAI;AACF;AAEF,UAAM,WAAW,MAAM,qBAAqB,wBAAwB,QAAQ,QAAQ,QAAQ,SAAS;AACrG,MAAI,SAAS,SAAS,WACpB,YAAY,SAAS,OAAO;IAEhC,GACM,kBAAkB,YAAW;AACjC,UAAM,SAAS,QAAQ,OAAO,4BAA4B,GACpD,UAAU,QAAQ,OAAO,6BAA6B,GACtD,SAAS,QAAQ,OAAO,6BAA6B;AAE3D,aAAO,cACL;QACE;QACA,YAAY,QAAQ,OAAO;QAC3B,cAAc,QAAQ,OAAO,kBAAkB;QAC/C,SAAS,QAAQ,OAAO;QACxB,UAAU,QAAQ;SAEpB;QACE;QACA;QACA;OACD;IAEL;AACA,UAAM,QAAQ,IAAI,CAAC,WAAU,GAAI,gBAAe,CAAE,CAAC;WAG5C,OAAO;AACd,QAAI,UAAU;AACd,IAAI,iBAAiB,UACnB,UAAU,QAAQ,OAAO,KAAK,MAAM,OAAO,EAAE,IAE/C,YAAY,OAAO;;AAEvB;AAEA,eAAe,aAAa,EAAC,QAAQ,cAAc,SAAQ,GAA8B;AACvF,MAAM,EAAC,qBAAqB,kBAAkB,GAAG,kBAAiB,IAAa,wBAAuB;AACtG,MAAI,wBAAwB,QAAW;AACrC,gBAAY,oEAAoE;AAChF;;AAEF,MAAM,EAAC,cAAc,WAAW,UAAS,IAAI,qBACvC,eAAc,oBAAI,KAAI,GAAG,QAAO,GAGhC,EAAC,gBAAgB,uBAAuB,GAAG,sBAAqB,IAAI,MAAM,YAC9E,QACA,2BACA,CAAA,CAAE,GAEE,EAAC,gBAAgB,0BAA0B,GAAG,yBAAwB,IAAI,MAAM,YACpF,QACA,8BACA,CAAA,CAAE,GAGE,kBAAkB,MAAM,mBAAmB,MAAM,GACjD,2BAA2B,MAAM,4BAA4B,MAAM,GACnE,iBAA0B,qBAAoB,GAI9C,yBADY,CAAC,6BAA6B,2BAA2B,EAClC,OAAO,CAAC,OAAO,UAAS;AAC/D,QAAM,QAAQ,eAAe,KAAK;AAClC,WAAI,UAAU,SACL,QAAQ,QAEV;EACT,GAAG,CAAC,GACE,mBAAmB,cAAc,WACjC,4BAA4B,mBAAmB,wBAEjD,UAAU;IACZ,QAAQ;MACN,SAAS;MACT,YAAY;MACZ,UAAU;MACV,YAAY;MACZ,SAAS,aAAa,QAAQ,iBAAiB;MAC/C,aAAa;MACb,cAAc;MACd,cAAc,QAAQ,QAAQ,QAAQ,KAAK,EAAE;MAC7C,aAAa,MAAM,UAAS;MAC5B,GAAG;MACH,GAAG;MACH,GAAG;MACH,0BAA0B;MAC1B,cAAc;MACd,SAAS,MAAM,2BAA0B;;IAE3C,WAAW;MACT,MAAM,UAAU,KAAK,GAAG;MACxB,2BAA2B;MAC3B,eAAe;MACf,GAAG;MACH,GAAG;MACH,UAAU,KAAK,UAAU;QACvB,GAAG;QACH,aAAa;UACX,GAAG;;QAEL,gBAAgB,EAAC,GAAG,yBAAwB;OAC7C;;;AAML,SADsB,CAAC,4BAA4B,6BAA6B,2BAA2B,EAC7F,QAAQ,CAAC,WAAU;AAC/B,QAAM,UAAU,QAAQ,OAAO,MAAM;AACrC,IAAI,YAAY,WACd,QAAQ,OAAO,MAAM,IAAI,KAAK,MAAM,OAAO;EAE/C,CAAC,GAGD,UAAU,KAAK,MAAM,KAAK,UAAU,OAAO,CAAC,GAErCC,iBAAgB,OAAO;AAChC;AAEA,SAASA,iBAAmB,SAAU;AAGpC,MAAM,yBAFgB,KAAK,UAAU,OAAO,EAEC,QAAQ,eAAe,OAAO;AAC3E,SAAO,KAAK,MAAM,sBAAsB;AAC1C;",
  "names": ["AggregationTemporality", "DataPointType", "diag", "DiagLogLevel", "self", "diag", "self", "DiagConsoleLogger", "ValueType", "TraceFlags", "SamplingDecision", "SpanKind", "SpanStatusCode", "instrumentationScope", "AggregatorKind", "InstrumentType", "TracesSamplerValues", "ExportResultCode", "RPCType", "url", "ExplicitBucketHistogramAggregation", "MetricReader", "ConsoleMetricExporter", "process", "process", "Resource", "_a", "instrumentationScope", "MeterProvider", "View", "TracesSamplerValues", "ExportResultCode", "RPCType", "url", "AggregationTemporality", "DataPointType", "instrumentationScope", "AggregatorKind", "InstrumentType", "ExplicitBucketHistogramAggregation", "MetricReader", "ConsoleMetricExporter", "process", "process", "Resource", "_a", "instrumentationScope", "MeterProvider", "View", "AggregationTemporalityPreference", "url", "CompressionAlgorithm", "url", "url", "require_types", "ESpanKind", "OTLPMetricExporter", "MetricInstrumentType", "import_sdk_metrics", "import_sdk_metrics", "import_api", "import_api", "import_api", "Name", "sanitizePayload"]
}
